/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 58);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_Observable__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_rxjs_Observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_observable_merge__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_observable_merge___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_merge__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_operator_share__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_operator_share___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_operator_share__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_symbol_observable__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_symbol_observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_symbol_observable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPlatform", function() { return createPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertPlatform", function() { return assertPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destroyPlatform", function() { return destroyPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlatform", function() { return getPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformRef", function() { return PlatformRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationRef", function() { return ApplicationRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableProdMode", function() { return enableProdMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDevMode", function() { return isDevMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPlatformFactory", function() { return createPlatformFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgProbeToken", function() { return NgProbeToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_ID", function() { return APP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PACKAGE_ROOT_URL", function() { return PACKAGE_ROOT_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLATFORM_INITIALIZER", function() { return PLATFORM_INITIALIZER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLATFORM_ID", function() { return PLATFORM_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_BOOTSTRAP_LISTENER", function() { return APP_BOOTSTRAP_LISTENER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_INITIALIZER", function() { return APP_INITIALIZER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationInitStatus", function() { return ApplicationInitStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugElement", function() { return DebugElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugNode", function() { return DebugNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asNativeElements", function() { return asNativeElements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDebugNode", function() { return getDebugNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Testability", function() { return Testability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestabilityRegistry", function() { return TestabilityRegistry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTestabilityGetter", function() { return setTestabilityGetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSLATIONS", function() { return TRANSLATIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSLATIONS_FORMAT", function() { return TRANSLATIONS_FORMAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOCALE_ID", function() { return LOCALE_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MissingTranslationStrategy", function() { return MissingTranslationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationModule", function() { return ApplicationModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wtfCreateScope", function() { return wtfCreateScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wtfLeave", function() { return wtfLeave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wtfStartTimeRange", function() { return wtfStartTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wtfEndTimeRange", function() { return wtfEndTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventEmitter", function() { return EventEmitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorHandler", function() { return ErrorHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sanitizer", function() { return Sanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityContext", function() { return SecurityContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANALYZE_FOR_ENTRY_COMPONENTS", function() { return ANALYZE_FOR_ENTRY_COMPONENTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Attribute", function() { return Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentChild", function() { return ContentChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentChildren", function() { return ContentChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Query", function() { return Query; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewChild", function() { return ViewChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewChildren", function() { return ViewChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Directive", function() { return Directive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HostBinding", function() { return HostBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HostListener", function() { return HostListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return Input; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Output", function() { return Output; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pipe", function() { return Pipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_ELEMENTS_SCHEMA", function() { return CUSTOM_ELEMENTS_SCHEMA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NO_ERRORS_SCHEMA", function() { return NO_ERRORS_SCHEMA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModule", function() { return NgModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewEncapsulation", function() { return ViewEncapsulation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return Version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Class", function() { return Class; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forwardRef", function() { return forwardRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveForwardRef", function() { return resolveForwardRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Injector", function() { return Injector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReflectiveInjector", function() { return ReflectiveInjector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResolvedReflectiveFactory", function() { return ResolvedReflectiveFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReflectiveKey", function() { return ReflectiveKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InjectionToken", function() { return InjectionToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpaqueToken", function() { return OpaqueToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Inject", function() { return Inject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Optional", function() { return Optional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Injectable", function() { return Injectable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Self", function() { return Self; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkipSelf", function() { return SkipSelf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Host", function() { return Host; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgZone", function() { return NgZone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderComponentType", function() { return RenderComponentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer", function() { return RendererV1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RendererFactoryV2", function() { return RendererFactoryV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RendererV2", function() { return RendererV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RootRenderer", function() { return RootRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMPILER_OPTIONS", function() { return COMPILER_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compiler", function() { return Compiler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompilerFactory", function() { return CompilerFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuleWithComponentFactories", function() { return ModuleWithComponentFactories; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentFactory", function() { return ComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentRef", function() { return ComponentRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentFactoryResolver", function() { return ComponentFactoryResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementRef", function() { return ElementRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModuleFactory", function() { return NgModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModuleRef", function() { return NgModuleRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModuleFactoryLoader", function() { return NgModuleFactoryLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getModuleFactory", function() { return getModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryList", function() { return QueryList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoader", function() { return SystemJsNgModuleLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoaderConfig", function() { return SystemJsNgModuleLoaderConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplateRef", function() { return TemplateRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewContainerRef", function() { return ViewContainerRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmbeddedViewRef", function() { return EmbeddedViewRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewRef", function() { return ViewRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeDetectionStrategy", function() { return ChangeDetectionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeDetectorRef", function() { return ChangeDetectorRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultIterableDiffer", function() { return DefaultIterableDiffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IterableDiffers", function() { return IterableDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyValueDiffers", function() { return KeyValueDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleChange", function() { return SimpleChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrappedValue", function() { return WrappedValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "platformCore", function() { return platformCore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵALLOW_MULTIPLE_PLATFORMS", function() { return ALLOW_MULTIPLE_PLATFORMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAPP_ID_RANDOM_PROVIDER", function() { return APP_ID_RANDOM_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵValueUnwrapper", function() { return ValueUnwrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdevModeEqual", function() { return devModeEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵChangeDetectorStatus", function() { return ChangeDetectorStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisDefaultChangeDetectionStrategy", function() { return isDefaultChangeDetectionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵConsole", function() { return Console; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵERROR_COMPONENT_TYPE", function() { return ERROR_COMPONENT_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵComponentFactory", function() { return ComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵCodegenComponentFactoryResolver", function() { return CodegenComponentFactoryResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵLIFECYCLE_HOOKS_VALUES", function() { return LIFECYCLE_HOOKS_VALUES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵLifecycleHooks", function() { return LifecycleHooks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵViewMetadata", function() { return ViewMetadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵReflector", function() { return Reflector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵreflector", function() { return reflector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵReflectionCapabilities", function() { return ReflectionCapabilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵReflectorReader", function() { return ReflectorReader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵRenderDebugInfo", function() { return RenderDebugInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵmakeDecorator", function() { return makeDecorator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisObservable", function() { return isObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisPromise", function() { return isPromise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNgModuleInjector", function() { return NgModuleInjector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵregisterModuleFactory", function() { return registerModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵEMPTY_ARRAY", function() { return EMPTY_ARRAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵEMPTY_MAP", function() { return EMPTY_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵand", function() { return anchorDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵccf", function() { return createComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcrt", function() { return createRendererTypeV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdid", function() { return directiveDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵeld", function() { return elementDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵelementEventFullName", function() { return elementEventFullName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetComponentViewDefinitionFactory", function() { return getComponentViewDefinitionFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinlineInterpolate", function() { return inlineInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinterpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵncd", function() { return ngContentDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵnov", function() { return nodeValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpid", function() { return pipeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵprd", function() { return providerDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpad", function() { return pureArrayDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpod", function() { return pureObjectDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵppd", function() { return purePipeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵqud", function() { return queryDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵted", function() { return textDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵunv", function() { return unwrapValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵvid", function() { return viewDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTO_STYLE", function() { return AUTO_STYLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trigger", function() { return trigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return animate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "group", function() { return group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function() { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "style", function() { return style; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "state", function() { return state; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function() { return keyframes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return transition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵba", function() { return animate$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbb", function() { return group$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbf", function() { return keyframes$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbc", function() { return sequence$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbe", function() { return state$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbd", function() { return style$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbg", function() { return transition$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵz", function() { return trigger$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵp", function() { return _initViewEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵm", function() { return _iterableDiffersFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵn", function() { return _keyValueDiffersFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵo", function() { return _localeFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return ApplicationRef_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return _appIdRandomProviderFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return defaultIterableDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function() { return defaultKeyValueDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵk", function() { return DefaultIterableDifferFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵl", function() { return DefaultKeyValueDifferFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return ReflectiveInjector_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return ReflectiveDependency; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return resolveReflectiveProviders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj", function() { return isBlank; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵq", function() { return wtfEnabled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵs", function() { return createScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵr", function() { return detectWTF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵv", function() { return endTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵt", function() { return leave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵu", function() { return startTimeRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return makeParamDecorator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return makePropDecorator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵx", function() { return _def; });
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license Angular v4.0.0-rc.2
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */






/**
 * Creates a token that can be used in a DI Provider.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
 *
 * ```typescript
 * var t = new OpaqueToken("value");
 *
 * var injector = Injector.resolveAndCreate([
 *   {provide: t, useValue: "bindingValue"}
 * ]);
 *
 * expect(injector.get(t)).toEqual("bindingValue");
 * ```
 *
 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
 * caused by multiple providers using the same string as two different tokens.
 *
 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
 * error messages.
 * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`
 * instead.
 */

var OpaqueToken = function () {
    /**
     * @param {?} _desc
     */
    function OpaqueToken(_desc) {
        _classCallCheck(this, OpaqueToken);

        this._desc = _desc;
    }
    /**
     * @return {?}
     */


    _createClass(OpaqueToken, [{
        key: 'toString',
        value: function toString() {
            return 'Token ' + this._desc;
        }
    }]);

    return OpaqueToken;
}();
/**
 * Creates a token that can be used in a DI Provider.
 *
 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
 * runtime representation) such as when injecting an interface, callable type, array or
 * parametrized type.
 *
 * `InjectionToken` is parametrize on `T` which is the type of object which will be returned by the
 * `Injector`. This provides additional level of type safety.
 *
 * ```
 * interface MyInterface {...}
 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
 * // myInterface is inferred to be MyInterface.
 * ```
 *
 * ### Example
 *
 * {\@example core/di/ts/injector_spec.ts region='Injector'}
 *
 * \@stable
 */


var InjectionToken = function (_OpaqueToken) {
    _inherits(InjectionToken, _OpaqueToken);

    /**
     * @param {?} desc
     */
    function InjectionToken(desc) {
        _classCallCheck(this, InjectionToken);

        return _possibleConstructorReturn(this, (InjectionToken.__proto__ || Object.getPrototypeOf(InjectionToken)).call(this, desc));
    }
    /**
     * @return {?}
     */


    _createClass(InjectionToken, [{
        key: 'toString',
        value: function toString() {
            return 'InjectionToken ' + this._desc;
        }
    }]);

    return InjectionToken;
}(OpaqueToken);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var /** @type {?} */globalScope = void 0;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
        globalScope = self;
    } else {
        globalScope = global;
    }
} else {
    globalScope = window;
}
/**
 * @param {?} fn
 * @return {?}
 */
function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
}
// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var /** @type {?} */global$1 = globalScope;
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging(type) {
    return type['name'] || (typeof type === 'undefined' ? 'undefined' : _typeof(type));
}
// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
global$1.assert = function assert(condition) {
    // TODO: to be fixed properly via #2830, noop for now
};
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent(obj) {
    return obj != null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
    return obj == null;
}
/**
 * @param {?} token
 * @return {?}
 */
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return '' + token.overriddenName;
    }
    if (token.name) {
        return '' + token.name;
    }
    var /** @type {?} */res = token.toString();
    var /** @type {?} */newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
/**
 * @param {?} o
 * @return {?}
 */
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object');
}
/**
 * @param {?} obj
 * @return {?}
 */
function print(obj) {
    // tslint:disable-next-line:no-console
    console.log(obj);
}
/**
 * @param {?} obj
 * @return {?}
 */
function _warn(obj) {
    console.warn(obj);
}
var /** @type {?} */_symbolIterator = null;
/**
 * @return {?}
 */
function getSymbolIterator() {
    if (!_symbolIterator) {
        if (globalScope.Symbol && Symbol.iterator) {
            _symbolIterator = Symbol.iterator;
        } else {
            // es6-shim specific logic
            var /** @type {?} */keys = Object.getOwnPropertyNames(Map.prototype);
            for (var /** @type {?} */i = 0; i < keys.length; ++i) {
                var /** @type {?} */key = keys[i];
                if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isPrimitive(obj) {
    return !isJsObject(obj);
}

var /** @type {?} */_nextClassId = 0;
var /** @type {?} */Reflect = global$1.Reflect;
/**
 * @param {?} annotation
 * @return {?}
 */
function extractAnnotation(annotation) {
    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
        // it is a decorator, extract annotation
        annotation = annotation.annotation;
    }
    return annotation;
}
/**
 * @param {?} fnOrArray
 * @param {?} key
 * @return {?}
 */
function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
        throw new Error('Can not use native ' + stringify(fnOrArray) + ' as constructor');
    }
    if (typeof fnOrArray === 'function') {
        return fnOrArray;
    }
    if (Array.isArray(fnOrArray)) {
        var /** @type {?} */annotations = fnOrArray;
        var /** @type {?} */annoLength = annotations.length - 1;
        var /** @type {?} */fn = fnOrArray[annoLength];
        if (typeof fn !== 'function') {
            throw new Error('Last position of Class method array must be Function in key ' + key + ' was \'' + stringify(fn) + '\'');
        }
        if (annoLength != fn.length) {
            throw new Error('Number of annotations (' + annoLength + ') does not match number of arguments (' + fn.length + ') in the function: ' + stringify(fn));
        }
        var /** @type {?} */paramsAnnotations = [];
        for (var /** @type {?} */i = 0, /** @type {?} */ii = annotations.length - 1; i < ii; i++) {
            var /** @type {?} */paramAnnotations = [];
            paramsAnnotations.push(paramAnnotations);
            var /** @type {?} */annotation = annotations[i];
            if (Array.isArray(annotation)) {
                for (var /** @type {?} */j = 0; j < annotation.length; j++) {
                    paramAnnotations.push(extractAnnotation(annotation[j]));
                }
            } else if (typeof annotation === 'function') {
                paramAnnotations.push(extractAnnotation(annotation));
            } else {
                paramAnnotations.push(annotation);
            }
        }
        Reflect.defineMetadata('parameters', paramsAnnotations, fn);
        return fn;
    }
    throw new Error('Only Function or Array is supported in Class definition for key \'' + key + '\' is \'' + stringify(fnOrArray) + '\'');
}
/**
 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
 *
 * ## Basic Example
 *
 * ```
 * var Greeter = ng.Class({
 *   constructor: function(name) {
 *     this.name = name;
 *   },
 *
 *   greet: function() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class Greeter {
 *   constructor(name) {
 *     this.name = name;
 *   }
 *
 *   greet() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * }
 * ```
 *
 * or equivalent to ES5:
 *
 * ```
 * var Greeter = function (name) {
 *   this.name = name;
 * }
 *
 * Greeter.prototype.greet = function () {
 *   alert('Hello ' + this.name + '!');
 * }
 * ```
 *
 * ### Example with parameter annotations
 *
 * ```
 * var MyService = ng.Class({
 *   constructor: [String, [new Optional(), Service], function(name, myService) {
 *     ...
 *   }]
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class MyService {
 *   constructor(name: string, \@Optional() myService: Service) {
 *     ...
 *   }
 * }
 * ```
 *
 * ### Example with inheritance
 *
 * ```
 * var Shape = ng.Class({
 *   constructor: (color) {
 *     this.color = color;
 *   }
 * });
 *
 * var Square = ng.Class({
 *   extends: Shape,
 *   constructor: function(color, size) {
 *     Shape.call(this, color);
 *     this.size = size;
 *   }
 * });
 * ```
 * @suppress {globalThis}
 * \@stable
 * @param {?} clsDef
 * @return {?}
 */
function Class(clsDef) {
    var /** @type {?} */constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var /** @type {?} */proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
        if (typeof clsDef.extends === 'function') {
            constructor.prototype = proto = Object.create(clsDef.extends.prototype);
        } else {
            throw new Error('Class definition \'extends\' property must be a constructor function was: ' + stringify(clsDef.extends));
        }
    }
    for (var /** @type {?} */key in clsDef) {
        if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
            proto[key] = applyParams(clsDef[key], key);
        }
    }
    if (this && this.annotations instanceof Array) {
        Reflect.defineMetadata('annotations', this.annotations, constructor);
    }
    var /** @type {?} */constructorName = constructor['name'];
    if (!constructorName || constructorName === 'constructor') {
        constructor['overriddenName'] = 'class' + _nextClassId++;
    }
    return constructor;
}
/**
 * @suppress {globalThis}
 * @param {?} name
 * @param {?} props
 * @param {?=} parentClass
 * @param {?=} chainFn
 * @return {?}
 */
function makeDecorator(name, props, parentClass) {
    var chainFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    var /** @type {?} */metaCtor = makeMetadataCtor([props]);
    /**
     * @param {?} objOrType
     * @return {?}
     */
    function DecoratorFactory(objOrType) {
        if (!(Reflect && Reflect.getOwnMetadata)) {
            throw 'reflect-metadata shim is required when using class decorators';
        }
        if (this instanceof DecoratorFactory) {
            metaCtor.call(this, objOrType);
            return this;
        }
        var /** @type {?} */annotationInstance = new DecoratorFactory(objOrType);
        var /** @type {?} */chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
        chainAnnotation.push(annotationInstance);
        var /** @type {?} */TypeDecorator = function TypeDecorator(cls) {
            var /** @type {?} */annotations = Reflect.getOwnMetadata('annotations', cls) || [];
            annotations.push(annotationInstance);
            Reflect.defineMetadata('annotations', annotations, cls);
            return cls;
        };
        TypeDecorator.annotations = chainAnnotation;
        TypeDecorator.Class = Class;
        if (chainFn) chainFn(TypeDecorator);
        return TypeDecorator;
    }
    if (parentClass) {
        DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.toString = function () {
        return '@' + name;
    };
    DecoratorFactory.annotationCls = DecoratorFactory;
    return DecoratorFactory;
}
/**
 * @param {?} props
 * @return {?}
 */
function makeMetadataCtor(props) {
    return function ctor() {
        var _this2 = this;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        props.forEach(function (prop, i) {
            var /** @type {?} */argVal = args[i];
            if (Array.isArray(prop)) {
                // plain parameter
                _this2[prop[0]] = argVal === undefined ? prop[1] : argVal;
            } else {
                for (var /** @type {?} */propName in prop) {
                    _this2[propName] = argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
                }
            }
        });
    };
}
/**
 * @param {?} name
 * @param {?} props
 * @param {?=} parentClass
 * @return {?}
 */
function makeParamDecorator(name, props, parentClass) {
    var /** @type {?} */metaCtor = makeMetadataCtor(props);
    /**
     * @param {...?} args
     * @return {?}
     */
    function ParamDecoratorFactory() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        if (this instanceof ParamDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */annotationInstance = new (Function.prototype.bind.apply(ParamDecoratorFactory, [null].concat(args)))();
        ParamDecorator.annotation = annotationInstance;
        return ParamDecorator;
        /**
         * @param {?} cls
         * @param {?} unusedKey
         * @param {?} index
         * @return {?}
         */
        function ParamDecorator(cls, unusedKey, index) {
            var /** @type {?} */parameters = Reflect.getOwnMetadata('parameters', cls) || [];
            // there might be gaps if some in between parameters do not have annotations.
            // we pad with nulls.
            while (parameters.length <= index) {
                parameters.push(null);
            }
            parameters[index] = parameters[index] || [];
            parameters[index].push(annotationInstance);
            Reflect.defineMetadata('parameters', parameters, cls);
            return cls;
        }
    }
    if (parentClass) {
        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.toString = function () {
        return '@' + name;
    };
    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
}
/**
 * @param {?} name
 * @param {?} props
 * @param {?=} parentClass
 * @return {?}
 */
function makePropDecorator(name, props, parentClass) {
    var /** @type {?} */metaCtor = makeMetadataCtor(props);
    /**
     * @param {...?} args
     * @return {?}
     */
    function PropDecoratorFactory() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        if (this instanceof PropDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */decoratorInstance = new (Function.prototype.bind.apply(PropDecoratorFactory, [null].concat(args)))();
        return function PropDecorator(target, name) {
            var /** @type {?} */meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
            meta[name].unshift(decoratorInstance);
            Reflect.defineMetadata('propMetadata', meta, target.constructor);
        };
    }
    if (parentClass) {
        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.toString = function () {
        return '@' + name;
    };
    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
}

/**
 * This token can be used to create a virtual provider that will populate the
 * `entryComponents` fields of components and ng modules based on its `useValue`.
 * All components that are referenced in the `useValue` value (either directly
 * or in a nested array or map) will be added to the `entryComponents` property.
 *
 * ### Example
 * The following example shows how the router can populate the `entryComponents`
 * field of an NgModule based on the router configuration which refers
 * to components.
 *
 * ```typescript
 * // helper function inside the router
 * function provideRoutes(routes) {
 *   return [
 *     {provide: ROUTES, useValue: routes},
 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
 *   ];
 * }
 *
 * // user code
 * let routes = [
 *   {path: '/root', component: RootComp},
 *   {path: '/teams', component: TeamsComp}
 * ];
 *
 * @NgModule({
 *   providers: [provideRoutes(routes)]
 * })
 * class ModuleWithRoutes {}
 * ```
 *
 * @experimental
 */
var /** @type {?} */ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
/**
 * Attribute decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
/**
 * Base class for query metadata.
 *
 * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
 * more information.
 *
 * \@stable
 * @abstract
 */

var Query = function Query() {
    _classCallCheck(this, Query);
};
/**
 * ContentChildren decorator and metadata.
 *
 *  @stable
 *  @Annotation
 */


var /** @type {?} */ContentChildren = makePropDecorator('ContentChildren', [['selector', undefined], {
    first: false,
    isViewQuery: false,
    descendants: false,
    read: undefined
}], Query);
/**
 * ContentChild decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */ContentChild = makePropDecorator('ContentChild', [['selector', undefined], {
    first: true,
    isViewQuery: false,
    descendants: true,
    read: undefined
}], Query);
/**
 * ViewChildren decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */ViewChildren = makePropDecorator('ViewChildren', [['selector', undefined], {
    first: false,
    isViewQuery: true,
    descendants: true,
    read: undefined
}], Query);
/**
 * ViewChild decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */ViewChild = makePropDecorator('ViewChild', [['selector', undefined], {
    first: true,
    isViewQuery: true,
    descendants: true,
    read: undefined
}], Query);

var ChangeDetectionStrategy = {};
ChangeDetectionStrategy.OnPush = 0;
ChangeDetectionStrategy.Default = 1;
ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
var ChangeDetectorStatus = {};
ChangeDetectorStatus.CheckOnce = 0;
ChangeDetectorStatus.Checked = 1;
ChangeDetectorStatus.CheckAlways = 2;
ChangeDetectorStatus.Detached = 3;
ChangeDetectorStatus.Errored = 4;
ChangeDetectorStatus.Destroyed = 5;
ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
/**
 * @param {?} changeDetectionStrategy
 * @return {?}
 */
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return isBlank(changeDetectionStrategy) || changeDetectionStrategy === ChangeDetectionStrategy.Default;
}

/**
 * Directive decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Directive = makeDecorator('Directive', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    providers: undefined,
    exportAs: undefined,
    queries: undefined
});
/**
 * Component decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Component = makeDecorator('Component', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    exportAs: undefined,
    moduleId: undefined,
    providers: undefined,
    viewProviders: undefined,
    changeDetection: ChangeDetectionStrategy.Default,
    queries: undefined,
    templateUrl: undefined,
    template: undefined,
    styleUrls: undefined,
    styles: undefined,
    animations: undefined,
    encapsulation: undefined,
    interpolation: undefined,
    entryComponents: undefined
}, Directive);
/**
 * Pipe decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Pipe = makeDecorator('Pipe', {
    name: undefined,
    pure: true
});
/**
 * Input decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
/**
 * Output decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
/**
 * HostBinding decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
/**
 * HostListener decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);

/**
 * Defines a schema that will allow:
 * - any non-Angular elements with a `-` in their name,
 * - any properties on elements with a `-` in their name which is the common rule for custom
 * elements.
 *
 * @stable
 */
var /** @type {?} */CUSTOM_ELEMENTS_SCHEMA = {
    name: 'custom-elements'
};
/**
 * Defines a schema that will allow any property on any element.
 *
 * @experimental
 */
var /** @type {?} */NO_ERRORS_SCHEMA = {
    name: 'no-errors-schema'
};
/**
 * NgModule decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */NgModule = makeDecorator('NgModule', {
    providers: undefined,
    declarations: undefined,
    imports: undefined,
    exports: undefined,
    entryComponents: undefined,
    bootstrap: undefined,
    schemas: undefined,
    id: undefined
});

var ViewEncapsulation = {};
ViewEncapsulation.Emulated = 0;
ViewEncapsulation.Native = 1;
ViewEncapsulation.None = 2;
ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
ViewEncapsulation[ViewEncapsulation.Native] = "Native";
ViewEncapsulation[ViewEncapsulation.None] = "None";
/**
 * Metadata properties available for configuring Views.
 *
 * For details on the `\@Component` annotation, see {\@link Component}.
 *
 * ### Example
 *
 * ```
 * \@Component({
 *   selector: 'greet',
 *   template: 'Hello {{name}}!',
 * })
 * class Greet {
 *   name: string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 * ```
 *
 * @deprecated Use Component instead.
 *
 * {\@link Component}
 */

var ViewMetadata =
/**
 * @param {?=} __0
 */
function ViewMetadata() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        templateUrl = _ref.templateUrl,
        template = _ref.template,
        encapsulation = _ref.encapsulation,
        styles = _ref.styles,
        styleUrls = _ref.styleUrls,
        animations = _ref.animations,
        interpolation = _ref.interpolation;

    _classCallCheck(this, ViewMetadata);

    this.templateUrl = templateUrl;
    this.template = template;
    this.styleUrls = styleUrls;
    this.styles = styles;
    this.encapsulation = encapsulation;
    this.animations = animations;
    this.interpolation = interpolation;
};

/**
 * \@whatItDoes Represents the version of Angular
 *
 * \@stable
 */


var Version = function () {
    /**
     * @param {?} full
     */
    function Version(full) {
        _classCallCheck(this, Version);

        this.full = full;
    }
    /**
     * @return {?}
     */


    _createClass(Version, [{
        key: 'major',
        get: function get() {
            return this.full.split('.')[0];
        }
        /**
         * @return {?}
         */

    }, {
        key: 'minor',
        get: function get() {
            return this.full.split('.')[1];
        }
        /**
         * @return {?}
         */

    }, {
        key: 'patch',
        get: function get() {
            return this.full.split('.').slice(2).join('.');
        }
    }]);

    return Version;
}();
/**
 * @stable
 */


var /** @type {?} */VERSION = new Version('4.0.0-rc.2');

/**
 * Inject decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Inject = makeParamDecorator('Inject', [['token', undefined]]);
/**
 * Optional decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Optional = makeParamDecorator('Optional', []);
/**
 * Injectable decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Injectable = makeDecorator('Injectable', []);
/**
 * Self decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Self = makeParamDecorator('Self', []);
/**
 * SkipSelf decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */SkipSelf = makeParamDecorator('SkipSelf', []);
/**
 * Host decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var /** @type {?} */Host = makeParamDecorator('Host', []);

/**
 * Allows to refer to references which are not yet defined.
 *
 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
 * DI is declared,
 * but not yet defined. It is also used when the `token` which we use when creating a query is not
 * yet defined.
 *
 * ### Example
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
 * \@experimental
 * @param {?} forwardRefFn
 * @return {?}
 */
function forwardRef(forwardRefFn) {
    forwardRefFn.__forward_ref__ = forwardRef;
    forwardRefFn.toString = function () {
        return stringify(this());
    };
    return forwardRefFn;
}
/**
 * Lazily retrieves the reference value from a forwardRef.
 *
 * Acts as the identity function when given a non-forward-ref value.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
 *
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
 *
 * See: {\@link forwardRef}
 * \@experimental
 * @param {?} type
 * @return {?}
 */
function resolveForwardRef(type) {
    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
        return type();
    } else {
        return type;
    }
}

var /** @type {?} */_THROW_IF_NOT_FOUND = new Object();
var /** @type {?} */THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;

var _NullInjector = function () {
    function _NullInjector() {
        _classCallCheck(this, _NullInjector);
    }

    _createClass(_NullInjector, [{
        key: 'get',

        /**
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _THROW_IF_NOT_FOUND;

            if (notFoundValue === _THROW_IF_NOT_FOUND) {
                throw new Error('No provider for ' + stringify(token) + '!');
            }
            return notFoundValue;
        }
    }]);

    return _NullInjector;
}();
/**
 * \@whatItDoes Injector interface
 * \@howToUse
 * ```
 * const injector: Injector = ...;
 * injector.get(...);
 * ```
 *
 * \@description
 * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
 *
 * ### Example
 *
 * {\@example core/di/ts/injector_spec.ts region='Injector'}
 *
 * `Injector` returns itself when given `Injector` as a token:
 * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
 *
 * \@stable
 * @abstract
 */


var Injector = function () {
    function Injector() {
        _classCallCheck(this, Injector);
    }

    _createClass(Injector, [{
        key: 'get',

        /**
         * Retrieves an instance from the injector based on the provided token.
         * If not found:
         * - Throws {\@link NoProviderError} if no `notFoundValue` that is not equal to
         * Injector.THROW_IF_NOT_FOUND is given
         * - Returns the `notFoundValue` otherwise
         * @abstract
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */
        value: function get(token, notFoundValue) {}
        /**
         * @deprecated from v4.0.0 use Type<T> or InjectToken<T>
         * @suppress {duplicate}
         * @abstract
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */

    }, {
        key: 'get',
        value: function get(token, notFoundValue) {}
    }]);

    return Injector;
}();

Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
Injector.NULL = new _NullInjector();

var /** @type {?} */ERROR_COMPONENT_TYPE = 'ngComponentType';
var /** @type {?} */ERROR_DEBUG_CONTEXT = 'ngDebugContext';
var /** @type {?} */ERROR_ORIGINAL_ERROR = 'ngOriginalError';
/**
 * @param {?} error
 * @return {?}
 */
function getDebugContext(error) {
    return error[ERROR_DEBUG_CONTEXT];
}
/**
 * @param {?} error
 * @return {?}
 */
function getOriginalError(error) {
    return error[ERROR_ORIGINAL_ERROR];
}

/**
 * \@whatItDoes Provides a hook for centralized exception handling.
 *
 * \@description
 *
 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
 * intercept error handling, write a custom exception handler that replaces this default as
 * appropriate for your app.
 *
 * ### Example
 *
 * ```
 * class MyErrorHandler implements ErrorHandler {
 *   handleError(error) {
 *     // do something with the exception
 *   }
 * }
 *
 * \@NgModule({
 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
 * })
 * class MyModule {}
 * ```
 *
 * \@stable
 */

var ErrorHandler = function () {
    /**
     * @param {?=} rethrowError
     */
    function ErrorHandler() {
        var rethrowError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        _classCallCheck(this, ErrorHandler);

        /**
         * @internal
         */
        this._console = console;
        this.rethrowError = rethrowError;
    }
    /**
     * @param {?} error
     * @return {?}
     */


    _createClass(ErrorHandler, [{
        key: 'handleError',
        value: function handleError(error) {
            this._console.error('EXCEPTION: ' + this._extractMessage(error));
            if (error instanceof Error) {
                var /** @type {?} */originalError = this._findOriginalError(error);
                var /** @type {?} */originalStack = this._findOriginalStack(error);
                var /** @type {?} */context = this._findContext(error);
                if (originalError) {
                    this._console.error('ORIGINAL EXCEPTION: ' + this._extractMessage(originalError));
                }
                if (originalStack) {
                    this._console.error('ORIGINAL STACKTRACE:');
                    this._console.error(originalStack);
                }
                if (context) {
                    this._console.error('ERROR CONTEXT:');
                    this._console.error(context);
                }
            }
            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
            // when an error happens. If we do not rethrow, bootstrap will always succeed.
            if (this.rethrowError) throw error;
        }
        /**
         * \@internal
         * @param {?} error
         * @return {?}
         */

    }, {
        key: '_extractMessage',
        value: function _extractMessage(error) {
            return error instanceof Error ? error.message : error.toString();
        }
        /**
         * \@internal
         * @param {?} error
         * @return {?}
         */

    }, {
        key: '_findContext',
        value: function _findContext(error) {
            if (error) {
                return getDebugContext(error) ? getDebugContext(error) : this._findContext(getOriginalError(error));
            }
            return null;
        }
        /**
         * \@internal
         * @param {?} error
         * @return {?}
         */

    }, {
        key: '_findOriginalError',
        value: function _findOriginalError(error) {
            var /** @type {?} */e = getOriginalError(error);
            while (e && getOriginalError(e)) {
                e = getOriginalError(e);
            }
            return e;
        }
        /**
         * \@internal
         * @param {?} error
         * @return {?}
         */

    }, {
        key: '_findOriginalStack',
        value: function _findOriginalStack(error) {
            var /** @type {?} */e = error;
            var /** @type {?} */stack = e.stack;
            while (e instanceof Error && getOriginalError(e)) {
                e = getOriginalError(e);
                if (e instanceof Error && e.stack) {
                    stack = e.stack;
                }
            }
            return stack;
        }
    }]);

    return ErrorHandler;
}();
/**
 * @param {?} message
 * @param {?} originalError
 * @return {?}
 */


function wrappedError(message, originalError) {
    var /** @type {?} */msg = message + ' caused by: ' + (originalError instanceof Error ? originalError.message : originalError);
    var /** @type {?} */error = Error(msg);
    error[ERROR_ORIGINAL_ERROR] = originalError;
    return error;
}

/**
 * @param {?} keys
 * @return {?}
 */
function findFirstClosedCycle(keys) {
    var /** @type {?} */res = [];
    for (var /** @type {?} */i = 0; i < keys.length; ++i) {
        if (res.indexOf(keys[i]) > -1) {
            res.push(keys[i]);
            return res;
        }
        res.push(keys[i]);
    }
    return res;
}
/**
 * @param {?} keys
 * @return {?}
 */
function constructResolvingPath(keys) {
    if (keys.length > 1) {
        var /** @type {?} */reversed = findFirstClosedCycle(keys.slice().reverse());
        var /** @type {?} */tokenStrs = reversed.map(function (k) {
            return stringify(k.token);
        });
        return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
}
/**
 * @param {?} injector
 * @param {?} key
 * @param {?} constructResolvingMessage
 * @param {?=} originalError
 * @return {?}
 */
function injectionError(injector, key, constructResolvingMessage, originalError) {
    var /** @type {?} */error = originalError ? wrappedError('', originalError) : Error();
    error.addKey = addKey;
    error.keys = [key];
    error.injectors = [injector];
    error.constructResolvingMessage = constructResolvingMessage;
    error.message = error.constructResolvingMessage();
    error[ERROR_ORIGINAL_ERROR] = originalError;
    return error;
}
/**
 * @this {?}
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function addKey(injector, key) {
    this.injectors.push(injector);
    this.keys.push(key);
    this.message = this.constructResolvingMessage();
}
/**
 * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
 * {\@link Injector} does not have a {\@link Provider} for the given key.
 *
 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b:B) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function noProviderError(injector, key) {
    return injectionError(injector, key, function () {
        var /** @type {?} */first = stringify(this.keys[0].token);
        return 'No provider for ' + first + '!' + constructResolvingPath(this.keys);
    });
}
/**
 * Thrown when dependencies form a cycle.
 *
 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
 *
 * ```typescript
 * var injector = Injector.resolveAndCreate([
 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
 * ]);
 *
 * expect(() => injector.get("one")).toThrowError();
 * ```
 *
 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function cyclicDependencyError(injector, key) {
    return injectionError(injector, key, function () {
        return 'Cannot instantiate cyclic dependency!' + constructResolvingPath(this.keys);
    });
}
/**
 * Thrown when a constructing type returns with an Error.
 *
 * The `InstantiationError` class contains the original error plus the dependency graph which caused
 * this object to be instantiated.
 *
 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor() {
 *     throw new Error('message');
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([A]);
 * try {
 *   injector.get(A);
 * } catch (e) {
 *   expect(e instanceof InstantiationError).toBe(true);
 *   expect(e.originalException.message).toEqual("message");
 *   expect(e.originalStack).toBeDefined();
 * }
 * ```
 * @param {?} injector
 * @param {?} originalException
 * @param {?} originalStack
 * @param {?} key
 * @return {?}
 */
function instantiationError(injector, originalException, originalStack, key) {
    return injectionError(injector, key, function () {
        var /** @type {?} */first = stringify(this.keys[0].token);
        return getOriginalError(this).message + ': Error during instantiation of ' + first + '!' + constructResolvingPath(this.keys) + '.';
    }, originalException);
}
/**
 * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
 * creation.
 *
 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
 * ```
 * @param {?} provider
 * @return {?}
 */
function invalidProviderError(provider) {
    return Error('Invalid provider - only instances of Provider and Type are allowed, got: ' + provider);
}
/**
 * Thrown when the class has no annotation information.
 *
 * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
 * need to be injected into the constructor.
 *
 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 *
 * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
 *
 * ```typescript
 * class B {}
 *
 * class A {
 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
 * }
 *
 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
 * ```
 * \@stable
 * @param {?} typeOrFunc
 * @param {?} params
 * @return {?}
 */
function noAnnotationError(typeOrFunc, params) {
    var /** @type {?} */signature = [];
    for (var /** @type {?} */i = 0, /** @type {?} */ii = params.length; i < ii; i++) {
        var /** @type {?} */parameter = params[i];
        if (!parameter || parameter.length == 0) {
            signature.push('?');
        } else {
            signature.push(parameter.map(stringify).join(' '));
        }
    }
    return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.');
}
/**
 * Thrown when getting an object by index.
 *
 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
 *
 * ```typescript
 * class A {}
 *
 * var injector = Injector.resolveAndCreate([A]);
 *
 * expect(() => injector.getAt(100)).toThrowError();
 * ```
 * \@stable
 * @param {?} index
 * @return {?}
 */
function outOfBoundsError(index) {
    return Error('Index ' + index + ' is out-of-bounds.');
}
/**
 * Thrown when a multi provider and a regular provider are bound to the same token.
 *
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate([
 *   { provide: "Strings", useValue: "string1", multi: true},
 *   { provide: "Strings", useValue: "string2", multi: false}
 * ])).toThrowError();
 * ```
 * @param {?} provider1
 * @param {?} provider2
 * @return {?}
 */
function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
    return Error('Cannot mix multi providers and regular providers, got: ' + provider1 + ' ' + provider2);
}

/**
 * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
 *
 * Keys have:
 * - a system-wide unique `id`.
 * - a `token`.
 *
 * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
 * the
 * injector to store created objects in a more efficient way.
 *
 * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
 * resolving
 * providers.
 * \@experimental
 */

var ReflectiveKey = function () {
    /**
     * Private
     * @param {?} token
     * @param {?} id
     */
    function ReflectiveKey(token, id) {
        _classCallCheck(this, ReflectiveKey);

        this.token = token;
        this.id = id;
        if (!token) {
            throw new Error('Token must be defined!');
        }
    }
    /**
     * Returns a stringified token.
     * @return {?}
     */


    _createClass(ReflectiveKey, [{
        key: 'displayName',
        get: function get() {
            return stringify(this.token);
        }
        /**
         * Retrieves a `Key` for a token.
         * @param {?} token
         * @return {?}
         */

    }], [{
        key: 'get',
        value: function get(token) {
            return _globalKeyRegistry.get(resolveForwardRef(token));
        }
        /**
         * @return {?} the number of keys registered in the system.
         */

    }, {
        key: 'numberOfKeys',
        get: function get() {
            return _globalKeyRegistry.numberOfKeys;
        }
    }]);

    return ReflectiveKey;
}();
/**
 * \@internal
 */


var KeyRegistry = function () {
    function KeyRegistry() {
        _classCallCheck(this, KeyRegistry);

        this._allKeys = new Map();
    }
    /**
     * @param {?} token
     * @return {?}
     */


    _createClass(KeyRegistry, [{
        key: 'get',
        value: function get(token) {
            if (token instanceof ReflectiveKey) return token;
            if (this._allKeys.has(token)) {
                return this._allKeys.get(token);
            }
            var /** @type {?} */newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
            this._allKeys.set(token, newKey);
            return newKey;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'numberOfKeys',
        get: function get() {
            return this._allKeys.size;
        }
    }]);

    return KeyRegistry;
}();

var /** @type {?} */_globalKeyRegistry = new KeyRegistry();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @whatItDoes Represents a type that a Component or other object is instances of.
 *
 * @description
 *
 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
 * the `MyCustomComponent` constructor function.
 *
 * @stable
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var /** @type {?} */Type = Function;
/**
 * @param {?} v
 * @return {?}
 */
function isType(v) {
    return typeof v === 'function';
}

/**
 * Attention: This regex has to hold even if the code is minified!
 */
var /** @type {?} */DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?(\S+\s+!==\s+null\s+&&\s+)?\S+\.apply\(this,\s*arguments\)/;

var ReflectionCapabilities = function () {
    /**
     * @param {?=} reflect
     */
    function ReflectionCapabilities(reflect) {
        _classCallCheck(this, ReflectionCapabilities);

        this._reflect = reflect || global$1.Reflect;
    }
    /**
     * @return {?}
     */


    _createClass(ReflectionCapabilities, [{
        key: 'isReflectionEnabled',
        value: function isReflectionEnabled() {
            return true;
        }
        /**
         * @param {?} t
         * @return {?}
         */

    }, {
        key: 'factory',
        value: function factory(t) {
            return function () {
                for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = arguments[_key4];
                }

                return new (Function.prototype.bind.apply(t, [null].concat(args)))();
            };
        }
        /**
         * \@internal
         * @param {?} paramTypes
         * @param {?} paramAnnotations
         * @return {?}
         */

    }, {
        key: '_zipTypesAndAnnotations',
        value: function _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
            var /** @type {?} */result = void 0;
            if (typeof paramTypes === 'undefined') {
                result = new Array(paramAnnotations.length);
            } else {
                result = new Array(paramTypes.length);
            }
            for (var /** @type {?} */i = 0; i < result.length; i++) {
                // TS outputs Object for parameters without types, while Traceur omits
                // the annotations. For now we preserve the Traceur behavior to aid
                // migration, but this can be revisited.
                if (typeof paramTypes === 'undefined') {
                    result[i] = [];
                } else if (paramTypes[i] != Object) {
                    result[i] = [paramTypes[i]];
                } else {
                    result[i] = [];
                }
                if (paramAnnotations && isPresent(paramAnnotations[i])) {
                    result[i] = result[i].concat(paramAnnotations[i]);
                }
            }
            return result;
        }
        /**
         * @param {?} type
         * @param {?} parentCtor
         * @return {?}
         */

    }, {
        key: '_ownParameters',
        value: function _ownParameters(type, parentCtor) {
            // If we have no decorators, we only have function.length as metadata.
            // In that case, to detect whether a child class declared an own constructor or not,
            // we need to look inside of that constructor to check whether it is
            // just calling the parent.
            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
            // that sets 'design:paramtypes' to []
            // if a class inherits from another class but has no ctor declared itself.
            if (DELEGATE_CTOR.exec(type.toString())) {
                return null;
            }
            // Prefer the direct API.
            if (type.parameters && type.parameters !== parentCtor.parameters) {
                return type.parameters;
            }
            // API of tsickle for lowering decorators to properties on the class.
            var /** @type {?} */tsickleCtorParams = type.ctorParameters;
            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
                // Newer tsickle uses a function closure
                // Retain the non-function case for compatibility with older tsickle
                var /** @type {?} */ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
                var /** @type {?} */paramTypes = ctorParameters.map(function (ctorParam) {
                    return ctorParam && ctorParam.type;
                });
                var /** @type {?} */paramAnnotations = ctorParameters.map(function (ctorParam) {
                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
                });
                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            }
            // API for metadata created by invoking the decorators.
            if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {
                var /** @type {?} */_paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
                var /** @type {?} */_paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
                if (_paramTypes || _paramAnnotations) {
                    return this._zipTypesAndAnnotations(_paramTypes, _paramAnnotations);
                }
            }
            // If a class has no decorators, at least create metadata
            // based on function.length.
            // Note: We know that this is a real constructor as we checked
            // the content of the constructor above.
            return new Array(type.length).fill(undefined);
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'parameters',
        value: function parameters(type) {
            // Note: only report metadata if we have at least one class decorator
            // to stay in sync with the static reflector.
            if (!isType(type)) {
                return [];
            }
            var /** @type {?} */parentCtor = getParentCtor(type);
            var /** @type {?} */parameters = this._ownParameters(type, parentCtor);
            if (!parameters && parentCtor !== Object) {
                parameters = this.parameters(parentCtor);
            }
            return parameters || [];
        }
        /**
         * @param {?} typeOrFunc
         * @param {?} parentCtor
         * @return {?}
         */

    }, {
        key: '_ownAnnotations',
        value: function _ownAnnotations(typeOrFunc, parentCtor) {
            // Prefer the direct API.
            if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
                var /** @type {?} */annotations = typeOrFunc.annotations;
                if (typeof annotations === 'function' && annotations.annotations) {
                    annotations = annotations.annotations;
                }
                return annotations;
            }
            // API of tsickle for lowering decorators to properties on the class.
            if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
                return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
            }
            // API for metadata created by invoking the decorators.
            if (this._reflect && this._reflect.getOwnMetadata) {
                return this._reflect.getOwnMetadata('annotations', typeOrFunc);
            }
        }
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: 'annotations',
        value: function annotations(typeOrFunc) {
            if (!isType(typeOrFunc)) {
                return [];
            }
            var /** @type {?} */parentCtor = getParentCtor(typeOrFunc);
            var /** @type {?} */ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
            var /** @type {?} */parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
            return parentAnnotations.concat(ownAnnotations);
        }
        /**
         * @param {?} typeOrFunc
         * @param {?} parentCtor
         * @return {?}
         */

    }, {
        key: '_ownPropMetadata',
        value: function _ownPropMetadata(typeOrFunc, parentCtor) {
            // Prefer the direct API.
            if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
                var /** @type {?} */propMetadata = typeOrFunc.propMetadata;
                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                    propMetadata = propMetadata.propMetadata;
                }
                return propMetadata;
            }
            // API of tsickle for lowering decorators to properties on the class.
            if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
                var /** @type {?} */propDecorators = typeOrFunc.propDecorators;
                var /** @type {?} */_propMetadata = {};
                Object.keys(propDecorators).forEach(function (prop) {
                    _propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
                });
                return _propMetadata;
            }
            // API for metadata created by invoking the decorators.
            if (this._reflect && this._reflect.getOwnMetadata) {
                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
            }
        }
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: 'propMetadata',
        value: function propMetadata(typeOrFunc) {
            if (!isType(typeOrFunc)) {
                return {};
            }
            var /** @type {?} */parentCtor = getParentCtor(typeOrFunc);
            var /** @type {?} */propMetadata = {};
            if (parentCtor !== Object) {
                var /** @type {?} */parentPropMetadata = this.propMetadata(parentCtor);
                Object.keys(parentPropMetadata).forEach(function (propName) {
                    propMetadata[propName] = parentPropMetadata[propName];
                });
            }
            var /** @type {?} */ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
            if (ownPropMetadata) {
                Object.keys(ownPropMetadata).forEach(function (propName) {
                    var /** @type {?} */decorators = [];
                    if (propMetadata.hasOwnProperty(propName)) {
                        decorators.push.apply(decorators, _toConsumableArray(propMetadata[propName]));
                    }
                    decorators.push.apply(decorators, _toConsumableArray(ownPropMetadata[propName]));
                    propMetadata[propName] = decorators;
                });
            }
            return propMetadata;
        }
        /**
         * @param {?} type
         * @param {?} lcProperty
         * @return {?}
         */

    }, {
        key: 'hasLifecycleHook',
        value: function hasLifecycleHook(type, lcProperty) {
            return type instanceof Type && lcProperty in type.prototype;
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'getter',
        value: function getter(name) {
            return new Function('o', 'return o.' + name + ';');
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'setter',
        value: function setter(name) {
            return new Function('o', 'v', 'return o.' + name + ' = v;');
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'method',
        value: function method(name) {
            var /** @type {?} */functionBody = 'if (!o.' + name + ') throw new Error(\'"' + name + '" is undefined\');\n        return o.' + name + '.apply(o, args);';
            return new Function('o', 'args', functionBody);
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'importUri',
        value: function importUri(type) {
            // StaticSymbol
            if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type['filePath']) {
                return type['filePath'];
            }
            // Runtime type
            return './' + stringify(type);
        }
        /**
         * @param {?} name
         * @param {?} moduleUrl
         * @param {?} members
         * @param {?} runtime
         * @return {?}
         */

    }, {
        key: 'resolveIdentifier',
        value: function resolveIdentifier(name, moduleUrl, members, runtime) {
            return runtime;
        }
        /**
         * @param {?} enumIdentifier
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'resolveEnum',
        value: function resolveEnum(enumIdentifier, name) {
            return enumIdentifier[name];
        }
    }]);

    return ReflectionCapabilities;
}();
/**
 * @param {?} decoratorInvocations
 * @return {?}
 */


function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
        return [];
    }
    return decoratorInvocations.map(function (decoratorInvocation) {
        var /** @type {?} */decoratorType = decoratorInvocation.type;
        var /** @type {?} */annotationCls = decoratorType.annotationCls;
        var /** @type {?} */annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
        return new (Function.prototype.bind.apply(annotationCls, [null].concat(_toConsumableArray(annotationArgs))))();
    });
}
/**
 * @param {?} ctor
 * @return {?}
 */
function getParentCtor(ctor) {
    var /** @type {?} */parentProto = Object.getPrototypeOf(ctor.prototype);
    var /** @type {?} */parentCtor = parentProto ? parentProto.constructor : null;
    // Note: We always use `Object` as the null value
    // to simplify checking later on.
    return parentCtor || Object;
}

/**
 * Provides read-only access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 * @abstract
 */

var ReflectorReader = function () {
    function ReflectorReader() {
        _classCallCheck(this, ReflectorReader);
    }

    _createClass(ReflectorReader, [{
        key: 'parameters',

        /**
         * @abstract
         * @param {?} typeOrFunc
         * @return {?}
         */
        value: function parameters(typeOrFunc) {}
        /**
         * @abstract
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: 'annotations',
        value: function annotations(typeOrFunc) {}
        /**
         * @abstract
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: 'propMetadata',
        value: function propMetadata(typeOrFunc) {}
        /**
         * @abstract
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: 'importUri',
        value: function importUri(typeOrFunc) {}
        /**
         * @abstract
         * @param {?} name
         * @param {?} moduleUrl
         * @param {?} members
         * @param {?} runtime
         * @return {?}
         */

    }, {
        key: 'resolveIdentifier',
        value: function resolveIdentifier(name, moduleUrl, members, runtime) {}
        /**
         * @abstract
         * @param {?} identifier
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'resolveEnum',
        value: function resolveEnum(identifier, name) {}
    }]);

    return ReflectorReader;
}();

/**
 * Provides access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 */


var Reflector = function (_ReflectorReader) {
    _inherits(Reflector, _ReflectorReader);

    /**
     * @param {?} reflectionCapabilities
     */
    function Reflector(reflectionCapabilities) {
        _classCallCheck(this, Reflector);

        var _this3 = _possibleConstructorReturn(this, (Reflector.__proto__ || Object.getPrototypeOf(Reflector)).call(this));

        _this3.reflectionCapabilities = reflectionCapabilities;
        return _this3;
    }
    /**
     * @param {?} caps
     * @return {?}
     */


    _createClass(Reflector, [{
        key: 'updateCapabilities',
        value: function updateCapabilities(caps) {
            this.reflectionCapabilities = caps;
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'factory',
        value: function factory(type) {
            return this.reflectionCapabilities.factory(type);
        }
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: 'parameters',
        value: function parameters(typeOrFunc) {
            return this.reflectionCapabilities.parameters(typeOrFunc);
        }
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: 'annotations',
        value: function annotations(typeOrFunc) {
            return this.reflectionCapabilities.annotations(typeOrFunc);
        }
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: 'propMetadata',
        value: function propMetadata(typeOrFunc) {
            return this.reflectionCapabilities.propMetadata(typeOrFunc);
        }
        /**
         * @param {?} type
         * @param {?} lcProperty
         * @return {?}
         */

    }, {
        key: 'hasLifecycleHook',
        value: function hasLifecycleHook(type, lcProperty) {
            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'getter',
        value: function getter(name) {
            return this.reflectionCapabilities.getter(name);
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'setter',
        value: function setter(name) {
            return this.reflectionCapabilities.setter(name);
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'method',
        value: function method(name) {
            return this.reflectionCapabilities.method(name);
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'importUri',
        value: function importUri(type) {
            return this.reflectionCapabilities.importUri(type);
        }
        /**
         * @param {?} name
         * @param {?} moduleUrl
         * @param {?} members
         * @param {?} runtime
         * @return {?}
         */

    }, {
        key: 'resolveIdentifier',
        value: function resolveIdentifier(name, moduleUrl, members, runtime) {
            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
        }
        /**
         * @param {?} identifier
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'resolveEnum',
        value: function resolveEnum(identifier, name) {
            return this.reflectionCapabilities.resolveEnum(identifier, name);
        }
    }]);

    return Reflector;
}(ReflectorReader);

/**
 * The {@link Reflector} used internally in Angular to access metadata
 * about symbols.
 */


var /** @type {?} */reflector = new Reflector(new ReflectionCapabilities());

/**
 * `Dependency` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 */

var ReflectiveDependency = function () {
    /**
     * @param {?} key
     * @param {?} optional
     * @param {?} visibility
     */
    function ReflectiveDependency(key, optional, visibility) {
        _classCallCheck(this, ReflectiveDependency);

        this.key = key;
        this.optional = optional;
        this.visibility = visibility;
    }
    /**
     * @param {?} key
     * @return {?}
     */


    _createClass(ReflectiveDependency, null, [{
        key: 'fromKey',
        value: function fromKey(key) {
            return new ReflectiveDependency(key, false, null);
        }
    }]);

    return ReflectiveDependency;
}();

var /** @type {?} */_EMPTY_LIST = [];

var ResolvedReflectiveProvider_ = function () {
    /**
     * @param {?} key
     * @param {?} resolvedFactories
     * @param {?} multiProvider
     */
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
        _classCallCheck(this, ResolvedReflectiveProvider_);

        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
    }
    /**
     * @return {?}
     */


    _createClass(ResolvedReflectiveProvider_, [{
        key: 'resolvedFactory',
        get: function get() {
            return this.resolvedFactories[0];
        }
    }]);

    return ResolvedReflectiveProvider_;
}();
/**
 * An internal resolved representation of a factory function created by resolving {\@link
 * Provider}.
 * \@experimental
 */


var ResolvedReflectiveFactory =
/**
 * @param {?} factory
 * @param {?} dependencies
 */
function ResolvedReflectiveFactory(factory, dependencies) {
    _classCallCheck(this, ResolvedReflectiveFactory);

    this.factory = factory;
    this.dependencies = dependencies;
};
/**
 * Resolve a single provider.
 * @param {?} provider
 * @return {?}
 */


function resolveReflectiveFactory(provider) {
    var /** @type {?} */factoryFn = void 0;
    var /** @type {?} */resolvedDeps = void 0;
    if (provider.useClass) {
        var /** @type {?} */useClass = resolveForwardRef(provider.useClass);
        factoryFn = reflector.factory(useClass);
        resolvedDeps = _dependenciesFor(useClass);
    } else if (provider.useExisting) {
        factoryFn = function factoryFn(aliasInstance) {
            return aliasInstance;
        };
        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    } else if (provider.useFactory) {
        factoryFn = provider.useFactory;
        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    } else {
        factoryFn = function factoryFn() {
            return provider.useValue;
        };
        resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
/**
 * Converts the {\@link Provider} into {\@link ResolvedProvider}.
 *
 * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
 * convenience provider syntax.
 * @param {?} provider
 * @return {?}
 */
function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
}
/**
 * Resolve a list of Providers.
 * @param {?} providers
 * @return {?}
 */
function resolveReflectiveProviders(providers) {
    var /** @type {?} */normalized = _normalizeProviders(providers, []);
    var /** @type {?} */resolved = normalized.map(resolveReflectiveProvider);
    var /** @type {?} */resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
    return Array.from(resolvedProviderMap.values());
}
/**
 * Merges a list of ResolvedProviders into a list where
 * each key is contained exactly once and multi providers
 * have been merged.
 * @param {?} providers
 * @param {?} normalizedProvidersMap
 * @return {?}
 */
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var /** @type {?} */i = 0; i < providers.length; i++) {
        var /** @type {?} */provider = providers[i];
        var /** @type {?} */existing = normalizedProvidersMap.get(provider.key.id);
        if (existing) {
            if (provider.multiProvider !== existing.multiProvider) {
                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
            }
            if (provider.multiProvider) {
                for (var /** @type {?} */j = 0; j < provider.resolvedFactories.length; j++) {
                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
                }
            } else {
                normalizedProvidersMap.set(provider.key.id, provider);
            }
        } else {
            var /** @type {?} */resolvedProvider = void 0;
            if (provider.multiProvider) {
                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
            } else {
                resolvedProvider = provider;
            }
            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
        }
    }
    return normalizedProvidersMap;
}
/**
 * @param {?} providers
 * @param {?} res
 * @return {?}
 */
function _normalizeProviders(providers, res) {
    providers.forEach(function (b) {
        if (b instanceof Type) {
            res.push({ provide: b, useClass: b });
        } else if (b && (typeof b === 'undefined' ? 'undefined' : _typeof(b)) == 'object' && b.provide !== undefined) {
            res.push( /** @type {?} */b);
        } else if (b instanceof Array) {
            _normalizeProviders(b, res);
        } else {
            throw invalidProviderError(b);
        }
    });
    return res;
}
/**
 * @param {?} typeOrFunc
 * @param {?} dependencies
 * @return {?}
 */
function constructDependencies(typeOrFunc, dependencies) {
    if (!dependencies) {
        return _dependenciesFor(typeOrFunc);
    } else {
        var /** @type {?} */params = dependencies.map(function (t) {
            return [t];
        });
        return dependencies.map(function (t) {
            return _extractToken(typeOrFunc, t, params);
        });
    }
}
/**
 * @param {?} typeOrFunc
 * @return {?}
 */
function _dependenciesFor(typeOrFunc) {
    var /** @type {?} */params = reflector.parameters(typeOrFunc);
    if (!params) return [];
    if (params.some(function (p) {
        return p == null;
    })) {
        throw noAnnotationError(typeOrFunc, params);
    }
    return params.map(function (p) {
        return _extractToken(typeOrFunc, p, params);
    });
}
/**
 * @param {?} typeOrFunc
 * @param {?} metadata
 * @param {?} params
 * @return {?}
 */
function _extractToken(typeOrFunc, metadata, params) {
    var /** @type {?} */token = null;
    var /** @type {?} */optional = false;
    if (!Array.isArray(metadata)) {
        if (metadata instanceof Inject) {
            return _createDependency(metadata['token'], optional, null);
        } else {
            return _createDependency(metadata, optional, null);
        }
    }
    var /** @type {?} */visibility = null;
    for (var /** @type {?} */i = 0; i < metadata.length; ++i) {
        var /** @type {?} */paramMetadata = metadata[i];
        if (paramMetadata instanceof Type) {
            token = paramMetadata;
        } else if (paramMetadata instanceof Inject) {
            token = paramMetadata['token'];
        } else if (paramMetadata instanceof Optional) {
            optional = true;
        } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
            visibility = paramMetadata;
        } else if (paramMetadata instanceof InjectionToken) {
            token = paramMetadata;
        }
    }
    token = resolveForwardRef(token);
    if (token != null) {
        return _createDependency(token, optional, visibility);
    } else {
        throw noAnnotationError(typeOrFunc, params);
    }
}
/**
 * @param {?} token
 * @param {?} optional
 * @param {?} visibility
 * @return {?}
 */
function _createDependency(token, optional, visibility) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
}

// Threshold for the dynamic version
var /** @type {?} */UNDEFINED = new Object();
/**
 * A ReflectiveDependency injection container used for instantiating objects and resolving
 * dependencies.
 *
 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
 * constructor dependencies.
 *
 * In typical use, application code asks for the dependencies in the constructor and they are
 * resolved by the `Injector`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
 *
 * The following example creates an `Injector` configured to create `Engine` and `Car`.
 *
 * ```typescript
 * \@Injectable()
 * class Engine {
 * }
 *
 * \@Injectable()
 * class Car {
 *   constructor(public engine:Engine) {}
 * }
 *
 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
 * var car = injector.get(Car);
 * expect(car instanceof Car).toBe(true);
 * expect(car.engine instanceof Engine).toBe(true);
 * ```
 *
 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
 * resolve all of the object's dependencies automatically.
 *
 * \@stable
 * @abstract
 */

var ReflectiveInjector = function () {
    function ReflectiveInjector() {
        _classCallCheck(this, ReflectiveInjector);
    }

    _createClass(ReflectiveInjector, [{
        key: 'parent',

        /**
         * Parent of this injector.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
         *
         * ```typescript
         * var parent = ReflectiveInjector.resolveAndCreate([]);
         * var child = parent.resolveAndCreateChild([]);
         * expect(child.parent).toBe(parent);
         * ```
         * @abstract
         * @return {?}
         */
        value: function parent() {}
        /**
         * Resolves an array of providers and creates a child injector from those providers.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * The passed-in providers can be an array of `Type`, {\@link Provider},
         * or a recursive array of more providers.
         *
         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
         *
         * ```typescript
         * class ParentProvider {}
         * class ChildProvider {}
         *
         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
         * var child = parent.resolveAndCreateChild([ChildProvider]);
         *
         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
         * ```
         *
         * This function is slower than the corresponding `createChildFromResolved`
         * because it needs to resolve the passed-in providers first.
         * See {\@link Injector#resolve} and {\@link Injector#createChildFromResolved}.
         * @abstract
         * @param {?} providers
         * @return {?}
         */

    }, {
        key: 'resolveAndCreateChild',
        value: function resolveAndCreateChild(providers) {}
        /**
         * Creates a child injector from previously resolved providers.
         *
         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
         * -->
         *
         * This API is the recommended way to construct injectors in performance-sensitive parts.
         *
         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
         *
         * ```typescript
         * class ParentProvider {}
         * class ChildProvider {}
         *
         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
         *
         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
         * var child = parent.createChildFromResolved(childProviders);
         *
         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
         * ```
         * @abstract
         * @param {?} providers
         * @return {?}
         */

    }, {
        key: 'createChildFromResolved',
        value: function createChildFromResolved(providers) {}
        /**
         * Resolves a provider and instantiates an object in the context of the injector.
         *
         * The created object does not get cached by the injector.
         *
         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
         *
         * var car = injector.resolveAndInstantiate(Car);
         * expect(car.engine).toBe(injector.get(Engine));
         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
         * ```
         * @abstract
         * @param {?} provider
         * @return {?}
         */

    }, {
        key: 'resolveAndInstantiate',
        value: function resolveAndInstantiate(provider) {}
        /**
         * Instantiates an object using a resolved provider in the context of the injector.
         *
         * The created object does not get cached by the injector.
         *
         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
         * var carProvider = ReflectiveInjector.resolve([Car])[0];
         * var car = injector.instantiateResolved(carProvider);
         * expect(car.engine).toBe(injector.get(Engine));
         * expect(car).not.toBe(injector.instantiateResolved(carProvider));
         * ```
         * @abstract
         * @param {?} provider
         * @return {?}
         */

    }, {
        key: 'instantiateResolved',
        value: function instantiateResolved(provider) {}
        /**
         * @abstract
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */

    }, {
        key: 'get',
        value: function get(token, notFoundValue) {}
    }], [{
        key: 'resolve',

        /**
         * Turns an array of provider definitions into an array of resolved providers.
         *
         * A resolution is a process of flattening multiple nested arrays and converting individual
         * providers into an array of {\@link ResolvedReflectiveProvider}s.
         *
         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
         *
         * expect(providers.length).toEqual(2);
         *
         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
         * expect(providers[0].key.displayName).toBe("Car");
         * expect(providers[0].dependencies.length).toEqual(1);
         * expect(providers[0].factory).toBeDefined();
         *
         * expect(providers[1].key.displayName).toBe("Engine");
         * });
         * ```
         *
         * See {\@link ReflectiveInjector#fromResolvedProviders} for more info.
         * @param {?} providers
         * @return {?}
         */
        value: function resolve(providers) {
            return resolveReflectiveProviders(providers);
        }
        /**
         * Resolves an array of providers and creates an injector from those providers.
         *
         * The passed-in providers can be an array of `Type`, {\@link Provider},
         * or a recursive array of more providers.
         *
         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
         * expect(injector.get(Car) instanceof Car).toBe(true);
         * ```
         *
         * This function is slower than the corresponding `fromResolvedProviders`
         * because it needs to resolve the passed-in providers first.
         * See {\@link Injector#resolve} and {\@link Injector#fromResolvedProviders}.
         * @param {?} providers
         * @param {?=} parent
         * @return {?}
         */

    }, {
        key: 'resolveAndCreate',
        value: function resolveAndCreate(providers) {
            var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var /** @type {?} */ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
        }
        /**
         * Creates an injector from previously resolved providers.
         *
         * This API is the recommended way to construct injectors in performance-sensitive parts.
         *
         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
         *
         * ```typescript
         * \@Injectable()
         * class Engine {
         * }
         *
         * \@Injectable()
         * class Car {
         *   constructor(public engine:Engine) {}
         * }
         *
         * var providers = ReflectiveInjector.resolve([Car, Engine]);
         * var injector = ReflectiveInjector.fromResolvedProviders(providers);
         * expect(injector.get(Car) instanceof Car).toBe(true);
         * ```
         * \@experimental
         * @param {?} providers
         * @param {?=} parent
         * @return {?}
         */

    }, {
        key: 'fromResolvedProviders',
        value: function fromResolvedProviders(providers) {
            var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return new ReflectiveInjector_(providers, parent);
        }
    }]);

    return ReflectiveInjector;
}();

var ReflectiveInjector_ = function () {
    /**
     * Private
     * @param {?} _providers
     * @param {?=} _parent
     */
    function ReflectiveInjector_(_providers) {
        var _parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, ReflectiveInjector_);

        /** @internal */
        this._constructionCounter = 0;
        this._providers = _providers;
        this._parent = _parent;
        var len = _providers.length;
        this.keyIds = new Array(len);
        this.objs = new Array(len);
        for (var i = 0; i < len; i++) {
            this.keyIds[i] = _providers[i].key.id;
            this.objs[i] = UNDEFINED;
        }
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */


    _createClass(ReflectiveInjector_, [{
        key: 'get',
        value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;

            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'resolveAndCreateChild',

        /**
         * @param {?} providers
         * @return {?}
         */
        value: function resolveAndCreateChild(providers) {
            var /** @type {?} */ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return this.createChildFromResolved(ResolvedReflectiveProviders);
        }
        /**
         * @param {?} providers
         * @return {?}
         */

    }, {
        key: 'createChildFromResolved',
        value: function createChildFromResolved(providers) {
            var /** @type {?} */inj = new ReflectiveInjector_(providers);
            inj._parent = this;
            return inj;
        }
        /**
         * @param {?} provider
         * @return {?}
         */

    }, {
        key: 'resolveAndInstantiate',
        value: function resolveAndInstantiate(provider) {
            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
        }
        /**
         * @param {?} provider
         * @return {?}
         */

    }, {
        key: 'instantiateResolved',
        value: function instantiateResolved(provider) {
            return this._instantiateProvider(provider);
        }
        /**
         * @param {?} index
         * @return {?}
         */

    }, {
        key: 'getProviderAtIndex',
        value: function getProviderAtIndex(index) {
            if (index < 0 || index >= this._providers.length) {
                throw outOfBoundsError(index);
            }
            return this._providers[index];
        }
        /**
         * \@internal
         * @param {?} provider
         * @return {?}
         */

    }, {
        key: '_new',
        value: function _new(provider) {
            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
                throw cyclicDependencyError(this, provider.key);
            }
            return this._instantiateProvider(provider);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_getMaxNumberOfObjects',
        value: function _getMaxNumberOfObjects() {
            return this.objs.length;
        }
        /**
         * @param {?} provider
         * @return {?}
         */

    }, {
        key: '_instantiateProvider',
        value: function _instantiateProvider(provider) {
            if (provider.multiProvider) {
                var /** @type {?} */res = new Array(provider.resolvedFactories.length);
                for (var /** @type {?} */i = 0; i < provider.resolvedFactories.length; ++i) {
                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
                }
                return res;
            } else {
                return this._instantiate(provider, provider.resolvedFactories[0]);
            }
        }
        /**
         * @param {?} provider
         * @param {?} ResolvedReflectiveFactory
         * @return {?}
         */

    }, {
        key: '_instantiate',
        value: function _instantiate(provider, ResolvedReflectiveFactory) {
            var _this4 = this;

            var /** @type {?} */factory = ResolvedReflectiveFactory.factory;
            var /** @type {?} */deps = void 0;
            try {
                deps = ResolvedReflectiveFactory.dependencies.map(function (dep) {
                    return _this4._getByReflectiveDependency(dep);
                });
            } catch (e) {
                if (e.addKey) {
                    e.addKey(this, provider.key);
                }
                throw e;
            }
            var /** @type {?} */obj = void 0;
            try {
                obj = factory.apply(undefined, _toConsumableArray(deps));
            } catch (e) {
                throw instantiationError(this, e, e.stack, provider.key);
            }
            return obj;
        }
        /**
         * @param {?} dep
         * @return {?}
         */

    }, {
        key: '_getByReflectiveDependency',
        value: function _getByReflectiveDependency(dep) {
            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
        }
        /**
         * @param {?} key
         * @param {?} visibility
         * @param {?} notFoundValue
         * @return {?}
         */

    }, {
        key: '_getByKey',
        value: function _getByKey(key, visibility, notFoundValue) {
            if (key === INJECTOR_KEY) {
                return this;
            }
            if (visibility instanceof Self) {
                return this._getByKeySelf(key, notFoundValue);
            } else {
                return this._getByKeyDefault(key, notFoundValue, visibility);
            }
        }
        /**
         * @param {?} keyId
         * @return {?}
         */

    }, {
        key: '_getObjByKeyId',
        value: function _getObjByKeyId(keyId) {
            for (var /** @type {?} */i = 0; i < this.keyIds.length; i++) {
                if (this.keyIds[i] === keyId) {
                    if (this.objs[i] === UNDEFINED) {
                        this.objs[i] = this._new(this._providers[i]);
                    }
                    return this.objs[i];
                }
            }
            return UNDEFINED;
        }
        /**
         * \@internal
         * @param {?} key
         * @param {?} notFoundValue
         * @return {?}
         */

    }, {
        key: '_throwOrNull',
        value: function _throwOrNull(key, notFoundValue) {
            if (notFoundValue !== THROW_IF_NOT_FOUND) {
                return notFoundValue;
            } else {
                throw noProviderError(this, key);
            }
        }
        /**
         * \@internal
         * @param {?} key
         * @param {?} notFoundValue
         * @return {?}
         */

    }, {
        key: '_getByKeySelf',
        value: function _getByKeySelf(key, notFoundValue) {
            var /** @type {?} */obj = this._getObjByKeyId(key.id);
            return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
        }
        /**
         * \@internal
         * @param {?} key
         * @param {?} notFoundValue
         * @param {?} visibility
         * @return {?}
         */

    }, {
        key: '_getByKeyDefault',
        value: function _getByKeyDefault(key, notFoundValue, visibility) {
            var /** @type {?} */inj = void 0;
            if (visibility instanceof SkipSelf) {
                inj = this._parent;
            } else {
                inj = this;
            }
            while (inj instanceof ReflectiveInjector_) {
                var /** @type {?} */inj_ = inj;
                var /** @type {?} */obj = inj_._getObjByKeyId(key.id);
                if (obj !== UNDEFINED) return obj;
                inj = inj_._parent;
            }
            if (inj !== null) {
                return inj.get(key.token, notFoundValue);
            } else {
                return this._throwOrNull(key, notFoundValue);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',

        /**
         * @return {?}
         */
        value: function toString() {
            return this.displayName;
        }
    }, {
        key: 'parent',
        get: function get() {
            return this._parent;
        }
    }, {
        key: 'displayName',
        get: function get() {
            var /** @type {?} */providers = _mapProviders(this, function (b) {
                return ' "' + b.key.displayName + '" ';
            }).join(', ');
            return 'ReflectiveInjector(providers: [' + providers + '])';
        }
    }]);

    return ReflectiveInjector_;
}();

var /** @type {?} */INJECTOR_KEY = ReflectiveKey.get(Injector);
/**
 * @param {?} injector
 * @param {?} fn
 * @return {?}
 */
function _mapProviders(injector, fn) {
    var /** @type {?} */res = new Array(injector._providers.length);
    for (var /** @type {?} */i = 0; i < injector._providers.length; ++i) {
        res[i] = fn(injector.getProviderAtIndex(i));
    }
    return res;
}

var ListWrapper = function () {
    function ListWrapper() {
        _classCallCheck(this, ListWrapper);
    }

    _createClass(ListWrapper, null, [{
        key: 'findLast',

        /**
         * @param {?} arr
         * @param {?} condition
         * @return {?}
         */
        value: function findLast(arr, condition) {
            for (var /** @type {?} */i = arr.length - 1; i >= 0; i--) {
                if (condition(arr[i])) {
                    return arr[i];
                }
            }
            return null;
        }
        /**
         * @param {?} list
         * @param {?} items
         * @return {?}
         */

    }, {
        key: 'removeAll',
        value: function removeAll(list, items) {
            for (var /** @type {?} */i = 0; i < items.length; ++i) {
                var /** @type {?} */index = list.indexOf(items[i]);
                if (index > -1) {
                    list.splice(index, 1);
                }
            }
        }
        /**
         * @param {?} list
         * @param {?} el
         * @return {?}
         */

    }, {
        key: 'remove',
        value: function remove(list, el) {
            var /** @type {?} */index = list.indexOf(el);
            if (index > -1) {
                list.splice(index, 1);
                return true;
            }
            return false;
        }
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */

    }, {
        key: 'equals',
        value: function equals(a, b) {
            if (a.length != b.length) return false;
            for (var /** @type {?} */i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        }
        /**
         * @param {?} list
         * @return {?}
         */

    }, {
        key: 'flatten',
        value: function flatten(list) {
            return list.reduce(function (flat, item) {
                var /** @type {?} */flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
                return flat.concat(flatItem);
            }, []);
        }
    }]);

    return ListWrapper;
}();
/**
 * @param {?} obj
 * @return {?}
 */


function isListLikeIterable(obj) {
    if (!isJsObject(obj)) return false;
    return Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} comparator
 * @return {?}
 */
function areIterablesEqual(a, b, comparator) {
    var /** @type {?} */iterator1 = a[getSymbolIterator()]();
    var /** @type {?} */iterator2 = b[getSymbolIterator()]();
    while (true) {
        var /** @type {?} */item1 = iterator1.next();
        var /** @type {?} */item2 = iterator2.next();
        if (item1.done && item2.done) return true;
        if (item1.done || item2.done) return false;
        if (!comparator(item1.value, item2.value)) return false;
    }
}
/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */
function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
        for (var /** @type {?} */i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    } else {
        var /** @type {?} */iterator = obj[getSymbolIterator()]();
        var /** @type {?} */item = void 0;
        while (!(item = iterator.next()).done) {
            fn(item.value);
        }
    }
}

/**
 * Determine if the argument is shaped like a Promise
 * @param {?} obj
 * @return {?}
 */
function isPromise(obj) {
    // allow any Promise/A+ compliant thenable.
    // It's up to the caller to ensure that obj.then conforms to the spec
    return !!obj && typeof obj.then === 'function';
}
/**
 * Determine if the argument is an Observable
 * @param {?} obj
 * @return {?}
 */
function isObservable(obj) {
    return !!(obj && obj[__WEBPACK_IMPORTED_MODULE_3_rxjs_symbol_observable__["$$observable"]]);
}

/**
 * A function that will be executed when an application is initialized.
 * @experimental
 */
var /** @type {?} */APP_INITIALIZER = new InjectionToken('Application Initializer');
/**
 * A class that reflects the state of running {\@link APP_INITIALIZER}s.
 *
 * \@experimental
 */

var ApplicationInitStatus = function () {
    /**
     * @param {?} appInits
     */
    function ApplicationInitStatus(appInits) {
        var _this5 = this;

        _classCallCheck(this, ApplicationInitStatus);

        this._done = false;
        var asyncInitPromises = [];
        if (appInits) {
            for (var i = 0; i < appInits.length; i++) {
                var initResult = appInits[i]();
                if (isPromise(initResult)) {
                    asyncInitPromises.push(initResult);
                }
            }
        }
        this._donePromise = Promise.all(asyncInitPromises).then(function () {
            _this5._done = true;
        });
        if (asyncInitPromises.length === 0) {
            this._done = true;
        }
    }
    /**
     * @return {?}
     */


    _createClass(ApplicationInitStatus, [{
        key: 'done',
        get: function get() {
            return this._done;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'donePromise',
        get: function get() {
            return this._donePromise;
        }
    }]);

    return ApplicationInitStatus;
}();

ApplicationInitStatus.decorators = [{ type: Injectable }];
/** @nocollapse */
ApplicationInitStatus.ctorParameters = function () {
    return [{ type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER] }, { type: Optional }] }];
};

/**
 * A DI Token representing a unique string id assigned to the application by Angular and used
 * primarily for prefixing application attributes and CSS styles when
 * {@link ViewEncapsulation#Emulated} is being used.
 *
 * If you need to avoid randomly generated value to be used as an application id, you can provide
 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
 * using this token.
 * @experimental
 */
var /** @type {?} */APP_ID = new InjectionToken('AppId');
/**
 * @return {?}
 */
function _appIdRandomProviderFactory() {
    return '' + _randomChar() + _randomChar() + _randomChar();
}
/**
 * Providers that will generate a random APP_ID_TOKEN.
 * @experimental
 */
var /** @type {?} */APP_ID_RANDOM_PROVIDER = {
    provide: APP_ID,
    useFactory: _appIdRandomProviderFactory,
    deps: /** @type {?} */[]
};
/**
 * @return {?}
 */
function _randomChar() {
    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
/**
 * A function that will be executed when a platform is initialized.
 * @experimental
 */
var /** @type {?} */PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
/**
 * A token that indicates an opaque platform id.
 * @experimental
 */
var /** @type {?} */PLATFORM_ID = new InjectionToken('Platform ID');
/**
 * All callbacks provided via this token will be called for every component that is bootstrapped.
 * Signature of the callback:
 *
 * `(componentRef: ComponentRef) => void`.
 *
 * @experimental
 */
var /** @type {?} */APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
/**
 * A token which indicates the root directory of the application
 * @experimental
 */
var /** @type {?} */PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');

var Console = function () {
    function Console() {
        _classCallCheck(this, Console);
    }

    _createClass(Console, [{
        key: 'log',

        /**
         * @param {?} message
         * @return {?}
         */
        value: function log(message) {
            print(message);
        }
        /**
         * @param {?} message
         * @return {?}
         */

    }, {
        key: 'warn',
        value: function warn(message) {
            _warn(message);
        }
    }]);

    return Console;
}();

Console.decorators = [{ type: Injectable }];
/** @nocollapse */
Console.ctorParameters = function () {
    return [];
};

/**
 * Combination of NgModuleFactory and ComponentFactorys.
 *
 * \@experimental
 */

var ModuleWithComponentFactories =
/**
 * @param {?} ngModuleFactory
 * @param {?} componentFactories
 */
function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
    _classCallCheck(this, ModuleWithComponentFactories);

    this.ngModuleFactory = ngModuleFactory;
    this.componentFactories = componentFactories;
};
/**
 * @return {?}
 */


function _throwError() {
    throw new Error('Runtime compiler is not loaded');
}
/**
 * Low-level service for running the angular compiler during runtime
 * to create {\@link ComponentFactory}s, which
 * can later be used to create and render a Component instance.
 *
 * Each `\@NgModule` provides an own `Compiler` to its injector,
 * that will use the directives/pipes of the ng module for compilation
 * of components.
 * \@stable
 */

var Compiler = function () {
    function Compiler() {
        _classCallCheck(this, Compiler);
    }

    _createClass(Compiler, [{
        key: 'compileModuleSync',

        /**
         * Compiles the given NgModule and all of its components. All templates of the components listed
         * in `entryComponents` have to be inlined.
         * @param {?} moduleType
         * @return {?}
         */
        value: function compileModuleSync(moduleType) {
            throw _throwError();
        }
        /**
         * Compiles the given NgModule and all of its components
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'compileModuleAsync',
        value: function compileModuleAsync(moduleType) {
            throw _throwError();
        }
        /**
         * Same as {\@link compileModuleSync} but also creates ComponentFactories for all components.
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'compileModuleAndAllComponentsSync',
        value: function compileModuleAndAllComponentsSync(moduleType) {
            throw _throwError();
        }
        /**
         * Same as {\@link compileModuleAsync} but also creates ComponentFactories for all components.
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'compileModuleAndAllComponentsAsync',
        value: function compileModuleAndAllComponentsAsync(moduleType) {
            throw _throwError();
        }
        /**
         * Exposes the CSS-style selectors that have been used in `ngContent` directives within
         * the template of the given component.
         * This is used by the `upgrade` library to compile the appropriate transclude content
         * in the AngularJS wrapper component.
         * @param {?} component
         * @return {?}
         */

    }, {
        key: 'getNgContentSelectors',
        value: function getNgContentSelectors(component) {
            throw _throwError();
        }
        /**
         * Clears all caches.
         * @return {?}
         */

    }, {
        key: 'clearCache',
        value: function clearCache() {}
        /**
         * Clears the cache for the given component/ngModule.
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'clearCacheFor',
        value: function clearCacheFor(type) {}
    }]);

    return Compiler;
}();

Compiler.decorators = [{ type: Injectable }];
/** @nocollapse */
Compiler.ctorParameters = function () {
    return [];
};
/**
 * Token to provide CompilerOptions in the platform injector.
 *
 * @experimental
 */
var /** @type {?} */COMPILER_OPTIONS = new InjectionToken('compilerOptions');
/**
 * A factory for creating a Compiler
 *
 * \@experimental
 * @abstract
 */

var CompilerFactory = function () {
    function CompilerFactory() {
        _classCallCheck(this, CompilerFactory);
    }

    _createClass(CompilerFactory, [{
        key: 'createCompiler',

        /**
         * @abstract
         * @param {?=} options
         * @return {?}
         */
        value: function createCompiler(options) {}
    }]);

    return CompilerFactory;
}();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents an instance of a Component created via a {\@link ComponentFactory}.
 *
 * `ComponentRef` provides access to the Component Instance as well other objects related to this
 * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
 * method.
 * \@stable
 * @abstract
 */


var ComponentRef = function () {
    function ComponentRef() {
        _classCallCheck(this, ComponentRef);
    }

    _createClass(ComponentRef, [{
        key: 'location',

        /**
         * Location of the Host Element of this Component Instance.
         * @abstract
         * @return {?}
         */
        value: function location() {}
        /**
         * The injector on which the component instance exists.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'injector',
        value: function injector() {}
        /**
         * The instance of the Component.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'instance',
        value: function instance() {}
        /**
         * The {\@link ViewRef} of the Host View of this Component instance.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'hostView',
        value: function hostView() {}
        /**
         * The {\@link ChangeDetectorRef} of the Component instance.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'changeDetectorRef',
        value: function changeDetectorRef() {}
        /**
         * The component type.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'componentType',
        value: function componentType() {}
        /**
         * Destroys the component instance and all of the data structures associated with it.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'destroy',
        value: function destroy() {}
        /**
         * Allows to register a callback that will be called when the component is destroyed.
         * @abstract
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(callback) {}
    }]);

    return ComponentRef;
}();
/**
 * \@stable
 * @abstract
 */


var ComponentFactory = function () {
    function ComponentFactory() {
        _classCallCheck(this, ComponentFactory);
    }

    _createClass(ComponentFactory, [{
        key: 'selector',

        /**
         * @abstract
         * @return {?}
         */
        value: function selector() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'componentType',
        value: function componentType() {}
        /**
         * Creates a new component.
         * @abstract
         * @param {?} injector
         * @param {?=} projectableNodes
         * @param {?=} rootSelectorOrNode
         * @return {?}
         */

    }, {
        key: 'create',
        value: function create(injector, projectableNodes, rootSelectorOrNode) {}
    }]);

    return ComponentFactory;
}();

/**
 * @param {?} component
 * @return {?}
 */


function noComponentFactoryError(component) {
    var /** @type {?} */error = Error('No component factory found for ' + stringify(component) + '. Did you add it to @NgModule.entryComponents?');
    error[ERROR_COMPONENT] = component;
    return error;
}
var /** @type {?} */ERROR_COMPONENT = 'ngComponent';

var _NullComponentFactoryResolver = function () {
    function _NullComponentFactoryResolver() {
        _classCallCheck(this, _NullComponentFactoryResolver);
    }

    _createClass(_NullComponentFactoryResolver, [{
        key: 'resolveComponentFactory',

        /**
         * @param {?} component
         * @return {?}
         */
        value: function resolveComponentFactory(component) {
            throw noComponentFactoryError(component);
        }
    }]);

    return _NullComponentFactoryResolver;
}();
/**
 * \@stable
 * @abstract
 */


var ComponentFactoryResolver = function () {
    function ComponentFactoryResolver() {
        _classCallCheck(this, ComponentFactoryResolver);
    }

    _createClass(ComponentFactoryResolver, [{
        key: 'resolveComponentFactory',

        /**
         * @abstract
         * @param {?} component
         * @return {?}
         */
        value: function resolveComponentFactory(component) {}
    }]);

    return ComponentFactoryResolver;
}();

ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();

var CodegenComponentFactoryResolver = function () {
    /**
     * @param {?} factories
     * @param {?} _parent
     */
    function CodegenComponentFactoryResolver(factories, _parent) {
        _classCallCheck(this, CodegenComponentFactoryResolver);

        this._parent = _parent;
        this._factories = new Map();
        for (var i = 0; i < factories.length; i++) {
            var factory = factories[i];
            this._factories.set(factory.componentType, factory);
        }
    }
    /**
     * @param {?} component
     * @return {?}
     */


    _createClass(CodegenComponentFactoryResolver, [{
        key: 'resolveComponentFactory',
        value: function resolveComponentFactory(component) {
            var /** @type {?} */result = this._factories.get(component);
            if (!result) {
                result = this._parent.resolveComponentFactory(component);
            }
            return result;
        }
    }]);

    return CodegenComponentFactoryResolver;
}();

var /** @type {?} */trace = void 0;
var /** @type {?} */events = void 0;
/**
 * @return {?}
 */
function detectWTF() {
    var /** @type {?} */wtf = global$1[/** TODO #9100 */'wtf'];
    if (wtf) {
        trace = wtf['trace'];
        if (trace) {
            events = trace['events'];
            return true;
        }
    }
    return false;
}
/**
 * @param {?} signature
 * @param {?=} flags
 * @return {?}
 */
function createScope(signature) {
    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    return events.createScope(signature, flags);
}
/**
 * @param {?} scope
 * @param {?=} returnValue
 * @return {?}
 */
function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
}
/**
 * @param {?} rangeType
 * @param {?} action
 * @return {?}
 */
function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
}
/**
 * @param {?} range
 * @return {?}
 */
function endTimeRange(range) {
    trace.endTimeRange(range);
}

/**
 * True if WTF is enabled.
 */
var /** @type {?} */wtfEnabled = detectWTF();
/**
 * @param {?=} arg0
 * @param {?=} arg1
 * @return {?}
 */
function noopScope(arg0, arg1) {
    return null;
}
/**
 * Create trace scope.
 *
 * Scopes must be strictly nested and are analogous to stack frames, but
 * do not have to follow the stack frames. Instead it is recommended that they follow logical
 * nesting. You may want to use
 * [Event
 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
 * as they are defined in WTF.
 *
 * Used to mark scope entry. The return value is used to leave the scope.
 *
 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
 *
 *     someMethod() {
 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
 *        // DO SOME WORK HERE
 *        return wtfLeave(s, 123); // Return value 123
 *     }
 *
 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
 * negatively impact the performance of your application. For this reason we recommend that
 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
 * exception, will produce incorrect trace, but presence of exception signifies logic error which
 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
 * an exception is expected during normal execution while profiling.
 *
 * @experimental
 */
var /** @type {?} */wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) {
    return noopScope;
};
/**
 * Used to mark end of Scope.
 *
 * - `scope` to end.
 * - `returnValue` (optional) to be passed to the WTF.
 *
 * Returns the `returnValue for easy chaining.
 * @experimental
 */
var /** @type {?} */wtfLeave = wtfEnabled ? leave : function (s, r) {
    return r;
};
/**
 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
 * enabled.
 *
 *     someMethod() {
 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
 *        var future = new Future.delay(5).then((_) {
 *          wtfEndTimeRange(s);
 *        });
 *     }
 * @experimental
 */
var /** @type {?} */wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) {
    return null;
};
/**
 * Ends a async time range operation.
 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
 * enabled.
 * @experimental
 */
var /** @type {?} */wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) {
    return null;
};

/**
 * Use by directives and components to emit custom Events.
 *
 * ### Examples
 *
 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
 * title gets clicked:
 *
 * ```
 * \@Component({
 *   selector: 'zippy',
 *   template: `
 *   <div class="zippy">
 *     <div (click)="toggle()">Toggle</div>
 *     <div [hidden]="!visible">
 *       <ng-content></ng-content>
 *     </div>
 *  </div>`})
 * export class Zippy {
 *   visible: boolean = true;
 *   \@Output() open: EventEmitter<any> = new EventEmitter();
 *   \@Output() close: EventEmitter<any> = new EventEmitter();
 *
 *   toggle() {
 *     this.visible = !this.visible;
 *     if (this.visible) {
 *       this.open.emit(null);
 *     } else {
 *       this.close.emit(null);
 *     }
 *   }
 * }
 * ```
 *
 * The events payload can be accessed by the parameter `$event` on the components output event
 * handler:
 *
 * ```
 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
 * ```
 *
 * Uses Rx.Observable but provides an adapter to make it work as specified here:
 * https://github.com/jhusain/observable-spec
 *
 * Once a reference implementation of the spec is available, switch to it.
 * \@stable
 */

var EventEmitter = function (_Subject) {
    _inherits(EventEmitter, _Subject);

    /**
     * Creates an instance of [EventEmitter], which depending on [isAsync],
     * delivers events synchronously or asynchronously.
     * @param {?=} isAsync
     */
    function EventEmitter() {
        var isAsync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        _classCallCheck(this, EventEmitter);

        var _this6 = _possibleConstructorReturn(this, (EventEmitter.__proto__ || Object.getPrototypeOf(EventEmitter)).call(this));

        _this6.__isAsync = isAsync;
        return _this6;
    }
    /**
     * @param {?=} value
     * @return {?}
     */


    _createClass(EventEmitter, [{
        key: 'emit',
        value: function emit(value) {
            _get(EventEmitter.prototype.__proto__ || Object.getPrototypeOf(EventEmitter.prototype), 'next', this).call(this, value);
        }
        /**
         * @param {?=} generatorOrNext
         * @param {?=} error
         * @param {?=} complete
         * @return {?}
         */

    }, {
        key: 'subscribe',
        value: function subscribe(generatorOrNext, error, complete) {
            var /** @type {?} */schedulerFn = void 0;
            var /** @type {?} */errorFn = function errorFn(err) {
                return null;
            };
            var /** @type {?} */completeFn = function completeFn() {
                return null;
            };
            if (generatorOrNext && (typeof generatorOrNext === 'undefined' ? 'undefined' : _typeof(generatorOrNext)) === 'object') {
                schedulerFn = this.__isAsync ? function (value) {
                    setTimeout(function () {
                        return generatorOrNext.next(value);
                    });
                } : function (value) {
                    generatorOrNext.next(value);
                };
                if (generatorOrNext.error) {
                    errorFn = this.__isAsync ? function (err) {
                        setTimeout(function () {
                            return generatorOrNext.error(err);
                        });
                    } : function (err) {
                        generatorOrNext.error(err);
                    };
                }
                if (generatorOrNext.complete) {
                    completeFn = this.__isAsync ? function () {
                        setTimeout(function () {
                            return generatorOrNext.complete();
                        });
                    } : function () {
                        generatorOrNext.complete();
                    };
                }
            } else {
                schedulerFn = this.__isAsync ? function (value) {
                    setTimeout(function () {
                        return generatorOrNext(value);
                    });
                } : function (value) {
                    generatorOrNext(value);
                };
                if (error) {
                    errorFn = this.__isAsync ? function (err) {
                        setTimeout(function () {
                            return error(err);
                        });
                    } : function (err) {
                        error(err);
                    };
                }
                if (complete) {
                    completeFn = this.__isAsync ? function () {
                        setTimeout(function () {
                            return complete();
                        });
                    } : function () {
                        complete();
                    };
                }
            }
            return _get(EventEmitter.prototype.__proto__ || Object.getPrototypeOf(EventEmitter.prototype), 'subscribe', this).call(this, schedulerFn, errorFn, completeFn);
        }
    }]);

    return EventEmitter;
}(__WEBPACK_IMPORTED_MODULE_4_rxjs_Subject__["Subject"]);

/**
 * An injectable service for executing work inside or outside of the Angular zone.
 *
 * The most common use of this service is to optimize performance when starting a work consisting of
 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
 * Angular. Such tasks can be kicked off via {\@link runOutsideAngular} and if needed, these tasks
 * can reenter the Angular zone via {\@link run}.
 *
 * <!-- TODO: add/fix links to:
 *   - docs explaining zones and the use of zones in Angular and change-detection
 *   - link to runOutsideAngular/run (throughout this file!)
 *   -->
 *
 * ### Example
 *
 * ```
 * import {Component, NgZone} from '\@angular/core';
 * import {NgIf} from '\@angular/common';
 *
 * \@Component({
 *   selector: 'ng-zone-demo'.
 *   template: `
 *     <h2>Demo: NgZone</h2>
 *
 *     <p>Progress: {{progress}}%</p>
 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
 *
 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
 *   `,
 * })
 * export class NgZoneDemo {
 *   progress: number = 0;
 *   label: string;
 *
 *   constructor(private _ngZone: NgZone) {}
 *
 *   // Loop inside the Angular zone
 *   // so the UI DOES refresh after each setTimeout cycle
 *   processWithinAngularZone() {
 *     this.label = 'inside';
 *     this.progress = 0;
 *     this._increaseProgress(() => console.log('Inside Done!'));
 *   }
 *
 *   // Loop outside of the Angular zone
 *   // so the UI DOES NOT refresh after each setTimeout cycle
 *   processOutsideOfAngularZone() {
 *     this.label = 'outside';
 *     this.progress = 0;
 *     this._ngZone.runOutsideAngular(() => {
 *       this._increaseProgress(() => {
 *       // reenter the Angular zone and display done
 *       this._ngZone.run(() => {console.log('Outside Done!') });
 *     }}));
 *   }
 *
 *   _increaseProgress(doneCallback: () => void) {
 *     this.progress += 1;
 *     console.log(`Current progress: ${this.progress}%`);
 *
 *     if (this.progress < 100) {
 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
 *     } else {
 *       doneCallback();
 *     }
 *   }
 * }
 * ```
 *
 * \@experimental
 */


var NgZone = function () {
    /**
     * @param {?} __0
     */
    function NgZone(_ref2) {
        var _ref2$enableLongStack = _ref2.enableLongStackTrace,
            enableLongStackTrace = _ref2$enableLongStack === undefined ? false : _ref2$enableLongStack;

        _classCallCheck(this, NgZone);

        this._hasPendingMicrotasks = false;
        this._hasPendingMacrotasks = false;
        this._isStable = true;
        this._nesting = 0;
        this._onUnstable = new EventEmitter(false);
        this._onMicrotaskEmpty = new EventEmitter(false);
        this._onStable = new EventEmitter(false);
        this._onErrorEvents = new EventEmitter(false);
        if (typeof Zone == 'undefined') {
            throw new Error('Angular requires Zone.js prolyfill.');
        }
        Zone.assertZonePatched();
        this.outer = this.inner = Zone.current;
        if (Zone['wtfZoneSpec']) {
            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
        }
        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
        }
        this.forkInnerZoneWithAngularBehavior();
    }
    /**
     * @return {?}
     */


    _createClass(NgZone, [{
        key: 'run',

        /**
         * Executes the `fn` function synchronously within the Angular zone and returns value returned by
         * the function.
         *
         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
         * outside of the Angular zone (typically started via {\@link runOutsideAngular}).
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * within the Angular zone.
         *
         * If a synchronous error happens it will be rethrown and not reported via `onError`.
         * @param {?} fn
         * @return {?}
         */
        value: function run(fn) {
            return this.inner.run(fn);
        }
        /**
         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
         * rethrown.
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'runGuarded',
        value: function runGuarded(fn) {
            return this.inner.runGuarded(fn);
        }
        /**
         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
         * the function.
         *
         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
         * doesn't trigger Angular change-detection or is subject to Angular's error handling.
         *
         * Any future tasks or microtasks scheduled from within this function will continue executing from
         * outside of the Angular zone.
         *
         * Use {\@link run} to reenter the Angular zone and do work that updates the application model.
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'runOutsideAngular',
        value: function runOutsideAngular(fn) {
            return this.outer.run(fn);
        }
        /**
         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
         * @return {?}
         */

    }, {
        key: 'checkStable',

        /**
         * @return {?}
         */
        value: function checkStable() {
            var _this7 = this;

            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
                try {
                    this._nesting++;
                    this._onMicrotaskEmpty.emit(null);
                } finally {
                    this._nesting--;
                    if (!this._hasPendingMicrotasks) {
                        try {
                            this.runOutsideAngular(function () {
                                return _this7._onStable.emit(null);
                            });
                        } finally {
                            this._isStable = true;
                        }
                    }
                }
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'forkInnerZoneWithAngularBehavior',
        value: function forkInnerZoneWithAngularBehavior() {
            var _this8 = this;

            this.inner = this.inner.fork({
                name: 'angular',
                properties: /** @type {?} */{ 'isAngularZone': true },
                onInvokeTask: function onInvokeTask(delegate, current, target, task, applyThis, applyArgs) {
                    try {
                        _this8.onEnter();
                        return delegate.invokeTask(target, task, applyThis, applyArgs);
                    } finally {
                        _this8.onLeave();
                    }
                },
                onInvoke: function onInvoke(delegate, current, target, callback, applyThis, applyArgs, source) {
                    try {
                        _this8.onEnter();
                        return delegate.invoke(target, callback, applyThis, applyArgs, source);
                    } finally {
                        _this8.onLeave();
                    }
                },
                onHasTask: function onHasTask(delegate, current, target, hasTaskState) {
                    delegate.hasTask(target, hasTaskState);
                    if (current === target) {
                        // We are only interested in hasTask events which originate from our zone
                        // (A child hasTask event is not interesting to us)
                        if (hasTaskState.change == 'microTask') {
                            _this8.setHasMicrotask(hasTaskState.microTask);
                        } else if (hasTaskState.change == 'macroTask') {
                            _this8.setHasMacrotask(hasTaskState.macroTask);
                        }
                    }
                },
                onHandleError: function onHandleError(delegate, current, target, error) {
                    delegate.handleError(target, error);
                    _this8.triggerError(error);
                    return false;
                }
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: 'onEnter',
        value: function onEnter() {
            this._nesting++;
            if (this._isStable) {
                this._isStable = false;
                this._onUnstable.emit(null);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'onLeave',
        value: function onLeave() {
            this._nesting--;
            this.checkStable();
        }
        /**
         * @param {?} hasMicrotasks
         * @return {?}
         */

    }, {
        key: 'setHasMicrotask',
        value: function setHasMicrotask(hasMicrotasks) {
            this._hasPendingMicrotasks = hasMicrotasks;
            this.checkStable();
        }
        /**
         * @param {?} hasMacrotasks
         * @return {?}
         */

    }, {
        key: 'setHasMacrotask',
        value: function setHasMacrotask(hasMacrotasks) {
            this._hasPendingMacrotasks = hasMacrotasks;
        }
        /**
         * @param {?} error
         * @return {?}
         */

    }, {
        key: 'triggerError',
        value: function triggerError(error) {
            this._onErrorEvents.emit(error);
        }
    }, {
        key: 'onUnstable',
        get: function get() {
            return this._onUnstable;
        }
        /**
         * Notifies when there is no more microtasks enqueue in the current VM Turn.
         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
         * For this reason this event can fire multiple times per VM Turn.
         * @return {?}
         */

    }, {
        key: 'onMicrotaskEmpty',
        get: function get() {
            return this._onMicrotaskEmpty;
        }
        /**
         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
         * implies we are about to relinquish VM turn.
         * This event gets called just once.
         * @return {?}
         */

    }, {
        key: 'onStable',
        get: function get() {
            return this._onStable;
        }
        /**
         * Notify that an error has been delivered.
         * @return {?}
         */

    }, {
        key: 'onError',
        get: function get() {
            return this._onErrorEvents;
        }
        /**
         * Whether there are no outstanding microtasks or macrotasks.
         * @return {?}
         */

    }, {
        key: 'isStable',
        get: function get() {
            return this._isStable;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'hasPendingMicrotasks',
        get: function get() {
            return this._hasPendingMicrotasks;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'hasPendingMacrotasks',
        get: function get() {
            return this._hasPendingMacrotasks;
        }
    }], [{
        key: 'isInAngularZone',
        value: function isInAngularZone() {
            return Zone.current.get('isAngularZone') === true;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'assertInAngularZone',
        value: function assertInAngularZone() {
            if (!NgZone.isInAngularZone()) {
                throw new Error('Expected to be in Angular Zone, but it is not!');
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'assertNotInAngularZone',
        value: function assertNotInAngularZone() {
            if (NgZone.isInAngularZone()) {
                throw new Error('Expected to not be in Angular Zone, but it is!');
            }
        }
    }]);

    return NgZone;
}();

/**
 * The Testability service provides testing hooks that can be accessed from
 * the browser and by services such as Protractor. Each bootstrapped Angular
 * application on the page will have an instance of Testability.
 * \@experimental
 */


var Testability = function () {
    /**
     * @param {?} _ngZone
     */
    function Testability(_ngZone) {
        _classCallCheck(this, Testability);

        this._ngZone = _ngZone;
        /** @internal */
        this._pendingCount = 0;
        /** @internal */
        this._isZoneStable = true;
        /**
         * Whether any work was done since the last 'whenStable' callback. This is
         * useful to detect if this could have potentially destabilized another
         * component while it is stabilizing.
         * @internal
         */
        this._didWork = false;
        /** @internal */
        this._callbacks = [];
        this._watchAngularEvents();
    }
    /**
     * \@internal
     * @return {?}
     */


    _createClass(Testability, [{
        key: '_watchAngularEvents',
        value: function _watchAngularEvents() {
            var _this9 = this;

            this._ngZone.onUnstable.subscribe({
                next: function next() {
                    _this9._didWork = true;
                    _this9._isZoneStable = false;
                }
            });
            this._ngZone.runOutsideAngular(function () {
                _this9._ngZone.onStable.subscribe({
                    next: function next() {
                        NgZone.assertNotInAngularZone();
                        scheduleMicroTask(function () {
                            _this9._isZoneStable = true;
                            _this9._runCallbacksIfReady();
                        });
                    }
                });
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: 'increasePendingRequestCount',
        value: function increasePendingRequestCount() {
            this._pendingCount += 1;
            this._didWork = true;
            return this._pendingCount;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'decreasePendingRequestCount',
        value: function decreasePendingRequestCount() {
            this._pendingCount -= 1;
            if (this._pendingCount < 0) {
                throw new Error('pending async requests below zero');
            }
            this._runCallbacksIfReady();
            return this._pendingCount;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isStable',
        value: function isStable() {
            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
        }
        /**
         * \@internal
         * @return {?}
         */

    }, {
        key: '_runCallbacksIfReady',
        value: function _runCallbacksIfReady() {
            var _this10 = this;

            if (this.isStable()) {
                // Schedules the call backs in a new frame so that it is always async.
                scheduleMicroTask(function () {
                    while (_this10._callbacks.length !== 0) {
                        _this10._callbacks.pop()(_this10._didWork);
                    }
                    _this10._didWork = false;
                });
            } else {
                // Not Ready
                this._didWork = true;
            }
        }
        /**
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'whenStable',
        value: function whenStable(callback) {
            this._callbacks.push(callback);
            this._runCallbacksIfReady();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'getPendingRequestCount',
        value: function getPendingRequestCount() {
            return this._pendingCount;
        }
        /**
         * @deprecated use findProviders
         * @param {?} using
         * @param {?} provider
         * @param {?} exactMatch
         * @return {?}
         */

    }, {
        key: 'findBindings',
        value: function findBindings(using, provider, exactMatch) {
            // TODO(juliemr): implement.
            return [];
        }
        /**
         * @param {?} using
         * @param {?} provider
         * @param {?} exactMatch
         * @return {?}
         */

    }, {
        key: 'findProviders',
        value: function findProviders(using, provider, exactMatch) {
            // TODO(juliemr): implement.
            return [];
        }
    }]);

    return Testability;
}();

Testability.decorators = [{ type: Injectable }];
/** @nocollapse */
Testability.ctorParameters = function () {
    return [{ type: NgZone }];
};
/**
 * A global registry of {\@link Testability} instances for specific elements.
 * \@experimental
 */

var TestabilityRegistry = function () {
    function TestabilityRegistry() {
        _classCallCheck(this, TestabilityRegistry);

        /** @internal */
        this._applications = new Map();
        _testabilityGetter.addToWindow(this);
    }
    /**
     * @param {?} token
     * @param {?} testability
     * @return {?}
     */


    _createClass(TestabilityRegistry, [{
        key: 'registerApplication',
        value: function registerApplication(token, testability) {
            this._applications.set(token, testability);
        }
        /**
         * @param {?} elem
         * @return {?}
         */

    }, {
        key: 'getTestability',
        value: function getTestability(elem) {
            return this._applications.get(elem);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'getAllTestabilities',
        value: function getAllTestabilities() {
            return Array.from(this._applications.values());
        }
        /**
         * @return {?}
         */

    }, {
        key: 'getAllRootElements',
        value: function getAllRootElements() {
            return Array.from(this._applications.keys());
        }
        /**
         * @param {?} elem
         * @param {?=} findInAncestors
         * @return {?}
         */

    }, {
        key: 'findTestabilityInTree',
        value: function findTestabilityInTree(elem) {
            var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
        }
    }]);

    return TestabilityRegistry;
}();

TestabilityRegistry.decorators = [{ type: Injectable }];
/** @nocollapse */
TestabilityRegistry.ctorParameters = function () {
    return [];
};

var _NoopGetTestability = function () {
    function _NoopGetTestability() {
        _classCallCheck(this, _NoopGetTestability);
    }

    _createClass(_NoopGetTestability, [{
        key: 'addToWindow',

        /**
         * @param {?} registry
         * @return {?}
         */
        value: function addToWindow(registry) {}
        /**
         * @param {?} registry
         * @param {?} elem
         * @param {?} findInAncestors
         * @return {?}
         */

    }, {
        key: 'findTestabilityInTree',
        value: function findTestabilityInTree(registry, elem, findInAncestors) {
            return null;
        }
    }]);

    return _NoopGetTestability;
}();
/**
 * Set the {\@link GetTestability} implementation used by the Angular testing framework.
 * \@experimental
 * @param {?} getter
 * @return {?}
 */


function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
}
var /** @type {?} */_testabilityGetter = new _NoopGetTestability();

var /** @type {?} */_devMode = true;
var /** @type {?} */_runModeLocked = false;
var /** @type {?} */_platform = void 0;
var /** @type {?} */ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
/**
 * Disable Angular's development mode, which turns off assertions and other
 * checks within the framework.
 *
 * One important assertion this disables verifies that a change detection pass
 * does not result in additional changes to any bindings (also known as
 * unidirectional data flow).
 *
 * \@stable
 * @return {?}
 */
function enableProdMode() {
    if (_runModeLocked) {
        throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
}
/**
 * Returns whether Angular is in development mode. After called once,
 * the value is locked and won't change any more.
 *
 * By default, this is true, unless a user calls `enableProdMode` before calling this.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */
function isDevMode() {
    _runModeLocked = true;
    return _devMode;
}
/**
 * A token for third-party components that can register themselves with NgProbe.
 *
 * \@experimental
 */

var NgProbeToken =
/**
 * @param {?} name
 * @param {?} token
 */
function NgProbeToken(name, token) {
    _classCallCheck(this, NgProbeToken);

    this.name = name;
    this.token = token;
};
/**
 * Creates a platform.
 * Platforms have to be eagerly created via this function.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} injector
 * @return {?}
 */


function createPlatform(injector) {
    if (_platform && !_platform.destroyed && !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    _platform = injector.get(PlatformRef);
    var /** @type {?} */inits = injector.get(PLATFORM_INITIALIZER, null);
    if (inits) inits.forEach(function (init) {
        return init();
    });
    return _platform;
}
/**
 * Creates a factory for a platform
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} parentPlatformFactory
 * @param {?} name
 * @param {?=} providers
 * @return {?}
 */
function createPlatformFactory(parentPlatformFactory, name) {
    var providers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    var /** @type {?} */marker = new InjectionToken('Platform: ' + name);
    return function () {
        var extraProviders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var /** @type {?} */platform = getPlatform();
        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
            if (parentPlatformFactory) {
                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
            } else {
                createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
            }
        }
        return assertPlatform(marker);
    };
}
/**
 * Checks that there currently is a platform which contains the given token as a provider.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} requiredToken
 * @return {?}
 */
function assertPlatform(requiredToken) {
    var /** @type {?} */platform = getPlatform();
    if (!platform) {
        throw new Error('No platform exists!');
    }
    if (!platform.injector.get(requiredToken, null)) {
        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
}
/**
 * Destroy the existing platform.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */
function destroyPlatform() {
    if (_platform && !_platform.destroyed) {
        _platform.destroy();
    }
}
/**
 * Returns the current platform.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */
function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
}
/**
 * The Angular platform is the entry point for Angular on a web page. Each page
 * has exactly one platform, and services (such as reflection) which are common
 * to every Angular application running on the page are bound in its scope.
 *
 * A page's platform is initialized implicitly when {\@link bootstrap}() is called, or
 * explicitly by calling {\@link createPlatform}().
 *
 * \@stable
 * @abstract
 */

var PlatformRef = function () {
    function PlatformRef() {
        _classCallCheck(this, PlatformRef);
    }

    _createClass(PlatformRef, [{
        key: 'bootstrapModuleFactory',

        /**
         * Creates an instance of an `\@NgModule` for the given platform
         * for offline compilation.
         *
         * ## Simple Example
         *
         * ```typescript
         * my_module.ts:
         *
         * \@NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * main.ts:
         * import {MyModuleNgFactory} from './my_module.ngfactory';
         * import {platformBrowser} from '\@angular/platform-browser';
         *
         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
         * ```
         *
         * \@experimental APIs related to application bootstrap are currently under review.
         * @abstract
         * @param {?} moduleFactory
         * @return {?}
         */
        value: function bootstrapModuleFactory(moduleFactory) {}
        /**
         * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
         *
         * ## Simple Example
         *
         * ```typescript
         * \@NgModule({
         *   imports: [BrowserModule]
         * })
         * class MyModule {}
         *
         * let moduleRef = platformBrowser().bootstrapModule(MyModule);
         * ```
         * \@stable
         * @abstract
         * @param {?} moduleType
         * @param {?=} compilerOptions
         * @return {?}
         */

    }, {
        key: 'bootstrapModule',
        value: function bootstrapModule(moduleType, compilerOptions) {}
        /**
         * Register a listener to be called when the platform is disposed.
         * @abstract
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(callback) {}
        /**
         * Retrieve the platform {\@link Injector}, which is the parent injector for
         * every Angular application on the page and provides singleton providers.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'injector',
        value: function injector() {}
        /**
         * Destroy the Angular platform and all Angular applications on the page.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'destroy',
        value: function destroy() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'destroyed',
        value: function destroyed() {}
    }]);

    return PlatformRef;
}();
/**
 * @param {?} errorHandler
 * @param {?} callback
 * @return {?}
 */


function _callAndReportToErrorHandler(errorHandler, callback) {
    try {
        var /** @type {?} */result = callback();
        if (isPromise(result)) {
            return result.catch(function (e) {
                errorHandler.handleError(e);
                // rethrow as the exception handler might not do it
                throw e;
            });
        }
        return result;
    } catch (e) {
        errorHandler.handleError(e);
        // rethrow as the exception handler might not do it
        throw e;
    }
}
/**
 * workaround https://github.com/angular/tsickle/issues/350
 * @suppress {checkTypes}
 */

var PlatformRef_ = function (_PlatformRef) {
    _inherits(PlatformRef_, _PlatformRef);

    /**
     * @param {?} _injector
     */
    function PlatformRef_(_injector) {
        _classCallCheck(this, PlatformRef_);

        var _this11 = _possibleConstructorReturn(this, (PlatformRef_.__proto__ || Object.getPrototypeOf(PlatformRef_)).call(this));

        _this11._injector = _injector;
        _this11._modules = [];
        _this11._destroyListeners = [];
        _this11._destroyed = false;
        return _this11;
    }
    /**
     * @param {?} callback
     * @return {?}
     */


    _createClass(PlatformRef_, [{
        key: 'onDestroy',
        value: function onDestroy(callback) {
            this._destroyListeners.push(callback);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'destroy',

        /**
         * @return {?}
         */
        value: function destroy() {
            if (this._destroyed) {
                throw new Error('The platform has already been destroyed!');
            }
            this._modules.slice().forEach(function (module) {
                return module.destroy();
            });
            this._destroyListeners.forEach(function (listener) {
                return listener();
            });
            this._destroyed = true;
        }
        /**
         * @param {?} moduleFactory
         * @return {?}
         */

    }, {
        key: 'bootstrapModuleFactory',
        value: function bootstrapModuleFactory(moduleFactory) {
            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
        }
        /**
         * @param {?} moduleFactory
         * @param {?} ngZone
         * @return {?}
         */

    }, {
        key: '_bootstrapModuleFactoryWithZone',
        value: function _bootstrapModuleFactoryWithZone(moduleFactory, ngZone) {
            var _this12 = this;

            // Note: We need to create the NgZone _before_ we instantiate the module,
            // as instantiating the module creates some providers eagerly.
            // So we create a mini parent injector that just contains the new NgZone and
            // pass that as parent to the NgModuleFactory.
            if (!ngZone) ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
            // Attention: Don't use ApplicationRef.run here,
            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
            return ngZone.run(function () {
                var /** @type {?} */ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this12.injector);
                var /** @type {?} */moduleRef = moduleFactory.create(ngZoneInjector);
                var /** @type {?} */exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
                if (!exceptionHandler) {
                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
                }
                moduleRef.onDestroy(function () {
                    return ListWrapper.remove(_this12._modules, moduleRef);
                });
                ngZone.onError.subscribe({ next: function next(error) {
                        exceptionHandler.handleError(error);
                    } });
                return _callAndReportToErrorHandler(exceptionHandler, function () {
                    var /** @type {?} */initStatus = moduleRef.injector.get(ApplicationInitStatus);
                    return initStatus.donePromise.then(function () {
                        _this12._moduleDoBootstrap(moduleRef);
                        return moduleRef;
                    });
                });
            });
        }
        /**
         * @param {?} moduleType
         * @param {?=} compilerOptions
         * @return {?}
         */

    }, {
        key: 'bootstrapModule',
        value: function bootstrapModule(moduleType) {
            var compilerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
        }
        /**
         * @param {?} moduleType
         * @param {?=} compilerOptions
         * @param {?=} ngZone
         * @return {?}
         */

    }, {
        key: '_bootstrapModuleWithZone',
        value: function _bootstrapModuleWithZone(moduleType) {
            var _this13 = this;

            var compilerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var ngZone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var /** @type {?} */compilerFactory = this.injector.get(CompilerFactory);
            var /** @type {?} */compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
            return compiler.compileModuleAsync(moduleType).then(function (moduleFactory) {
                return _this13._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
            });
        }
        /**
         * @param {?} moduleRef
         * @return {?}
         */

    }, {
        key: '_moduleDoBootstrap',
        value: function _moduleDoBootstrap(moduleRef) {
            var /** @type {?} */appRef = moduleRef.injector.get(ApplicationRef);
            if (moduleRef.bootstrapFactories.length > 0) {
                moduleRef.bootstrapFactories.forEach(function (compFactory) {
                    return appRef.bootstrap(compFactory);
                });
            } else if (moduleRef.instance.ngDoBootstrap) {
                moduleRef.instance.ngDoBootstrap(appRef);
            } else {
                throw new Error('The module ' + stringify(moduleRef.instance.constructor) + ' was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. ' + 'Please define one of these.');
            }
            this._modules.push(moduleRef);
        }
    }, {
        key: 'injector',
        get: function get() {
            return this._injector;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'destroyed',
        get: function get() {
            return this._destroyed;
        }
    }]);

    return PlatformRef_;
}(PlatformRef);

PlatformRef_.decorators = [{ type: Injectable }];
/** @nocollapse */
PlatformRef_.ctorParameters = function () {
    return [{ type: Injector }];
};
/**
 * A reference to an Angular application running on a page.
 *
 * For more about Angular applications, see the documentation for {\@link bootstrap}.
 *
 * \@stable
 * @abstract
 */

var ApplicationRef = function () {
    function ApplicationRef() {
        _classCallCheck(this, ApplicationRef);
    }

    _createClass(ApplicationRef, [{
        key: 'bootstrap',

        /**
         * Bootstrap a new component at the root level of the application.
         *
         * ### Bootstrap process
         *
         * When bootstrapping a new root component into an application, Angular mounts the
         * specified application component onto DOM elements identified by the [componentType]'s
         * selector and kicks off automatic change detection to finish initializing the component.
         *
         * ### Example
         * {\@example core/ts/platform/platform.ts region='longform'}
         * @abstract
         * @param {?} componentFactory
         * @return {?}
         */
        value: function bootstrap(componentFactory) {}
        /**
         * Invoke this method to explicitly process change detection and its side-effects.
         *
         * In development mode, `tick()` also performs a second change detection cycle to ensure that no
         * further changes are detected. If additional changes are picked up during this second cycle,
         * bindings in the app have side-effects that cannot be resolved in a single change detection
         * pass.
         * In this case, Angular throws an error, since an Angular application can only have one change
         * detection pass during which all change detection must complete.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'tick',
        value: function tick() {}
        /**
         * Get a list of component types registered to this application.
         * This list is populated even before the component is created.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'componentTypes',
        value: function componentTypes() {}
        /**
         * Get a list of components registered to this application.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'components',
        value: function components() {}
        /**
         * Attaches a view so that it will be dirty checked.
         * The view will be automatically detached when it is destroyed.
         * This will throw if the view is already attached to a ViewContainer.
         * @abstract
         * @param {?} view
         * @return {?}
         */

    }, {
        key: 'attachView',
        value: function attachView(view) {}
        /**
         * Detaches a view from dirty checking again.
         * @abstract
         * @param {?} view
         * @return {?}
         */

    }, {
        key: 'detachView',
        value: function detachView(view) {}
        /**
         * Returns the number of attached views.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'viewCount',
        value: function viewCount() {}
        /**
         * Returns an Observable that indicates when the application is stable or unstable.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'isStable',
        value: function isStable() {}
    }]);

    return ApplicationRef;
}();
/**
 * workaround https://github.com/angular/tsickle/issues/350
 * @suppress {checkTypes}
 */


var ApplicationRef_ = function (_ApplicationRef) {
    _inherits(ApplicationRef_, _ApplicationRef);

    /**
     * @param {?} _zone
     * @param {?} _console
     * @param {?} _injector
     * @param {?} _exceptionHandler
     * @param {?} _componentFactoryResolver
     * @param {?} _initStatus
     */
    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
        _classCallCheck(this, ApplicationRef_);

        var _this14 = _possibleConstructorReturn(this, (ApplicationRef_.__proto__ || Object.getPrototypeOf(ApplicationRef_)).call(this));

        _this14._zone = _zone;
        _this14._console = _console;
        _this14._injector = _injector;
        _this14._exceptionHandler = _exceptionHandler;
        _this14._componentFactoryResolver = _componentFactoryResolver;
        _this14._initStatus = _initStatus;
        _this14._bootstrapListeners = [];
        _this14._rootComponents = [];
        _this14._rootComponentTypes = [];
        _this14._views = [];
        _this14._runningTick = false;
        _this14._enforceNoNewChanges = false;
        _this14._stable = true;
        _this14._enforceNoNewChanges = isDevMode();
        _this14._zone.onMicrotaskEmpty.subscribe({ next: function next() {
                _this14._zone.run(function () {
                    _this14.tick();
                });
            } });
        var isCurrentlyStable = new __WEBPACK_IMPORTED_MODULE_0_rxjs_Observable__["Observable"](function (observer) {
            _this14._stable = _this14._zone.isStable && !_this14._zone.hasPendingMacrotasks && !_this14._zone.hasPendingMicrotasks;
            _this14._zone.runOutsideAngular(function () {
                observer.next(_this14._stable);
                observer.complete();
            });
        });
        var isStable = new __WEBPACK_IMPORTED_MODULE_0_rxjs_Observable__["Observable"](function (observer) {
            var stableSub = _this14._zone.onStable.subscribe(function () {
                NgZone.assertNotInAngularZone();
                // Check whether there are no pending macro/micro tasks in the next tick
                // to allow for NgZone to update the state.
                scheduleMicroTask(function () {
                    if (!_this14._stable && !_this14._zone.hasPendingMacrotasks && !_this14._zone.hasPendingMicrotasks) {
                        _this14._stable = true;
                        observer.next(true);
                    }
                });
            });
            var unstableSub = _this14._zone.onUnstable.subscribe(function () {
                NgZone.assertInAngularZone();
                if (_this14._stable) {
                    _this14._stable = false;
                    _this14._zone.runOutsideAngular(function () {
                        observer.next(false);
                    });
                }
            });
            return function () {
                stableSub.unsubscribe();
                unstableSub.unsubscribe();
            };
        });
        _this14._isStable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_merge__["merge"])(isCurrentlyStable, __WEBPACK_IMPORTED_MODULE_2_rxjs_operator_share__["share"].call(isStable));
        return _this14;
    }
    /**
     * @param {?} viewRef
     * @return {?}
     */


    _createClass(ApplicationRef_, [{
        key: 'attachView',
        value: function attachView(viewRef) {
            var /** @type {?} */view = viewRef;
            this._views.push(view);
            view.attachToAppRef(this);
        }
        /**
         * @param {?} viewRef
         * @return {?}
         */

    }, {
        key: 'detachView',
        value: function detachView(viewRef) {
            var /** @type {?} */view = viewRef;
            ListWrapper.remove(this._views, view);
            view.detachFromAppRef();
        }
        /**
         * @param {?} componentOrFactory
         * @return {?}
         */

    }, {
        key: 'bootstrap',
        value: function bootstrap(componentOrFactory) {
            var _this15 = this;

            if (!this._initStatus.done) {
                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
            }
            var /** @type {?} */componentFactory = void 0;
            if (componentOrFactory instanceof ComponentFactory) {
                componentFactory = componentOrFactory;
            } else {
                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
            }
            this._rootComponentTypes.push(componentFactory.componentType);
            var /** @type {?} */compRef = componentFactory.create(this._injector, [], componentFactory.selector);
            compRef.onDestroy(function () {
                _this15._unloadComponent(compRef);
            });
            var /** @type {?} */testability = compRef.injector.get(Testability, null);
            if (testability) {
                compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
            }
            this._loadComponent(compRef);
            if (isDevMode()) {
                this._console.log('Angular is running in the development mode. Call enableProdMode() to enable the production mode.');
            }
            return compRef;
        }
        /**
         * @param {?} componentRef
         * @return {?}
         */

    }, {
        key: '_loadComponent',
        value: function _loadComponent(componentRef) {
            this.attachView(componentRef.hostView);
            this.tick();
            this._rootComponents.push(componentRef);
            // Get the listeners lazily to prevent DI cycles.
            var /** @type {?} */listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
            listeners.forEach(function (listener) {
                return listener(componentRef);
            });
        }
        /**
         * @param {?} componentRef
         * @return {?}
         */

    }, {
        key: '_unloadComponent',
        value: function _unloadComponent(componentRef) {
            this.detachView(componentRef.hostView);
            ListWrapper.remove(this._rootComponents, componentRef);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'tick',
        value: function tick() {
            if (this._runningTick) {
                throw new Error('ApplicationRef.tick is called recursively');
            }
            var /** @type {?} */scope = ApplicationRef_._tickScope();
            try {
                this._runningTick = true;
                this._views.forEach(function (view) {
                    return view.detectChanges();
                });
                if (this._enforceNoNewChanges) {
                    this._views.forEach(function (view) {
                        return view.checkNoChanges();
                    });
                }
            } finally {
                this._runningTick = false;
                wtfLeave(scope);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'ngOnDestroy',
        value: function ngOnDestroy() {
            // TODO(alxhub): Dispose of the NgZone.
            this._views.slice().forEach(function (view) {
                return view.destroy();
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: 'viewCount',
        get: function get() {
            return this._views.length;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'componentTypes',
        get: function get() {
            return this._rootComponentTypes;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'components',
        get: function get() {
            return this._rootComponents;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isStable',
        get: function get() {
            return this._isStable;
        }
    }]);

    return ApplicationRef_;
}(ApplicationRef);
/** @internal */


ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
ApplicationRef_.decorators = [{ type: Injectable }];
/** @nocollapse */
ApplicationRef_.ctorParameters = function () {
    return [{ type: NgZone }, { type: Console }, { type: Injector }, { type: ErrorHandler }, { type: ComponentFactoryResolver }, { type: ApplicationInitStatus }];
};

/**
 * @deprecated Use `RendererTypeV2` (and `RendererV2`) instead.
 */

var RenderComponentType =
/**
 * @param {?} id
 * @param {?} templateUrl
 * @param {?} slotCount
 * @param {?} encapsulation
 * @param {?} styles
 * @param {?} animations
 */
function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
    _classCallCheck(this, RenderComponentType);

    this.id = id;
    this.templateUrl = templateUrl;
    this.slotCount = slotCount;
    this.encapsulation = encapsulation;
    this.styles = styles;
    this.animations = animations;
};
/**
 * @deprecated Debug info is handeled internally in the view engine now.
 * @abstract
 */


var RenderDebugInfo = function () {
    function RenderDebugInfo() {
        _classCallCheck(this, RenderDebugInfo);
    }

    _createClass(RenderDebugInfo, [{
        key: 'injector',

        /**
         * @abstract
         * @return {?}
         */
        value: function injector() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'component',
        value: function component() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'providerTokens',
        value: function providerTokens() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'references',
        value: function references() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'context',
        value: function context() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'source',
        value: function source() {}
    }]);

    return RenderDebugInfo;
}();
/**
 * @deprecated Use the `RendererV2` instead.
 * @abstract
 */


var RendererV1 = function () {
    function RendererV1() {
        _classCallCheck(this, RendererV1);
    }

    _createClass(RendererV1, [{
        key: 'selectRootElement',

        /**
         * @abstract
         * @param {?} selectorOrNode
         * @param {?=} debugInfo
         * @return {?}
         */
        value: function selectRootElement(selectorOrNode, debugInfo) {}
        /**
         * @abstract
         * @param {?} parentElement
         * @param {?} name
         * @param {?=} debugInfo
         * @return {?}
         */

    }, {
        key: 'createElement',
        value: function createElement(parentElement, name, debugInfo) {}
        /**
         * @abstract
         * @param {?} hostElement
         * @return {?}
         */

    }, {
        key: 'createViewRoot',
        value: function createViewRoot(hostElement) {}
        /**
         * @abstract
         * @param {?} parentElement
         * @param {?=} debugInfo
         * @return {?}
         */

    }, {
        key: 'createTemplateAnchor',
        value: function createTemplateAnchor(parentElement, debugInfo) {}
        /**
         * @abstract
         * @param {?} parentElement
         * @param {?} value
         * @param {?=} debugInfo
         * @return {?}
         */

    }, {
        key: 'createText',
        value: function createText(parentElement, value, debugInfo) {}
        /**
         * @abstract
         * @param {?} parentElement
         * @param {?} nodes
         * @return {?}
         */

    }, {
        key: 'projectNodes',
        value: function projectNodes(parentElement, nodes) {}
        /**
         * @abstract
         * @param {?} node
         * @param {?} viewRootNodes
         * @return {?}
         */

    }, {
        key: 'attachViewAfter',
        value: function attachViewAfter(node, viewRootNodes) {}
        /**
         * @abstract
         * @param {?} viewRootNodes
         * @return {?}
         */

    }, {
        key: 'detachView',
        value: function detachView(viewRootNodes) {}
        /**
         * @abstract
         * @param {?} hostElement
         * @param {?} viewAllNodes
         * @return {?}
         */

    }, {
        key: 'destroyView',
        value: function destroyView(hostElement, viewAllNodes) {}
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} name
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listen',
        value: function listen(renderElement, name, callback) {}
        /**
         * @abstract
         * @param {?} target
         * @param {?} name
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listenGlobal',
        value: function listenGlobal(target, name, callback) {}
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} propertyName
         * @param {?} propertyValue
         * @return {?}
         */

    }, {
        key: 'setElementProperty',
        value: function setElementProperty(renderElement, propertyName, propertyValue) {}
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} attributeName
         * @param {?} attributeValue
         * @return {?}
         */

    }, {
        key: 'setElementAttribute',
        value: function setElementAttribute(renderElement, attributeName, attributeValue) {}
        /**
         * Used only in debug mode to serialize property changes to dom nodes as attributes.
         * @abstract
         * @param {?} renderElement
         * @param {?} propertyName
         * @param {?} propertyValue
         * @return {?}
         */

    }, {
        key: 'setBindingDebugInfo',
        value: function setBindingDebugInfo(renderElement, propertyName, propertyValue) {}
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} className
         * @param {?} isAdd
         * @return {?}
         */

    }, {
        key: 'setElementClass',
        value: function setElementClass(renderElement, className, isAdd) {}
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} styleName
         * @param {?} styleValue
         * @return {?}
         */

    }, {
        key: 'setElementStyle',
        value: function setElementStyle(renderElement, styleName, styleValue) {}
        /**
         * @abstract
         * @param {?} renderElement
         * @param {?} methodName
         * @param {?=} args
         * @return {?}
         */

    }, {
        key: 'invokeElementMethod',
        value: function invokeElementMethod(renderElement, methodName, args) {}
        /**
         * @abstract
         * @param {?} renderNode
         * @param {?} text
         * @return {?}
         */

    }, {
        key: 'setText',
        value: function setText(renderNode, text) {}
        /**
         * @abstract
         * @param {?} element
         * @param {?} startingStyles
         * @param {?} keyframes
         * @param {?} duration
         * @param {?} delay
         * @param {?} easing
         * @param {?=} previousPlayers
         * @return {?}
         */

    }, {
        key: 'animate',
        value: function animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {}
    }]);

    return RendererV1;
}();

var /** @type {?} */RendererV2Interceptor = new InjectionToken('RendererV2Interceptor');
/**
 * Injectable service that provides a low-level interface for modifying the UI.
 *
 * Use this service to bypass Angular's templating and make custom UI changes that can't be
 * expressed declaratively. For example if you need to set a property or an attribute whose name is
 * not statically known, use {\@link #setElementProperty} or {\@link #setElementAttribute}
 * respectively.
 *
 * If you are implementing a custom renderer, you must implement this interface.
 *
 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
 *
 * @deprecated Use `RendererFactoryV2` instead.
 * @abstract
 */

var RootRenderer = function () {
    function RootRenderer() {
        _classCallCheck(this, RootRenderer);
    }

    _createClass(RootRenderer, [{
        key: 'renderComponent',

        /**
         * @abstract
         * @param {?} componentType
         * @return {?}
         */
        value: function renderComponent(componentType) {}
    }]);

    return RootRenderer;
}();
/**
 * \@experimental
 * @abstract
 */


var RendererFactoryV2 = function () {
    function RendererFactoryV2() {
        _classCallCheck(this, RendererFactoryV2);
    }

    _createClass(RendererFactoryV2, [{
        key: 'createRenderer',

        /**
         * @abstract
         * @param {?} hostElement
         * @param {?} type
         * @return {?}
         */
        value: function createRenderer(hostElement, type) {}
    }]);

    return RendererFactoryV2;
}();
/**
 * \@experimental
 * @abstract
 */


var RendererV2 = function () {
    function RendererV2() {
        _classCallCheck(this, RendererV2);
    }

    _createClass(RendererV2, [{
        key: 'data',

        /**
         * This field can be used to store arbitrary data on this renderer instance.
         * This is useful for renderers that delegate to other renderers.
         * @abstract
         * @return {?}
         */
        value: function data() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'destroy',
        value: function destroy() {}
        /**
         * @abstract
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */

    }, {
        key: 'createElement',
        value: function createElement(name, namespace) {}
        /**
         * @abstract
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'createComment',
        value: function createComment(value) {}
        /**
         * @abstract
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'createText',
        value: function createText(value) {}
        /**
         * @abstract
         * @param {?} parent
         * @param {?} newChild
         * @return {?}
         */

    }, {
        key: 'appendChild',
        value: function appendChild(parent, newChild) {}
        /**
         * @abstract
         * @param {?} parent
         * @param {?} newChild
         * @param {?} refChild
         * @return {?}
         */

    }, {
        key: 'insertBefore',
        value: function insertBefore(parent, newChild, refChild) {}
        /**
         * @abstract
         * @param {?} parent
         * @param {?} oldChild
         * @return {?}
         */

    }, {
        key: 'removeChild',
        value: function removeChild(parent, oldChild) {}
        /**
         * @abstract
         * @param {?} selectorOrNode
         * @return {?}
         */

    }, {
        key: 'selectRootElement',
        value: function selectRootElement(selectorOrNode) {}
        /**
         * Attention: On WebWorkers, this will always return a value,
         * as we are asking for a result synchronously. I.e.
         * the caller can't rely on checking whether this is null or not.
         * @abstract
         * @param {?} node
         * @return {?}
         */

    }, {
        key: 'parentNode',
        value: function parentNode(node) {}
        /**
         * Attention: On WebWorkers, this will always return a value,
         * as we are asking for a result synchronously. I.e.
         * the caller can't rely on checking whether this is null or not.
         * @abstract
         * @param {?} node
         * @return {?}
         */

    }, {
        key: 'nextSibling',
        value: function nextSibling(node) {}
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @param {?=} namespace
         * @return {?}
         */

    }, {
        key: 'setAttribute',
        value: function setAttribute(el, name, value, namespace) {}
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */

    }, {
        key: 'removeAttribute',
        value: function removeAttribute(el, name, namespace) {}
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'addClass',
        value: function addClass(el, name) {}
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'removeClass',
        value: function removeClass(el, name) {}
        /**
         * @abstract
         * @param {?} el
         * @param {?} style
         * @param {?} value
         * @param {?} hasVendorPrefix
         * @param {?} hasImportant
         * @return {?}
         */

    }, {
        key: 'setStyle',
        value: function setStyle(el, style, value, hasVendorPrefix, hasImportant) {}
        /**
         * @abstract
         * @param {?} el
         * @param {?} style
         * @param {?} hasVendorPrefix
         * @return {?}
         */

    }, {
        key: 'removeStyle',
        value: function removeStyle(el, style, hasVendorPrefix) {}
        /**
         * @abstract
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'setProperty',
        value: function setProperty(el, name, value) {}
        /**
         * @abstract
         * @param {?} node
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'setValue',
        value: function setValue(node, value) {}
        /**
         * @abstract
         * @param {?} target
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listen',
        value: function listen(target, eventName, callback) {}
    }]);

    return RendererV2;
}();

var ElementRef =
/**
 * @param {?} nativeElement
 */
function ElementRef(nativeElement) {
    _classCallCheck(this, ElementRef);

    this.nativeElement = nativeElement;
};

/**
 * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
 *
 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
 * NgModule Instance.
 *
 * \@stable
 * @abstract
 */


var NgModuleRef = function () {
    function NgModuleRef() {
        _classCallCheck(this, NgModuleRef);
    }

    _createClass(NgModuleRef, [{
        key: 'injector',

        /**
         * The injector that contains all of the providers of the NgModule.
         * @abstract
         * @return {?}
         */
        value: function injector() {}
        /**
         * The ComponentFactoryResolver to get hold of the ComponentFactories
         * declared in the `entryComponents` property of the module.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'componentFactoryResolver',
        value: function componentFactoryResolver() {}
        /**
         * The NgModule instance.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'instance',
        value: function instance() {}
        /**
         * Destroys the module instance and all of the data structures associated with it.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'destroy',
        value: function destroy() {}
        /**
         * Allows to register a callback that will be called when the module is destroyed.
         * @abstract
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(callback) {}
    }]);

    return NgModuleRef;
}();
/**
 * \@experimental
 */


var NgModuleFactory = function () {
    /**
     * @param {?} _injectorClass
     * @param {?} _moduleType
     */
    function NgModuleFactory(_injectorClass, _moduleType) {
        _classCallCheck(this, NgModuleFactory);

        this._injectorClass = _injectorClass;
        this._moduleType = _moduleType;
    }
    /**
     * @return {?}
     */


    _createClass(NgModuleFactory, [{
        key: 'create',

        /**
         * @param {?} parentInjector
         * @return {?}
         */
        value: function create(parentInjector) {
            if (!parentInjector) {
                parentInjector = Injector.NULL;
            }
            var /** @type {?} */instance = new this._injectorClass(parentInjector);
            instance.create();
            return instance;
        }
    }, {
        key: 'moduleType',
        get: function get() {
            return this._moduleType;
        }
    }]);

    return NgModuleFactory;
}();

var /** @type {?} */_UNDEFINED = new Object();
/**
 * @abstract
 */

var NgModuleInjector = function (_CodegenComponentFact) {
    _inherits(NgModuleInjector, _CodegenComponentFact);

    /**
     * @param {?} parent
     * @param {?} factories
     * @param {?} bootstrapFactories
     */
    function NgModuleInjector(parent, factories, bootstrapFactories) {
        _classCallCheck(this, NgModuleInjector);

        var _this16 = _possibleConstructorReturn(this, (NgModuleInjector.__proto__ || Object.getPrototypeOf(NgModuleInjector)).call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL)));

        _this16.parent = parent;
        _this16.bootstrapFactories = bootstrapFactories;
        _this16._destroyListeners = [];
        _this16._destroyed = false;
        return _this16;
    }
    /**
     * @return {?}
     */


    _createClass(NgModuleInjector, [{
        key: 'create',
        value: function create() {
            this.instance = this.createInternal();
        }
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'createInternal',
        value: function createInternal() {}
        /**
         * @param {?} token
         * @param {?=} notFoundValue
         * @return {?}
         */

    }, {
        key: 'get',
        value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THROW_IF_NOT_FOUND;

            if (token === Injector || token === ComponentFactoryResolver) {
                return this;
            }
            var /** @type {?} */result = this.getInternal(token, _UNDEFINED);
            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
        }
        /**
         * @abstract
         * @param {?} token
         * @param {?} notFoundValue
         * @return {?}
         */

    }, {
        key: 'getInternal',
        value: function getInternal(token, notFoundValue) {}
        /**
         * @return {?}
         */

    }, {
        key: 'destroy',

        /**
         * @return {?}
         */
        value: function destroy() {
            if (this._destroyed) {
                throw new Error('The ng module ' + stringify(this.instance.constructor) + ' has already been destroyed.');
            }
            this._destroyed = true;
            this.destroyInternal();
            this._destroyListeners.forEach(function (listener) {
                return listener();
            });
        }
        /**
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(callback) {
            this._destroyListeners.push(callback);
        }
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'destroyInternal',
        value: function destroyInternal() {}
    }, {
        key: 'injector',
        get: function get() {
            return this;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'componentFactoryResolver',
        get: function get() {
            return this;
        }
    }]);

    return NgModuleInjector;
}(CodegenComponentFactoryResolver);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Used to load ng module factories.
 * \@stable
 * @abstract
 */


var NgModuleFactoryLoader = function () {
    function NgModuleFactoryLoader() {
        _classCallCheck(this, NgModuleFactoryLoader);
    }

    _createClass(NgModuleFactoryLoader, [{
        key: 'load',

        /**
         * @abstract
         * @param {?} path
         * @return {?}
         */
        value: function load(path) {}
    }]);

    return NgModuleFactoryLoader;
}();

var /** @type {?} */moduleFactories = new Map();
/**
 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
 * \@experimental
 * @param {?} id
 * @param {?} factory
 * @return {?}
 */
function registerModuleFactory(id, factory) {
    var /** @type {?} */existing = moduleFactories.get(id);
    if (existing) {
        throw new Error('Duplicate module registered for ' + id + ' - ' + existing.moduleType.name + ' vs ' + factory.moduleType.name);
    }
    moduleFactories.set(id, factory);
}
/**
 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
 * cannot be found.
 * \@experimental
 * @param {?} id
 * @return {?}
 */
function getModuleFactory(id) {
    var /** @type {?} */factory = moduleFactories.get(id);
    if (!factory) throw new Error('No module with ID ' + id + ' loaded');
    return factory;
}

/**
 * An unmodifiable list of items that Angular keeps up to date when the state
 * of the application changes.
 *
 * The type of object that {\@link Query} and {\@link ViewQueryMetadata} provide.
 *
 * Implements an iterable interface, therefore it can be used in both ES6
 * javascript `for (var i of items)` loops as well as in Angular templates with
 * `*ngFor="let i of myList"`.
 *
 * Changes can be observed by subscribing to the changes `Observable`.
 *
 * NOTE: In the future this class will implement an `Observable` interface.
 *
 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
 * ```typescript
 * \@Component({...})
 * class Container {
 *   \@ViewChildren(Item) items:QueryList<Item>;
 * }
 * ```
 * \@stable
 */

var QueryList = function () {
    function QueryList() {
        _classCallCheck(this, QueryList);

        this._dirty = true;
        this._results = [];
        this._emitter = new EventEmitter();
    }
    /**
     * @return {?}
     */


    _createClass(QueryList, [{
        key: 'map',

        /**
         * See
         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
         * @param {?} fn
         * @return {?}
         */
        value: function map(fn) {
            return this._results.map(fn);
        }
        /**
         * See
         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'filter',
        value: function filter(fn) {
            return this._results.filter(fn);
        }
        /**
         * See
         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'find',
        value: function find(fn) {
            return this._results.find(fn);
        }
        /**
         * See
         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
         * @param {?} fn
         * @param {?} init
         * @return {?}
         */

    }, {
        key: 'reduce',
        value: function reduce(fn, init) {
            return this._results.reduce(fn, init);
        }
        /**
         * See
         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEach',
        value: function forEach(fn) {
            this._results.forEach(fn);
        }
        /**
         * See
         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'some',
        value: function some(fn) {
            return this._results.some(fn);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toArray',
        value: function toArray() {
            return this._results.slice();
        }
        /**
         * @return {?}
         */

    }, {
        key: getSymbolIterator(),
        value: function value() {
            return this._results[getSymbolIterator()]();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',
        value: function toString() {
            return this._results.toString();
        }
        /**
         * @param {?} res
         * @return {?}
         */

    }, {
        key: 'reset',
        value: function reset(res) {
            this._results = ListWrapper.flatten(res);
            this._dirty = false;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'notifyOnChanges',
        value: function notifyOnChanges() {
            this._emitter.emit(this);
        }
        /**
         * internal
         * @return {?}
         */

    }, {
        key: 'setDirty',
        value: function setDirty() {
            this._dirty = true;
        }
        /**
         * internal
         * @return {?}
         */

    }, {
        key: 'changes',
        get: function get() {
            return this._emitter;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'length',
        get: function get() {
            return this._results.length;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'first',
        get: function get() {
            return this._results[0];
        }
        /**
         * @return {?}
         */

    }, {
        key: 'last',
        get: function get() {
            return this._results[this.length - 1];
        }
    }, {
        key: 'dirty',
        get: function get() {
            return this._dirty;
        }
    }]);

    return QueryList;
}();

var /** @type {?} */_SEPARATOR = '#';
var /** @type {?} */FACTORY_CLASS_SUFFIX = 'NgFactory';
/**
 * Configuration for SystemJsNgModuleLoader.
 * token.
 *
 * \@experimental
 * @abstract
 */

var SystemJsNgModuleLoaderConfig = function SystemJsNgModuleLoaderConfig() {
    _classCallCheck(this, SystemJsNgModuleLoaderConfig);
};

var /** @type {?} */DEFAULT_CONFIG = {
    factoryPathPrefix: '',
    factoryPathSuffix: '.ngfactory'
};
/**
 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
 * \@experimental
 */

var SystemJsNgModuleLoader = function () {
    /**
     * @param {?} _compiler
     * @param {?=} config
     */
    function SystemJsNgModuleLoader(_compiler, config) {
        _classCallCheck(this, SystemJsNgModuleLoader);

        this._compiler = _compiler;
        this._config = config || DEFAULT_CONFIG;
    }
    /**
     * @param {?} path
     * @return {?}
     */


    _createClass(SystemJsNgModuleLoader, [{
        key: 'load',
        value: function load(path) {
            var /** @type {?} */offlineMode = this._compiler instanceof Compiler;
            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
        }
        /**
         * @param {?} path
         * @return {?}
         */

    }, {
        key: 'loadAndCompile',
        value: function loadAndCompile(path) {
            var _this17 = this;

            var _path$split = path.split(_SEPARATOR),
                _path$split2 = _slicedToArray(_path$split, 2),
                module = _path$split2[0],
                exportName = _path$split2[1];

            if (exportName === undefined) {
                exportName = 'default';
            }
            return __webpack_require__(15)(module).then(function (module) {
                return module[exportName];
            }).then(function (type) {
                return checkNotEmpty(type, module, exportName);
            }).then(function (type) {
                return _this17._compiler.compileModuleAsync(type);
            });
        }
        /**
         * @param {?} path
         * @return {?}
         */

    }, {
        key: 'loadFactory',
        value: function loadFactory(path) {
            var _path$split3 = path.split(_SEPARATOR),
                _path$split4 = _slicedToArray(_path$split3, 2),
                module = _path$split4[0],
                exportName = _path$split4[1];

            var /** @type {?} */factoryClassSuffix = FACTORY_CLASS_SUFFIX;
            if (exportName === undefined) {
                exportName = 'default';
                factoryClassSuffix = '';
            }
            return __webpack_require__(15)(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function (module) {
                return module[exportName + factoryClassSuffix];
            }).then(function (factory) {
                return checkNotEmpty(factory, module, exportName);
            });
        }
    }]);

    return SystemJsNgModuleLoader;
}();

SystemJsNgModuleLoader.decorators = [{ type: Injectable }];
/** @nocollapse */
SystemJsNgModuleLoader.ctorParameters = function () {
    return [{ type: Compiler }, { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }];
};
/**
 * @param {?} value
 * @param {?} modulePath
 * @param {?} exportName
 * @return {?}
 */
function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
        throw new Error('Cannot find \'' + exportName + '\' in \'' + modulePath + '\'');
    }
    return value;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents an Embedded Template that can be used to instantiate Embedded Views.
 *
 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
 * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
 * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
 * the `TemplateRef` from a Component or a Directive via {\@link Query}.
 *
 * To instantiate Embedded Views based on a Template, use
 * {\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
 * View Container.
 * \@stable
 * @abstract
 */

var TemplateRef = function () {
    function TemplateRef() {
        _classCallCheck(this, TemplateRef);
    }

    _createClass(TemplateRef, [{
        key: 'elementRef',

        /**
         * @abstract
         * @return {?}
         */
        value: function elementRef() {}
        /**
         * @abstract
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'createEmbeddedView',
        value: function createEmbeddedView(context) {}
    }]);

    return TemplateRef;
}();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents a container where one or more Views can be attached.
 *
 * The container can contain two kinds of Views. Host Views, created by instantiating a
 * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
 * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
 *
 * The location of the View Container within the containing View is specified by the Anchor
 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
 * have a single View Container.
 *
 * Root elements of Views attached to this container become siblings of the Anchor Element in
 * the Rendered View.
 *
 * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
 * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
 * \@stable
 * @abstract
 */


var ViewContainerRef = function () {
    function ViewContainerRef() {
        _classCallCheck(this, ViewContainerRef);
    }

    _createClass(ViewContainerRef, [{
        key: 'element',

        /**
         * Anchor element that specifies the location of this container in the containing View.
         * <!-- TODO: rename to anchorElement -->
         * @abstract
         * @return {?}
         */
        value: function element() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'injector',
        value: function injector() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'parentInjector',
        value: function parentInjector() {}
        /**
         * Destroys all Views in this container.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'clear',
        value: function clear() {}
        /**
         * Returns the {\@link ViewRef} for the View located in this container at the specified index.
         * @abstract
         * @param {?} index
         * @return {?}
         */

    }, {
        key: 'get',
        value: function get(index) {}
        /**
         * Returns the number of Views currently attached to this container.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'length',
        value: function length() {}
        /**
         * Instantiates an Embedded View based on the {\@link TemplateRef `templateRef`} and inserts it
         * into this container at the specified `index`.
         *
         * If `index` is not specified, the new View will be inserted as the last View in the container.
         *
         * Returns the {\@link ViewRef} for the newly created View.
         * @abstract
         * @param {?} templateRef
         * @param {?=} context
         * @param {?=} index
         * @return {?}
         */

    }, {
        key: 'createEmbeddedView',
        value: function createEmbeddedView(templateRef, context, index) {}
        /**
         * Instantiates a single {\@link Component} and inserts its Host View into this container at the
         * specified `index`.
         *
         * The component is instantiated using its {\@link ComponentFactory} which can be
         * obtained via {\@link ComponentFactoryResolver#resolveComponentFactory}.
         *
         * If `index` is not specified, the new View will be inserted as the last View in the container.
         *
         * You can optionally specify the {\@link Injector} that will be used as parent for the Component.
         *
         * Returns the {\@link ComponentRef} of the Host View created for the newly instantiated Component.
         * @abstract
         * @param {?} componentFactory
         * @param {?=} index
         * @param {?=} injector
         * @param {?=} projectableNodes
         * @return {?}
         */

    }, {
        key: 'createComponent',
        value: function createComponent(componentFactory, index, injector, projectableNodes) {}
        /**
         * Inserts a View identified by a {\@link ViewRef} into the container at the specified `index`.
         *
         * If `index` is not specified, the new View will be inserted as the last View in the container.
         *
         * Returns the inserted {\@link ViewRef}.
         * @abstract
         * @param {?} viewRef
         * @param {?=} index
         * @return {?}
         */

    }, {
        key: 'insert',
        value: function insert(viewRef, index) {}
        /**
         * Moves a View identified by a {\@link ViewRef} into the container at the specified `index`.
         *
         * Returns the inserted {\@link ViewRef}.
         * @abstract
         * @param {?} viewRef
         * @param {?} currentIndex
         * @return {?}
         */

    }, {
        key: 'move',
        value: function move(viewRef, currentIndex) {}
        /**
         * Returns the index of the View, specified via {\@link ViewRef}, within the current container or
         * `-1` if this container doesn't contain the View.
         * @abstract
         * @param {?} viewRef
         * @return {?}
         */

    }, {
        key: 'indexOf',
        value: function indexOf(viewRef) {}
        /**
         * Destroys a View attached to this container at the specified `index`.
         *
         * If `index` is not specified, the last View in the container will be removed.
         * @abstract
         * @param {?=} index
         * @return {?}
         */

    }, {
        key: 'remove',
        value: function remove(index) {}
        /**
         * Use along with {\@link #insert} to move a View within the current container.
         *
         * If the `index` param is omitted, the last {\@link ViewRef} is detached.
         * @abstract
         * @param {?=} index
         * @return {?}
         */

    }, {
        key: 'detach',
        value: function detach(index) {}
    }]);

    return ViewContainerRef;
}();

/**
 * \@stable
 * @abstract
 */


var ChangeDetectorRef = function () {
    function ChangeDetectorRef() {
        _classCallCheck(this, ChangeDetectorRef);
    }

    _createClass(ChangeDetectorRef, [{
        key: 'markForCheck',

        /**
         * Marks all {\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
         *
         * <!-- TODO: Add a link to a chapter on OnPush components -->
         *
         * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
         *
         * ```typescript
         * \@Component({
         *   selector: 'cmp',
         *   changeDetection: ChangeDetectionStrategy.OnPush,
         *   template: `Number of ticks: {{numberOfTicks}}`
         * })
         * class Cmp {
         *   numberOfTicks = 0;
         *
         *   constructor(ref: ChangeDetectorRef) {
         *     setInterval(() => {
         *       this.numberOfTicks ++
         *       // the following is required, otherwise the view will not be updated
         *       this.ref.markForCheck();
         *     }, 1000);
         *   }
         * }
         *
         * \@Component({
         *   selector: 'app',
         *   changeDetection: ChangeDetectionStrategy.OnPush,
         *   template: `
         *     <cmp><cmp>
         *   `,
         * })
         * class App {
         * }
         * ```
         * @abstract
         * @return {?}
         */
        value: function markForCheck() {}
        /**
         * Detaches the change detector from the change detector tree.
         *
         * The detached change detector will not be checked until it is reattached.
         *
         * This can also be used in combination with {\@link ChangeDetectorRef#detectChanges} to implement
         * local change
         * detection checks.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
         *
         * ### Example
         *
         * The following example defines a component with a large list of readonly data.
         * Imagine the data changes constantly, many times per second. For performance reasons,
         * we want to check and update the list every five seconds. We can do that by detaching
         * the component's change detector and doing a local check every five seconds.
         *
         * ```typescript
         * class DataProvider {
         *   // in a real application the returned data will be different every time
         *   get data() {
         *     return [1,2,3,4,5];
         *   }
         * }
         *
         * \@Component({
         *   selector: 'giant-list',
         *   template: `
         *     <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
         *   `,
         * })
         * class GiantList {
         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
         *     ref.detach();
         *     setInterval(() => {
         *       this.ref.detectChanges();
         *     }, 5000);
         *   }
         * }
         *
         * \@Component({
         *   selector: 'app',
         *   providers: [DataProvider],
         *   template: `
         *     <giant-list><giant-list>
         *   `,
         * })
         * class App {
         * }
         * ```
         * @abstract
         * @return {?}
         */

    }, {
        key: 'detach',
        value: function detach() {}
        /**
         * Checks the change detector and its children.
         *
         * This can also be used in combination with {\@link ChangeDetectorRef#detach} to implement local
         * change detection
         * checks.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
         *
         * ### Example
         *
         * The following example defines a component with a large list of readonly data.
         * Imagine, the data changes constantly, many times per second. For performance reasons,
         * we want to check and update the list every five seconds.
         *
         * We can do that by detaching the component's change detector and doing a local change detection
         * check
         * every five seconds.
         *
         * See {\@link ChangeDetectorRef#detach} for more information.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'detectChanges',
        value: function detectChanges() {}
        /**
         * Checks the change detector and its children, and throws if any changes are detected.
         *
         * This is used in development mode to verify that running change detection doesn't introduce
         * other changes.
         * @abstract
         * @return {?}
         */

    }, {
        key: 'checkNoChanges',
        value: function checkNoChanges() {}
        /**
         * Reattach the change detector to the change detector tree.
         *
         * This also marks OnPush ancestors as to be checked. This reattached change detector will be
         * checked during the next change detection run.
         *
         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
         *
         * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
         *
         * The following example creates a component displaying `live` data. The component will detach
         * its change detector from the main change detector tree when the component's live property
         * is set to false.
         *
         * ```typescript
         * class DataProvider {
         *   data = 1;
         *
         *   constructor() {
         *     setInterval(() => {
         *       this.data = this.data * 2;
         *     }, 500);
         *   }
         * }
         *
         * \@Component({
         *   selector: 'live-data',
         *   inputs: ['live'],
         *   template: 'Data: {{dataProvider.data}}'
         * })
         * class LiveData {
         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
         *
         *   set live(value) {
         *     if (value)
         *       this.ref.reattach();
         *     else
         *       this.ref.detach();
         *   }
         * }
         *
         * \@Component({
         *   selector: 'app',
         *   providers: [DataProvider],
         *   template: `
         *     Live Update: <input type="checkbox" [(ngModel)]="live">
         *     <live-data [live]="live"><live-data>
         *   `,
         * })
         * class App {
         *   live = true;
         * }
         * ```
         * @abstract
         * @return {?}
         */

    }, {
        key: 'reattach',
        value: function reattach() {}
    }]);

    return ChangeDetectorRef;
}();

/**
 * \@stable
 * @abstract
 */


var ViewRef = function (_ChangeDetectorRef) {
    _inherits(ViewRef, _ChangeDetectorRef);

    function ViewRef() {
        _classCallCheck(this, ViewRef);

        return _possibleConstructorReturn(this, (ViewRef.__proto__ || Object.getPrototypeOf(ViewRef)).apply(this, arguments));
    }

    _createClass(ViewRef, [{
        key: 'destroy',

        /**
         * Destroys the view and all of the data structures associated with it.
         * @abstract
         * @return {?}
         */
        value: function destroy() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'destroyed',
        value: function destroyed() {}
        /**
         * @abstract
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(callback) {}
    }]);

    return ViewRef;
}(ChangeDetectorRef);
/**
 * Represents an Angular View.
 *
 * <!-- TODO: move the next two paragraphs to the dev guide -->
 * A View is a fundamental building block of the application UI. It is the smallest grouping of
 * Elements which are created and destroyed together.
 *
 * Properties of elements in a View can change, but the structure (number and order) of elements in
 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
 * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
 * <!-- /TODO -->
 *
 * ### Example
 *
 * Given this template...
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ngFor="let  item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * We have two {\@link TemplateRef}s:
 *
 * Outer {\@link TemplateRef}:
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
 * </ul>
 * ```
 *
 * Inner {\@link TemplateRef}:
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
 *
 * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
 *
 * ```
 * <!-- ViewRef: outer-0 -->
 * Count: 2
 * <ul>
 *   <ng-template view-container-ref></ng-template>
 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
 * </ul>
 * <!-- /ViewRef: outer-0 -->
 * ```
 * \@experimental
 * @abstract
 */


var EmbeddedViewRef = function (_ViewRef) {
    _inherits(EmbeddedViewRef, _ViewRef);

    function EmbeddedViewRef() {
        _classCallCheck(this, EmbeddedViewRef);

        return _possibleConstructorReturn(this, (EmbeddedViewRef.__proto__ || Object.getPrototypeOf(EmbeddedViewRef)).apply(this, arguments));
    }

    _createClass(EmbeddedViewRef, [{
        key: 'context',

        /**
         * @abstract
         * @return {?}
         */
        value: function context() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'rootNodes',
        value: function rootNodes() {}
    }]);

    return EmbeddedViewRef;
}(ViewRef);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var EventListener =
/**
 * @param {?} name
 * @param {?} callback
 */
function EventListener(name, callback) {
    _classCallCheck(this, EventListener);

    this.name = name;
    this.callback = callback;
};
/**
 * \@experimental All debugging apis are currently experimental.
 */


var DebugNode = function () {
    /**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugInfo
     */
    function DebugNode(nativeNode, parent, _debugInfo) {
        _classCallCheck(this, DebugNode);

        this._debugInfo = _debugInfo;
        this.nativeNode = nativeNode;
        if (parent && parent instanceof DebugElement) {
            parent.addChild(this);
        } else {
            this.parent = null;
        }
        this.listeners = [];
    }
    /**
     * @return {?}
     */


    _createClass(DebugNode, [{
        key: 'injector',
        get: function get() {
            return this._debugInfo ? this._debugInfo.injector : null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'componentInstance',
        get: function get() {
            return this._debugInfo ? this._debugInfo.component : null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'context',
        get: function get() {
            return this._debugInfo ? this._debugInfo.context : null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'references',
        get: function get() {
            return this._debugInfo ? this._debugInfo.references : null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'providerTokens',
        get: function get() {
            return this._debugInfo ? this._debugInfo.providerTokens : null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'source',
        get: function get() {
            return this._debugInfo ? this._debugInfo.source : null;
        }
    }]);

    return DebugNode;
}();
/**
 * \@experimental All debugging apis are currently experimental.
 */


var DebugElement = function (_DebugNode) {
    _inherits(DebugElement, _DebugNode);

    /**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugInfo
     */
    function DebugElement(nativeNode, parent, _debugInfo) {
        _classCallCheck(this, DebugElement);

        var _this20 = _possibleConstructorReturn(this, (DebugElement.__proto__ || Object.getPrototypeOf(DebugElement)).call(this, nativeNode, parent, _debugInfo));

        _this20.properties = {};
        _this20.attributes = {};
        _this20.classes = {};
        _this20.styles = {};
        _this20.childNodes = [];
        _this20.nativeElement = nativeNode;
        return _this20;
    }
    /**
     * @param {?} child
     * @return {?}
     */


    _createClass(DebugElement, [{
        key: 'addChild',
        value: function addChild(child) {
            if (child) {
                this.childNodes.push(child);
                child.parent = this;
            }
        }
        /**
         * @param {?} child
         * @return {?}
         */

    }, {
        key: 'removeChild',
        value: function removeChild(child) {
            var /** @type {?} */childIndex = this.childNodes.indexOf(child);
            if (childIndex !== -1) {
                child.parent = null;
                this.childNodes.splice(childIndex, 1);
            }
        }
        /**
         * @param {?} child
         * @param {?} newChildren
         * @return {?}
         */

    }, {
        key: 'insertChildrenAfter',
        value: function insertChildrenAfter(child, newChildren) {
            var _this21 = this;

            var /** @type {?} */siblingIndex = this.childNodes.indexOf(child);
            if (siblingIndex !== -1) {
                var _childNodes;

                (_childNodes = this.childNodes).splice.apply(_childNodes, [siblingIndex + 1, 0].concat(_toConsumableArray(newChildren)));
                newChildren.forEach(function (c) {
                    if (c.parent) {
                        c.parent.removeChild(c);
                    }
                    c.parent = _this21;
                });
            }
        }
        /**
         * @param {?} refChild
         * @param {?} newChild
         * @return {?}
         */

    }, {
        key: 'insertBefore',
        value: function insertBefore(refChild, newChild) {
            var /** @type {?} */refIndex = this.childNodes.indexOf(refChild);
            if (refIndex === -1) {
                this.addChild(newChild);
            } else {
                if (newChild.parent) {
                    newChild.parent.removeChild(newChild);
                }
                newChild.parent = this;
                this.childNodes.splice(refIndex, 0, newChild);
            }
        }
        /**
         * @param {?} predicate
         * @return {?}
         */

    }, {
        key: 'query',
        value: function query(predicate) {
            var /** @type {?} */results = this.queryAll(predicate);
            return results[0] || null;
        }
        /**
         * @param {?} predicate
         * @return {?}
         */

    }, {
        key: 'queryAll',
        value: function queryAll(predicate) {
            var /** @type {?} */matches = [];
            _queryElementChildren(this, predicate, matches);
            return matches;
        }
        /**
         * @param {?} predicate
         * @return {?}
         */

    }, {
        key: 'queryAllNodes',
        value: function queryAllNodes(predicate) {
            var /** @type {?} */matches = [];
            _queryNodeChildren(this, predicate, matches);
            return matches;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'triggerEventHandler',

        /**
         * @param {?} eventName
         * @param {?} eventObj
         * @return {?}
         */
        value: function triggerEventHandler(eventName, eventObj) {
            this.listeners.forEach(function (listener) {
                if (listener.name == eventName) {
                    listener.callback(eventObj);
                }
            });
        }
    }, {
        key: 'children',
        get: function get() {
            return this.childNodes.filter(function (node) {
                return node instanceof DebugElement;
            });
        }
    }]);

    return DebugElement;
}(DebugNode);
/**
 * \@experimental
 * @param {?} debugEls
 * @return {?}
 */


function asNativeElements(debugEls) {
    return debugEls.map(function (el) {
        return el.nativeElement;
    });
}
/**
 * @param {?} element
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function (node) {
        if (node instanceof DebugElement) {
            if (predicate(node)) {
                matches.push(node);
            }
            _queryElementChildren(node, predicate, matches);
        }
    });
}
/**
 * @param {?} parentNode
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement) {
        parentNode.childNodes.forEach(function (node) {
            if (predicate(node)) {
                matches.push(node);
            }
            if (node instanceof DebugElement) {
                _queryNodeChildren(node, predicate, matches);
            }
        });
    }
}
// Need to keep the nodes in a global Map so that multiple angular apps are supported.
var /** @type {?} */_nativeNodeToDebugNode = new Map();
/**
 * \@experimental
 * @param {?} nativeNode
 * @return {?}
 */
function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode);
}
/**
 * @param {?} node
 * @return {?}
 */
function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
}
/**
 * @param {?} node
 * @return {?}
 */
function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
}

var DefaultIterableDifferFactory = function () {
    function DefaultIterableDifferFactory() {
        _classCallCheck(this, DefaultIterableDifferFactory);
    }
    /**
     * @param {?} obj
     * @return {?}
     */


    _createClass(DefaultIterableDifferFactory, [{
        key: 'supports',
        value: function supports(obj) {
            return isListLikeIterable(obj);
        }
        /**
         * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
         * @param {?=} cdRefOrTrackBy
         * @param {?=} trackByFn
         * @return {?}
         */

    }, {
        key: 'create',
        value: function create(cdRefOrTrackBy, trackByFn) {
            return new DefaultIterableDiffer(trackByFn || cdRefOrTrackBy);
        }
    }]);

    return DefaultIterableDifferFactory;
}();

var /** @type {?} */trackByIdentity = function trackByIdentity(index, item) {
    return item;
};
/**
 * @deprecated v4.0.0 - Should not be part of public API.
 */

var DefaultIterableDiffer = function () {
    /**
     * @param {?=} _trackByFn
     */
    function DefaultIterableDiffer(_trackByFn) {
        _classCallCheck(this, DefaultIterableDiffer);

        this._trackByFn = _trackByFn;
        this._length = null;
        this._collection = null;
        this._linkedRecords = null;
        this._unlinkedRecords = null;
        this._previousItHead = null;
        this._itHead = null;
        this._itTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._movesHead = null;
        this._movesTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
        this._identityChangesHead = null;
        this._identityChangesTail = null;
        this._trackByFn = this._trackByFn || trackByIdentity;
    }
    /**
     * @return {?}
     */


    _createClass(DefaultIterableDiffer, [{
        key: 'forEachItem',

        /**
         * @param {?} fn
         * @return {?}
         */
        value: function forEachItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._itHead; record !== null; record = record._next) {
                fn(record);
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachOperation',
        value: function forEachOperation(fn) {
            var /** @type {?} */nextIt = this._itHead;
            var /** @type {?} */nextRemove = this._removalsHead;
            var /** @type {?} */addRemoveOffset = 0;
            var /** @type {?} */moveOffsets = null;
            while (nextIt || nextRemove) {
                // Figure out which is the next record to process
                // Order: remove, add, move
                var /** @type {?} */record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
                var /** @type {?} */adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
                var /** @type {?} */currentIndex = record.currentIndex;
                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
                if (record === nextRemove) {
                    addRemoveOffset--;
                    nextRemove = nextRemove._nextRemoved;
                } else {
                    nextIt = nextIt._next;
                    if (record.previousIndex == null) {
                        addRemoveOffset++;
                    } else {
                        // INVARIANT:  currentIndex < previousIndex
                        if (!moveOffsets) moveOffsets = [];
                        var /** @type {?} */localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                        var /** @type {?} */localCurrentIndex = currentIndex - addRemoveOffset;
                        if (localMovePreviousIndex != localCurrentIndex) {
                            for (var /** @type {?} */i = 0; i < localMovePreviousIndex; i++) {
                                var /** @type {?} */offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
                                var /** @type {?} */index = offset + i;
                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                    moveOffsets[i] = offset + 1;
                                }
                            }
                            var /** @type {?} */previousIndex = record.previousIndex;
                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                        }
                    }
                }
                if (adjPreviousIndex !== currentIndex) {
                    fn(record, adjPreviousIndex, currentIndex);
                }
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachPreviousItem',
        value: function forEachPreviousItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
                fn(record);
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachAddedItem',
        value: function forEachAddedItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                fn(record);
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachMovedItem',
        value: function forEachMovedItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._movesHead; record !== null; record = record._nextMoved) {
                fn(record);
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachRemovedItem',
        value: function forEachRemovedItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                fn(record);
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachIdentityChange',
        value: function forEachIdentityChange(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
                fn(record);
            }
        }
        /**
         * @param {?} collection
         * @return {?}
         */

    }, {
        key: 'diff',
        value: function diff(collection) {
            if (isBlank(collection)) collection = [];
            if (!isListLikeIterable(collection)) {
                throw new Error('Error trying to diff \'' + collection + '\'');
            }
            if (this.check(collection)) {
                return this;
            } else {
                return null;
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy() {}
        /**
         * @param {?} collection
         * @return {?}
         */

    }, {
        key: 'check',
        value: function check(collection) {
            var _this22 = this;

            this._reset();
            var /** @type {?} */record = this._itHead;
            var /** @type {?} */mayBeDirty = false;
            var /** @type {?} */index = void 0;
            var /** @type {?} */item = void 0;
            var /** @type {?} */itemTrackBy = void 0;
            if (Array.isArray(collection)) {
                this._length = collection.length;
                for (var /** @type {?} */_index = 0; _index < this._length; _index++) {
                    item = collection[_index];
                    itemTrackBy = this._trackByFn(_index, item);
                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                        record = this._mismatch(record, item, itemTrackBy, _index);
                        mayBeDirty = true;
                    } else {
                        if (mayBeDirty) {
                            // TODO(misko): can we limit this to duplicates only?
                            record = this._verifyReinsertion(record, item, itemTrackBy, _index);
                        }
                        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
                    }
                    record = record._next;
                }
            } else {
                index = 0;
                iterateListLike(collection, function (item) {
                    itemTrackBy = _this22._trackByFn(index, item);
                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                        record = _this22._mismatch(record, item, itemTrackBy, index);
                        mayBeDirty = true;
                    } else {
                        if (mayBeDirty) {
                            // TODO(misko): can we limit this to duplicates only?
                            record = _this22._verifyReinsertion(record, item, itemTrackBy, index);
                        }
                        if (!looseIdentical(record.item, item)) _this22._addIdentityChange(record, item);
                    }
                    record = record._next;
                    index++;
                });
                this._length = index;
            }
            this._truncate(record);
            this._collection = collection;
            return this.isDirty;
        }
        /**
         * @return {?}
         */

    }, {
        key: '_reset',

        /**
         * Reset the state of the change objects to show no changes. This means set previousKey to
         * currentKey, and clear all of the queues (additions, moves, removals).
         * Set the previousIndexes of moved and added items to their currentIndexes
         * Reset the list of additions, moves and removals
         *
         * \@internal
         * @return {?}
         */
        value: function _reset() {
            if (this.isDirty) {
                var /** @type {?} */record = void 0;
                var /** @type {?} */nextRecord = void 0;
                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                    record._nextPrevious = record._next;
                }
                for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                    record.previousIndex = record.currentIndex;
                }
                this._additionsHead = this._additionsTail = null;
                for (record = this._movesHead; record !== null; record = nextRecord) {
                    record.previousIndex = record.currentIndex;
                    nextRecord = record._nextMoved;
                }
                this._movesHead = this._movesTail = null;
                this._removalsHead = this._removalsTail = null;
                this._identityChangesHead = this._identityChangesTail = null;
            }
        }
        /**
         * This is the core function which handles differences between collections.
         *
         * - `record` is the record which we saw at this position last time. If null then it is a new
         *   item.
         * - `item` is the current item in the collection
         * - `index` is the position of the item in the collection
         *
         * \@internal
         * @param {?} record
         * @param {?} item
         * @param {?} itemTrackBy
         * @param {?} index
         * @return {?}
         */

    }, {
        key: '_mismatch',
        value: function _mismatch(record, item, itemTrackBy, index) {
            // The previous record after which we will append the current one.
            var /** @type {?} */previousRecord = void 0;
            if (record === null) {
                previousRecord = this._itTail;
            } else {
                previousRecord = record._prev;
                // Remove the record from the collection since we know it does not match the item.
                this._remove(record);
            }
            // Attempt to see if we have seen the item before.
            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
            if (record !== null) {
                // We have seen this before, we need to move it forward in the collection.
                // But first we need to check if identity changed, so we can update in view if necessary
                if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
                this._moveAfter(record, previousRecord, index);
            } else {
                // Never seen it, check evicted list.
                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
                if (record !== null) {
                    // It is an item which we have evicted earlier: reinsert it back into the list.
                    // But first we need to check if identity changed, so we can update in view if necessary
                    if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);
                    this._reinsertAfter(record, previousRecord, index);
                } else {
                    // It is a new item: add it.
                    record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
                }
            }
            return record;
        }
        /**
         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
         *
         * Use case: `[a, a]` => `[b, a, a]`
         *
         * If we did not have this check then the insertion of `b` would:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) leave `a` at index `1` as is. <-- this is wrong!
         *   3) reinsert `a` at index 2. <-- this is wrong!
         *
         * The correct behavior is:
         *   1) evict first `a`
         *   2) insert `b` at `0` index.
         *   3) reinsert `a` at index 1.
         *   3) move `a` at from `1` to `2`.
         *
         *
         * Double check that we have not evicted a duplicate item. We need to check if the item type may
         * have already been removed:
         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
         * at the end.
         *
         * \@internal
         * @param {?} record
         * @param {?} item
         * @param {?} itemTrackBy
         * @param {?} index
         * @return {?}
         */

    }, {
        key: '_verifyReinsertion',
        value: function _verifyReinsertion(record, item, itemTrackBy, index) {
            var /** @type {?} */reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
            if (reinsertRecord !== null) {
                record = this._reinsertAfter(reinsertRecord, record._prev, index);
            } else if (record.currentIndex != index) {
                record.currentIndex = index;
                this._addToMoves(record, index);
            }
            return record;
        }
        /**
         * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
         *
         * - `record` The first excess {\@link IterableChangeRecord_}.
         *
         * \@internal
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_truncate',
        value: function _truncate(record) {
            // Anything after that needs to be removed;
            while (record !== null) {
                var /** @type {?} */nextRecord = record._next;
                this._addToRemovals(this._unlink(record));
                record = nextRecord;
            }
            if (this._unlinkedRecords !== null) {
                this._unlinkedRecords.clear();
            }
            if (this._additionsTail !== null) {
                this._additionsTail._nextAdded = null;
            }
            if (this._movesTail !== null) {
                this._movesTail._nextMoved = null;
            }
            if (this._itTail !== null) {
                this._itTail._next = null;
            }
            if (this._removalsTail !== null) {
                this._removalsTail._nextRemoved = null;
            }
            if (this._identityChangesTail !== null) {
                this._identityChangesTail._nextIdentityChange = null;
            }
        }
        /**
         * \@internal
         * @param {?} record
         * @param {?} prevRecord
         * @param {?} index
         * @return {?}
         */

    }, {
        key: '_reinsertAfter',
        value: function _reinsertAfter(record, prevRecord, index) {
            if (this._unlinkedRecords !== null) {
                this._unlinkedRecords.remove(record);
            }
            var /** @type {?} */prev = record._prevRemoved;
            var /** @type {?} */next = record._nextRemoved;
            if (prev === null) {
                this._removalsHead = next;
            } else {
                prev._nextRemoved = next;
            }
            if (next === null) {
                this._removalsTail = prev;
            } else {
                next._prevRemoved = prev;
            }
            this._insertAfter(record, prevRecord, index);
            this._addToMoves(record, index);
            return record;
        }
        /**
         * \@internal
         * @param {?} record
         * @param {?} prevRecord
         * @param {?} index
         * @return {?}
         */

    }, {
        key: '_moveAfter',
        value: function _moveAfter(record, prevRecord, index) {
            this._unlink(record);
            this._insertAfter(record, prevRecord, index);
            this._addToMoves(record, index);
            return record;
        }
        /**
         * \@internal
         * @param {?} record
         * @param {?} prevRecord
         * @param {?} index
         * @return {?}
         */

    }, {
        key: '_addAfter',
        value: function _addAfter(record, prevRecord, index) {
            this._insertAfter(record, prevRecord, index);
            if (this._additionsTail === null) {
                // todo(vicb)
                // assert(this._additionsHead === null);
                this._additionsTail = this._additionsHead = record;
            } else {
                // todo(vicb)
                // assert(_additionsTail._nextAdded === null);
                // assert(record._nextAdded === null);
                this._additionsTail = this._additionsTail._nextAdded = record;
            }
            return record;
        }
        /**
         * \@internal
         * @param {?} record
         * @param {?} prevRecord
         * @param {?} index
         * @return {?}
         */

    }, {
        key: '_insertAfter',
        value: function _insertAfter(record, prevRecord, index) {
            // todo(vicb)
            // assert(record != prevRecord);
            // assert(record._next === null);
            // assert(record._prev === null);
            var /** @type {?} */next = prevRecord === null ? this._itHead : prevRecord._next;
            // todo(vicb)
            // assert(next != record);
            // assert(prevRecord != record);
            record._next = next;
            record._prev = prevRecord;
            if (next === null) {
                this._itTail = record;
            } else {
                next._prev = record;
            }
            if (prevRecord === null) {
                this._itHead = record;
            } else {
                prevRecord._next = record;
            }
            if (this._linkedRecords === null) {
                this._linkedRecords = new _DuplicateMap();
            }
            this._linkedRecords.put(record);
            record.currentIndex = index;
            return record;
        }
        /**
         * \@internal
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_remove',
        value: function _remove(record) {
            return this._addToRemovals(this._unlink(record));
        }
        /**
         * \@internal
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_unlink',
        value: function _unlink(record) {
            if (this._linkedRecords !== null) {
                this._linkedRecords.remove(record);
            }
            var /** @type {?} */prev = record._prev;
            var /** @type {?} */next = record._next;
            // todo(vicb)
            // assert((record._prev = null) === null);
            // assert((record._next = null) === null);
            if (prev === null) {
                this._itHead = next;
            } else {
                prev._next = next;
            }
            if (next === null) {
                this._itTail = prev;
            } else {
                next._prev = prev;
            }
            return record;
        }
        /**
         * \@internal
         * @param {?} record
         * @param {?} toIndex
         * @return {?}
         */

    }, {
        key: '_addToMoves',
        value: function _addToMoves(record, toIndex) {
            // todo(vicb)
            // assert(record._nextMoved === null);
            if (record.previousIndex === toIndex) {
                return record;
            }
            if (this._movesTail === null) {
                // todo(vicb)
                // assert(_movesHead === null);
                this._movesTail = this._movesHead = record;
            } else {
                // todo(vicb)
                // assert(_movesTail._nextMoved === null);
                this._movesTail = this._movesTail._nextMoved = record;
            }
            return record;
        }
        /**
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_addToRemovals',
        value: function _addToRemovals(record) {
            if (this._unlinkedRecords === null) {
                this._unlinkedRecords = new _DuplicateMap();
            }
            this._unlinkedRecords.put(record);
            record.currentIndex = null;
            record._nextRemoved = null;
            if (this._removalsTail === null) {
                // todo(vicb)
                // assert(_removalsHead === null);
                this._removalsTail = this._removalsHead = record;
                record._prevRemoved = null;
            } else {
                // todo(vicb)
                // assert(_removalsTail._nextRemoved === null);
                // assert(record._nextRemoved === null);
                record._prevRemoved = this._removalsTail;
                this._removalsTail = this._removalsTail._nextRemoved = record;
            }
            return record;
        }
        /**
         * \@internal
         * @param {?} record
         * @param {?} item
         * @return {?}
         */

    }, {
        key: '_addIdentityChange',
        value: function _addIdentityChange(record, item) {
            record.item = item;
            if (this._identityChangesTail === null) {
                this._identityChangesTail = this._identityChangesHead = record;
            } else {
                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
            }
            return record;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var /** @type {?} */list = [];
            this.forEachItem(function (record) {
                return list.push(record);
            });
            var /** @type {?} */previous = [];
            this.forEachPreviousItem(function (record) {
                return previous.push(record);
            });
            var /** @type {?} */additions = [];
            this.forEachAddedItem(function (record) {
                return additions.push(record);
            });
            var /** @type {?} */moves = [];
            this.forEachMovedItem(function (record) {
                return moves.push(record);
            });
            var /** @type {?} */removals = [];
            this.forEachRemovedItem(function (record) {
                return removals.push(record);
            });
            var /** @type {?} */identityChanges = [];
            this.forEachIdentityChange(function (record) {
                return identityChanges.push(record);
            });
            return 'collection: ' + list.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'moves: ' + moves.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n' + 'identityChanges: ' + identityChanges.join(', ') + '\n';
        }
    }, {
        key: 'collection',
        get: function get() {
            return this._collection;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'length',
        get: function get() {
            return this._length;
        }
    }, {
        key: 'isDirty',
        get: function get() {
            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
        }
    }]);

    return DefaultIterableDiffer;
}();
/**
 * \@stable
 */


var IterableChangeRecord_ = function () {
    /**
     * @param {?} item
     * @param {?} trackById
     */
    function IterableChangeRecord_(item, trackById) {
        _classCallCheck(this, IterableChangeRecord_);

        this.item = item;
        this.trackById = trackById;
        this.currentIndex = null;
        this.previousIndex = null;
        /** @internal */
        this._nextPrevious = null;
        /** @internal */
        this._prev = null;
        /** @internal */
        this._next = null;
        /** @internal */
        this._prevDup = null;
        /** @internal */
        this._nextDup = null;
        /** @internal */
        this._prevRemoved = null;
        /** @internal */
        this._nextRemoved = null;
        /** @internal */
        this._nextAdded = null;
        /** @internal */
        this._nextMoved = null;
        /** @internal */
        this._nextIdentityChange = null;
    }
    /**
     * @return {?}
     */


    _createClass(IterableChangeRecord_, [{
        key: 'toString',
        value: function toString() {
            return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + '[' + stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
        }
    }]);

    return IterableChangeRecord_;
}();

var _DuplicateItemRecordList = function () {
    function _DuplicateItemRecordList() {
        _classCallCheck(this, _DuplicateItemRecordList);

        /** @internal */
        this._head = null;
        /** @internal */
        this._tail = null;
    }
    /**
     * Append the record to the list of duplicates.
     *
     * Note: by design all records in the list of duplicates hold the same value in record.item.
     * @param {?} record
     * @return {?}
     */


    _createClass(_DuplicateItemRecordList, [{
        key: 'add',
        value: function add(record) {
            if (this._head === null) {
                this._head = this._tail = record;
                record._nextDup = null;
                record._prevDup = null;
            } else {
                // todo(vicb)
                // assert(record.item ==  _head.item ||
                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
                this._tail._nextDup = record;
                record._prevDup = this._tail;
                record._nextDup = null;
                this._tail = record;
            }
        }
        /**
         * @param {?} trackById
         * @param {?} afterIndex
         * @return {?}
         */

    }, {
        key: 'get',
        value: function get(trackById, afterIndex) {
            var /** @type {?} */record = void 0;
            for (record = this._head; record !== null; record = record._nextDup) {
                if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) {
                    return record;
                }
            }
            return null;
        }
        /**
         * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
         *
         * Returns whether the list of duplicates is empty.
         * @param {?} record
         * @return {?}
         */

    }, {
        key: 'remove',
        value: function remove(record) {
            // todo(vicb)
            // assert(() {
            //  // verify that the record being removed is in the list.
            //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
            //    if (identical(cursor, record)) return true;
            //  }
            //  return false;
            //});
            var /** @type {?} */prev = record._prevDup;
            var /** @type {?} */next = record._nextDup;
            if (prev === null) {
                this._head = next;
            } else {
                prev._nextDup = next;
            }
            if (next === null) {
                this._tail = prev;
            } else {
                next._prevDup = prev;
            }
            return this._head === null;
        }
    }]);

    return _DuplicateItemRecordList;
}();

var _DuplicateMap = function () {
    function _DuplicateMap() {
        _classCallCheck(this, _DuplicateMap);

        this.map = new Map();
    }
    /**
     * @param {?} record
     * @return {?}
     */


    _createClass(_DuplicateMap, [{
        key: 'put',
        value: function put(record) {
            var /** @type {?} */key = record.trackById;
            var /** @type {?} */duplicates = this.map.get(key);
            if (!duplicates) {
                duplicates = new _DuplicateItemRecordList();
                this.map.set(key, duplicates);
            }
            duplicates.add(record);
        }
        /**
         * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
         * have already iterated over, we use the afterIndex to pretend it is not there.
         *
         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
         * have any more `a`s needs to return the last `a` not the first or second.
         * @param {?} trackById
         * @param {?=} afterIndex
         * @return {?}
         */

    }, {
        key: 'get',
        value: function get(trackById) {
            var afterIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var /** @type {?} */key = trackById;
            var /** @type {?} */recordList = this.map.get(key);
            return recordList ? recordList.get(trackById, afterIndex) : null;
        }
        /**
         * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
         *
         * The list of duplicates also is removed from the map if it gets empty.
         * @param {?} record
         * @return {?}
         */

    }, {
        key: 'remove',
        value: function remove(record) {
            var /** @type {?} */key = record.trackById;
            var /** @type {?} */recordList = this.map.get(key);
            // Remove the list of duplicates when it gets empty
            if (recordList.remove(record)) {
                this.map.delete(key);
            }
            return record;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'clear',

        /**
         * @return {?}
         */
        value: function clear() {
            this.map.clear();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',
        value: function toString() {
            return '_DuplicateMap(' + stringify(this.map) + ')';
        }
    }, {
        key: 'isEmpty',
        get: function get() {
            return this.map.size === 0;
        }
    }]);

    return _DuplicateMap;
}();
/**
 * @param {?} item
 * @param {?} addRemoveOffset
 * @param {?} moveOffsets
 * @return {?}
 */


function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var /** @type {?} */previousIndex = item.previousIndex;
    if (previousIndex === null) return previousIndex;
    var /** @type {?} */moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
        moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
}

var DefaultKeyValueDifferFactory = function () {
    function DefaultKeyValueDifferFactory() {
        _classCallCheck(this, DefaultKeyValueDifferFactory);
    }
    /**
     * @param {?} obj
     * @return {?}
     */


    _createClass(DefaultKeyValueDifferFactory, [{
        key: 'supports',
        value: function supports(obj) {
            return obj instanceof Map || isJsObject(obj);
        }
        /**
         * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
         * @param {?=} cd
         * @return {?}
         */

    }, {
        key: 'create',
        value: function create(cd) {
            return new DefaultKeyValueDiffer();
        }
    }]);

    return DefaultKeyValueDifferFactory;
}();

var DefaultKeyValueDiffer = function () {
    function DefaultKeyValueDiffer() {
        _classCallCheck(this, DefaultKeyValueDiffer);

        this._records = new Map();
        this._mapHead = null;
        this._previousMapHead = null;
        this._changesHead = null;
        this._changesTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
    }
    /**
     * @return {?}
     */


    _createClass(DefaultKeyValueDiffer, [{
        key: 'forEachItem',

        /**
         * @param {?} fn
         * @return {?}
         */
        value: function forEachItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._mapHead; record !== null; record = record._next) {
                fn(record);
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachPreviousItem',
        value: function forEachPreviousItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
                fn(record);
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachChangedItem',
        value: function forEachChangedItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                fn(record);
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachAddedItem',
        value: function forEachAddedItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                fn(record);
            }
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'forEachRemovedItem',
        value: function forEachRemovedItem(fn) {
            var /** @type {?} */record = void 0;
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                fn(record);
            }
        }
        /**
         * @param {?} map
         * @return {?}
         */

    }, {
        key: 'diff',
        value: function diff(map) {
            if (!map) {
                map = new Map();
            } else if (!(map instanceof Map || isJsObject(map))) {
                throw new Error('Error trying to diff \'' + map + '\'');
            }
            return this.check(map) ? this : null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy() {}
        /**
         * @param {?} map
         * @return {?}
         */

    }, {
        key: 'check',
        value: function check(map) {
            var _this23 = this;

            this._reset();
            var /** @type {?} */records = this._records;
            var /** @type {?} */oldSeqRecord = this._mapHead;
            var /** @type {?} */lastOldSeqRecord = null;
            var /** @type {?} */lastNewSeqRecord = null;
            var /** @type {?} */seqChanged = false;
            this._forEach(map, function (value, key) {
                var /** @type {?} */newSeqRecord = void 0;
                if (oldSeqRecord && key === oldSeqRecord.key) {
                    newSeqRecord = oldSeqRecord;
                    _this23._maybeAddToChanges(newSeqRecord, value);
                } else {
                    seqChanged = true;
                    if (oldSeqRecord !== null) {
                        _this23._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                        _this23._addToRemovals(oldSeqRecord);
                    }
                    if (records.has(key)) {
                        newSeqRecord = records.get(key);
                        _this23._maybeAddToChanges(newSeqRecord, value);
                    } else {
                        newSeqRecord = new KeyValueChangeRecord_(key);
                        records.set(key, newSeqRecord);
                        newSeqRecord.currentValue = value;
                        _this23._addToAdditions(newSeqRecord);
                    }
                }
                if (seqChanged) {
                    if (_this23._isInRemovals(newSeqRecord)) {
                        _this23._removeFromRemovals(newSeqRecord);
                    }
                    if (lastNewSeqRecord == null) {
                        _this23._mapHead = newSeqRecord;
                    } else {
                        lastNewSeqRecord._next = newSeqRecord;
                    }
                }
                lastOldSeqRecord = oldSeqRecord;
                lastNewSeqRecord = newSeqRecord;
                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
            });
            this._truncate(lastOldSeqRecord, oldSeqRecord);
            return this.isDirty;
        }
        /**
         * \@internal
         * @return {?}
         */

    }, {
        key: '_reset',
        value: function _reset() {
            if (this.isDirty) {
                var /** @type {?} */record = void 0;
                // Record the state of the mapping
                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
                    record._nextPrevious = record._next;
                }
                for (record = this._changesHead; record !== null; record = record._nextChanged) {
                    record.previousValue = record.currentValue;
                }
                for (record = this._additionsHead; record != null; record = record._nextAdded) {
                    record.previousValue = record.currentValue;
                }
                this._changesHead = this._changesTail = null;
                this._additionsHead = this._additionsTail = null;
                this._removalsHead = this._removalsTail = null;
            }
        }
        /**
         * @param {?} lastRecord
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_truncate',
        value: function _truncate(lastRecord, record) {
            while (record !== null) {
                if (lastRecord === null) {
                    this._mapHead = null;
                } else {
                    lastRecord._next = null;
                }
                var /** @type {?} */nextRecord = record._next;
                this._addToRemovals(record);
                lastRecord = record;
                record = nextRecord;
            }
            for (var /** @type {?} */rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
                rec.previousValue = rec.currentValue;
                rec.currentValue = null;
                this._records.delete(rec.key);
            }
        }
        /**
         * @param {?} record
         * @param {?} newValue
         * @return {?}
         */

    }, {
        key: '_maybeAddToChanges',
        value: function _maybeAddToChanges(record, newValue) {
            if (!looseIdentical(newValue, record.currentValue)) {
                record.previousValue = record.currentValue;
                record.currentValue = newValue;
                this._addToChanges(record);
            }
        }
        /**
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_isInRemovals',
        value: function _isInRemovals(record) {
            return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
        }
        /**
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_addToRemovals',
        value: function _addToRemovals(record) {
            if (this._removalsHead === null) {
                this._removalsHead = this._removalsTail = record;
            } else {
                this._removalsTail._nextRemoved = record;
                record._prevRemoved = this._removalsTail;
                this._removalsTail = record;
            }
        }
        /**
         * @param {?} prev
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_removeFromSeq',
        value: function _removeFromSeq(prev, record) {
            var /** @type {?} */next = record._next;
            if (prev === null) {
                this._mapHead = next;
            } else {
                prev._next = next;
            }
            record._next = null;
        }
        /**
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_removeFromRemovals',
        value: function _removeFromRemovals(record) {
            var /** @type {?} */prev = record._prevRemoved;
            var /** @type {?} */next = record._nextRemoved;
            if (prev === null) {
                this._removalsHead = next;
            } else {
                prev._nextRemoved = next;
            }
            if (next === null) {
                this._removalsTail = prev;
            } else {
                next._prevRemoved = prev;
            }
            record._prevRemoved = record._nextRemoved = null;
        }
        /**
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_addToAdditions',
        value: function _addToAdditions(record) {
            if (this._additionsHead === null) {
                this._additionsHead = this._additionsTail = record;
            } else {
                this._additionsTail._nextAdded = record;
                this._additionsTail = record;
            }
        }
        /**
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_addToChanges',
        value: function _addToChanges(record) {
            if (this._changesHead === null) {
                this._changesHead = this._changesTail = record;
            } else {
                this._changesTail._nextChanged = record;
                this._changesTail = record;
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var /** @type {?} */items = [];
            var /** @type {?} */previous = [];
            var /** @type {?} */changes = [];
            var /** @type {?} */additions = [];
            var /** @type {?} */removals = [];
            var /** @type {?} */record = void 0;
            for (record = this._mapHead; record !== null; record = record._next) {
                items.push(stringify(record));
            }
            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
                previous.push(stringify(record));
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                changes.push(stringify(record));
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                additions.push(stringify(record));
            }
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                removals.push(stringify(record));
            }
            return 'map: ' + items.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'changes: ' + changes.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n';
        }
        /**
         * \@internal
         * @param {?} obj
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: '_forEach',
        value: function _forEach(obj, fn) {
            if (obj instanceof Map) {
                obj.forEach(fn);
            } else {
                Object.keys(obj).forEach(function (k) {
                    return fn(obj[k], k);
                });
            }
        }
    }, {
        key: 'isDirty',
        get: function get() {
            return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
        }
    }]);

    return DefaultKeyValueDiffer;
}();
/**
 * \@stable
 */


var KeyValueChangeRecord_ = function () {
    /**
     * @param {?} key
     */
    function KeyValueChangeRecord_(key) {
        _classCallCheck(this, KeyValueChangeRecord_);

        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        /** @internal */
        this._nextPrevious = null;
        /** @internal */
        this._next = null;
        /** @internal */
        this._nextAdded = null;
        /** @internal */
        this._nextRemoved = null;
        /** @internal */
        this._prevRemoved = null;
        /** @internal */
        this._nextChanged = null;
    }
    /**
     * @return {?}
     */


    _createClass(KeyValueChangeRecord_, [{
        key: 'toString',
        value: function toString() {
            return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + '[' + stringify(this.previousValue) + '->' + stringify(this.currentValue) + ']';
        }
    }]);

    return KeyValueChangeRecord_;
}();

/**
 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 * \@stable
 */


var IterableDiffers = function () {
    /**
     * @param {?} factories
     */
    function IterableDiffers(factories) {
        _classCallCheck(this, IterableDiffers);

        this.factories = factories;
    }
    /**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */


    _createClass(IterableDiffers, [{
        key: 'find',

        /**
         * @param {?} iterable
         * @return {?}
         */
        value: function find(iterable) {
            var /** @type {?} */factory = this.factories.find(function (f) {
                return f.supports(iterable);
            });
            if (isPresent(factory)) {
                return factory;
            } else {
                throw new Error('Cannot find a differ supporting object \'' + iterable + '\' of type \'' + getTypeNameForDebugging(iterable) + '\'');
            }
        }
    }], [{
        key: 'create',
        value: function create(factories, parent) {
            if (isPresent(parent)) {
                var /** @type {?} */copied = parent.factories.slice();
                factories = factories.concat(copied);
                return new IterableDiffers(factories);
            } else {
                return new IterableDiffers(factories);
            }
        }
        /**
         * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
         * inherited {\@link IterableDiffers} instance with the provided factories and return a new
         * {\@link IterableDiffers} instance.
         *
         * The following example shows how to extend an existing list of factories,
         * which will only be applied to the injector for this component and its children.
         * This step is all that's required to make a new {\@link IterableDiffer} available.
         *
         * ### Example
         *
         * ```
         * \@Component({
         *   viewProviders: [
         *     IterableDiffers.extend([new ImmutableListDiffer()])
         *   ]
         * })
         * ```
         * @param {?} factories
         * @return {?}
         */

    }, {
        key: 'extend',
        value: function extend(factories) {
            return {
                provide: IterableDiffers,
                useFactory: function useFactory(parent) {
                    if (!parent) {
                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                        // to
                        // bootstrap(), which would override default pipes instead of extending them.
                        throw new Error('Cannot extend IterableDiffers without a parent injector');
                    }
                    return IterableDiffers.create(factories, parent);
                },
                // Dependency technically isn't optional, but we can provide a better error message this way.
                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
            };
        }
    }]);

    return IterableDiffers;
}();

/**
 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 * \@stable
 */


var KeyValueDiffers = function () {
    /**
     * @param {?} factories
     */
    function KeyValueDiffers(factories) {
        _classCallCheck(this, KeyValueDiffers);

        this.factories = factories;
    }
    /**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */


    _createClass(KeyValueDiffers, [{
        key: 'find',

        /**
         * @param {?} kv
         * @return {?}
         */
        value: function find(kv) {
            var /** @type {?} */factory = this.factories.find(function (f) {
                return f.supports(kv);
            });
            if (factory) {
                return factory;
            }
            throw new Error('Cannot find a differ supporting object \'' + kv + '\'');
        }
    }], [{
        key: 'create',
        value: function create(factories, parent) {
            if (parent) {
                var /** @type {?} */copied = parent.factories.slice();
                factories = factories.concat(copied);
            }
            return new KeyValueDiffers(factories);
        }
        /**
         * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
         * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
         * {\@link KeyValueDiffers} instance.
         *
         * The following example shows how to extend an existing list of factories,
         * which will only be applied to the injector for this component and its children.
         * This step is all that's required to make a new {\@link KeyValueDiffer} available.
         *
         * ### Example
         *
         * ```
         * \@Component({
         *   viewProviders: [
         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
         *   ]
         * })
         * ```
         * @param {?} factories
         * @return {?}
         */

    }, {
        key: 'extend',
        value: function extend(factories) {
            return {
                provide: KeyValueDiffers,
                useFactory: function useFactory(parent) {
                    if (!parent) {
                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                        // to bootstrap(), which would override default pipes instead of extending them.
                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                    }
                    return KeyValueDiffers.create(factories, parent);
                },
                // Dependency technically isn't optional, but we can provide a better error message this way.
                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
            };
        }
    }]);

    return KeyValueDiffers;
}();

/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */


function devModeEqual(a, b) {
    if (isListLikeIterable(a) && isListLikeIterable(b)) {
        return areIterablesEqual(a, b, devModeEqual);
    } else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
        return true;
    } else {
        return looseIdentical(a, b);
    }
}
/**
 * Indicates that the result of a {\@link Pipe} transformation has changed even though the
 * reference
 * has not changed.
 *
 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
 *
 * Example:
 *
 * ```
 * if (this._latestValue === this._latestReturnedValue) {
 *    return this._latestReturnedValue;
 *  } else {
 *    this._latestReturnedValue = this._latestValue;
 *    return WrappedValue.wrap(this._latestValue); // this will force update
 *  }
 * ```
 * \@stable
 */

var WrappedValue = function () {
    /**
     * @param {?} wrapped
     */
    function WrappedValue(wrapped) {
        _classCallCheck(this, WrappedValue);

        this.wrapped = wrapped;
    }
    /**
     * @param {?} value
     * @return {?}
     */


    _createClass(WrappedValue, null, [{
        key: 'wrap',
        value: function wrap(value) {
            return new WrappedValue(value);
        }
    }]);

    return WrappedValue;
}();
/**
 * Helper class for unwrapping WrappedValue s
 */


var ValueUnwrapper = function () {
    function ValueUnwrapper() {
        _classCallCheck(this, ValueUnwrapper);

        this.hasWrappedValue = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */


    _createClass(ValueUnwrapper, [{
        key: 'unwrap',
        value: function unwrap(value) {
            if (value instanceof WrappedValue) {
                this.hasWrappedValue = true;
                return value.wrapped;
            }
            return value;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'reset',
        value: function reset() {
            this.hasWrappedValue = false;
        }
    }]);

    return ValueUnwrapper;
}();
/**
 * Represents a basic change from a previous to a new value.
 * \@stable
 */


var SimpleChange = function () {
    /**
     * @param {?} previousValue
     * @param {?} currentValue
     * @param {?} firstChange
     */
    function SimpleChange(previousValue, currentValue, firstChange) {
        _classCallCheck(this, SimpleChange);

        this.previousValue = previousValue;
        this.currentValue = currentValue;
        this.firstChange = firstChange;
    }
    /**
     * Check whether the new value is the first value assigned.
     * @return {?}
     */


    _createClass(SimpleChange, [{
        key: 'isFirstChange',
        value: function isFirstChange() {
            return this.firstChange;
        }
    }]);

    return SimpleChange;
}();

/**
 * Structural diffing for `Object`s and `Map`s.
 */


var /** @type {?} */keyValDiff = [new DefaultKeyValueDifferFactory()];
/**
 * Structural diffing for `Iterable` types such as `Array`s.
 */
var /** @type {?} */iterableDiff = [new DefaultIterableDifferFactory()];
var /** @type {?} */defaultIterableDiffers = new IterableDiffers(iterableDiff);
var /** @type {?} */defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

/**
 * @return {?}
 */
function _reflector() {
    return reflector;
}
var /** @type {?} */_CORE_PLATFORM_PROVIDERS = [
// Set a default platform name for platforms that don't set it explicitly.
{ provide: PLATFORM_ID, useValue: 'unknown' }, PlatformRef_, { provide: PlatformRef, useExisting: PlatformRef_ }, { provide: Reflector, useFactory: _reflector, deps: [] }, { provide: ReflectorReader, useExisting: Reflector }, TestabilityRegistry, Console];
/**
 * This platform has to be included in any other platform
 *
 * @experimental
 */
var /** @type {?} */platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

/**
 * @experimental i18n support is experimental.
 */
var /** @type {?} */LOCALE_ID = new InjectionToken('LocaleId');
/**
 * @experimental i18n support is experimental.
 */
var /** @type {?} */TRANSLATIONS = new InjectionToken('Translations');
/**
 * @experimental i18n support is experimental.
 */
var /** @type {?} */TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
var MissingTranslationStrategy = {};
MissingTranslationStrategy.Error = 0;
MissingTranslationStrategy.Warning = 1;
MissingTranslationStrategy.Ignore = 2;
MissingTranslationStrategy[MissingTranslationStrategy.Error] = "Error";
MissingTranslationStrategy[MissingTranslationStrategy.Warning] = "Warning";
MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = "Ignore";

var SecurityContext = {};
SecurityContext.NONE = 0;
SecurityContext.HTML = 1;
SecurityContext.STYLE = 2;
SecurityContext.SCRIPT = 3;
SecurityContext.URL = 4;
SecurityContext.RESOURCE_URL = 5;
SecurityContext[SecurityContext.NONE] = "NONE";
SecurityContext[SecurityContext.HTML] = "HTML";
SecurityContext[SecurityContext.STYLE] = "STYLE";
SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
SecurityContext[SecurityContext.URL] = "URL";
SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
/**
 * Sanitizer is used by the views to sanitize potentially dangerous values.
 *
 * \@stable
 * @abstract
 */

var Sanitizer = function () {
    function Sanitizer() {
        _classCallCheck(this, Sanitizer);
    }

    _createClass(Sanitizer, [{
        key: 'sanitize',

        /**
         * @abstract
         * @param {?} context
         * @param {?} value
         * @return {?}
         */
        value: function sanitize(context, value) {}
    }]);

    return Sanitizer;
}();

/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */


function asTextData(view, index) {
    return view.nodes[index];
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asElementData(view, index) {
    return view.nodes[index];
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asProviderData(view, index) {
    return view.nodes[index];
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asPureExpressionData(view, index) {
    return view.nodes[index];
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asQueryList(view, index) {
    return view.nodes[index];
}
/**
 * This object is used to prevent cycles in the source files and to have a place where
 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
 */
var /** @type {?} */Services = {
    setCurrentNode: undefined,
    createRootView: undefined,
    createEmbeddedView: undefined,
    checkAndUpdateView: undefined,
    checkNoChangesView: undefined,
    destroyView: undefined,
    resolveDep: undefined,
    createDebugContext: undefined,
    handleEvent: undefined,
    updateDirectives: undefined,
    updateRenderer: undefined,
    dirtyParentQueries: undefined
};

/**
 * @param {?} context
 * @param {?} oldValue
 * @param {?} currValue
 * @param {?} isFirstCheck
 * @return {?}
 */
function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
    var /** @type {?} */msg = 'ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: \'' + oldValue + '\'. Current value: \'' + currValue + '\'.';
    if (isFirstCheck) {
        msg += ' It seems like the view has been created after its parent and its children have been dirty checked.' + ' Has it been created in a change detection hook ?';
    }
    return viewDebugError(msg, context);
}
/**
 * @param {?} originalError
 * @param {?} context
 * @return {?}
 */
function viewWrappedDebugError(originalError, context) {
    var /** @type {?} */err = viewDebugError(originalError.message, context);
    err[ERROR_ORIGINAL_ERROR] = originalError;
    return err;
}
/**
 * @param {?} msg
 * @param {?} context
 * @return {?}
 */
function viewDebugError(msg, context) {
    var /** @type {?} */err = new Error(msg);
    err[ERROR_DEBUG_CONTEXT] = context;
    err.stack = context.source;
    return err;
}
/**
 * @param {?} err
 * @return {?}
 */
function isViewDebugError(err) {
    return !!getDebugContext(err);
}
/**
 * @param {?} action
 * @return {?}
 */
function viewDestroyedError(action) {
    return new Error('ViewDestroyedError: Attempt to use a destroyed view: ' + action);
}

var /** @type {?} */_tokenKeyCache = new Map();
/**
 * @param {?} token
 * @return {?}
 */
function tokenKey(token) {
    var /** @type {?} */key = _tokenKeyCache.get(token);
    if (!key) {
        key = stringify(token) + '_' + _tokenKeyCache.size;
        _tokenKeyCache.set(token, key);
    }
    return key;
}
var /** @type {?} */unwrapCounter = 0;
/**
 * @param {?} value
 * @return {?}
 */
function unwrapValue(value) {
    if (value instanceof WrappedValue) {
        value = value.wrapped;
        unwrapCounter++;
    }
    return value;
}
var /** @type {?} */_renderCompCount = 0;
/**
 * @param {?} values
 * @return {?}
 */
function createRendererTypeV2(values) {
    var /** @type {?} */isFilled = values && (values.encapsulation !== ViewEncapsulation.None || values.styles.length || Object.keys(values.data).length);
    if (isFilled) {
        var /** @type {?} */id = 'c' + _renderCompCount++;
        return { id: id, styles: values.styles, encapsulation: values.encapsulation, data: values.data };
    } else {
        return null;
    }
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkBinding(view, def, bindingIdx, value) {
    var /** @type {?} */oldValues = view.oldValues;
    if (unwrapCounter > 0 || !!(view.state & 1 /* FirstCheck */) || !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
        unwrapCounter = 0;
        return true;
    }
    return false;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkAndUpdateBinding(view, def, bindingIdx, value) {
    if (checkBinding(view, def, bindingIdx, value)) {
        view.oldValues[def.bindingIndex + bindingIdx] = value;
        return true;
    }
    return false;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkBindingNoChanges(view, def, bindingIdx, value) {
    var /** @type {?} */oldValue = view.oldValues[def.bindingIndex + bindingIdx];
    if (unwrapCounter || view.state & 1 /* FirstCheck */ || !devModeEqual(oldValue, value)) {
        unwrapCounter = 0;
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.index), oldValue, value, (view.state & 1 /* FirstCheck */) !== 0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function markParentViewsForCheck(view) {
    var /** @type {?} */currView = view;
    while (currView) {
        if (currView.def.flags & 2 /* OnPush */) {
                currView.state |= 2 /* ChecksEnabled */;
            }
        currView = currView.viewContainerParent || currView.parent;
    }
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */
function dispatchEvent(view, nodeIndex, eventName, event) {
    markParentViewsForCheck(view);
    return Services.handleEvent(view, nodeIndex, eventName, event);
}
/**
 * @param {?} view
 * @return {?}
 */
function declaredViewContainer(view) {
    if (view.parent) {
        var /** @type {?} */parentView = view.parent;
        return asElementData(parentView, view.parentNodeDef.index);
    }
    return undefined;
}
/**
 * for component views, this is the host element.
 * for embedded views, this is the index of the parent node
 * that contains the view container.
 * @param {?} view
 * @return {?}
 */
function viewParentEl(view) {
    var /** @type {?} */parentView = view.parent;
    if (parentView) {
        return view.parentNodeDef.parent;
    } else {
        return null;
    }
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function renderNode(view, def) {
    switch (def.flags & 100673535 /* Types */) {case 1 /* TypeElement */:
            return asElementData(view, def.index).renderElement;
        case 2 /* TypeText */:
            return asTextData(view, def.index).renderText;
    }
}
/**
 * @param {?} target
 * @param {?} name
 * @return {?}
 */
function elementEventFullName(target, name) {
    return target ? target + ':' + name : name;
}
/**
 * @param {?} view
 * @return {?}
 */
function isComponentView(view) {
    return !!view.parent && !!(view.parentNodeDef.flags & 16384 /* Component */);
}
/**
 * @param {?} view
 * @return {?}
 */
function isEmbeddedView(view) {
    return !!view.parent && !(view.parentNodeDef.flags & 16384 /* Component */);
}
/**
 * @param {?} queryId
 * @return {?}
 */
function filterQueryId(queryId) {
    return 1 << queryId % 32;
}
/**
 * @param {?} matchedQueriesDsl
 * @return {?}
 */
function splitMatchedQueriesDsl(matchedQueriesDsl) {
    var /** @type {?} */matchedQueries = {};
    var /** @type {?} */matchedQueryIds = 0;
    var /** @type {?} */references = {};
    if (matchedQueriesDsl) {
        matchedQueriesDsl.forEach(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2),
                queryId = _ref4[0],
                valueType = _ref4[1];

            if (typeof queryId === 'number') {
                matchedQueries[queryId] = valueType;
                matchedQueryIds |= filterQueryId(queryId);
            } else {
                references[queryId] = valueType;
            }
        });
    }
    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function getParentRenderElement(view, renderHost, def) {
    var /** @type {?} */renderParent = def.renderParent;
    if (renderParent) {
        if ((renderParent.flags & 1 /* TypeElement */) === 0 || (renderParent.flags & 16777216 /* ComponentView */) === 0 || renderParent.element.componentRendererType && renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.Native) {
            // only children of non components, or children of components with native encapsulation should
            // be attached.
            return asElementData(view, def.renderParent.index).renderElement;
        }
    } else {
        return renderHost;
    }
}
var /** @type {?} */VIEW_DEFINITION_CACHE = new WeakMap();
/**
 * @param {?} factory
 * @return {?}
 */
function resolveViewDefinition(factory) {
    var /** @type {?} */value = VIEW_DEFINITION_CACHE.get(factory);
    if (!value) {
        value = factory();
        VIEW_DEFINITION_CACHE.set(factory, value);
    }
    return value;
}
/**
 * @param {?} start
 * @param {?} end
 * @return {?}
 */
function sliceErrorStack(start, end) {
    var /** @type {?} */err = void 0;
    try {
        throw new Error();
    } catch (e) {
        err = e;
    }
    var /** @type {?} */stack = err.stack || '';
    var /** @type {?} */lines = stack.split('\n');
    if (lines[0].startsWith('Error')) {
        // Chrome always adds the message to the stack as well...
        start++;
        end++;
    }
    return lines.slice(start, end).join('\n');
}
/**
 * @param {?} view
 * @return {?}
 */
function rootRenderNodes(view) {
    var /** @type {?} */renderNodes = [];
    visitRootRenderNodes(view, RenderNodeAction.Collect, undefined, undefined, renderNodes);
    return renderNodes;
}
var RenderNodeAction = {};
RenderNodeAction.Collect = 0;
RenderNodeAction.AppendChild = 1;
RenderNodeAction.InsertBefore = 2;
RenderNodeAction.RemoveChild = 3;
RenderNodeAction[RenderNodeAction.Collect] = "Collect";
RenderNodeAction[RenderNodeAction.AppendChild] = "AppendChild";
RenderNodeAction[RenderNodeAction.InsertBefore] = "InsertBefore";
RenderNodeAction[RenderNodeAction.RemoveChild] = "RemoveChild";
/**
 * @param {?} view
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */
function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
    // We need to re-compute the parent node in case the nodes have been moved around manually
    if (action === RenderNodeAction.RemoveChild) {
        parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
    }
    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
}
/**
 * @param {?} view
 * @param {?} action
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */
function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
    for (var /** @type {?} */i = startIndex; i <= endIndex; i++) {
        var /** @type {?} */nodeDef = view.def.nodes[i];
        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 4 /* TypeNgContent */)) {
            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
        }
        // jump to next sibling
        i += nodeDef.childCount;
    }
}
/**
 * @param {?} view
 * @param {?} ngContentIndex
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */
function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
    var /** @type {?} */compView = view;
    while (compView && !isComponentView(compView)) {
        compView = compView.parent;
    }
    var /** @type {?} */hostView = compView.parent;
    var /** @type {?} */hostElDef = viewParentEl(compView);
    var /** @type {?} */startIndex = hostElDef.index + 1;
    var /** @type {?} */endIndex = hostElDef.index + hostElDef.childCount;
    for (var /** @type {?} */i = startIndex; i <= endIndex; i++) {
        var /** @type {?} */nodeDef = hostView.def.nodes[i];
        if (nodeDef.ngContentIndex === ngContentIndex) {
            visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
        }
        // jump to next sibling
        i += nodeDef.childCount;
    }
    if (!hostView.parent) {
        // a root view
        var /** @type {?} */projectedNodes = view.root.projectableNodes[ngContentIndex];
        if (projectedNodes) {
            for (var /** @type {?} */_i = 0; _i < projectedNodes.length; _i++) {
                execRenderNodeAction(view, projectedNodes[_i], action, parentNode, nextSibling, target);
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */
function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
    if (nodeDef.flags & 4 /* TypeNgContent */) {
            visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
        } else {
        var /** @type {?} */rn = renderNode(view, nodeDef);
        execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
        if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
                var /** @type {?} */embeddedViews = asElementData(view, nodeDef.index).embeddedViews;
                if (embeddedViews) {
                    for (var /** @type {?} */k = 0; k < embeddedViews.length; k++) {
                        visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
                    }
                }
            }
        if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {
            visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);
        }
    }
}
/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?} target
 * @return {?}
 */
function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
    var /** @type {?} */renderer = view.renderer;
    switch (action) {
        case RenderNodeAction.AppendChild:
            renderer.appendChild(parentNode, renderNode);
            break;
        case RenderNodeAction.InsertBefore:
            renderer.insertBefore(parentNode, renderNode, nextSibling);
            break;
        case RenderNodeAction.RemoveChild:
            renderer.removeChild(parentNode, renderNode);
            break;
        case RenderNodeAction.Collect:
            target.push(renderNode);
            break;
    }
}
var /** @type {?} */NS_PREFIX_RE = /^:([^:]+):(.+)$/;
/**
 * @param {?} name
 * @return {?}
 */
function splitNamespace(name) {
    if (name[0] === ':') {
        var /** @type {?} */match = name.match(NS_PREFIX_RE);
        return [match[1], match[2]];
    }
    return ['', name];
}
/**
 * @param {?} valueCount
 * @param {?} constAndInterp
 * @return {?}
 */
function interpolate(valueCount, constAndInterp) {
    var /** @type {?} */result = '';
    for (var /** @type {?} */i = 0; i < valueCount * 2; i = i + 2) {
        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
    }
    return result + constAndInterp[valueCount * 2];
}
/**
 * @param {?} valueCount
 * @param {?} c0
 * @param {?} a1
 * @param {?} c1
 * @param {?=} a2
 * @param {?=} c2
 * @param {?=} a3
 * @param {?=} c3
 * @param {?=} a4
 * @param {?=} c4
 * @param {?=} a5
 * @param {?=} c5
 * @param {?=} a6
 * @param {?=} c6
 * @param {?=} a7
 * @param {?=} c7
 * @param {?=} a8
 * @param {?=} c8
 * @param {?=} a9
 * @param {?=} c9
 * @return {?}
 */
function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
        case 1:
            return c0 + _toStringWithNull(a1) + c1;
        case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
        case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
        case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
        case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
        case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
        case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
        case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
        case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
        default:
            throw new Error('Does not support more than 9 expressions');
    }
}
/**
 * @param {?} v
 * @return {?}
 */
function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
}
var /** @type {?} */EMPTY_ARRAY = [];
var /** @type {?} */EMPTY_MAP = {};

var /** @type {?} */NOOP = function NOOP() {};
/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?=} handleEvent
 * @param {?=} templateFactory
 * @return {?}
 */
function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
    if (!handleEvent) {
        handleEvent = NOOP;
    }
    flags |= 1 /* TypeElement */;

    var _splitMatchedQueriesD = splitMatchedQueriesDsl(matchedQueriesDsl),
        matchedQueries = _splitMatchedQueriesD.matchedQueries,
        references = _splitMatchedQueriesD.references,
        matchedQueryIds = _splitMatchedQueriesD.matchedQueryIds;
    // skip the call to sliceErrorStack itself + the call to this function.


    var /** @type {?} */source = isDevMode() ? sliceErrorStack(2, 3) : '';
    var /** @type {?} */template = templateFactory ? resolveViewDefinition(templateFactory) : null;
    return {
        // will bet set by the view definition
        index: undefined,
        parent: undefined,
        renderParent: undefined,
        bindingIndex: undefined,
        outputIndex: undefined,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
        bindings: [],
        outputs: [],
        element: {
            ns: undefined,
            name: undefined,
            attrs: undefined, template: template, source: source,
            componentProvider: undefined,
            componentView: undefined,
            componentRendererType: undefined,
            publicProviders: undefined,
            allProviders: undefined, handleEvent: handleEvent
        },
        provider: undefined,
        text: undefined,
        query: undefined,
        ngContent: undefined
    };
}
/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?} namespaceAndName
 * @param {?=} fixedAttrs
 * @param {?=} bindings
 * @param {?=} outputs
 * @param {?=} handleEvent
 * @param {?=} componentView
 * @param {?=} componentRendererType
 * @return {?}
 */
function elementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName) {
    var fixedAttrs = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
    var bindings = arguments[6];
    var outputs = arguments[7];
    var handleEvent = arguments[8];
    var componentView = arguments[9];
    var componentRendererType = arguments[10];

    if (!handleEvent) {
        handleEvent = NOOP;
    }
    // skip the call to sliceErrorStack itself + the call to this function.
    var /** @type {?} */source = isDevMode() ? sliceErrorStack(2, 3) : '';

    var _splitMatchedQueriesD2 = splitMatchedQueriesDsl(matchedQueriesDsl),
        matchedQueries = _splitMatchedQueriesD2.matchedQueries,
        references = _splitMatchedQueriesD2.references,
        matchedQueryIds = _splitMatchedQueriesD2.matchedQueryIds;

    var /** @type {?} */ns = void 0;
    var /** @type {?} */name = void 0;
    if (namespaceAndName) {
        var _splitNamespace = splitNamespace(namespaceAndName);

        var _splitNamespace2 = _slicedToArray(_splitNamespace, 2);

        ns = _splitNamespace2[0];
        name = _splitNamespace2[1];
    }
    bindings = bindings || [];
    var /** @type {?} */bindingDefs = new Array(bindings.length);
    for (var /** @type {?} */i = 0; i < bindings.length; i++) {
        var /** @type {?} */entry = bindings[i];
        var /** @type {?} */bindingDef = void 0;
        var /** @type {?} */bindingType = entry[0];

        var _splitNamespace3 = splitNamespace(entry[1]),
            _splitNamespace4 = _slicedToArray(_splitNamespace3, 2),
            _ns = _splitNamespace4[0],
            _name = _splitNamespace4[1];

        var /** @type {?} */securityContext = void 0;
        var /** @type {?} */suffix = void 0;
        switch (bindingType) {
            case 2 /* ElementStyle */:
                suffix = entry[2];
                break;
            case 0 /* ElementAttribute */:
            case 3 /* ElementProperty */:
            case 4 /* ComponentHostProperty */:
                securityContext = entry[2];
                break;
        }
        bindingDefs[i] = { type: bindingType, ns: _ns, name: _name, nonMinifiedName: _name, securityContext: securityContext, suffix: suffix };
    }
    outputs = outputs || [];
    var /** @type {?} */outputDefs = new Array(outputs.length);
    for (var /** @type {?} */_i2 = 0; _i2 < outputs.length; _i2++) {
        var _outputs$_i = _slicedToArray(outputs[_i2], 2),
            target = _outputs$_i[0],
            eventName = _outputs$_i[1];

        outputDefs[_i2] = {
            type: 0 /* ElementOutput */
            , target: /** @type {?} */target, eventName: eventName,
            propName: undefined
        };
    }
    fixedAttrs = fixedAttrs || [];
    var /** @type {?} */attrs = fixedAttrs.map(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            namespaceAndName = _ref6[0],
            value = _ref6[1];

        var _splitNamespace5 = splitNamespace(namespaceAndName),
            _splitNamespace6 = _slicedToArray(_splitNamespace5, 2),
            ns = _splitNamespace6[0],
            name = _splitNamespace6[1];

        return [ns, name, value];
    });
    // This is needed as the jit compiler always uses an empty hash as default RendererTypeV2,
    // which is not filled for host views.
    if (componentRendererType && componentRendererType.encapsulation == null) {
        componentRendererType = null;
    }
    if (componentView) {
        flags |= 16777216 /* ComponentView */;
    }
    flags |= 1 /* TypeElement */;
    return {
        // will bet set by the view definition
        index: undefined,
        parent: undefined,
        renderParent: undefined,
        bindingIndex: undefined,
        outputIndex: undefined,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
        bindings: bindingDefs,
        outputs: outputDefs,
        element: {
            ns: ns,
            name: name,
            attrs: attrs,
            source: source,
            template: undefined,
            // will bet set by the view definition
            componentProvider: undefined, componentView: componentView, componentRendererType: componentRendererType,
            publicProviders: undefined,
            allProviders: undefined, handleEvent: handleEvent
        },
        provider: undefined,
        text: undefined,
        query: undefined,
        ngContent: undefined
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function createElement(view, renderHost, def) {
    var /** @type {?} */elDef = def.element;
    var /** @type {?} */rootSelectorOrNode = view.root.selectorOrNode;
    var /** @type {?} */renderer = view.renderer;
    var /** @type {?} */el = void 0;
    if (view.parent || !rootSelectorOrNode) {
        if (elDef.name) {
            el = renderer.createElement(elDef.name, elDef.ns);
        } else {
            el = renderer.createComment('');
        }
        var /** @type {?} */parentEl = getParentRenderElement(view, renderHost, def);
        if (parentEl) {
            renderer.appendChild(parentEl, el);
        }
    } else {
        el = renderer.selectRootElement(rootSelectorOrNode);
    }
    if (elDef.attrs) {
        for (var /** @type {?} */i = 0; i < elDef.attrs.length; i++) {
            var _elDef$attrs$i = _slicedToArray(elDef.attrs[i], 3),
                ns = _elDef$attrs$i[0],
                name = _elDef$attrs$i[1],
                value = _elDef$attrs$i[2];

            renderer.setAttribute(el, name, value, ns);
        }
    }
    return el;
}
/**
 * @param {?} view
 * @param {?} compView
 * @param {?} def
 * @param {?} el
 * @return {?}
 */
function listenToElementOutputs(view, compView, def, el) {
    for (var /** @type {?} */i = 0; i < def.outputs.length; i++) {
        var /** @type {?} */output = def.outputs[i];
        var /** @type {?} */handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName));
        var /** @type {?} */listenTarget = output.target;
        var /** @type {?} */listenerView = view;
        if (output.target === 'component') {
            listenTarget = null;
            listenerView = compView;
        }
        var /** @type {?} */disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);
        view.disposables[def.outputIndex + i] = disposable;
    }
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */
function renderEventHandlerClosure(view, index, eventName) {
    return function (event) {
        return dispatchEvent(view, index, eventName, event);
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */bindLen = def.bindings.length;
    var /** @type {?} */changed = false;
    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0)) changed = true;
    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1)) changed = true;
    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2)) changed = true;
    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3)) changed = true;
    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4)) changed = true;
    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5)) changed = true;
    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6)) changed = true;
    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7)) changed = true;
    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8)) changed = true;
    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9)) changed = true;
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateElementDynamic(view, def, values) {
    var /** @type {?} */changed = false;
    for (var /** @type {?} */i = 0; i < values.length; i++) {
        if (checkAndUpdateElementValue(view, def, i, values[i])) changed = true;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkAndUpdateElementValue(view, def, bindingIdx, value) {
    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
        return false;
    }
    var /** @type {?} */binding = def.bindings[bindingIdx];
    var /** @type {?} */elData = asElementData(view, def.index);
    var /** @type {?} */renderNode = elData.renderElement;
    var /** @type {?} */name = binding.name;
    switch (binding.type) {
        case 0 /* ElementAttribute */:
            setElementAttribute(view, binding, renderNode, binding.ns, name, value);
            break;
        case 1 /* ElementClass */:
            setElementClass(view, renderNode, name, value);
            break;
        case 2 /* ElementStyle */:
            setElementStyle(view, binding, renderNode, name, value);
            break;
        case 3 /* ElementProperty */:
            setElementProperty(view, binding, renderNode, name, value);
            break;
        case 4 /* ComponentHostProperty */:
            setElementProperty(elData.componentView, binding, renderNode, name, value);
            break;
    }
    return true;
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} ns
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementAttribute(view, binding, renderNode, ns, name, value) {
    var /** @type {?} */securityContext = binding.securityContext;
    var /** @type {?} */renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
    renderValue = renderValue != null ? renderValue.toString() : null;
    var /** @type {?} */renderer = view.renderer;
    if (value != null) {
        renderer.setAttribute(renderNode, name, renderValue, ns);
    } else {
        renderer.removeAttribute(renderNode, name, ns);
    }
}
/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementClass(view, renderNode, name, value) {
    var /** @type {?} */renderer = view.renderer;
    if (value) {
        renderer.addClass(renderNode, name);
    } else {
        renderer.removeClass(renderNode, name);
    }
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementStyle(view, binding, renderNode, name, value) {
    var /** @type {?} */renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);
    if (renderValue != null) {
        renderValue = renderValue.toString();
        var /** @type {?} */unit = binding.suffix;
        if (unit != null) {
            renderValue = renderValue + unit;
        }
    } else {
        renderValue = null;
    }
    var /** @type {?} */renderer = view.renderer;
    if (renderValue != null) {
        renderer.setStyle(renderNode, name, renderValue, false, false);
    } else {
        renderer.removeStyle(renderNode, name, false);
    }
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementProperty(view, binding, renderNode, name, value) {
    var /** @type {?} */securityContext = binding.securityContext;
    var /** @type {?} */renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
    view.renderer.setProperty(renderNode, name, renderValue);
}

/**
 * @param {?} ngContentIndex
 * @param {?} index
 * @return {?}
 */
function ngContentDef(ngContentIndex, index) {
    return {
        // will bet set by the view definition
        index: undefined,
        parent: undefined,
        renderParent: undefined,
        bindingIndex: undefined,
        outputIndex: undefined,
        // regular values
        flags: 4 /* TypeNgContent */
        , childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {}, ngContentIndex: ngContentIndex,
        childCount: 0,
        bindings: [],
        outputs: [],
        element: undefined,
        provider: undefined,
        text: undefined,
        query: undefined,
        ngContent: { index: index }
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function appendNgContent(view, renderHost, def) {
    var /** @type {?} */parentEl = getParentRenderElement(view, renderHost, def);
    if (!parentEl) {
        // Nothing to do if there is no parent element.
        return;
    }
    var /** @type {?} */ngContentIndex = def.ngContent.index;
    visitProjectedRenderNodes(view, ngContentIndex, RenderNodeAction.AppendChild, parentEl, undefined, undefined);
}

/**
 * @param {?} parentView
 * @param {?} elementData
 * @param {?} viewIndex
 * @param {?} view
 * @return {?}
 */
function attachEmbeddedView(parentView, elementData, viewIndex, view) {
    var /** @type {?} */embeddedViews = elementData.embeddedViews;
    if (viewIndex == null) {
        viewIndex = embeddedViews.length;
    }
    view.viewContainerParent = parentView;
    addToArray(embeddedViews, viewIndex, view);
    var /** @type {?} */dvcElementData = declaredViewContainer(view);
    if (dvcElementData && dvcElementData !== elementData) {
        var /** @type {?} */projectedViews = dvcElementData.projectedViews;
        if (!projectedViews) {
            projectedViews = dvcElementData.projectedViews = [];
        }
        projectedViews.push(view);
    }
    Services.dirtyParentQueries(view);
    var /** @type {?} */prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
    renderAttachEmbeddedView(elementData, prevView, view);
}
/**
 * @param {?} elementData
 * @param {?} viewIndex
 * @return {?}
 */
function detachEmbeddedView(elementData, viewIndex) {
    var /** @type {?} */embeddedViews = elementData.embeddedViews;
    if (viewIndex == null || viewIndex >= embeddedViews.length) {
        viewIndex = embeddedViews.length - 1;
    }
    if (viewIndex < 0) {
        return null;
    }
    var /** @type {?} */view = embeddedViews[viewIndex];
    view.viewContainerParent = undefined;
    removeFromArray(embeddedViews, viewIndex);
    var /** @type {?} */dvcElementData = declaredViewContainer(view);
    if (dvcElementData && dvcElementData !== elementData) {
        var /** @type {?} */projectedViews = dvcElementData.projectedViews;
        removeFromArray(projectedViews, projectedViews.indexOf(view));
    }
    Services.dirtyParentQueries(view);
    renderDetachView(view);
    return view;
}
/**
 * @param {?} elementData
 * @param {?} oldViewIndex
 * @param {?} newViewIndex
 * @return {?}
 */
function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
    var /** @type {?} */embeddedViews = elementData.embeddedViews;
    var /** @type {?} */view = embeddedViews[oldViewIndex];
    removeFromArray(embeddedViews, oldViewIndex);
    if (newViewIndex == null) {
        newViewIndex = embeddedViews.length;
    }
    addToArray(embeddedViews, newViewIndex, view);
    // Note: Don't need to change projectedViews as the order in there
    // as always invalid...
    Services.dirtyParentQueries(view);
    renderDetachView(view);
    var /** @type {?} */prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
    renderAttachEmbeddedView(elementData, prevView, view);
    return view;
}
/**
 * @param {?} elementData
 * @param {?} prevView
 * @param {?} view
 * @return {?}
 */
function renderAttachEmbeddedView(elementData, prevView, view) {
    var /** @type {?} */prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
    var /** @type {?} */parentNode = view.renderer.parentNode(prevRenderNode);
    var /** @type {?} */nextSibling = view.renderer.nextSibling(prevRenderNode);
    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
    // However, browsers automatically do `appendChild` when there is no `nextSibling`.
    visitRootRenderNodes(view, RenderNodeAction.InsertBefore, parentNode, nextSibling, undefined);
}
/**
 * @param {?} view
 * @return {?}
 */
function renderDetachView(view) {
    visitRootRenderNodes(view, RenderNodeAction.RemoveChild, null, null, undefined);
}
/**
 * @param {?} arr
 * @param {?} index
 * @param {?} value
 * @return {?}
 */
function addToArray(arr, index, value) {
    // perf: array.push is faster than array.splice!
    if (index >= arr.length) {
        arr.push(value);
    } else {
        arr.splice(index, 0, value);
    }
}
/**
 * @param {?} arr
 * @param {?} index
 * @return {?}
 */
function removeFromArray(arr, index) {
    // perf: array.pop is faster than array.splice!
    if (index >= arr.length - 1) {
        arr.pop();
    } else {
        arr.splice(index, 1);
    }
}

var /** @type {?} */EMPTY_CONTEXT = new Object();
/**
 * @param {?} selector
 * @param {?} componentType
 * @param {?} viewDefFactory
 * @return {?}
 */
function createComponentFactory(selector, componentType, viewDefFactory) {
    return new ComponentFactory_(selector, componentType, viewDefFactory);
}
/**
 * @param {?} componentFactory
 * @return {?}
 */
function getComponentViewDefinitionFactory(componentFactory) {
    return componentFactory.viewDefFactory;
}

var ComponentFactory_ = function (_ComponentFactory) {
    _inherits(ComponentFactory_, _ComponentFactory);

    /**
     * @param {?} selector
     * @param {?} componentType
     * @param {?} viewDefFactory
     */
    function ComponentFactory_(selector, componentType, viewDefFactory) {
        _classCallCheck(this, ComponentFactory_);

        var _this24 = _possibleConstructorReturn(this, (ComponentFactory_.__proto__ || Object.getPrototypeOf(ComponentFactory_)).call(this));

        _this24.selector = selector;
        _this24.componentType = componentType;
        _this24.viewDefFactory = viewDefFactory;
        return _this24;
    }
    /**
     * Creates a new component.
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @return {?}
     */


    _createClass(ComponentFactory_, [{
        key: 'create',
        value: function create(injector) {
            var projectableNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var rootSelectorOrNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var /** @type {?} */viewDef = resolveViewDefinition(this.viewDefFactory);
            var /** @type {?} */componentNodeIndex = viewDef.nodes[0].element.componentProvider.index;
            var /** @type {?} */view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, EMPTY_CONTEXT);
            var /** @type {?} */component = asProviderData(view, componentNodeIndex).instance;
            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
            return new ComponentRef_(view, new ViewRef_(view), component);
        }
    }]);

    return ComponentFactory_;
}(ComponentFactory);

var ComponentRef_ = function (_ComponentRef) {
    _inherits(ComponentRef_, _ComponentRef);

    /**
     * @param {?} _view
     * @param {?} _viewRef
     * @param {?} _component
     */
    function ComponentRef_(_view, _viewRef, _component) {
        _classCallCheck(this, ComponentRef_);

        var _this25 = _possibleConstructorReturn(this, (ComponentRef_.__proto__ || Object.getPrototypeOf(ComponentRef_)).call(this));

        _this25._view = _view;
        _this25._viewRef = _viewRef;
        _this25._component = _component;
        _this25._elDef = _this25._view.def.nodes[0];
        return _this25;
    }
    /**
     * @return {?}
     */


    _createClass(ComponentRef_, [{
        key: 'destroy',

        /**
         * @return {?}
         */
        value: function destroy() {
            this._viewRef.destroy();
        }
        /**
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(callback) {
            this._viewRef.onDestroy(callback);
        }
    }, {
        key: 'location',
        get: function get() {
            return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'injector',
        get: function get() {
            return new Injector_(this._view, this._elDef);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'instance',
        get: function get() {
            return this._component;
        }
    }, {
        key: 'hostView',

        /**
         * @return {?}
         */
        get: function get() {
            return this._viewRef;
        }
    }, {
        key: 'changeDetectorRef',

        /**
         * @return {?}
         */
        get: function get() {
            return this._viewRef;
        }
    }, {
        key: 'componentType',

        /**
         * @return {?}
         */
        get: function get() {
            return this._component.constructor;
        }
    }]);

    return ComponentRef_;
}(ComponentRef);
/**
 * @param {?} view
 * @param {?} elDef
 * @return {?}
 */


function createViewContainerRef(view, elDef) {
    return new ViewContainerRef_(view, elDef);
}

var ViewContainerRef_ = function () {
    /**
     * @param {?} _view
     * @param {?} _elDef
     */
    function ViewContainerRef_(_view, _elDef) {
        _classCallCheck(this, ViewContainerRef_);

        this._view = _view;
        this._elDef = _elDef;
        this._data = asElementData(_view, _elDef.index);
    }
    /**
     * @return {?}
     */


    _createClass(ViewContainerRef_, [{
        key: 'clear',

        /**
         * @return {?}
         */
        value: function clear() {
            var /** @type {?} */len = this._data.embeddedViews.length;
            for (var /** @type {?} */i = len - 1; i >= 0; i--) {
                var /** @type {?} */view = detachEmbeddedView(this._data, i);
                Services.destroyView(view);
            }
        }
        /**
         * @param {?} index
         * @return {?}
         */

    }, {
        key: 'get',
        value: function get(index) {
            var /** @type {?} */view = this._data.embeddedViews[index];
            if (view) {
                var /** @type {?} */ref = new ViewRef_(view);
                ref.attachToViewContainerRef(this);
                return ref;
            }
            return null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'createEmbeddedView',

        /**
         * @param {?} templateRef
         * @param {?=} context
         * @param {?=} index
         * @return {?}
         */
        value: function createEmbeddedView(templateRef, context, index) {
            var /** @type {?} */viewRef = templateRef.createEmbeddedView(context || {});
            this.insert(viewRef, index);
            return viewRef;
        }
        /**
         * @param {?} componentFactory
         * @param {?=} index
         * @param {?=} injector
         * @param {?=} projectableNodes
         * @return {?}
         */

    }, {
        key: 'createComponent',
        value: function createComponent(componentFactory, index, injector, projectableNodes) {
            var /** @type {?} */contextInjector = injector || this.parentInjector;
            var /** @type {?} */componentRef = componentFactory.create(contextInjector, projectableNodes);
            this.insert(componentRef.hostView, index);
            return componentRef;
        }
        /**
         * @param {?} viewRef
         * @param {?=} index
         * @return {?}
         */

    }, {
        key: 'insert',
        value: function insert(viewRef, index) {
            var /** @type {?} */viewRef_ = viewRef;
            var /** @type {?} */viewData = viewRef_._view;
            attachEmbeddedView(this._view, this._data, index, viewData);
            viewRef_.attachToViewContainerRef(this);
            return viewRef;
        }
        /**
         * @param {?} viewRef
         * @param {?} currentIndex
         * @return {?}
         */

    }, {
        key: 'move',
        value: function move(viewRef, currentIndex) {
            var /** @type {?} */previousIndex = this._data.embeddedViews.indexOf(viewRef._view);
            moveEmbeddedView(this._data, previousIndex, currentIndex);
            return viewRef;
        }
        /**
         * @param {?} viewRef
         * @return {?}
         */

    }, {
        key: 'indexOf',
        value: function indexOf(viewRef) {
            return this._data.embeddedViews.indexOf(viewRef._view);
        }
        /**
         * @param {?=} index
         * @return {?}
         */

    }, {
        key: 'remove',
        value: function remove(index) {
            var /** @type {?} */viewData = detachEmbeddedView(this._data, index);
            if (viewData) {
                Services.destroyView(viewData);
            }
        }
        /**
         * @param {?=} index
         * @return {?}
         */

    }, {
        key: 'detach',
        value: function detach(index) {
            var /** @type {?} */view = detachEmbeddedView(this._data, index);
            return view ? new ViewRef_(view) : null;
        }
    }, {
        key: 'element',
        get: function get() {
            return new ElementRef(this._data.renderElement);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'injector',
        get: function get() {
            return new Injector_(this._view, this._elDef);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parentInjector',
        get: function get() {
            var /** @type {?} */view = this._view;
            var /** @type {?} */elDef = this._elDef.parent;
            while (!elDef && view) {
                elDef = viewParentEl(view);
                view = view.parent;
            }
            return view ? new Injector_(view, elDef) : this._view.root.injector;
        }
    }, {
        key: 'length',
        get: function get() {
            return this._data.embeddedViews.length;
        }
    }]);

    return ViewContainerRef_;
}();
/**
 * @param {?} view
 * @return {?}
 */


function createChangeDetectorRef(view) {
    return new ViewRef_(view);
}

var ViewRef_ = function () {
    /**
     * @param {?} _view
     */
    function ViewRef_(_view) {
        _classCallCheck(this, ViewRef_);

        this._view = _view;
        this._viewContainerRef = null;
        this._appRef = null;
    }
    /**
     * @return {?}
     */


    _createClass(ViewRef_, [{
        key: 'markForCheck',

        /**
         * @return {?}
         */
        value: function markForCheck() {
            markParentViewsForCheck(this._view);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'detach',
        value: function detach() {
            this._view.state &= ~2 /* ChecksEnabled */;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'detectChanges',
        value: function detectChanges() {
            Services.checkAndUpdateView(this._view);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'checkNoChanges',
        value: function checkNoChanges() {
            Services.checkNoChangesView(this._view);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'reattach',
        value: function reattach() {
            this._view.state |= 2 /* ChecksEnabled */;
        }
        /**
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(callback) {
            if (!this._view.disposables) {
                this._view.disposables = [];
            }
            this._view.disposables.push( /** @type {?} */callback);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            if (this._appRef) {
                this._appRef.detachView(this);
            } else if (this._viewContainerRef) {
                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
            }
            Services.destroyView(this._view);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'detachFromAppRef',
        value: function detachFromAppRef() {
            this._appRef = null;
            renderDetachView(this._view);
            Services.dirtyParentQueries(this._view);
        }
        /**
         * @param {?} appRef
         * @return {?}
         */

    }, {
        key: 'attachToAppRef',
        value: function attachToAppRef(appRef) {
            if (this._viewContainerRef) {
                throw new Error('This view is already attached to a ViewContainer!');
            }
            this._appRef = appRef;
        }
        /**
         * @param {?} vcRef
         * @return {?}
         */

    }, {
        key: 'attachToViewContainerRef',
        value: function attachToViewContainerRef(vcRef) {
            if (this._appRef) {
                throw new Error('This view is already attached directly to the ApplicationRef!');
            }
            this._viewContainerRef = vcRef;
        }
    }, {
        key: 'rootNodes',
        get: function get() {
            return rootRenderNodes(this._view);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'context',
        get: function get() {
            return this._view.context;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'destroyed',
        get: function get() {
            return (this._view.state & 8 /* Destroyed */) !== 0;
        }
    }]);

    return ViewRef_;
}();
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */


function createTemplateRef(view, def) {
    return new TemplateRef_(view, def);
}

var TemplateRef_ = function (_TemplateRef) {
    _inherits(TemplateRef_, _TemplateRef);

    /**
     * @param {?} _parentView
     * @param {?} _def
     */
    function TemplateRef_(_parentView, _def) {
        _classCallCheck(this, TemplateRef_);

        var _this26 = _possibleConstructorReturn(this, (TemplateRef_.__proto__ || Object.getPrototypeOf(TemplateRef_)).call(this));

        _this26._parentView = _parentView;
        _this26._def = _def;
        return _this26;
    }
    /**
     * @param {?} context
     * @return {?}
     */


    _createClass(TemplateRef_, [{
        key: 'createEmbeddedView',
        value: function createEmbeddedView(context) {
            return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, context));
        }
        /**
         * @return {?}
         */

    }, {
        key: 'elementRef',
        get: function get() {
            return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);
        }
    }]);

    return TemplateRef_;
}(TemplateRef);
/**
 * @param {?} view
 * @param {?} elDef
 * @return {?}
 */


function createInjector(view, elDef) {
    return new Injector_(view, elDef);
}

var Injector_ = function () {
    /**
     * @param {?} view
     * @param {?} elDef
     */
    function Injector_(view, elDef) {
        _classCallCheck(this, Injector_);

        this.view = view;
        this.elDef = elDef;
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */


    _createClass(Injector_, [{
        key: 'get',
        value: function get(token) {
            var notFoundValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Injector.THROW_IF_NOT_FOUND;

            var /** @type {?} */allowPrivateServices = (this.elDef.flags & 16777216 /* ComponentView */) !== 0;
            return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);
        }
    }]);

    return Injector_;
}();
/**
 * @param {?} view
 * @param {?} index
 * @return {?}
 */


function nodeValue(view, index) {
    var /** @type {?} */def = view.def.nodes[index];
    if (def.flags & 1 /* TypeElement */) {
            if (def.element.template) {
                return createTemplateRef(view, def);
            } else {
                return asElementData(view, def.index).renderElement;
            }
        } else if (def.flags & 2 /* TypeText */) {
            return asTextData(view, def.index).renderText;
        } else if (def.flags & (10112 /* CatProvider */ | 8 /* TypePipe */)) {
        return asProviderData(view, def.index).instance;
    }
    throw new Error('Illegal state: read nodeValue for node index ' + index);
}
/**
 * @param {?} view
 * @return {?}
 */
function createRendererV1(view) {
    return new RendererAdapter(view.renderer);
}

var RendererAdapter = function () {
    /**
     * @param {?} delegate
     */
    function RendererAdapter(delegate) {
        _classCallCheck(this, RendererAdapter);

        this.delegate = delegate;
    }
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */


    _createClass(RendererAdapter, [{
        key: 'selectRootElement',
        value: function selectRootElement(selectorOrNode) {
            return this.delegate.selectRootElement(selectorOrNode);
        }
        /**
         * @param {?} parent
         * @param {?} namespaceAndName
         * @return {?}
         */

    }, {
        key: 'createElement',
        value: function createElement(parent, namespaceAndName) {
            var _splitNamespace7 = splitNamespace(namespaceAndName),
                _splitNamespace8 = _slicedToArray(_splitNamespace7, 2),
                ns = _splitNamespace8[0],
                name = _splitNamespace8[1];

            var /** @type {?} */el = this.delegate.createElement(name, ns);
            if (parent) {
                this.delegate.appendChild(parent, el);
            }
            return el;
        }
        /**
         * @param {?} hostElement
         * @return {?}
         */

    }, {
        key: 'createViewRoot',
        value: function createViewRoot(hostElement) {
            return hostElement;
        }
        /**
         * @param {?} parentElement
         * @return {?}
         */

    }, {
        key: 'createTemplateAnchor',
        value: function createTemplateAnchor(parentElement) {
            var /** @type {?} */comment = this.delegate.createComment('');
            if (parentElement) {
                this.delegate.appendChild(parentElement, comment);
            }
            return comment;
        }
        /**
         * @param {?} parentElement
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'createText',
        value: function createText(parentElement, value) {
            var /** @type {?} */node = this.delegate.createText(value);
            if (parentElement) {
                this.delegate.appendChild(parentElement, node);
            }
            return node;
        }
        /**
         * @param {?} parentElement
         * @param {?} nodes
         * @return {?}
         */

    }, {
        key: 'projectNodes',
        value: function projectNodes(parentElement, nodes) {
            for (var /** @type {?} */i = 0; i < nodes.length; i++) {
                this.delegate.appendChild(parentElement, nodes[i]);
            }
        }
        /**
         * @param {?} node
         * @param {?} viewRootNodes
         * @return {?}
         */

    }, {
        key: 'attachViewAfter',
        value: function attachViewAfter(node, viewRootNodes) {
            var /** @type {?} */parentElement = this.delegate.parentNode(node);
            var /** @type {?} */nextSibling = this.delegate.nextSibling(node);
            for (var /** @type {?} */i = 0; i < viewRootNodes.length; i++) {
                this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
            }
        }
        /**
         * @param {?} viewRootNodes
         * @return {?}
         */

    }, {
        key: 'detachView',
        value: function detachView(viewRootNodes) {
            for (var /** @type {?} */i = 0; i < viewRootNodes.length; i++) {
                var /** @type {?} */node = viewRootNodes[i];
                var /** @type {?} */parentElement = this.delegate.parentNode(node);
                this.delegate.removeChild(parentElement, node);
            }
        }
        /**
         * @param {?} hostElement
         * @param {?} viewAllNodes
         * @return {?}
         */

    }, {
        key: 'destroyView',
        value: function destroyView(hostElement, viewAllNodes) {
            for (var /** @type {?} */i = 0; i < viewAllNodes.length; i++) {
                this.delegate.destroyNode(viewAllNodes[i]);
            }
        }
        /**
         * @param {?} renderElement
         * @param {?} name
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listen',
        value: function listen(renderElement, name, callback) {
            return this.delegate.listen(renderElement, name, /** @type {?} */callback);
        }
        /**
         * @param {?} target
         * @param {?} name
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listenGlobal',
        value: function listenGlobal(target, name, callback) {
            return this.delegate.listen(target, name, /** @type {?} */callback);
        }
        /**
         * @param {?} renderElement
         * @param {?} propertyName
         * @param {?} propertyValue
         * @return {?}
         */

    }, {
        key: 'setElementProperty',
        value: function setElementProperty(renderElement, propertyName, propertyValue) {
            this.delegate.setProperty(renderElement, propertyName, propertyValue);
        }
        /**
         * @param {?} renderElement
         * @param {?} namespaceAndName
         * @param {?} attributeValue
         * @return {?}
         */

    }, {
        key: 'setElementAttribute',
        value: function setElementAttribute(renderElement, namespaceAndName, attributeValue) {
            var _splitNamespace9 = splitNamespace(namespaceAndName),
                _splitNamespace10 = _slicedToArray(_splitNamespace9, 2),
                ns = _splitNamespace10[0],
                name = _splitNamespace10[1];

            if (attributeValue != null) {
                this.delegate.setAttribute(renderElement, name, attributeValue, ns);
            } else {
                this.delegate.removeAttribute(renderElement, name, ns);
            }
        }
        /**
         * @param {?} renderElement
         * @param {?} propertyName
         * @param {?} propertyValue
         * @return {?}
         */

    }, {
        key: 'setBindingDebugInfo',
        value: function setBindingDebugInfo(renderElement, propertyName, propertyValue) {}
        /**
         * @param {?} renderElement
         * @param {?} className
         * @param {?} isAdd
         * @return {?}
         */

    }, {
        key: 'setElementClass',
        value: function setElementClass(renderElement, className, isAdd) {
            if (isAdd) {
                this.delegate.addClass(renderElement, className);
            } else {
                this.delegate.removeClass(renderElement, className);
            }
        }
        /**
         * @param {?} renderElement
         * @param {?} styleName
         * @param {?} styleValue
         * @return {?}
         */

    }, {
        key: 'setElementStyle',
        value: function setElementStyle(renderElement, styleName, styleValue) {
            if (styleValue != null) {
                this.delegate.setStyle(renderElement, styleName, styleValue, false, false);
            } else {
                this.delegate.removeStyle(renderElement, styleName, false);
            }
        }
        /**
         * @param {?} renderElement
         * @param {?} methodName
         * @param {?} args
         * @return {?}
         */

    }, {
        key: 'invokeElementMethod',
        value: function invokeElementMethod(renderElement, methodName, args) {
            renderElement[methodName].apply(renderElement, args);
        }
        /**
         * @param {?} renderNode
         * @param {?} text
         * @return {?}
         */

    }, {
        key: 'setText',
        value: function setText(renderNode, text) {
            this.delegate.setValue(renderNode, text);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'animate',
        value: function animate() {
            throw new Error('Renderer.animate is no longer supported!');
        }
    }]);

    return RendererAdapter;
}();

var /** @type {?} */RendererV1TokenKey = tokenKey(RendererV1);
var /** @type {?} */RendererV2TokenKey = tokenKey(RendererV2);
var /** @type {?} */ElementRefTokenKey = tokenKey(ElementRef);
var /** @type {?} */ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
var /** @type {?} */TemplateRefTokenKey = tokenKey(TemplateRef);
var /** @type {?} */ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
var /** @type {?} */InjectorRefTokenKey = tokenKey(Injector);
var /** @type {?} */NOT_CREATED = new Object();
/**
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} childCount
 * @param {?} ctor
 * @param {?} deps
 * @param {?=} props
 * @param {?=} outputs
 * @return {?}
 */
function directiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {
    var /** @type {?} */bindings = [];
    if (props) {
        for (var /** @type {?} */prop in props) {
            var _props$prop = _slicedToArray(props[prop], 2),
                bindingIndex = _props$prop[0],
                nonMinifiedName = _props$prop[1];

            bindings[bindingIndex] = {
                type: 5 /* DirectiveProperty */
                , name: prop, nonMinifiedName: nonMinifiedName,
                ns: undefined,
                securityContext: undefined,
                suffix: undefined
            };
        }
    }
    var /** @type {?} */outputDefs = [];
    if (outputs) {
        for (var /** @type {?} */propName in outputs) {
            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });
        }
    }
    flags |= 8192 /* TypeDirective */;
    return _def(flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
}
/**
 * @param {?} flags
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function pipeDef(flags, ctor, deps) {
    flags |= 8 /* TypePipe */;
    return _def(flags, null, 0, ctor, ctor, deps);
}
/**
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @return {?}
 */
function providerDef(flags, matchedQueries, token, value, deps) {
    return _def(flags, matchedQueries, 0, token, value, deps);
}
/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} childCount
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @param {?=} bindings
 * @param {?=} outputs
 * @return {?}
 */
function _def(flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
    var _splitMatchedQueriesD3 = splitMatchedQueriesDsl(matchedQueriesDsl),
        matchedQueries = _splitMatchedQueriesD3.matchedQueries,
        references = _splitMatchedQueriesD3.references,
        matchedQueryIds = _splitMatchedQueriesD3.matchedQueryIds;

    if (!outputs) {
        outputs = [];
    }
    if (!bindings) {
        bindings = [];
    }
    var /** @type {?} */depDefs = deps.map(function (value) {
        var /** @type {?} */token = void 0;
        var /** @type {?} */flags = void 0;
        if (Array.isArray(value)) {
            var _value = _slicedToArray(value, 2);

            flags = _value[0];
            token = _value[1];
        } else {
            flags = 0 /* None */;
            token = value;
        }
        return { flags: flags, token: token, tokenKey: tokenKey(token) };
    });
    return {
        // will bet set by the view definition
        index: undefined,
        parent: undefined,
        renderParent: undefined,
        bindingIndex: undefined,
        outputIndex: undefined,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,
        ngContentIndex: undefined, childCount: childCount, bindings: bindings, outputs: outputs,
        element: undefined,
        provider: { token: token, tokenKey: tokenKey(token), value: value, deps: depDefs },
        text: undefined,
        query: undefined,
        ngContent: undefined
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createProviderInstance(view, def) {
    return def.flags & 2048 /* LazyProvider */ ? NOT_CREATED : _createProviderInstance(view, def);
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createPipeInstance(view, def) {
    // deps are looked up from component.
    var /** @type {?} */compView = view;
    while (compView.parent && !isComponentView(compView)) {
        compView = compView.parent;
    }
    // pipes can see the private services of the component
    var /** @type {?} */allowPrivateServices = true;
    // pipes are always eager and classes!
    return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createDirectiveInstance(view, def) {
    // components can see other private services, other directives can't.
    var /** @type {?} */allowPrivateServices = (def.flags & 16384 /* Component */) > 0;
    var /** @type {?} */providerDef = def.provider;
    // directives are always eager and classes!
    var /** @type {?} */instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);
    if (def.outputs.length) {
        for (var /** @type {?} */i = 0; i < def.outputs.length; i++) {
            var /** @type {?} */output = def.outputs[i];
            var /** @type {?} */subscription = instance[output.propName].subscribe(eventHandlerClosure(view, def.parent.index, output.eventName));
            view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
        }
    }
    return instance;
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */
function eventHandlerClosure(view, index, eventName) {
    return function (event) {
        return dispatchEvent(view, index, eventName, event);
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */providerData = asProviderData(view, def.index);
    var /** @type {?} */directive = providerData.instance;
    var /** @type {?} */changed = false;
    var /** @type {?} */changes = void 0;
    var /** @type {?} */bindLen = def.bindings.length;
    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
        changed = true;
        changes = updateProp(view, providerData, def, 0, v0, changes);
    }
    ;
    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
        changed = true;
        changes = updateProp(view, providerData, def, 1, v1, changes);
    }
    ;
    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
        changed = true;
        changes = updateProp(view, providerData, def, 2, v2, changes);
    }
    ;
    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
        changed = true;
        changes = updateProp(view, providerData, def, 3, v3, changes);
    }
    ;
    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
        changed = true;
        changes = updateProp(view, providerData, def, 4, v4, changes);
    }
    ;
    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
        changed = true;
        changes = updateProp(view, providerData, def, 5, v5, changes);
    }
    ;
    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
        changed = true;
        changes = updateProp(view, providerData, def, 6, v6, changes);
    }
    ;
    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
        changed = true;
        changes = updateProp(view, providerData, def, 7, v7, changes);
    }
    ;
    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
        changed = true;
        changes = updateProp(view, providerData, def, 8, v8, changes);
    }
    ;
    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
        changed = true;
        changes = updateProp(view, providerData, def, 9, v9, changes);
    }
    ;
    if (changes) {
        directive.ngOnChanges(changes);
    }
    if (view.state & 1 /* FirstCheck */ && def.flags & 32768 /* OnInit */) {
        directive.ngOnInit();
    }
    if (def.flags & 131072 /* DoCheck */) {
            directive.ngDoCheck();
        }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateDirectiveDynamic(view, def, values) {
    var /** @type {?} */providerData = asProviderData(view, def.index);
    var /** @type {?} */directive = providerData.instance;
    var /** @type {?} */changed = false;
    var /** @type {?} */changes = void 0;
    for (var /** @type {?} */i = 0; i < values.length; i++) {
        if (checkBinding(view, def, i, values[i])) {
            changed = true;
            changes = updateProp(view, providerData, def, i, values[i], changes);
        }
    }
    if (changes) {
        directive.ngOnChanges(changes);
    }
    if (view.state & 1 /* FirstCheck */ && def.flags & 32768 /* OnInit */) {
        directive.ngOnInit();
    }
    if (def.flags & 131072 /* DoCheck */) {
            directive.ngDoCheck();
        }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function _createProviderInstance(view, def) {
    // private services can see other private services
    var /** @type {?} */allowPrivateServices = (def.flags & 4096 /* PrivateProvider */) > 0;
    var /** @type {?} */providerDef = def.provider;
    var /** @type {?} */injectable = void 0;
    switch (def.flags & 100673535 /* Types */) {case 256 /* TypeClassProvider */:
            injectable = createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
            break;
        case 512 /* TypeFactoryProvider */:
            injectable = callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
            break;
        case 1024 /* TypeUseExistingProvider */:
            injectable = resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);
            break;
        case 128 /* TypeValueProvider */:
            injectable = providerDef.value;
            break;
    }
    return injectable;
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function createClass(view, elDef, allowPrivateServices, ctor, deps) {
    var /** @type {?} */len = deps.length;
    var /** @type {?} */injectable = void 0;
    switch (len) {
        case 0:
            injectable = new ctor();
            break;
        case 1:
            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
            break;
        case 2:
            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
            break;
        case 3:
            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
            break;
        default:
            var /** @type {?} */depValues = new Array(len);
            for (var /** @type {?} */i = 0; i < len; i++) {
                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
            }
            injectable = new (Function.prototype.bind.apply(ctor, [null].concat(depValues)))();
    }
    return injectable;
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} factory
 * @param {?} deps
 * @return {?}
 */
function callFactory(view, elDef, allowPrivateServices, factory, deps) {
    var /** @type {?} */len = deps.length;
    var /** @type {?} */injectable = void 0;
    switch (len) {
        case 0:
            injectable = factory();
            break;
        case 1:
            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
            break;
        case 2:
            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
            break;
        case 3:
            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
            break;
        default:
            var /** @type {?} */depValues = Array(len);
            for (var /** @type {?} */i = 0; i < len; i++) {
                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
            }
            injectable = factory.apply(undefined, _toConsumableArray(depValues));
    }
    return injectable;
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} depDef
 * @param {?=} notFoundValue
 * @return {?}
 */
function resolveDep(view, elDef, allowPrivateServices, depDef) {
    var notFoundValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Injector.THROW_IF_NOT_FOUND;

    if (depDef.flags & 8 /* Value */) {
            return depDef.token;
        }
    var /** @type {?} */startView = view;
    if (depDef.flags & 2 /* Optional */) {
            notFoundValue = null;
        }
    var /** @type {?} */tokenKey = depDef.tokenKey;
    if (depDef.flags & 1 /* SkipSelf */) {
            allowPrivateServices = false;
            elDef = elDef.parent;
        }
    while (view) {
        if (elDef) {
            switch (tokenKey) {
                case RendererV1TokenKey:
                    {
                        var /** @type {?} */compView = findCompView(view, elDef, allowPrivateServices);
                        return createRendererV1(compView);
                    }
                case RendererV2TokenKey:
                    {
                        var /** @type {?} */_compView = findCompView(view, elDef, allowPrivateServices);
                        return _compView.renderer;
                    }
                case ElementRefTokenKey:
                    return new ElementRef(asElementData(view, elDef.index).renderElement);
                case ViewContainerRefTokenKey:
                    return createViewContainerRef(view, elDef);
                case TemplateRefTokenKey:
                    {
                        if (elDef.element.template) {
                            return createTemplateRef(view, elDef);
                        }
                        break;
                    }
                case ChangeDetectorRefTokenKey:
                    {
                        var /** @type {?} */cdView = findCompView(view, elDef, allowPrivateServices);
                        return createChangeDetectorRef(cdView);
                    }
                case InjectorRefTokenKey:
                    return createInjector(view, elDef);
                default:
                    var /** @type {?} */_providerDef = (allowPrivateServices ? elDef.element.allProviders : elDef.element.publicProviders)[tokenKey];
                    if (_providerDef) {
                        var /** @type {?} */providerData = asProviderData(view, _providerDef.index);
                        if (providerData.instance === NOT_CREATED) {
                            providerData.instance = _createProviderInstance(view, _providerDef);
                        }
                        return providerData.instance;
                    }
            }
        }
        allowPrivateServices = isComponentView(view);
        elDef = viewParentEl(view);
        view = view.parent;
    }
    return startView.root.injector.get(depDef.token, notFoundValue);
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @return {?}
 */
function findCompView(view, elDef, allowPrivateServices) {
    var /** @type {?} */compView = void 0;
    if (allowPrivateServices) {
        compView = asElementData(view, elDef.index).componentView;
    } else {
        compView = view;
        while (compView.parent && !isComponentView(compView)) {
            compView = compView.parent;
        }
    }
    return compView;
}
/**
 * @param {?} view
 * @param {?} providerData
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @param {?} changes
 * @return {?}
 */
function updateProp(view, providerData, def, bindingIdx, value, changes) {
    if (def.flags & 16384 /* Component */) {
            var /** @type {?} */compView = asElementData(view, def.parent.index).componentView;
            if (compView.def.flags & 2 /* OnPush */) {
                    compView.state |= 2 /* ChecksEnabled */;
                }
        }
    var /** @type {?} */binding = def.bindings[bindingIdx];
    var /** @type {?} */propName = binding.name;
    // Note: This is still safe with Closure Compiler as
    // the user passed in the property name as an object has to `providerDef`,
    // so Closure Compiler will have renamed the property correctly already.
    providerData.instance[propName] = value;
    if (def.flags & 262144 /* OnChanges */) {
            changes = changes || {};
            var /** @type {?} */oldValue = view.oldValues[def.bindingIndex + bindingIdx];
            var /** @type {?} */_binding = def.bindings[bindingIdx];
            changes[_binding.nonMinifiedName] = new SimpleChange(oldValue, value, (view.state & 1 /* FirstCheck */) !== 0);
        }
    view.oldValues[def.bindingIndex + bindingIdx] = value;
    return changes;
}
/**
 * @param {?} view
 * @param {?} lifecycles
 * @return {?}
 */
function callLifecycleHooksChildrenFirst(view, lifecycles) {
    if (!(view.def.nodeFlags & lifecycles)) {
        return;
    }
    var /** @type {?} */nodes = view.def.nodes;
    for (var /** @type {?} */i = 0; i < nodes.length; i++) {
        var /** @type {?} */nodeDef = nodes[i];
        var /** @type {?} */parent = nodeDef.parent;
        if (!parent && nodeDef.flags & lifecycles) {
            // matching root node (e.g. a pipe)
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
        }
        if ((nodeDef.childFlags & lifecycles) === 0) {
            // no child matches one of the lifecycles
            i += nodeDef.childCount;
        }
        while (parent && parent.flags & 1 /* TypeElement */ && i === parent.index + parent.childCount) {
            // last child of an element
            if (parent.directChildFlags & lifecycles) {
                callElementProvidersLifecycles(view, parent, lifecycles);
            }
            parent = parent.parent;
        }
    }
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} lifecycles
 * @return {?}
 */
function callElementProvidersLifecycles(view, elDef, lifecycles) {
    for (var /** @type {?} */i = elDef.index + 1; i <= elDef.index + elDef.childCount; i++) {
        var /** @type {?} */nodeDef = view.def.nodes[i];
        if (nodeDef.flags & lifecycles) {
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
        }
        // only visit direct children
        i += nodeDef.childCount;
    }
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} lifecycles
 * @return {?}
 */
function callProviderLifecycles(view, index, lifecycles) {
    var /** @type {?} */provider = asProviderData(view, index).instance;
    Services.setCurrentNode(view, index);
    if (lifecycles & 524288 /* AfterContentInit */) {
            provider.ngAfterContentInit();
        }
    if (lifecycles & 1048576 /* AfterContentChecked */) {
            provider.ngAfterContentChecked();
        }
    if (lifecycles & 2097152 /* AfterViewInit */) {
            provider.ngAfterViewInit();
        }
    if (lifecycles & 4194304 /* AfterViewChecked */) {
            provider.ngAfterViewChecked();
        }
    if (lifecycles & 65536 /* OnDestroy */) {
            provider.ngOnDestroy();
        }
}

/**
 * @param {?} argCount
 * @return {?}
 */
function purePipeDef(argCount) {
    // argCount + 1 to include the pipe as first arg
    return _pureExpressionDef(64 /* TypePurePipe */, new Array(argCount + 1));
}
/**
 * @param {?} argCount
 * @return {?}
 */
function pureArrayDef(argCount) {
    return _pureExpressionDef(16 /* TypePureArray */, new Array(argCount));
}
/**
 * @param {?} propertyNames
 * @return {?}
 */
function pureObjectDef(propertyNames) {
    return _pureExpressionDef(32 /* TypePureObject */, propertyNames);
}
/**
 * @param {?} flags
 * @param {?} propertyNames
 * @return {?}
 */
function _pureExpressionDef(flags, propertyNames) {
    var /** @type {?} */bindings = new Array(propertyNames.length);
    for (var /** @type {?} */i = 0; i < propertyNames.length; i++) {
        var /** @type {?} */prop = propertyNames[i];
        bindings[i] = {
            type: 7 /* PureExpressionProperty */
            , name: prop,
            ns: undefined,
            nonMinifiedName: prop,
            securityContext: undefined,
            suffix: undefined
        };
    }
    return {
        // will bet set by the view definition
        index: undefined,
        parent: undefined,
        renderParent: undefined,
        bindingIndex: undefined,
        outputIndex: undefined,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        ngContentIndex: undefined,
        childCount: 0, bindings: bindings,
        outputs: [],
        element: undefined,
        provider: undefined,
        text: undefined,
        query: undefined,
        ngContent: undefined
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createPureExpression(view, def) {
    return { value: undefined };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */bindings = def.bindings;
    var /** @type {?} */changed = false;
    var /** @type {?} */bindLen = bindings.length;
    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;
    if (changed) {
        var /** @type {?} */data = asPureExpressionData(view, def.index);
        var /** @type {?} */value = void 0;
        switch (def.flags & 100673535 /* Types */) {case 16 /* TypePureArray */:
                value = new Array(bindings.length);
                if (bindLen > 0) value[0] = v0;
                if (bindLen > 1) value[1] = v1;
                if (bindLen > 2) value[2] = v2;
                if (bindLen > 3) value[3] = v3;
                if (bindLen > 4) value[4] = v4;
                if (bindLen > 5) value[5] = v5;
                if (bindLen > 6) value[6] = v6;
                if (bindLen > 7) value[7] = v7;
                if (bindLen > 8) value[8] = v8;
                if (bindLen > 9) value[9] = v9;
                break;
            case 32 /* TypePureObject */:
                value = {};
                if (bindLen > 0) value[bindings[0].name] = v0;
                if (bindLen > 1) value[bindings[1].name] = v1;
                if (bindLen > 2) value[bindings[2].name] = v2;
                if (bindLen > 3) value[bindings[3].name] = v3;
                if (bindLen > 4) value[bindings[4].name] = v4;
                if (bindLen > 5) value[bindings[5].name] = v5;
                if (bindLen > 6) value[bindings[6].name] = v6;
                if (bindLen > 7) value[bindings[7].name] = v7;
                if (bindLen > 8) value[bindings[8].name] = v8;
                if (bindLen > 9) value[bindings[9].name] = v9;
                break;
            case 64 /* TypePurePipe */:
                var /** @type {?} */pipe = v0;
                switch (bindLen) {
                    case 1:
                        value = pipe.transform(v0);
                        break;
                    case 2:
                        value = pipe.transform(v1);
                        break;
                    case 3:
                        value = pipe.transform(v1, v2);
                        break;
                    case 4:
                        value = pipe.transform(v1, v2, v3);
                        break;
                    case 5:
                        value = pipe.transform(v1, v2, v3, v4);
                        break;
                    case 6:
                        value = pipe.transform(v1, v2, v3, v4, v5);
                        break;
                    case 7:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6);
                        break;
                    case 8:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                        break;
                    case 9:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                        break;
                    case 10:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                        break;
                }
                break;
        }
        data.value = value;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdatePureExpressionDynamic(view, def, values) {
    var /** @type {?} */bindings = def.bindings;
    var /** @type {?} */changed = false;
    for (var /** @type {?} */i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
        }
    }
    if (changed) {
        var /** @type {?} */data = asPureExpressionData(view, def.index);
        var /** @type {?} */value = void 0;
        switch (def.flags & 100673535 /* Types */) {case 16 /* TypePureArray */:
                value = values;
                break;
            case 32 /* TypePureObject */:
                value = {};
                for (var /** @type {?} */_i3 = 0; _i3 < values.length; _i3++) {
                    value[bindings[_i3].name] = values[_i3];
                }
                break;
            case 64 /* TypePurePipe */:
                var /** @type {?} */pipe = values[0];
                var /** @type {?} */params = values.slice(1);
                value = pipe.transform.apply(pipe, _toConsumableArray(params));
                break;
        }
        data.value = value;
    }
    return changed;
}

/**
 * @param {?} flags
 * @param {?} id
 * @param {?} bindings
 * @return {?}
 */
function queryDef(flags, id, bindings) {
    var /** @type {?} */bindingDefs = [];
    for (var /** @type {?} */propName in bindings) {
        var /** @type {?} */bindingType = bindings[propName];
        bindingDefs.push({ propName: propName, bindingType: bindingType });
    }
    return {
        // will bet set by the view definition
        index: undefined,
        parent: undefined,
        renderParent: undefined,
        bindingIndex: undefined,
        outputIndex: undefined,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        ngContentIndex: undefined,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        childCount: 0,
        bindings: [],
        outputs: [],
        element: undefined,
        provider: undefined,
        text: undefined,
        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },
        ngContent: undefined
    };
}
/**
 * @return {?}
 */
function createQuery() {
    return new QueryList();
}
/**
 * @param {?} view
 * @return {?}
 */
function dirtyParentQueries(view) {
    var /** @type {?} */queryIds = view.def.nodeMatchedQueries;
    while (view.parent && isEmbeddedView(view)) {
        var /** @type {?} */tplDef = view.parentNodeDef;
        view = view.parent;
        // content queries
        var /** @type {?} */end = tplDef.index + tplDef.childCount;
        for (var /** @type {?} */i = 0; i <= end; i++) {
            var /** @type {?} */nodeDef = view.def.nodes[i];
            if (nodeDef.flags & 33554432 /* TypeContentQuery */ && nodeDef.flags & 268435456 /* DynamicQuery */ && (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
                asQueryList(view, i).setDirty();
            }
            if (nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.index || !(nodeDef.childFlags & 33554432 /* TypeContentQuery */) || !(nodeDef.childFlags & 268435456 /* DynamicQuery */)) {
                // skip elements that don't contain the template element or no query.
                i += nodeDef.childCount;
            }
        }
    }
    // view queries
    if (view.def.nodeFlags & 67108864 /* TypeViewQuery */) {
            for (var /** @type {?} */_i4 = 0; _i4 < view.def.nodes.length; _i4++) {
                var /** @type {?} */_nodeDef = view.def.nodes[_i4];
                if (_nodeDef.flags & 67108864 /* TypeViewQuery */ && _nodeDef.flags & 268435456 /* DynamicQuery */) {
                    asQueryList(view, _i4).setDirty();
                }
                // only visit the root nodes
                _i4 += _nodeDef.childCount;
            }
        }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */
function checkAndUpdateQuery(view, nodeDef) {
    var /** @type {?} */queryList = asQueryList(view, nodeDef.index);
    if (!queryList.dirty) {
        return;
    }
    var /** @type {?} */directiveInstance = void 0;
    var /** @type {?} */newValues = void 0;
    if (nodeDef.flags & 33554432 /* TypeContentQuery */) {
            var /** @type {?} */_elementDef = nodeDef.parent.parent;
            newValues = calcQueryValues(view, _elementDef.index, _elementDef.index + _elementDef.childCount, nodeDef.query, []);
            directiveInstance = asProviderData(view, nodeDef.parent.index).instance;
        } else if (nodeDef.flags & 67108864 /* TypeViewQuery */) {
            newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
            directiveInstance = view.component;
        }
    queryList.reset(newValues);
    var /** @type {?} */bindings = nodeDef.query.bindings;
    var /** @type {?} */notify = false;
    for (var /** @type {?} */i = 0; i < bindings.length; i++) {
        var /** @type {?} */binding = bindings[i];
        var /** @type {?} */boundValue = void 0;
        switch (binding.bindingType) {
            case 0 /* First */:
                boundValue = queryList.first;
                break;
            case 1 /* All */:
                boundValue = queryList;
                notify = true;
                break;
        }
        directiveInstance[binding.propName] = boundValue;
    }
    if (notify) {
        queryList.notifyOnChanges();
    }
}
/**
 * @param {?} view
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} queryDef
 * @param {?} values
 * @return {?}
 */
function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
    for (var /** @type {?} */i = startIndex; i <= endIndex; i++) {
        var /** @type {?} */nodeDef = view.def.nodes[i];
        var /** @type {?} */valueType = nodeDef.matchedQueries[queryDef.id];
        if (valueType != null) {
            values.push(getQueryValue(view, nodeDef, valueType));
        }
        if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template && (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {
            // check embedded views that were attached at the place of their template.
            var /** @type {?} */elementData = asElementData(view, i);
            var /** @type {?} */embeddedViews = elementData.embeddedViews;
            if (embeddedViews) {
                for (var /** @type {?} */k = 0; k < embeddedViews.length; k++) {
                    var /** @type {?} */embeddedView = embeddedViews[k];
                    var /** @type {?} */dvc = declaredViewContainer(embeddedView);
                    if (dvc && dvc === elementData) {
                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                    }
                }
            }
            var /** @type {?} */projectedViews = elementData.projectedViews;
            if (projectedViews) {
                for (var /** @type {?} */_k = 0; _k < projectedViews.length; _k++) {
                    var /** @type {?} */projectedView = projectedViews[_k];
                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
                }
            }
        }
        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
            // if no child matches the query, skip the children.
            i += nodeDef.childCount;
        }
    }
    return values;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} queryValueType
 * @return {?}
 */
function getQueryValue(view, nodeDef, queryValueType) {
    if (queryValueType != null) {
        // a match
        var /** @type {?} */value = void 0;
        switch (queryValueType) {
            case 1 /* RenderElement */:
                value = asElementData(view, nodeDef.index).renderElement;
                break;
            case 0 /* ElementRef */:
                value = new ElementRef(asElementData(view, nodeDef.index).renderElement);
                break;
            case 2 /* TemplateRef */:
                value = createTemplateRef(view, nodeDef);
                break;
            case 3 /* ViewContainerRef */:
                value = createViewContainerRef(view, nodeDef);
                break;
            case 4 /* Provider */:
                value = asProviderData(view, nodeDef.index).instance;
                break;
        }
        return value;
    }
}

/**
 * @param {?} ngContentIndex
 * @param {?} constants
 * @return {?}
 */
function textDef(ngContentIndex, constants) {
    // skip the call to sliceErrorStack itself + the call to this function.
    var /** @type {?} */source = isDevMode() ? sliceErrorStack(2, 3) : '';
    var /** @type {?} */bindings = new Array(constants.length - 1);
    for (var /** @type {?} */i = 1; i < constants.length; i++) {
        bindings[i - 1] = {
            type: 6 /* TextInterpolation */
            , name: undefined,
            ns: undefined,
            nonMinifiedName: undefined,
            securityContext: undefined,
            suffix: constants[i]
        };
    }
    var /** @type {?} */flags = 2 /* TypeText */;
    return {
        // will bet set by the view definition
        index: undefined,
        parent: undefined,
        renderParent: undefined,
        bindingIndex: undefined,
        outputIndex: undefined,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {}, ngContentIndex: ngContentIndex,
        childCount: 0, bindings: bindings,
        outputs: [],
        element: undefined,
        provider: undefined,
        text: { prefix: constants[0], source: source },
        query: undefined,
        ngContent: undefined
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function createText(view, renderHost, def) {
    var /** @type {?} */renderNode = void 0;
    var /** @type {?} */renderer = view.renderer;
    renderNode = renderer.createText(def.text.prefix);
    var /** @type {?} */parentEl = getParentRenderElement(view, renderHost, def);
    if (parentEl) {
        renderer.appendChild(parentEl, renderNode);
    }
    return { renderText: renderNode };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */changed = false;
    var /** @type {?} */bindings = def.bindings;
    var /** @type {?} */bindLen = bindings.length;
    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;
    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;
    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;
    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;
    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;
    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;
    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;
    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;
    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;
    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;
    if (changed) {
        var /** @type {?} */value = def.text.prefix;
        if (bindLen > 0) value += _addInterpolationPart(v0, bindings[0]);
        if (bindLen > 1) value += _addInterpolationPart(v1, bindings[1]);
        if (bindLen > 2) value += _addInterpolationPart(v2, bindings[2]);
        if (bindLen > 3) value += _addInterpolationPart(v3, bindings[3]);
        if (bindLen > 4) value += _addInterpolationPart(v4, bindings[4]);
        if (bindLen > 5) value += _addInterpolationPart(v5, bindings[5]);
        if (bindLen > 6) value += _addInterpolationPart(v6, bindings[6]);
        if (bindLen > 7) value += _addInterpolationPart(v7, bindings[7]);
        if (bindLen > 8) value += _addInterpolationPart(v8, bindings[8]);
        if (bindLen > 9) value += _addInterpolationPart(v9, bindings[9]);
        var /** @type {?} */_renderNode = asTextData(view, def.index).renderText;
        view.renderer.setValue(_renderNode, value);
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateTextDynamic(view, def, values) {
    var /** @type {?} */bindings = def.bindings;
    var /** @type {?} */changed = false;
    for (var /** @type {?} */i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
        }
    }
    if (changed) {
        var /** @type {?} */value = '';
        for (var /** @type {?} */_i5 = 0; _i5 < values.length; _i5++) {
            value = value + _addInterpolationPart(values[_i5], bindings[_i5]);
        }
        value = def.text.prefix + value;
        var /** @type {?} */_renderNode2 = asTextData(view, def.index).renderText;
        view.renderer.setValue(_renderNode2, value);
    }
    return changed;
}
/**
 * @param {?} value
 * @param {?} binding
 * @return {?}
 */
function _addInterpolationPart(value, binding) {
    var /** @type {?} */valueStr = value != null ? value.toString() : '';
    return valueStr + binding.suffix;
}

var /** @type {?} */NOOP$1 = function NOOP$1() {
    return undefined;
};
/**
 * @param {?} flags
 * @param {?} nodes
 * @param {?=} updateDirectives
 * @param {?=} updateRenderer
 * @return {?}
 */
function viewDef(flags, nodes, updateDirectives, updateRenderer) {
    // clone nodes and set auto calculated values
    if (nodes.length === 0) {
        throw new Error('Illegal State: Views without nodes are not allowed!');
    }
    var /** @type {?} */reverseChildNodes = new Array(nodes.length);
    var /** @type {?} */viewBindingCount = 0;
    var /** @type {?} */viewDisposableCount = 0;
    var /** @type {?} */viewNodeFlags = 0;
    var /** @type {?} */viewRootNodeFlags = 0;
    var /** @type {?} */viewMatchedQueries = 0;
    var /** @type {?} */currentParent = null;
    var /** @type {?} */currentElementHasPublicProviders = false;
    var /** @type {?} */currentElementHasPrivateProviders = false;
    var /** @type {?} */lastRenderRootNode = null;
    for (var /** @type {?} */i = 0; i < nodes.length; i++) {
        while (currentParent && i > currentParent.index + currentParent.childCount) {
            var /** @type {?} */newParent = currentParent.parent;
            if (newParent) {
                newParent.childFlags |= currentParent.childFlags;
                newParent.childMatchedQueries |= currentParent.childMatchedQueries;
            }
            currentParent = newParent;
        }
        var /** @type {?} */node = nodes[i];
        node.index = i;
        node.parent = currentParent;
        node.bindingIndex = viewBindingCount;
        node.outputIndex = viewDisposableCount;
        // renderParent needs to account for ng-container!
        var /** @type {?} */currentRenderParent = void 0;
        if (currentParent && currentParent.flags & 1 /* TypeElement */ && !currentParent.element.name) {
            currentRenderParent = currentParent.renderParent;
        } else {
            currentRenderParent = currentParent;
        }
        node.renderParent = currentRenderParent;
        if (node.element) {
            var /** @type {?} */elDef = node.element;
            elDef.publicProviders = currentParent ? currentParent.element.publicProviders : Object.create(null);
            elDef.allProviders = elDef.publicProviders;
            // Note: We assume that all providers of an element are before any child element!
            currentElementHasPublicProviders = false;
            currentElementHasPrivateProviders = false;
        }
        validateNode(currentParent, node, nodes.length);
        viewNodeFlags |= node.flags;
        viewMatchedQueries |= node.matchedQueryIds;
        if (node.element && node.element.template) {
            viewMatchedQueries |= node.element.template.nodeMatchedQueries;
        }
        if (currentParent) {
            currentParent.childFlags |= node.flags;
            currentParent.directChildFlags |= node.flags;
            currentParent.childMatchedQueries |= node.matchedQueryIds;
            if (node.element && node.element.template) {
                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
        } else {
            viewRootNodeFlags |= node.flags;
        }
        viewBindingCount += node.bindings.length;
        viewDisposableCount += node.outputs.length;
        if (!currentRenderParent && node.flags & 3 /* CatRenderNode */) {
            lastRenderRootNode = node;
        }
        if (node.flags & 10112 /* CatProvider */) {
                if (!currentElementHasPublicProviders) {
                    currentElementHasPublicProviders = true;
                    // Use protoypical inheritance to not get O(n^2) complexity...
                    currentParent.element.publicProviders = Object.create(currentParent.element.publicProviders);
                    currentParent.element.allProviders = currentParent.element.publicProviders;
                }
                var /** @type {?} */isPrivateService = (node.flags & 4096 /* PrivateProvider */) !== 0;
                var /** @type {?} */isComponent = (node.flags & 16384 /* Component */) !== 0;
                if (!isPrivateService || isComponent) {
                    currentParent.element.publicProviders[node.provider.tokenKey] = node;
                } else {
                    if (!currentElementHasPrivateProviders) {
                        currentElementHasPrivateProviders = true;
                        // Use protoypical inheritance to not get O(n^2) complexity...
                        currentParent.element.allProviders = Object.create(currentParent.element.publicProviders);
                    }
                    currentParent.element.allProviders[node.provider.tokenKey] = node;
                }
                if (isComponent) {
                    currentParent.element.componentProvider = node;
                }
            }
        if (node.childCount) {
            currentParent = node;
        }
    }
    while (currentParent) {
        var /** @type {?} */_newParent = currentParent.parent;
        if (_newParent) {
            _newParent.childFlags |= currentParent.childFlags;
            _newParent.childMatchedQueries |= currentParent.childMatchedQueries;
        }
        currentParent = _newParent;
    }
    var /** @type {?} */handleEvent = function handleEvent(view, nodeIndex, eventName, event) {
        return nodes[nodeIndex].element.handleEvent(view, eventName, event);
    };
    return {
        nodeFlags: viewNodeFlags,
        rootNodeFlags: viewRootNodeFlags,
        nodeMatchedQueries: viewMatchedQueries, flags: flags,
        nodes: nodes,
        updateDirectives: updateDirectives || NOOP$1,
        updateRenderer: updateRenderer || NOOP$1,
        handleEvent: handleEvent || NOOP$1,
        bindingCount: viewBindingCount,
        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode
    };
}
/**
 * @param {?} parent
 * @param {?} node
 * @param {?} nodeCount
 * @return {?}
 */
function validateNode(parent, node, nodeCount) {
    var /** @type {?} */template = node.element && node.element.template;
    if (template) {
        if (template.lastRenderRootNode && template.lastRenderRootNode.flags & 8388608 /* EmbeddedViews */) {
                throw new Error('Illegal State: Last root node of a template can\'t have embedded views, at index ' + node.index + '!');
            }
    }
    if (node.flags & 10112 /* CatProvider */) {
            var /** @type {?} */parentFlags = parent ? parent.flags : null;
            if ((parentFlags & 1 /* TypeElement */) === 0) {
                throw new Error('Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index ' + node.index + '!');
            }
        }
    if (node.query) {
        if (node.flags & 33554432 /* TypeContentQuery */ && (!parent || (parent.flags & 8192 /* TypeDirective */) === 0)) {
            throw new Error('Illegal State: Content Query nodes need to be children of directives, at index ' + node.index + '!');
        }
        if (node.flags & 67108864 /* TypeViewQuery */ && parent) {
            throw new Error('Illegal State: View Query nodes have to be top level nodes, at index ' + node.index + '!');
        }
    }
    if (node.childCount) {
        var /** @type {?} */parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;
        if (node.index <= parentEnd && node.index + node.childCount > parentEnd) {
            throw new Error('Illegal State: childCount of node leads outside of parent, at index ' + node.index + '!');
        }
    }
}
/**
 * @param {?} parent
 * @param {?} anchorDef
 * @param {?=} context
 * @return {?}
 */
function createEmbeddedView(parent, anchorDef, context) {
    // embedded views are seen as siblings to the anchor, so we need
    // to get the parent of the anchor and use it as parentIndex.
    var /** @type {?} */view = createView(parent.root, parent.renderer, parent, anchorDef, anchorDef.element.template);
    initView(view, parent.component, context);
    createViewNodes(view);
    return view;
}
/**
 * @param {?} root
 * @param {?} def
 * @param {?=} context
 * @return {?}
 */
function createRootView(root, def, context) {
    var /** @type {?} */view = createView(root, root.renderer, null, null, def);
    initView(view, context, context);
    createViewNodes(view);
    return view;
}
/**
 * @param {?} root
 * @param {?} renderer
 * @param {?} parent
 * @param {?} parentNodeDef
 * @param {?} def
 * @return {?}
 */
function createView(root, renderer, parent, parentNodeDef, def) {
    var /** @type {?} */nodes = new Array(def.nodes.length);
    var /** @type {?} */disposables = def.outputCount ? new Array(def.outputCount) : undefined;
    var /** @type {?} */view = {
        def: def,
        parent: parent,
        viewContainerParent: undefined, parentNodeDef: parentNodeDef,
        context: undefined,
        component: undefined, nodes: nodes,
        state: 1 /* FirstCheck */ | 2 /* ChecksEnabled */, root: root, renderer: renderer,
        oldValues: new Array(def.bindingCount), disposables: disposables
    };
    return view;
}
/**
 * @param {?} view
 * @param {?} component
 * @param {?} context
 * @return {?}
 */
function initView(view, component, context) {
    view.component = component;
    view.context = context;
}
/**
 * @param {?} view
 * @return {?}
 */
function createViewNodes(view) {
    var /** @type {?} */renderHost = void 0;
    if (isComponentView(view)) {
        var /** @type {?} */hostDef = view.parentNodeDef;
        renderHost = asElementData(view.parent, hostDef.parent.index).renderElement;
    }
    var /** @type {?} */def = view.def;
    var /** @type {?} */nodes = view.nodes;
    for (var /** @type {?} */i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */nodeDef = def.nodes[i];
        Services.setCurrentNode(view, i);
        var /** @type {?} */nodeData = void 0;
        switch (nodeDef.flags & 100673535 /* Types */) {case 1 /* TypeElement */:
                var /** @type {?} */el = createElement(view, renderHost, nodeDef);
                var /** @type {?} */componentView = void 0;
                if (nodeDef.flags & 16777216 /* ComponentView */) {
                        var /** @type {?} */compViewDef = resolveViewDefinition(nodeDef.element.componentView);
                        var /** @type {?} */rendererType = nodeDef.element.componentRendererType;
                        var /** @type {?} */compRenderer = void 0;
                        if (!rendererType) {
                            compRenderer = view.root.renderer;
                        } else {
                            compRenderer = view.root.rendererFactory.createRenderer(el, rendererType);
                        }
                        componentView = createView(view.root, compRenderer, view, nodeDef.element.componentProvider, compViewDef);
                    }
                listenToElementOutputs(view, componentView, nodeDef, el);
                nodeData = {
                    renderElement: el,
                    componentView: componentView,
                    embeddedViews: nodeDef.flags & 8388608 /* EmbeddedViews */ ? [] : undefined,
                    projectedViews: undefined
                };
                break;
            case 2 /* TypeText */:
                nodeData = createText(view, renderHost, nodeDef);
                break;
            case 256 /* TypeClassProvider */:
            case 512 /* TypeFactoryProvider */:
            case 1024 /* TypeUseExistingProvider */:
            case 128 /* TypeValueProvider */:
                {
                    var /** @type {?} */instance = createProviderInstance(view, nodeDef);
                    nodeData = { instance: instance };
                    break;
                }
            case 8 /* TypePipe */:
                {
                    var /** @type {?} */_instance = createPipeInstance(view, nodeDef);
                    nodeData = { instance: _instance };
                    break;
                }
            case 8192 /* TypeDirective */:
                {
                    var /** @type {?} */_instance2 = createDirectiveInstance(view, nodeDef);
                    nodeData = { instance: _instance2 };
                    if (nodeDef.flags & 16384 /* Component */) {
                            var /** @type {?} */compView = asElementData(view, nodeDef.parent.index).componentView;
                            initView(compView, _instance2, _instance2);
                        }
                    break;
                }
            case 16 /* TypePureArray */:
            case 32 /* TypePureObject */:
            case 64 /* TypePurePipe */:
                nodeData = createPureExpression(view, nodeDef);
                break;
            case 33554432 /* TypeContentQuery */:
            case 67108864 /* TypeViewQuery */:
                nodeData = createQuery();
                break;
            case 4 /* TypeNgContent */:
                appendNgContent(view, renderHost, nodeDef);
                // no runtime data needed for NgContent...
                nodeData = undefined;
                break;
        }
        nodes[i] = nodeData;
    }
    // Create the ViewData.nodes of component views after we created everything else,
    // so that e.g. ng-content works
    execComponentViewsAction(view, ViewAction.CreateViewNodes);
    // fill static content and view queries
    execQueriesAction(view, 33554432 /* TypeContentQuery */ | 67108864 /* TypeViewQuery */, 134217728 /* StaticQuery */, 0 /* CheckAndUpdate */);
}
/**
 * @param {?} view
 * @return {?}
 */
function checkNoChangesView(view) {
    Services.updateDirectives(view, 1 /* CheckNoChanges */);
    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
    execQueriesAction(view, 33554432 /* TypeContentQuery */, 268435456 /* DynamicQuery */, 1 /* CheckNoChanges */);
    Services.updateRenderer(view, 1 /* CheckNoChanges */);
    execComponentViewsAction(view, ViewAction.CheckNoChanges);
    execQueriesAction(view, 67108864 /* TypeViewQuery */, 268435456 /* DynamicQuery */, 1 /* CheckNoChanges */);
}
/**
 * @param {?} view
 * @return {?}
 */
function checkAndUpdateView(view) {
    Services.updateDirectives(view, 0 /* CheckAndUpdate */);
    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
    execQueriesAction(view, 33554432 /* TypeContentQuery */, 268435456 /* DynamicQuery */, 0 /* CheckAndUpdate */);
    callLifecycleHooksChildrenFirst(view, 1048576 /* AfterContentChecked */ | (view.state & 1 /* FirstCheck */ ? 524288 /* AfterContentInit */ : 0));
    Services.updateRenderer(view, 0 /* CheckAndUpdate */);
    execComponentViewsAction(view, ViewAction.CheckAndUpdate);
    execQueriesAction(view, 67108864 /* TypeViewQuery */, 268435456 /* DynamicQuery */, 0 /* CheckAndUpdate */);
    callLifecycleHooksChildrenFirst(view, 4194304 /* AfterViewChecked */ | (view.state & 1 /* FirstCheck */ ? 2097152 /* AfterViewInit */ : 0));
    if (view.def.flags & 2 /* OnPush */) {
            view.state &= ~2 /* ChecksEnabled */;
        }
    view.state &= ~1 /* FirstCheck */;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    if (argStyle === 0 /* Inline */) {
            return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        } else {
        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */changed = false;
    switch (nodeDef.flags & 100673535 /* Types */) {case 1 /* TypeElement */:
            changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            break;
        case 2 /* TypeText */:
            changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            break;
        case 8192 /* TypeDirective */:
            changed = checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            break;
        case 16 /* TypePureArray */:
        case 32 /* TypePureObject */:
        case 64 /* TypePurePipe */:
            changed = checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            break;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateNodeDynamic(view, nodeDef, values) {
    var /** @type {?} */changed = false;
    switch (nodeDef.flags & 100673535 /* Types */) {case 1 /* TypeElement */:
            changed = checkAndUpdateElementDynamic(view, nodeDef, values);
            break;
        case 2 /* TypeText */:
            changed = checkAndUpdateTextDynamic(view, nodeDef, values);
            break;
        case 8192 /* TypeDirective */:
            changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);
            break;
        case 16 /* TypePureArray */:
        case 32 /* TypePureObject */:
        case 64 /* TypePurePipe */:
            changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
            break;
    }
    if (changed) {
        // Update oldValues after all bindings have been updated,
        // as a setter for a property might update other properties.
        var /** @type {?} */bindLen = nodeDef.bindings.length;
        var /** @type {?} */bindingStart = nodeDef.bindingIndex;
        var /** @type {?} */oldValues = view.oldValues;
        for (var /** @type {?} */i = 0; i < bindLen; i++) {
            oldValues[bindingStart + i] = values[i];
        }
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    if (argStyle === 0 /* Inline */) {
            checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        } else {
        checkNoChangesNodeDynamic(view, nodeDef, v0);
    }
    // Returning false is ok here as we would have thrown in case of a change.
    return false;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */bindLen = nodeDef.bindings.length;
    if (bindLen > 0) checkBindingNoChanges(view, nodeDef, 0, v0);
    if (bindLen > 1) checkBindingNoChanges(view, nodeDef, 1, v1);
    if (bindLen > 2) checkBindingNoChanges(view, nodeDef, 2, v2);
    if (bindLen > 3) checkBindingNoChanges(view, nodeDef, 3, v3);
    if (bindLen > 4) checkBindingNoChanges(view, nodeDef, 4, v4);
    if (bindLen > 5) checkBindingNoChanges(view, nodeDef, 5, v5);
    if (bindLen > 6) checkBindingNoChanges(view, nodeDef, 6, v6);
    if (bindLen > 7) checkBindingNoChanges(view, nodeDef, 7, v7);
    if (bindLen > 8) checkBindingNoChanges(view, nodeDef, 8, v8);
    if (bindLen > 9) checkBindingNoChanges(view, nodeDef, 9, v9);
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */
function checkNoChangesNodeDynamic(view, nodeDef, values) {
    for (var /** @type {?} */i = 0; i < values.length; i++) {
        checkBindingNoChanges(view, nodeDef, i, values[i]);
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */
function checkNoChangesQuery(view, nodeDef) {
    var /** @type {?} */queryList = asQueryList(view, nodeDef.index);
    if (queryList.dirty) {
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.index), 'Query ' + nodeDef.query.id + ' not dirty', 'Query ' + nodeDef.query.id + ' dirty', (view.state & 1 /* FirstCheck */) !== 0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function destroyView(view) {
    if (view.state & 8 /* Destroyed */) {
            return;
        }
    execEmbeddedViewsAction(view, ViewAction.Destroy);
    execComponentViewsAction(view, ViewAction.Destroy);
    callLifecycleHooksChildrenFirst(view, 65536 /* OnDestroy */);
    if (view.disposables) {
        for (var /** @type {?} */i = 0; i < view.disposables.length; i++) {
            view.disposables[i]();
        }
    }
    if (view.renderer.destroyNode) {
        destroyViewNodes(view);
    }
    if (isComponentView(view)) {
        view.renderer.destroy();
    }
    view.state |= 8 /* Destroyed */;
}
/**
 * @param {?} view
 * @return {?}
 */
function destroyViewNodes(view) {
    var /** @type {?} */len = view.def.nodes.length;
    for (var /** @type {?} */i = 0; i < len; i++) {
        var /** @type {?} */def = view.def.nodes[i];
        if (def.flags & 1 /* TypeElement */) {
                view.renderer.destroyNode(asElementData(view, i).renderElement);
            } else if (def.flags & 2 /* TypeText */) {
                view.renderer.destroyNode(asTextData(view, i).renderText);
            }
    }
}
var ViewAction = {};
ViewAction.CreateViewNodes = 0;
ViewAction.CheckNoChanges = 1;
ViewAction.CheckAndUpdate = 2;
ViewAction.Destroy = 3;
ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes";
ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges";
ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate";
ViewAction[ViewAction.Destroy] = "Destroy";
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execComponentViewsAction(view, action) {
    var /** @type {?} */def = view.def;
    if (!(def.nodeFlags & 16777216 /* ComponentView */)) {
        return;
    }
    for (var /** @type {?} */i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */nodeDef = def.nodes[i];
        if (nodeDef.flags & 16777216 /* ComponentView */) {
                // a leaf
                callViewAction(asElementData(view, i).componentView, action);
            } else if ((nodeDef.childFlags & 16777216 /* ComponentView */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execEmbeddedViewsAction(view, action) {
    var /** @type {?} */def = view.def;
    if (!(def.nodeFlags & 8388608 /* EmbeddedViews */)) {
        return;
    }
    for (var /** @type {?} */i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */nodeDef = def.nodes[i];
        if (nodeDef.flags & 8388608 /* EmbeddedViews */) {
                // a leaf
                var /** @type {?} */embeddedViews = asElementData(view, i).embeddedViews;
                if (embeddedViews) {
                    for (var /** @type {?} */k = 0; k < embeddedViews.length; k++) {
                        callViewAction(embeddedViews[k], action);
                    }
                }
            } else if ((nodeDef.childFlags & 8388608 /* EmbeddedViews */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function callViewAction(view, action) {
    var /** @type {?} */viewState = view.state;
    switch (action) {
        case ViewAction.CheckNoChanges:
            if (viewState & 2 /* ChecksEnabled */ && (viewState & (4 /* Errored */ | 8 /* Destroyed */)) === 0) {
                checkNoChangesView(view);
            }
            break;
        case ViewAction.CheckAndUpdate:
            if (viewState & 2 /* ChecksEnabled */ && (viewState & (4 /* Errored */ | 8 /* Destroyed */)) === 0) {
                checkAndUpdateView(view);
            }
            break;
        case ViewAction.Destroy:
            destroyView(view);
            break;
        case ViewAction.CreateViewNodes:
            createViewNodes(view);
            break;
    }
}
/**
 * @param {?} view
 * @param {?} queryFlags
 * @param {?} staticDynamicQueryFlag
 * @param {?} checkType
 * @return {?}
 */
function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
        return;
    }
    var /** @type {?} */nodeCount = view.def.nodes.length;
    for (var /** @type {?} */i = 0; i < nodeCount; i++) {
        var /** @type {?} */nodeDef = view.def.nodes[i];
        if (nodeDef.flags & queryFlags && nodeDef.flags & staticDynamicQueryFlag) {
            Services.setCurrentNode(view, nodeDef.index);
            switch (checkType) {
                case 0 /* CheckAndUpdate */:
                    checkAndUpdateQuery(view, nodeDef);
                    break;
                case 1 /* CheckNoChanges */:
                    checkNoChangesQuery(view, nodeDef);
                    break;
            }
        }
        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
            // no child has a matching query
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}

var /** @type {?} */initialized = false;
/**
 * @return {?}
 */
function initServicesIfNeeded() {
    if (initialized) {
        return;
    }
    initialized = true;
    var /** @type {?} */services = isDevMode() ? createDebugServices() : createProdServices();
    Services.setCurrentNode = services.setCurrentNode;
    Services.createRootView = services.createRootView;
    Services.createEmbeddedView = services.createEmbeddedView;
    Services.checkAndUpdateView = services.checkAndUpdateView;
    Services.checkNoChangesView = services.checkNoChangesView;
    Services.destroyView = services.destroyView;
    Services.resolveDep = resolveDep;
    Services.createDebugContext = services.createDebugContext;
    Services.handleEvent = services.handleEvent;
    Services.updateDirectives = services.updateDirectives;
    Services.updateRenderer = services.updateRenderer;
    Services.dirtyParentQueries = dirtyParentQueries;
}
/**
 * @return {?}
 */
function createProdServices() {
    return {
        setCurrentNode: function setCurrentNode() {},
        createRootView: createProdRootView,
        createEmbeddedView: createEmbeddedView,
        checkAndUpdateView: checkAndUpdateView,
        checkNoChangesView: checkNoChangesView,
        destroyView: destroyView,
        createDebugContext: function createDebugContext(view, nodeIndex) {
            return new DebugContext_(view, nodeIndex);
        },
        handleEvent: function handleEvent(view, nodeIndex, eventName, event) {
            return view.def.handleEvent(view, nodeIndex, eventName, event);
        },
        updateDirectives: function updateDirectives(view, checkType) {
            return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
        },
        updateRenderer: function updateRenderer(view, checkType) {
            return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view);
        }
    };
}
/**
 * @return {?}
 */
function createDebugServices() {
    return {
        setCurrentNode: debugSetCurrentNode,
        createRootView: debugCreateRootView,
        createEmbeddedView: debugCreateEmbeddedView,
        checkAndUpdateView: debugCheckAndUpdateView,
        checkNoChangesView: debugCheckNoChangesView,
        destroyView: debugDestroyView,
        createDebugContext: function createDebugContext(view, nodeIndex) {
            return new DebugContext_(view, nodeIndex);
        },
        handleEvent: debugHandleEvent,
        updateDirectives: debugUpdateDirectives,
        updateRenderer: debugUpdateRenderer
    };
}
/**
 * @param {?} injector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?=} context
 * @return {?}
 */
function createProdRootView(injector, projectableNodes, rootSelectorOrNode, def, context) {
    var /** @type {?} */rendererFactory = injector.get(RendererFactoryV2);
    return createRootView(createRootData(injector, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
}
/**
 * @param {?} injector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?=} context
 * @return {?}
 */
function debugCreateRootView(injector, projectableNodes, rootSelectorOrNode, def, context) {
    var /** @type {?} */rendererFactory = injector.get(RendererFactoryV2);
    var /** @type {?} */root = createRootData(injector, new DebugRendererFactoryV2(rendererFactory), projectableNodes, rootSelectorOrNode);
    return callWithDebugContext(DebugAction.create, createRootView, null, [root, def, context]);
}
/**
 * @param {?} injector
 * @param {?} rendererFactory
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @return {?}
 */
function createRootData(injector, rendererFactory, projectableNodes, rootSelectorOrNode) {
    var /** @type {?} */sanitizer = injector.get(Sanitizer);
    var /** @type {?} */renderer = rendererFactory.createRenderer(null, null);
    return {
        injector: injector,
        projectableNodes: projectableNodes,
        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer
    };
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */nodeDef = view.def.nodes[nodeIndex];
    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    return nodeDef.flags & 112 /* CatPureExpression */ ? asPureExpressionData(view, nodeIndex).value : undefined;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */nodeDef = view.def.nodes[nodeIndex];
    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    return nodeDef.flags & 112 /* CatPureExpression */ ? asPureExpressionData(view, nodeIndex).value : undefined;
}
/**
 * @param {?} parent
 * @param {?} anchorDef
 * @param {?=} context
 * @return {?}
 */
function debugCreateEmbeddedView(parent, anchorDef, context) {
    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parent, anchorDef, context]);
}
/**
 * @param {?} view
 * @return {?}
 */
function debugCheckAndUpdateView(view) {
    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
}
/**
 * @param {?} view
 * @return {?}
 */
function debugCheckNoChangesView(view) {
    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
}
/**
 * @param {?} view
 * @return {?}
 */
function debugDestroyView(view) {
    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
}
var DebugAction = {};
DebugAction.create = 0;
DebugAction.detectChanges = 1;
DebugAction.checkNoChanges = 2;
DebugAction.destroy = 3;
DebugAction.handleEvent = 4;
DebugAction[DebugAction.create] = "create";
DebugAction[DebugAction.detectChanges] = "detectChanges";
DebugAction[DebugAction.checkNoChanges] = "checkNoChanges";
DebugAction[DebugAction.destroy] = "destroy";
DebugAction[DebugAction.handleEvent] = "handleEvent";
var /** @type {?} */_currentAction = void 0;
var /** @type {?} */_currentView = void 0;
var /** @type {?} */_currentNodeIndex = void 0;
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function debugSetCurrentNode(view, nodeIndex) {
    _currentView = view;
    _currentNodeIndex = nodeIndex;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */
function debugHandleEvent(view, nodeIndex, eventName, event) {
    debugSetCurrentNode(view, nodeIndex);
    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
}
/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */
function debugUpdateDirectives(view, checkType) {
    if (view.state & 8 /* Destroyed */) {
            throw viewDestroyedError(DebugAction[_currentAction]);
        }
    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
    return view.def.updateDirectives(debugCheckDirectivesFn, view);
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */
    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
        var /** @type {?} */nodeDef = view.def.nodes[nodeIndex];

        for (var _len5 = arguments.length, values = Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {
            values[_key5 - 3] = arguments[_key5];
        }

        if (checkType === 0 /* CheckAndUpdate */) {
                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            } else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }
        if (nodeDef.flags & 8192 /* TypeDirective */) {
                debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
            }
        return nodeDef.flags & 112 /* CatPureExpression */ ? asPureExpressionData(view, nodeDef.index).value : undefined;
    }
    ;
}
/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */
function debugUpdateRenderer(view, checkType) {
    if (view.state & 8 /* Destroyed */) {
            throw viewDestroyedError(DebugAction[_currentAction]);
        }
    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
    return view.def.updateRenderer(debugCheckRenderNodeFn, view);
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */
    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
        var /** @type {?} */nodeDef = view.def.nodes[nodeIndex];

        for (var _len6 = arguments.length, values = Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {
            values[_key6 - 3] = arguments[_key6];
        }

        if (checkType === 0 /* CheckAndUpdate */) {
                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            } else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }
        if (nodeDef.flags & 3 /* CatRenderNode */) {
                debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
            }
        return nodeDef.flags & 112 /* CatPureExpression */ ? asPureExpressionData(view, nodeDef.index).value : undefined;
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} givenValues
 * @return {?}
 */
function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
    var /** @type {?} */changed = checkAndUpdateNode.apply(undefined, [view, nodeDef, argStyle].concat(_toConsumableArray(givenValues)));
    if (changed) {
        var /** @type {?} */values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
        if (nodeDef.flags & (8192 /* TypeDirective */ | 1 /* TypeElement */)) {
            var /** @type {?} */bindingValues = {};
            for (var /** @type {?} */i = 0; i < nodeDef.bindings.length; i++) {
                var /** @type {?} */binding = nodeDef.bindings[i];
                var /** @type {?} */value = values[i];
                if (binding.type === 4 /* ComponentHostProperty */ || binding.type === 5 /* DirectiveProperty */) {
                        bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] = normalizeDebugBindingValue(value);
                    }
            }
            var /** @type {?} */elDef = nodeDef.flags & 8192 /* TypeDirective */ ? nodeDef.parent : nodeDef;
            var /** @type {?} */el = asElementData(view, elDef.index).renderElement;
            if (!elDef.element.name) {
                // a comment.
                view.renderer.setValue(el, 'bindings=' + JSON.stringify(bindingValues, null, 2));
            } else {
                // a regular element.
                for (var /** @type {?} */attr in bindingValues) {
                    var /** @type {?} */_value2 = bindingValues[attr];
                    if (_value2 != null) {
                        view.renderer.setAttribute(el, attr, _value2);
                    } else {
                        view.renderer.removeAttribute(el, attr);
                    }
                }
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} values
 * @return {?}
 */
function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
    checkNoChangesNode.apply(undefined, [view, nodeDef, argStyle].concat(_toConsumableArray(values)));
}
/**
 * @param {?} name
 * @return {?}
 */
function normalizeDebugBindingName(name) {
    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
    return 'ng-reflect-' + name;
}
var /** @type {?} */CAMEL_CASE_REGEXP = /([A-Z])/g;
/**
 * @param {?} input
 * @return {?}
 */
function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function () {
        for (var _len7 = arguments.length, m = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            m[_key7] = arguments[_key7];
        }

        return '-' + m[1].toLowerCase();
    });
}
/**
 * @param {?} value
 * @return {?}
 */
function normalizeDebugBindingValue(value) {
    try {
        // Limit the size of the value as otherwise the DOM just gets polluted.
        return value ? value.toString().slice(0, 30) : value;
    } catch (e) {
        return '[ERROR] Exception while trying to serialize the value';
    }
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function nextDirectiveWithBinding(view, nodeIndex) {
    for (var /** @type {?} */i = nodeIndex; i < view.def.nodes.length; i++) {
        var /** @type {?} */nodeDef = view.def.nodes[i];
        if (nodeDef.flags & 8192 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
        }
    }
    return undefined;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function nextRenderNodeWithBinding(view, nodeIndex) {
    for (var /** @type {?} */i = nodeIndex; i < view.def.nodes.length; i++) {
        var /** @type {?} */nodeDef = view.def.nodes[i];
        if (nodeDef.flags & 3 /* CatRenderNode */ && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
        }
    }
    return undefined;
}

var DebugContext_ = function () {
    /**
     * @param {?} view
     * @param {?} nodeIndex
     */
    function DebugContext_(view, nodeIndex) {
        _classCallCheck(this, DebugContext_);

        this.view = view;
        this.nodeIndex = nodeIndex;
        if (nodeIndex == null) {
            this.nodeIndex = nodeIndex = 0;
        }
        this.nodeDef = view.def.nodes[nodeIndex];
        var elDef = this.nodeDef;
        var elView = view;
        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
            elDef = elDef.parent;
        }
        if (!elDef) {
            while (!elDef && elView) {
                elDef = viewParentEl(elView);
                elView = elView.parent;
            }
        }
        this.elDef = elDef;
        this.elView = elView;
    }
    /**
     * @return {?}
     */


    _createClass(DebugContext_, [{
        key: 'elOrCompView',
        get: function get() {
            // Has to be done lazily as we use the DebugContext also during creation of elements...
            return asElementData(this.elView, this.elDef.index).componentView || this.view;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'injector',
        get: function get() {
            return createInjector(this.elView, this.elDef);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'component',
        get: function get() {
            return this.elOrCompView.component;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'context',
        get: function get() {
            return this.elOrCompView.context;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'providerTokens',
        get: function get() {
            var /** @type {?} */tokens = [];
            if (this.elDef) {
                for (var /** @type {?} */i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
                    var /** @type {?} */childDef = this.elView.def.nodes[i];
                    if (childDef.flags & 10112 /* CatProvider */) {
                            tokens.push(childDef.provider.token);
                        }
                    i += childDef.childCount;
                }
            }
            return tokens;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'references',
        get: function get() {
            var /** @type {?} */references = {};
            if (this.elDef) {
                collectReferences(this.elView, this.elDef, references);
                for (var /** @type {?} */i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
                    var /** @type {?} */childDef = this.elView.def.nodes[i];
                    if (childDef.flags & 10112 /* CatProvider */) {
                            collectReferences(this.elView, childDef, references);
                        }
                    i += childDef.childCount;
                }
            }
            return references;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'source',
        get: function get() {
            if (this.nodeDef.flags & 2 /* TypeText */) {
                    return this.nodeDef.text.source;
                } else {
                return this.elDef.element.source;
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'componentRenderElement',
        get: function get() {
            var /** @type {?} */elData = findHostElement(this.elOrCompView);
            return elData ? elData.renderElement : undefined;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'renderNode',
        get: function get() {
            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) : renderNode(this.elView, this.elDef);
        }
    }]);

    return DebugContext_;
}();
/**
 * @param {?} view
 * @return {?}
 */


function findHostElement(view) {
    while (view && !isComponentView(view)) {
        view = view.parent;
    }
    if (view.parent) {
        return asElementData(view.parent, viewParentEl(view).index);
    }
    return undefined;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} references
 * @return {?}
 */
function collectReferences(view, nodeDef, references) {
    for (var /** @type {?} */refName in nodeDef.references) {
        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
    }
}
/**
 * @param {?} action
 * @param {?} fn
 * @param {?} self
 * @param {?} args
 * @return {?}
 */
function callWithDebugContext(action, fn, self, args) {
    var /** @type {?} */oldAction = _currentAction;
    var /** @type {?} */oldView = _currentView;
    var /** @type {?} */oldNodeIndex = _currentNodeIndex;
    try {
        _currentAction = action;
        var /** @type {?} */result = fn.apply(self, args);
        _currentView = oldView;
        _currentNodeIndex = oldNodeIndex;
        _currentAction = oldAction;
        return result;
    } catch (e) {
        if (isViewDebugError(e) || !_currentView) {
            throw e;
        }
        _currentView.state |= 4 /* Errored */;
        throw viewWrappedDebugError(e, getCurrentDebugContext());
    }
}
/**
 * @return {?}
 */
function getCurrentDebugContext() {
    return new DebugContext_(_currentView, _currentNodeIndex);
}

var DebugRendererFactoryV2 = function () {
    /**
     * @param {?} delegate
     */
    function DebugRendererFactoryV2(delegate) {
        _classCallCheck(this, DebugRendererFactoryV2);

        this.delegate = delegate;
    }
    /**
     * @param {?} element
     * @param {?} renderData
     * @return {?}
     */


    _createClass(DebugRendererFactoryV2, [{
        key: 'createRenderer',
        value: function createRenderer(element, renderData) {
            return new DebugRendererV2(this.delegate.createRenderer(element, renderData));
        }
    }]);

    return DebugRendererFactoryV2;
}();

var DebugRendererV2 = function () {
    /**
     * @param {?} delegate
     */
    function DebugRendererV2(delegate) {
        _classCallCheck(this, DebugRendererV2);

        this.delegate = delegate;
    }
    /**
     * @return {?}
     */


    _createClass(DebugRendererV2, [{
        key: 'destroyNode',

        /**
         * @param {?} node
         * @return {?}
         */
        value: function destroyNode(node) {
            removeDebugNodeFromIndex(getDebugNode(node));
            if (this.delegate.destroyNode) {
                this.delegate.destroyNode(node);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.delegate.destroy();
        }
        /**
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */

    }, {
        key: 'createElement',
        value: function createElement(name, namespace) {
            var /** @type {?} */el = this.delegate.createElement(name, namespace);
            var /** @type {?} */debugEl = new DebugElement(el, null, getCurrentDebugContext());
            debugEl.name = name;
            indexDebugNode(debugEl);
            return el;
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'createComment',
        value: function createComment(value) {
            var /** @type {?} */comment = this.delegate.createComment(value);
            var /** @type {?} */debugEl = new DebugNode(comment, null, getCurrentDebugContext());
            indexDebugNode(debugEl);
            return comment;
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'createText',
        value: function createText(value) {
            var /** @type {?} */text = this.delegate.createText(value);
            var /** @type {?} */debugEl = new DebugNode(text, null, getCurrentDebugContext());
            indexDebugNode(debugEl);
            return text;
        }
        /**
         * @param {?} parent
         * @param {?} newChild
         * @return {?}
         */

    }, {
        key: 'appendChild',
        value: function appendChild(parent, newChild) {
            var /** @type {?} */debugEl = getDebugNode(parent);
            var /** @type {?} */debugChildEl = getDebugNode(newChild);
            if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
                debugEl.addChild(debugChildEl);
            }
            this.delegate.appendChild(parent, newChild);
        }
        /**
         * @param {?} parent
         * @param {?} newChild
         * @param {?} refChild
         * @return {?}
         */

    }, {
        key: 'insertBefore',
        value: function insertBefore(parent, newChild, refChild) {
            var /** @type {?} */debugEl = getDebugNode(parent);
            var /** @type {?} */debugChildEl = getDebugNode(newChild);
            var /** @type {?} */debugRefEl = getDebugNode(refChild);
            if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
                debugEl.insertBefore(debugRefEl, debugChildEl);
            }
            this.delegate.insertBefore(parent, newChild, refChild);
        }
        /**
         * @param {?} parent
         * @param {?} oldChild
         * @return {?}
         */

    }, {
        key: 'removeChild',
        value: function removeChild(parent, oldChild) {
            var /** @type {?} */debugEl = getDebugNode(parent);
            var /** @type {?} */debugChildEl = getDebugNode(oldChild);
            if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
                debugEl.removeChild(debugChildEl);
            }
            this.delegate.removeChild(parent, oldChild);
        }
        /**
         * @param {?} selectorOrNode
         * @return {?}
         */

    }, {
        key: 'selectRootElement',
        value: function selectRootElement(selectorOrNode) {
            var /** @type {?} */el = this.delegate.selectRootElement(selectorOrNode);
            var /** @type {?} */debugEl = new DebugElement(el, null, getCurrentDebugContext());
            indexDebugNode(debugEl);
            return el;
        }
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @param {?=} namespace
         * @return {?}
         */

    }, {
        key: 'setAttribute',
        value: function setAttribute(el, name, value, namespace) {
            var /** @type {?} */debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                var /** @type {?} */fullName = namespace ? namespace + ':' + name : name;
                debugEl.attributes[fullName] = value;
            }
            this.delegate.setAttribute(el, name, value, namespace);
        }
        /**
         * @param {?} el
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */

    }, {
        key: 'removeAttribute',
        value: function removeAttribute(el, name, namespace) {
            var /** @type {?} */debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                var /** @type {?} */fullName = namespace ? namespace + ':' + name : name;
                debugEl.attributes[fullName] = null;
            }
            this.delegate.removeAttribute(el, name, namespace);
        }
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'addClass',
        value: function addClass(el, name) {
            var /** @type {?} */debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.classes[name] = true;
            }
            this.delegate.addClass(el, name);
        }
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'removeClass',
        value: function removeClass(el, name) {
            var /** @type {?} */debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.classes[name] = false;
            }
            this.delegate.removeClass(el, name);
        }
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} value
         * @param {?} hasVendorPrefix
         * @param {?} hasImportant
         * @return {?}
         */

    }, {
        key: 'setStyle',
        value: function setStyle(el, style, value, hasVendorPrefix, hasImportant) {
            var /** @type {?} */debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.styles[style] = value;
            }
            this.delegate.setStyle(el, style, value, hasVendorPrefix, hasImportant);
        }
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} hasVendorPrefix
         * @return {?}
         */

    }, {
        key: 'removeStyle',
        value: function removeStyle(el, style, hasVendorPrefix) {
            var /** @type {?} */debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.styles[style] = null;
            }
            this.delegate.removeStyle(el, style, hasVendorPrefix);
        }
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'setProperty',
        value: function setProperty(el, name, value) {
            var /** @type {?} */debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.properties[name] = value;
            }
            this.delegate.setProperty(el, name, value);
        }
        /**
         * @param {?} target
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listen',
        value: function listen(target, eventName, callback) {
            if (typeof target !== 'string') {
                var /** @type {?} */debugEl = getDebugNode(target);
                if (debugEl) {
                    debugEl.listeners.push(new EventListener(eventName, callback));
                }
            }
            return this.delegate.listen(target, eventName, callback);
        }
        /**
         * @param {?} node
         * @return {?}
         */

    }, {
        key: 'parentNode',
        value: function parentNode(node) {
            return this.delegate.parentNode(node);
        }
        /**
         * @param {?} node
         * @return {?}
         */

    }, {
        key: 'nextSibling',
        value: function nextSibling(node) {
            return this.delegate.nextSibling(node);
        }
        /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'setValue',
        value: function setValue(node, value) {
            return this.delegate.setValue(node, value);
        }
    }, {
        key: 'data',
        get: function get() {
            return this.delegate.data;
        }
    }]);

    return DebugRendererV2;
}();

/**
 * @return {?}
 */


function _iterableDiffersFactory() {
    return defaultIterableDiffers;
}
/**
 * @return {?}
 */
function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
}
/**
 * @param {?=} locale
 * @return {?}
 */
function _localeFactory(locale) {
    return locale || 'en-US';
}
/**
 * @return {?}
 */
function _initViewEngine() {
    initServicesIfNeeded();
}
/**
 * This module includes the providers of \@angular/core that are needed
 * to bootstrap components via `ApplicationRef`.
 *
 * \@experimental
 */

var ApplicationModule = function ApplicationModule() {
    _classCallCheck(this, ApplicationModule);
};

ApplicationModule.decorators = [{ type: NgModule, args: [{
        providers: [ApplicationRef_, { provide: ApplicationRef, useExisting: ApplicationRef_ }, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, { provide: IterableDiffers, useFactory: _iterableDiffersFactory }, { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory }, {
            provide: LOCALE_ID,
            useFactory: _localeFactory,
            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
        }, { provide: APP_INITIALIZER, useValue: _initViewEngine, multi: true }]
    }] }];
/** @nocollapse */
ApplicationModule.ctorParameters = function () {
    return [];
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var LifecycleHooks = {};
LifecycleHooks.OnInit = 0;
LifecycleHooks.OnDestroy = 1;
LifecycleHooks.DoCheck = 2;
LifecycleHooks.OnChanges = 3;
LifecycleHooks.AfterContentInit = 4;
LifecycleHooks.AfterContentChecked = 5;
LifecycleHooks.AfterViewInit = 6;
LifecycleHooks.AfterViewChecked = 7;
LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
var /** @type {?} */LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];

/**
 * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `trigger` Creates an animation trigger which will a list of {\@link state state} and {\@link
 * transition transition} entries that will be evaluated when the expression bound to the trigger
 * changes.
 *
 * Triggers are registered within the component annotation data under the {\@link
 * Component#animations-anchor animations section}. An animation trigger can be placed on an element
 * within a template by referencing the name of the trigger followed by the expression value that the
 * trigger is bound to (in the form of `[\@triggerName]="expression"`.
 *
 * ### Usage
 *
 * `trigger` will create an animation trigger reference based on the provided `name` value. The
 * provided `animation` value is expected to be an array consisting of {\@link state state} and {\@link
 * transition transition} declarations.
 *
 * ```typescript
 * \@Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * tools/gulp-tasks/validate-commit-message.js ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */
function trigger$1(name, definitions) {
    return { name: name, definitions: definitions };
}
/**
 * `animate` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `animate` specifies an animation step that will apply the provided `styles` data for a given
 * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
 * to be used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link
 * transition transition}.
 *
 * ### Usage
 *
 * The `animate` function accepts two input parameters: `timing` and `styles`:
 *
 * - `timing` is a string based value that can be a combination of a duration with optional delay
 * and easing values. The format for the expression breaks down to `duration delay easing`
 * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
 * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
 * `duration` value in millisecond form.
 * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
 * keyframes keyframes}. If left empty then the styles from the destination state will be collected
 * and used (this is useful when describing an animation step that will complete an animation by
 * {\@link transition#the-final-animate-call animating to the final state}).
 *
 * ```typescript
 * // various functions for specifying timing data
 * animate(500, style(...))
 * animate("1s", style(...))
 * animate("100ms 0.5s", style(...))
 * animate("5s ease", style(...))
 * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
 *
 * // either style() of keyframes() can be used
 * animate(500, style({ background: "red" }))
 * animate(500, keyframes([
 *   style({ background: "blue" })),
 *   style({ background: "red" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} timings
 * @param {?=} styles
 * @return {?}
 */
function animate$1(timings) {
    var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    return { type: 4 /* Animate */, styles: styles, timings: timings };
}
/**
 * `group` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
 * useful when a series of styles must be animated/closed off at different statrting/ending times.
 *
 * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
 * transition} and it will only continue to the next instruction once all of the inner animation
 * steps have completed.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `group` animation function can either consist of {\@link
 * style style} or {\@link animate animate} function calls. Each call to `style()` or `animate()`
 * within a group will be executed instantly (use {\@link keyframes keyframes} or a {\@link
 * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
 *
 * ```typescript
 * group([
 *   animate("1s", { background: "black" }))
 *   animate("2s", { color: "white" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */
function group$1(steps) {
    return { type: 3 /* Group */, steps: steps };
}
/**
 * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
 * default when an array is passed as animation data into {\@link transition transition}.)
 *
 * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
 * transition} and it will only continue to the next instruction once each of the inner animation
 * steps have completed.
 *
 * To perform animation styling in parallel with other animation steps then have a look at the
 * {\@link group group} animation function.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `sequence` animation function can either consist of
 * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
 * provided styling data immediately while a call to `animate()` will apply its styling data over a
 * given time depending on its timing data.
 *
 * ```typescript
 * sequence([
 *   style({ opacity: 0 })),
 *   animate("1s", { opacity: 1 }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */
function sequence$1(steps) {
    return { type: 2 /* Sequence */, steps: steps };
}
/**
 * `style` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `style` declares a key/value object containing CSS properties/styles that can then be used for
 * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
 * for both {\@link animate animate} and {\@link keyframes keyframes}.
 *
 * ### Usage
 *
 * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
 * to be defined.
 *
 * ```typescript
 * // string values are used for css properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical (pixel) values are also supported
 * style({ width: 100, height: 0 })
 * ```
 *
 * #### Auto-styles (using `*`)
 *
 * When an asterix (`*`) character is used as a value then it will be detected from the element
 * being animated and applied as animation data when the animation starts.
 *
 * This feature proves useful for a state depending on layout and/or environment factors; in such
 * cases the styles are calculated just before the animation starts.
 *
 * ```typescript
 * // the steps below will animate from 0 to the
 * // actual height of the element
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} tokens
 * @return {?}
 */
function style$1(tokens) {
    return { type: 6 /* Style */, styles: tokens };
}
/**
 * `state` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `state` declares an animation state within the given trigger. When a state is active within a
 * component then its associated styles will persist on the element that the trigger is attached to
 * (even when the animation ends).
 *
 * To animate between states, have a look at the animation {\@link transition transition} DSL
 * function. To register states to an animation trigger please have a look at the {\@link trigger
 * trigger} function.
 *
 * #### The `void` state
 *
 * The `void` state value is a reserved word that angular uses to determine when the element is not
 * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
 * associated element is void).
 *
 * #### The `*` (default) state
 *
 * The `*` state (when styled) is a fallback state that will be used if the state that is being
 * animated is not declared within the trigger.
 *
 * ### Usage
 *
 * `state` will declare an animation state with its associated styles
 * within the given trigger.
 *
 * - `stateNameExpr` can be one or more state names separated by commas.
 * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
 * the state has been reached.
 *
 * ```typescript
 * // "void" is a reserved name for a state and is used to represent
 * // the state in which an element is detached from from the application.
 * state("void", style({ height: 0 }))
 *
 * // user-defined states
 * state("closed", style({ height: 0 }))
 * state("open, visible", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} styles
 * @return {?}
 */
function state$1(name, styles) {
    return { type: 0 /* State */, name: name, styles: styles };
}
/**
 * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
 * by an `offset` value.
 *
 * ### Usage
 *
 * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
 * animation function. Instead of applying animations from where they are currently to their
 * destination, keyframes can describe how each style entry is applied and at what point within the
 * animation arc (much like CSS Keyframe Animations do).
 *
 * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
 * percentage of the animate time the styles will be applied.
 *
 * ```typescript
 * // the provided offset values describe when each backgroundColor value is applied.
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red", offset: 0 }),
 *   style({ backgroundColor: "blue", offset: 0.2 }),
 *   style({ backgroundColor: "orange", offset: 0.3 }),
 *   style({ backgroundColor: "black", offset: 1 })
 * ]))
 * ```
 *
 * Alternatively, if there are no `offset` values used within the style entries then the offsets
 * will be calculated automatically.
 *
 * ```typescript
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red" }) // offset = 0
 *   style({ backgroundColor: "blue" }) // offset = 0.33
 *   style({ backgroundColor: "orange" }) // offset = 0.66
 *   style({ backgroundColor: "black" }) // offset = 1
 * ]))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */
function keyframes$1(steps) {
    return { type: 5 /* KeyframeSequence */, steps: steps };
}
/**
 * `transition` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
 * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
 * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
 * and/or ending state).
 *
 * A function can also be provided as the `stateChangeExpr` argument for a transition and this
 * function will be executed each time a state change occurs. If the value returned within the
 * function is true then the associated animation will be run.
 *
 * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
 * to animate to a state value and persist its styles then one or more {\@link state animation
 * states} is expected to be defined.
 *
 * ### Usage
 *
 * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
 * what the previous state is and what the current state has become. In other words, if a transition
 * is defined that matches the old/current state criteria then the associated animation will be
 * triggered.
 *
 * ```typescript
 * // all transition/state changes are defined within an animation trigger
 * trigger("myAnimationTrigger", [
 *   // if a state is defined then its styles will be persisted when the
 *   // animation has fully completed itself
 *   state("on", style({ background: "green" })),
 *   state("off", style({ background: "grey" })),
 *
 *   // a transition animation that will be kicked off when the state value
 *   // bound to "myAnimationTrigger" changes from "on" to "off"
 *   transition("on => off", animate(500)),
 *
 *   // it is also possible to do run the same animation for both directions
 *   transition("on <=> off", animate(500)),
 *
 *   // or to define multiple states pairs separated by commas
 *   transition("on => off, off => void", animate(500)),
 *
 *   // this is a catch-all state change for when an element is inserted into
 *   // the page and the destination state is unknown
 *   transition("void => *", [
 *     style({ opacity: 0 }),
 *     animate(500)
 *   ]),
 *
 *   // this will capture a state change between any states
 *   transition("* => *", animate("1s 0s")),
 *
 *   // you can also go full out and include a function
 *   transition((fromState, toState) => {
 *     // when `true` then it will allow the animation below to be invoked
 *     return fromState == "off" && toState == "on";
 *   }, animate("1s 0s"))
 * ])
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * #### The final `animate` call
 *
 * If the final step within the transition steps is a call to `animate()` that **only** uses a
 * timing value with **no style data** then it will be automatically used as the final animation arc
 * for the element to animate itself to the final state. This involves an automatic mix of
 * adding/removing CSS styles so that the element will be in the exact state it should be for the
 * applied state to be presented correctly.
 *
 * ```
 * // start off by hiding the element, but make sure that it animates properly to whatever state
 * // is currently active for "myAnimationTrigger"
 * transition("void => *", [
 *   style({ opacity: 0 }),
 *   animate(500)
 * ])
 * ```
 *
 * ### Transition Aliases (`:enter` and `:leave`)
 *
 * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
 * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
 * => void` state changes.
 *
 * ```
 * transition(":enter", [
 *   style({ opacity: 0 }),
 *   animate(500, style({ opacity: 1 }))
 * ])
 * transition(":leave", [
 *   animate(500, style({ opacity: 0 }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @return {?}
 */
function transition$1(stateChangeExpr, steps) {
    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps };
}

/**
 * @deprecated This symbol has moved. Please Import from @angular/animations instead!
 */
var /** @type {?} */AUTO_STYLE = '*';
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */
function trigger(name, definitions) {
    return trigger$1(name, definitions);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} timings
 * @param {?=} styles
 * @return {?}
 */
function animate(timings) {
    var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    return animate$1(timings, styles);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */
function group(steps) {
    return group$1(steps);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */
function sequence(steps) {
    return sequence$1(steps);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} tokens
 * @return {?}
 */
function style(tokens) {
    return style$1(tokens);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} name
 * @param {?} styles
 * @return {?}
 */
function state(name, styles) {
    return state$1(name, styles);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */
function keyframes(steps) {
    return keyframes$1(steps);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @return {?}
 */
function transition(stateChangeExpr, steps) {
    return transition$1(stateChangeExpr, steps);
}



/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(5);
var toSubscriber_1 = __webpack_require__(54);
var observable_1 = __webpack_require__(12);
/**
 * A representation of any set of values over any amount of time. This the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is  called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this._trySubscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.syncErrorThrown = true;
            sink.syncErrorValue = err;
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            }
            else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var subscription = _this.subscribe(function (value) {
                if (subscription) {
                    // if there is a subscription, then we can surmise
                    // the next handling is asynchronous. Any errors thrown
                    // need to be rejected explicitly and unsubscribe must be
                    // called manually
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                }
                else {
                    // if there is NO subscription, then we're getting a nexted
                    // value synchronously during subscription. We can just call it.
                    // If it errors, Observable's `subscribe` will ensure the
                    // unsubscription logic is called, then synchronously rethrow the error.
                    // After that, Promise will trap the error and send it
                    // down the rejection path.
                    next(value);
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        return this.source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable_1.$$observable] = function () {
        return this;
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
exports.Observable = Observable;
//# sourceMappingURL=Observable.js.map

/***/ }),
/* 2 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(21);
var Subscription_1 = __webpack_require__(8);
var Observer_1 = __webpack_require__(19);
var rxSubscriber_1 = __webpack_require__(13);
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer_1.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer_1.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        this.destination = destinationOrNext;
                        this.destination.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
exports.Subscriber = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            context = observerOrNext;
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (isFunction_1.isFunction(context.unsubscribe)) {
                this.add(context.unsubscribe.bind(context));
            }
            context.unsubscribe = this.unsubscribe.bind(this);
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._complete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._complete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
//# sourceMappingURL=Subscriber.js.map

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(1);
var Subscriber_1 = __webpack_require__(3);
var Subscription_1 = __webpack_require__(8);
var ObjectUnsubscribedError_1 = __webpack_require__(48);
var SubjectSubscription_1 = __webpack_require__(34);
var rxSubscriber_1 = __webpack_require__(13);
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        _super.call(this, destination);
        this.destination = destination;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
exports.SubjectSubscriber = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        _super.call(this);
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        _super.call(this);
        this.destination = destination;
        this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
exports.AnonymousSubject = AnonymousSubject;
//# sourceMappingURL=Subject.js.map

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
/**
 * window: browser in DOM main thread
 * self: browser in WebWorker
 * global: Node.js/other
 */
exports.root = (typeof window == 'object' && window.window === window && window
    || typeof self == 'object' && self.self === self && self
    || typeof global == 'object' && global.global === global && global);
if (!exports.root) {
    throw new Error('RxJS could not find any global context (window, self, global)');
}
//# sourceMappingURL=root.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserModule", function() { return BrowserModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "platformBrowser", function() { return platformBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Meta", function() { return Meta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Title", function() { return Title; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableDebugTools", function() { return disableDebugTools; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableDebugTools", function() { return enableDebugTools; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "By", function() { return By; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgProbeToken", function() { return NgProbeToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOCUMENT", function() { return DOCUMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EVENT_MANAGER_PLUGINS", function() { return EVENT_MANAGER_PLUGINS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventManager", function() { return EventManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HAMMER_GESTURE_CONFIG", function() { return HAMMER_GESTURE_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HammerGestureConfig", function() { return HammerGestureConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomSanitizer", function() { return DomSanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBROWSER_SANITIZATION_PROVIDERS", function() { return BROWSER_SANITIZATION_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS", function() { return INTERNAL_BROWSER_PLATFORM_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinitDomAdapter", function() { return initDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserDomAdapter", function() { return BrowserDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserPlatformLocation", function() { return BrowserPlatformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵTRANSITION_ID", function() { return TRANSITION_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserGetTestability", function() { return BrowserGetTestability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵELEMENT_PROBE_PROVIDERS", function() { return ELEMENT_PROBE_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomAdapter", function() { return DomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetDOM", function() { return getDOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵsetRootDomAdapter", function() { return setRootDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomRendererFactoryV2", function() { return DomRendererFactoryV2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNAMESPACE_URIS", function() { return NAMESPACE_URIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵflattenStyles", function() { return flattenStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵshimContentAttribute", function() { return shimContentAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵshimHostAttribute", function() { return shimHostAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomEventsPlugin", function() { return DomEventsPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵHammerGesturesPlugin", function() { return HammerGesturesPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵKeyEventsPlugin", function() { return KeyEventsPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomSharedStylesHost", function() { return DomSharedStylesHost; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSharedStylesHost", function() { return SharedStylesHost; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return _document; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return errorHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return GenericBrowserDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return SERVER_TRANSITION_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return bootstrapListenerFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return _createNgProbe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return EventManagerPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return DomSanitizerImpl; });
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license Angular v4.0.0-rc.2
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */




/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var /** @type {?} */_DOM = null;
/**
 * @return {?}
 */
function getDOM() {
  return _DOM;
}
/**
 * @param {?} adapter
 * @return {?}
 */
function setRootDomAdapter(adapter) {
  if (!_DOM) {
    _DOM = adapter;
  }
}
/**
 * Provides DOM operations in an environment-agnostic way.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */

var DomAdapter = function () {
  function DomAdapter() {
    _classCallCheck(this, DomAdapter);

    this.resourceLoaderType = null;
  }
  /**
   * @abstract
   * @param {?} element
   * @param {?} name
   * @return {?}
   */


  _createClass(DomAdapter, [{
    key: 'hasProperty',
    value: function hasProperty(element, name) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setProperty',
    value: function setProperty(el, name, value) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getProperty',
    value: function getProperty(el, name) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */

  }, {
    key: 'invoke',
    value: function invoke(el, methodName, args) {}
    /**
     * @abstract
     * @param {?} error
     * @return {?}
     */

  }, {
    key: 'logError',
    value: function logError(error) {}
    /**
     * @abstract
     * @param {?} error
     * @return {?}
     */

  }, {
    key: 'log',
    value: function log(error) {}
    /**
     * @abstract
     * @param {?} error
     * @return {?}
     */

  }, {
    key: 'logGroup',
    value: function logGroup(error) {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'logGroupEnd',
    value: function logGroupEnd() {}
    /**
     * Maps attribute names to their corresponding property names for cases
     * where attribute name doesn't match property name.
     * @return {?}
     */

  }, {
    key: 'parse',

    /**
     * @abstract
     * @param {?} templateHtml
     * @return {?}
     */
    value: function parse(templateHtml) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */

  }, {
    key: 'querySelector',
    value: function querySelector(el, selector) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */

  }, {
    key: 'querySelectorAll',
    value: function querySelectorAll(el, selector) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */

  }, {
    key: 'on',
    value: function on(el, evt, listener) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */

  }, {
    key: 'onAndCancel',
    value: function onAndCancel(el, evt, listener) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */

  }, {
    key: 'dispatchEvent',
    value: function dispatchEvent(el, evt) {}
    /**
     * @abstract
     * @param {?} eventType
     * @return {?}
     */

  }, {
    key: 'createMouseEvent',
    value: function createMouseEvent(eventType) {}
    /**
     * @abstract
     * @param {?} eventType
     * @return {?}
     */

  }, {
    key: 'createEvent',
    value: function createEvent(eventType) {}
    /**
     * @abstract
     * @param {?} evt
     * @return {?}
     */

  }, {
    key: 'preventDefault',
    value: function preventDefault(evt) {}
    /**
     * @abstract
     * @param {?} evt
     * @return {?}
     */

  }, {
    key: 'isPrevented',
    value: function isPrevented(evt) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getInnerHTML',
    value: function getInnerHTML(el) {}
    /**
     * Returns content if el is a <template> element, null otherwise.
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getTemplateContent',
    value: function getTemplateContent(el) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getOuterHTML',
    value: function getOuterHTML(el) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'nodeName',
    value: function nodeName(node) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'nodeValue',
    value: function nodeValue(node) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'type',
    value: function type(node) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'content',
    value: function content(node) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'firstChild',
    value: function firstChild(el) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'nextSibling',
    value: function nextSibling(el) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'parentElement',
    value: function parentElement(el) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'childNodes',
    value: function childNodes(el) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'childNodesAsList',
    value: function childNodesAsList(el) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'clearNodes',
    value: function clearNodes(el) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'appendChild',
    value: function appendChild(el, node) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'removeChild',
    value: function removeChild(el, node) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} newNode
     * @param {?} oldNode
     * @return {?}
     */

  }, {
    key: 'replaceChild',
    value: function replaceChild(el, newNode, oldNode) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'remove',
    value: function remove(el) {}
    /**
     * @abstract
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'insertBefore',
    value: function insertBefore(parent, ref, node) {}
    /**
     * @abstract
     * @param {?} parent
     * @param {?} ref
     * @param {?} nodes
     * @return {?}
     */

  }, {
    key: 'insertAllBefore',
    value: function insertAllBefore(parent, ref, nodes) {}
    /**
     * @abstract
     * @param {?} parent
     * @param {?} el
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'insertAfter',
    value: function insertAfter(parent, el, node) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setInnerHTML',
    value: function setInnerHTML(el, value) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getText',
    value: function getText(el) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setText',
    value: function setText(el, value) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getValue',
    value: function getValue(el) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setValue',
    value: function setValue(el, value) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getChecked',
    value: function getChecked(el) {}
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setChecked',
    value: function setChecked(el, value) {}
    /**
     * @abstract
     * @param {?} text
     * @return {?}
     */

  }, {
    key: 'createComment',
    value: function createComment(text) {}
    /**
     * @abstract
     * @param {?} html
     * @return {?}
     */

  }, {
    key: 'createTemplate',
    value: function createTemplate(html) {}
    /**
     * @abstract
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createElement',
    value: function createElement(tagName, doc) {}
    /**
     * @abstract
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createElementNS',
    value: function createElementNS(ns, tagName, doc) {}
    /**
     * @abstract
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createTextNode',
    value: function createTextNode(text, doc) {}
    /**
     * @abstract
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createScriptTag',
    value: function createScriptTag(attrName, attrValue, doc) {}
    /**
     * @abstract
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createStyleElement',
    value: function createStyleElement(css, doc) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'createShadowRoot',
    value: function createShadowRoot(el) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getShadowRoot',
    value: function getShadowRoot(el) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getHost',
    value: function getHost(el) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getDistributedNodes',
    value: function getDistributedNodes(el) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'clone',
    value: function clone( /*<T extends Node>*/node) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getElementsByClassName',
    value: function getElementsByClassName(element, name) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getElementsByTagName',
    value: function getElementsByTagName(element, name) {}
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'classList',
    value: function classList(element) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */

  }, {
    key: 'addClass',
    value: function addClass(element, className) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */

  }, {
    key: 'removeClass',
    value: function removeClass(element, className) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */

  }, {
    key: 'hasClass',
    value: function hasClass(element, className) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */

  }, {
    key: 'setStyle',
    value: function setStyle(element, styleName, styleValue) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */

  }, {
    key: 'removeStyle',
    value: function removeStyle(element, styleName) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */

  }, {
    key: 'getStyle',
    value: function getStyle(element, styleName) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */

  }, {
    key: 'hasStyle',
    value: function hasStyle(element, styleName, styleValue) {}
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'tagName',
    value: function tagName(element) {}
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'attributeMap',
    value: function attributeMap(element) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'hasAttribute',
    value: function hasAttribute(element, attribute) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'hasAttributeNS',
    value: function hasAttributeNS(element, ns, attribute) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'getAttribute',
    value: function getAttribute(element, attribute) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'getAttributeNS',
    value: function getAttributeNS(element, ns, attribute) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setAttribute',
    value: function setAttribute(element, name, value) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setAttributeNS',
    value: function setAttributeNS(element, ns, name, value) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'removeAttribute',
    value: function removeAttribute(element, attribute) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'removeAttributeNS',
    value: function removeAttributeNS(element, ns, attribute) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'templateAwareRoot',
    value: function templateAwareRoot(el) {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'createHtmlDocument',
    value: function createHtmlDocument() {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getBoundingClientRect',
    value: function getBoundingClientRect(el) {}
    /**
     * @abstract
     * @param {?} doc
     * @return {?}
     */

  }, {
    key: 'getTitle',
    value: function getTitle(doc) {}
    /**
     * @abstract
     * @param {?} doc
     * @param {?} newTitle
     * @return {?}
     */

  }, {
    key: 'setTitle',
    value: function setTitle(doc, newTitle) {}
    /**
     * @abstract
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */

  }, {
    key: 'elementMatches',
    value: function elementMatches(n, selector) {}
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'isTemplateElement',
    value: function isTemplateElement(el) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'isTextNode',
    value: function isTextNode(node) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'isCommentNode',
    value: function isCommentNode(node) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'isElementNode',
    value: function isElementNode(node) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'hasShadowRoot',
    value: function hasShadowRoot(node) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'isShadowRoot',
    value: function isShadowRoot(node) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'importIntoDoc',
    value: function importIntoDoc( /*<T extends Node>*/node) {}
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'adoptNode',
    value: function adoptNode( /*<T extends Node>*/node) {}
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'getHref',
    value: function getHref(element) {}
    /**
     * @abstract
     * @param {?} event
     * @return {?}
     */

  }, {
    key: 'getEventKey',
    value: function getEventKey(event) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */

  }, {
    key: 'resolveAndSetHref',
    value: function resolveAndSetHref(element, baseUrl, href) {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'supportsDOMEvents',
    value: function supportsDOMEvents() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'supportsNativeShadowDOM',
    value: function supportsNativeShadowDOM() {}
    /**
     * @abstract
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */

  }, {
    key: 'getGlobalEventTarget',
    value: function getGlobalEventTarget(doc, target) {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'getHistory',
    value: function getHistory() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'getLocation',
    value: function getLocation() {}
    /**
     * @abstract
     * @param {?} doc
     * @return {?}
     */

  }, {
    key: 'getBaseHref',
    value: function getBaseHref(doc) {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'resetBaseElement',
    value: function resetBaseElement() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'getUserAgent',
    value: function getUserAgent() {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setData',
    value: function setData(element, name, value) {}
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'getComputedStyle',
    value: function getComputedStyle(element) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getData',
    value: function getData(element, name) {}
    /**
     * @abstract
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setGlobalVar',
    value: function setGlobalVar(name, value) {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'supportsWebAnimation',
    value: function supportsWebAnimation() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'performanceNow',
    value: function performanceNow() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'getAnimationPrefix',
    value: function getAnimationPrefix() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'getTransitionEnd',
    value: function getTransitionEnd() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'supportsAnimation',
    value: function supportsAnimation() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'supportsCookies',
    value: function supportsCookies() {}
    /**
     * @abstract
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getCookie',
    value: function getCookie(name) {}
    /**
     * @abstract
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setCookie',
    value: function setCookie(name, value) {}
  }, {
    key: 'attrToPropMap',
    get: function get() {
      return this._attrToPropMap;
    },

    /**
     * @param {?} value
     * @return {?}
     */
    set: function set(value) {
      this._attrToPropMap = value;
    }
  }]);

  return DomAdapter;
}();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var /** @type {?} */globalScope = void 0;
if (typeof window === 'undefined') {
  if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
    // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
    globalScope = self;
  } else {
    globalScope = global;
  }
} else {
  globalScope = window;
}
// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var /** @type {?} */global$1 = globalScope;
// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
global$1.assert = function assert(condition) {
  // TODO: to be fixed properly via #2830, noop for now
};
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent(obj) {
  return obj != null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
  return obj == null;
}
/**
 * @param {?} global
 * @param {?} path
 * @param {?} value
 * @return {?}
 */
function setValueOnPath(global, path, value) {
  var /** @type {?} */parts = path.split('.');
  var /** @type {?} */obj = global;
  while (parts.length > 1) {
    var /** @type {?} */name = parts.shift();
    if (obj.hasOwnProperty(name) && obj[name] != null) {
      obj = obj[name];
    } else {
      obj = obj[name] = {};
    }
  }
  if (obj === undefined || obj === null) {
    obj = {};
  }
  obj[parts.shift()] = value;
}

/**
 * Provides DOM operations in any browser environment.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */

var GenericBrowserDomAdapter = function (_DomAdapter) {
  _inherits(GenericBrowserDomAdapter, _DomAdapter);

  function GenericBrowserDomAdapter() {
    _classCallCheck(this, GenericBrowserDomAdapter);

    var _this = _possibleConstructorReturn(this, (GenericBrowserDomAdapter.__proto__ || Object.getPrototypeOf(GenericBrowserDomAdapter)).call(this));

    _this._animationPrefix = null;
    _this._transitionEnd = null;
    try {
      var element = _this.createElement('div', document);
      if (isPresent(_this.getStyle(element, 'animationName'))) {
        _this._animationPrefix = '';
      } else {
        var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
        for (var i = 0; i < domPrefixes.length; i++) {
          if (isPresent(_this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {
            _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
            break;
          }
        }
      }
      var transEndEventNames = {
        WebkitTransition: 'webkitTransitionEnd',
        MozTransition: 'transitionend',
        OTransition: 'oTransitionEnd otransitionend',
        transition: 'transitionend'
      };
      Object.keys(transEndEventNames).forEach(function (key) {
        if (isPresent(_this.getStyle(element, key))) {
          _this._transitionEnd = transEndEventNames[key];
        }
      });
    } catch (e) {
      _this._animationPrefix = null;
      _this._transitionEnd = null;
    }
    return _this;
  }
  /**
   * @param {?} el
   * @return {?}
   */


  _createClass(GenericBrowserDomAdapter, [{
    key: 'getDistributedNodes',
    value: function getDistributedNodes(el) {
      return el.getDistributedNodes();
    }
    /**
     * @param {?} el
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */

  }, {
    key: 'resolveAndSetHref',
    value: function resolveAndSetHref(el, baseUrl, href) {
      el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'supportsDOMEvents',
    value: function supportsDOMEvents() {
      return true;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'supportsNativeShadowDOM',
    value: function supportsNativeShadowDOM() {
      return typeof document.body.createShadowRoot === 'function';
    }
    /**
     * @return {?}
     */

  }, {
    key: 'getAnimationPrefix',
    value: function getAnimationPrefix() {
      return this._animationPrefix ? this._animationPrefix : '';
    }
    /**
     * @return {?}
     */

  }, {
    key: 'getTransitionEnd',
    value: function getTransitionEnd() {
      return this._transitionEnd ? this._transitionEnd : '';
    }
    /**
     * @return {?}
     */

  }, {
    key: 'supportsAnimation',
    value: function supportsAnimation() {
      return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
    }
  }]);

  return GenericBrowserDomAdapter;
}(DomAdapter);

var /** @type {?} */_attrToPropMap = {
  'class': 'className',
  'innerHtml': 'innerHTML',
  'readonly': 'readOnly',
  'tabindex': 'tabIndex'
};
var /** @type {?} */DOM_KEY_LOCATION_NUMPAD = 3;
// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
var /** @type {?} */_keyMap = {
  // The following values are here for cross-browser compatibility and to match the W3C standard
  // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
  '\b': 'Backspace',
  '\t': 'Tab',
  '\x7F': 'Delete',
  '\x1B': 'Escape',
  'Del': 'Delete',
  'Esc': 'Escape',
  'Left': 'ArrowLeft',
  'Right': 'ArrowRight',
  'Up': 'ArrowUp',
  'Down': 'ArrowDown',
  'Menu': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'Win': 'OS'
};
// There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...
var /** @type {?} */_chromeNumKeyPadMap = {
  'A': '1',
  'B': '2',
  'C': '3',
  'D': '4',
  'E': '5',
  'F': '6',
  'G': '7',
  'H': '8',
  'I': '9',
  'J': '*',
  'K': '+',
  'M': '-',
  'N': '.',
  'O': '/',
  '\x60': '0',
  '\x90': 'NumLock'
};

var BrowserDomAdapter = function (_GenericBrowserDomAda) {
  _inherits(BrowserDomAdapter, _GenericBrowserDomAda);

  function BrowserDomAdapter() {
    _classCallCheck(this, BrowserDomAdapter);

    return _possibleConstructorReturn(this, (BrowserDomAdapter.__proto__ || Object.getPrototypeOf(BrowserDomAdapter)).apply(this, arguments));
  }

  _createClass(BrowserDomAdapter, [{
    key: 'parse',

    /**
     * @param {?} templateHtml
     * @return {?}
     */
    value: function parse(templateHtml) {
      throw new Error('parse not implemented');
    }
    /**
     * @return {?}
     */

  }, {
    key: 'hasProperty',

    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    value: function hasProperty(element, name) {
      return name in element;
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setProperty',
    value: function setProperty(el, name, value) {
      el[name] = value;
    }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getProperty',
    value: function getProperty(el, name) {
      return el[name];
    }
    /**
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */

  }, {
    key: 'invoke',
    value: function invoke(el, methodName, args) {
      el[methodName].apply(el, _toConsumableArray(args));
    }
    /**
     * @param {?} error
     * @return {?}
     */

  }, {
    key: 'logError',
    value: function logError(error) {
      if (window.console) {
        if (console.error) {
          console.error(error);
        } else {
          console.log(error);
        }
      }
    }
    /**
     * @param {?} error
     * @return {?}
     */

  }, {
    key: 'log',
    value: function log(error) {
      if (window.console) {
        window.console.log && window.console.log(error);
      }
    }
    /**
     * @param {?} error
     * @return {?}
     */

  }, {
    key: 'logGroup',
    value: function logGroup(error) {
      if (window.console) {
        window.console.group && window.console.group(error);
      }
    }
    /**
     * @return {?}
     */

  }, {
    key: 'logGroupEnd',
    value: function logGroupEnd() {
      if (window.console) {
        window.console.groupEnd && window.console.groupEnd();
      }
    }
    /**
     * @return {?}
     */

  }, {
    key: 'querySelector',

    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    value: function querySelector(el, selector) {
      return el.querySelector(selector);
    }
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */

  }, {
    key: 'querySelectorAll',
    value: function querySelectorAll(el, selector) {
      return el.querySelectorAll(selector);
    }
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */

  }, {
    key: 'on',
    value: function on(el, evt, listener) {
      el.addEventListener(evt, listener, false);
    }
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */

  }, {
    key: 'onAndCancel',
    value: function onAndCancel(el, evt, listener) {
      el.addEventListener(evt, listener, false);
      // Needed to follow Dart's subscription semantic, until fix of
      // https://code.google.com/p/dart/issues/detail?id=17406
      return function () {
        el.removeEventListener(evt, listener, false);
      };
    }
    /**
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */

  }, {
    key: 'dispatchEvent',
    value: function dispatchEvent(el, evt) {
      el.dispatchEvent(evt);
    }
    /**
     * @param {?} eventType
     * @return {?}
     */

  }, {
    key: 'createMouseEvent',
    value: function createMouseEvent(eventType) {
      var /** @type {?} */evt = document.createEvent('MouseEvent');
      evt.initEvent(eventType, true, true);
      return evt;
    }
    /**
     * @param {?} eventType
     * @return {?}
     */

  }, {
    key: 'createEvent',
    value: function createEvent(eventType) {
      var /** @type {?} */evt = document.createEvent('Event');
      evt.initEvent(eventType, true, true);
      return evt;
    }
    /**
     * @param {?} evt
     * @return {?}
     */

  }, {
    key: 'preventDefault',
    value: function preventDefault(evt) {
      evt.preventDefault();
      evt.returnValue = false;
    }
    /**
     * @param {?} evt
     * @return {?}
     */

  }, {
    key: 'isPrevented',
    value: function isPrevented(evt) {
      return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getInnerHTML',
    value: function getInnerHTML(el) {
      return el.innerHTML;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getTemplateContent',
    value: function getTemplateContent(el) {
      return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getOuterHTML',
    value: function getOuterHTML(el) {
      return el.outerHTML;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'nodeName',
    value: function nodeName(node) {
      return node.nodeName;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'nodeValue',
    value: function nodeValue(node) {
      return node.nodeValue;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'type',
    value: function type(node) {
      return node.type;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'content',
    value: function content(node) {
      if (this.hasProperty(node, 'content')) {
        return node.content;
      } else {
        return node;
      }
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'firstChild',
    value: function firstChild(el) {
      return el.firstChild;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'nextSibling',
    value: function nextSibling(el) {
      return el.nextSibling;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'parentElement',
    value: function parentElement(el) {
      return el.parentNode;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'childNodes',
    value: function childNodes(el) {
      return el.childNodes;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'childNodesAsList',
    value: function childNodesAsList(el) {
      var /** @type {?} */childNodes = el.childNodes;
      var /** @type {?} */res = new Array(childNodes.length);
      for (var /** @type {?} */i = 0; i < childNodes.length; i++) {
        res[i] = childNodes[i];
      }
      return res;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'clearNodes',
    value: function clearNodes(el) {
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    }
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'appendChild',
    value: function appendChild(el, node) {
      el.appendChild(node);
    }
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'removeChild',
    value: function removeChild(el, node) {
      el.removeChild(node);
    }
    /**
     * @param {?} el
     * @param {?} newChild
     * @param {?} oldChild
     * @return {?}
     */

  }, {
    key: 'replaceChild',
    value: function replaceChild(el, newChild, oldChild) {
      el.replaceChild(newChild, oldChild);
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'remove',
    value: function remove(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
      return node;
    }
    /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'insertBefore',
    value: function insertBefore(parent, ref, node) {
      parent.insertBefore(node, ref);
    }
    /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} nodes
     * @return {?}
     */

  }, {
    key: 'insertAllBefore',
    value: function insertAllBefore(parent, ref, nodes) {
      nodes.forEach(function (n) {
        return parent.insertBefore(n, ref);
      });
    }
    /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'insertAfter',
    value: function insertAfter(parent, ref, node) {
      parent.insertBefore(node, ref.nextSibling);
    }
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setInnerHTML',
    value: function setInnerHTML(el, value) {
      el.innerHTML = value;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getText',
    value: function getText(el) {
      return el.textContent;
    }
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setText',
    value: function setText(el, value) {
      el.textContent = value;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getValue',
    value: function getValue(el) {
      return el.value;
    }
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setValue',
    value: function setValue(el, value) {
      el.value = value;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getChecked',
    value: function getChecked(el) {
      return el.checked;
    }
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setChecked',
    value: function setChecked(el, value) {
      el.checked = value;
    }
    /**
     * @param {?} text
     * @return {?}
     */

  }, {
    key: 'createComment',
    value: function createComment(text) {
      return document.createComment(text);
    }
    /**
     * @param {?} html
     * @return {?}
     */

  }, {
    key: 'createTemplate',
    value: function createTemplate(html) {
      var /** @type {?} */t = document.createElement('template');
      t.innerHTML = html;
      return t;
    }
    /**
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createElement',
    value: function createElement(tagName) {
      var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
      return doc.createElement(tagName);
    }
    /**
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createElementNS',
    value: function createElementNS(ns, tagName) {
      var doc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;

      return doc.createElementNS(ns, tagName);
    }
    /**
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createTextNode',
    value: function createTextNode(text) {
      var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
      return doc.createTextNode(text);
    }
    /**
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createScriptTag',
    value: function createScriptTag(attrName, attrValue) {
      var doc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;

      var /** @type {?} */el = doc.createElement('SCRIPT');
      el.setAttribute(attrName, attrValue);
      return el;
    }
    /**
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */

  }, {
    key: 'createStyleElement',
    value: function createStyleElement(css) {
      var doc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

      var /** @type {?} */style = doc.createElement('style');
      this.appendChild(style, this.createTextNode(css));
      return style;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'createShadowRoot',
    value: function createShadowRoot(el) {
      return el.createShadowRoot();
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getShadowRoot',
    value: function getShadowRoot(el) {
      return el.shadowRoot;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getHost',
    value: function getHost(el) {
      return el.host;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'clone',
    value: function clone(node) {
      return node.cloneNode(true);
    }
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getElementsByClassName',
    value: function getElementsByClassName(element, name) {
      return element.getElementsByClassName(name);
    }
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getElementsByTagName',
    value: function getElementsByTagName(element, name) {
      return element.getElementsByTagName(name);
    }
    /**
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'classList',
    value: function classList(element) {
      return Array.prototype.slice.call(element.classList, 0);
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */

  }, {
    key: 'addClass',
    value: function addClass(element, className) {
      element.classList.add(className);
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */

  }, {
    key: 'removeClass',
    value: function removeClass(element, className) {
      element.classList.remove(className);
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */

  }, {
    key: 'hasClass',
    value: function hasClass(element, className) {
      return element.classList.contains(className);
    }
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */

  }, {
    key: 'setStyle',
    value: function setStyle(element, styleName, styleValue) {
      element.style[styleName] = styleValue;
    }
    /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */

  }, {
    key: 'removeStyle',
    value: function removeStyle(element, stylename) {
      // IE requires '' instead of null
      // see https://github.com/angular/angular/issues/7916
      element.style[stylename] = '';
    }
    /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */

  }, {
    key: 'getStyle',
    value: function getStyle(element, stylename) {
      return element.style[stylename];
    }
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */

  }, {
    key: 'hasStyle',
    value: function hasStyle(element, styleName) {
      var styleValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      var /** @type {?} */value = this.getStyle(element, styleName) || '';
      return styleValue ? value == styleValue : value.length > 0;
    }
    /**
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'tagName',
    value: function tagName(element) {
      return element.tagName;
    }
    /**
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'attributeMap',
    value: function attributeMap(element) {
      var /** @type {?} */res = new Map();
      var /** @type {?} */elAttrs = element.attributes;
      for (var /** @type {?} */i = 0; i < elAttrs.length; i++) {
        var /** @type {?} */attrib = elAttrs[i];
        res.set(attrib.name, attrib.value);
      }
      return res;
    }
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'hasAttribute',
    value: function hasAttribute(element, attribute) {
      return element.hasAttribute(attribute);
    }
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'hasAttributeNS',
    value: function hasAttributeNS(element, ns, attribute) {
      return element.hasAttributeNS(ns, attribute);
    }
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'getAttribute',
    value: function getAttribute(element, attribute) {
      return element.getAttribute(attribute);
    }
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getAttributeNS',
    value: function getAttributeNS(element, ns, name) {
      return element.getAttributeNS(ns, name);
    }
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setAttribute',
    value: function setAttribute(element, name, value) {
      element.setAttribute(name, value);
    }
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setAttributeNS',
    value: function setAttributeNS(element, ns, name, value) {
      element.setAttributeNS(ns, name, value);
    }
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */

  }, {
    key: 'removeAttribute',
    value: function removeAttribute(element, attribute) {
      element.removeAttribute(attribute);
    }
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'removeAttributeNS',
    value: function removeAttributeNS(element, ns, name) {
      element.removeAttributeNS(ns, name);
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'templateAwareRoot',
    value: function templateAwareRoot(el) {
      return this.isTemplateElement(el) ? this.content(el) : el;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'createHtmlDocument',
    value: function createHtmlDocument() {
      return document.implementation.createHTMLDocument('fakeTitle');
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getBoundingClientRect',
    value: function getBoundingClientRect(el) {
      try {
        return el.getBoundingClientRect();
      } catch (e) {
        return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
      }
    }
    /**
     * @param {?} doc
     * @return {?}
     */

  }, {
    key: 'getTitle',
    value: function getTitle(doc) {
      return document.title;
    }
    /**
     * @param {?} doc
     * @param {?} newTitle
     * @return {?}
     */

  }, {
    key: 'setTitle',
    value: function setTitle(doc, newTitle) {
      document.title = newTitle || '';
    }
    /**
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */

  }, {
    key: 'elementMatches',
    value: function elementMatches(n, selector) {
      if (n instanceof HTMLElement) {
        return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
      }
      return false;
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'isTemplateElement',
    value: function isTemplateElement(el) {
      return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'isTextNode',
    value: function isTextNode(node) {
      return node.nodeType === Node.TEXT_NODE;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'isCommentNode',
    value: function isCommentNode(node) {
      return node.nodeType === Node.COMMENT_NODE;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'isElementNode',
    value: function isElementNode(node) {
      return node.nodeType === Node.ELEMENT_NODE;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'hasShadowRoot',
    value: function hasShadowRoot(node) {
      return isPresent(node.shadowRoot) && node instanceof HTMLElement;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'isShadowRoot',
    value: function isShadowRoot(node) {
      return node instanceof DocumentFragment;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'importIntoDoc',
    value: function importIntoDoc(node) {
      return document.importNode(this.templateAwareRoot(node), true);
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'adoptNode',
    value: function adoptNode(node) {
      return document.adoptNode(node);
    }
    /**
     * @param {?} el
     * @return {?}
     */

  }, {
    key: 'getHref',
    value: function getHref(el) {
      return el.href;
    }
    /**
     * @param {?} event
     * @return {?}
     */

  }, {
    key: 'getEventKey',
    value: function getEventKey(event) {
      var /** @type {?} */key = event.key;
      if (isBlank(key)) {
        key = event.keyIdentifier;
        // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
        // Safari cf
        // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
        if (isBlank(key)) {
          return 'Unidentified';
        }
        if (key.startsWith('U+')) {
          key = String.fromCharCode(parseInt(key.substring(2), 16));
          if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
            // There is a bug in Chrome for numeric keypad keys:
            // https://code.google.com/p/chromium/issues/detail?id=155654
            // 1, 2, 3 ... are reported as A, B, C ...
            key = _chromeNumKeyPadMap[key];
          }
        }
      }
      return _keyMap[key] || key;
    }
    /**
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */

  }, {
    key: 'getGlobalEventTarget',
    value: function getGlobalEventTarget(doc, target) {
      if (target === 'window') {
        return window;
      }
      if (target === 'document') {
        return document;
      }
      if (target === 'body') {
        return document.body;
      }
    }
    /**
     * @return {?}
     */

  }, {
    key: 'getHistory',
    value: function getHistory() {
      return window.history;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'getLocation',
    value: function getLocation() {
      return window.location;
    }
    /**
     * @param {?} doc
     * @return {?}
     */

  }, {
    key: 'getBaseHref',
    value: function getBaseHref(doc) {
      var /** @type {?} */href = getBaseElementHref();
      return isBlank(href) ? null : relativePath(href);
    }
    /**
     * @return {?}
     */

  }, {
    key: 'resetBaseElement',
    value: function resetBaseElement() {
      baseElement = null;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'getUserAgent',
    value: function getUserAgent() {
      return window.navigator.userAgent;
    }
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setData',
    value: function setData(element, name, value) {
      this.setAttribute(element, 'data-' + name, value);
    }
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getData',
    value: function getData(element, name) {
      return this.getAttribute(element, 'data-' + name);
    }
    /**
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'getComputedStyle',
    value: function (_getComputedStyle) {
      function getComputedStyle(_x) {
        return _getComputedStyle.apply(this, arguments);
      }

      getComputedStyle.toString = function () {
        return _getComputedStyle.toString();
      };

      return getComputedStyle;
    }(function (element) {
      return getComputedStyle(element);
    })
    /**
     * @param {?} path
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setGlobalVar',
    value: function setGlobalVar(path, value) {
      setValueOnPath(global$1, path, value);
    }
    /**
     * @return {?}
     */

  }, {
    key: 'supportsWebAnimation',
    value: function supportsWebAnimation() {
      return typeof Element.prototype['animate'] === 'function';
    }
    /**
     * @return {?}
     */

  }, {
    key: 'performanceNow',
    value: function performanceNow() {
      // performance.now() is not available in all browsers, see
      // http://caniuse.com/#search=performance.now
      return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();
    }
    /**
     * @return {?}
     */

  }, {
    key: 'supportsCookies',
    value: function supportsCookies() {
      return true;
    }
    /**
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'getCookie',
    value: function getCookie(name) {
      return parseCookieValue(document.cookie, name);
    }
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setCookie',
    value: function setCookie(name, value) {
      // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
      // not clear other cookies.
      document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    }
  }, {
    key: 'attrToPropMap',
    get: function get() {
      return _attrToPropMap;
    }
  }], [{
    key: 'makeCurrent',
    value: function makeCurrent() {
      setRootDomAdapter(new BrowserDomAdapter());
    }
  }]);

  return BrowserDomAdapter;
}(GenericBrowserDomAdapter);

var /** @type {?} */baseElement = null;
/**
 * @return {?}
 */
function getBaseElementHref() {
  if (!baseElement) {
    baseElement = document.querySelector('base');
    if (!baseElement) {
      return null;
    }
  }
  return baseElement.getAttribute('href');
}
// based on urlUtils.js in AngularJS 1
var /** @type {?} */urlParsingNode = void 0;
/**
 * @param {?} url
 * @return {?}
 */
function relativePath(url) {
  if (!urlParsingNode) {
    urlParsingNode = document.createElement('a');
  }
  urlParsingNode.setAttribute('href', url);
  return urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
}
/**
 * @param {?} cookieStr
 * @param {?} name
 * @return {?}
 */
function parseCookieValue(cookieStr, name) {
  name = encodeURIComponent(name);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = cookieStr.split(';')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var cookie = _step.value;

      var /** @type {?} */eqIndex = cookie.indexOf('=');

      var _ref = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
          _ref2 = _slicedToArray(_ref, 2),
          cookieName = _ref2[0],
          cookieValue = _ref2[1];

      if (cookieName.trim() === name) {
        return decodeURIComponent(cookieValue);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
}

/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application into a Web Worker).
 *
 * @stable
 */
var /** @type {?} */DOCUMENT = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["InjectionToken"]('DocumentToken');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @return {?}
 */
function supportsState() {
  return !!window.history.pushState;
}

/**
 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 */

var BrowserPlatformLocation = function (_PlatformLocation) {
  _inherits(BrowserPlatformLocation, _PlatformLocation);

  /**
   * @param {?} _doc
   */
  function BrowserPlatformLocation(_doc) {
    _classCallCheck(this, BrowserPlatformLocation);

    var _this3 = _possibleConstructorReturn(this, (BrowserPlatformLocation.__proto__ || Object.getPrototypeOf(BrowserPlatformLocation)).call(this));

    _this3._doc = _doc;
    _this3._init();
    return _this3;
  }
  /**
   * \@internal
   * @return {?}
   */


  _createClass(BrowserPlatformLocation, [{
    key: '_init',
    value: function _init() {
      this._location = getDOM().getLocation();
      this._history = getDOM().getHistory();
    }
    /**
     * @return {?}
     */

  }, {
    key: 'getBaseHrefFromDOM',

    /**
     * @return {?}
     */
    value: function getBaseHrefFromDOM() {
      return getDOM().getBaseHref(this._doc);
    }
    /**
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onPopState',
    value: function onPopState(fn) {
      getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
    }
    /**
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onHashChange',
    value: function onHashChange(fn) {
      getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
    }
    /**
     * @return {?}
     */

  }, {
    key: 'pushState',

    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    value: function pushState(state, title, url) {
      if (supportsState()) {
        this._history.pushState(state, title, url);
      } else {
        this._location.hash = url;
      }
    }
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */

  }, {
    key: 'replaceState',
    value: function replaceState(state, title, url) {
      if (supportsState()) {
        this._history.replaceState(state, title, url);
      } else {
        this._location.hash = url;
      }
    }
    /**
     * @return {?}
     */

  }, {
    key: 'forward',
    value: function forward() {
      this._history.forward();
    }
    /**
     * @return {?}
     */

  }, {
    key: 'back',
    value: function back() {
      this._history.back();
    }
  }, {
    key: 'location',
    get: function get() {
      return this._location;
    }
  }, {
    key: 'pathname',
    get: function get() {
      return this._location.pathname;
    }
    /**
     * @return {?}
     */
    ,

    /**
     * @param {?} newPath
     * @return {?}
     */
    set: function set(newPath) {
      this._location.pathname = newPath;
    }
  }, {
    key: 'search',
    get: function get() {
      return this._location.search;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'hash',
    get: function get() {
      return this._location.hash;
    }
  }]);

  return BrowserPlatformLocation;
}(__WEBPACK_IMPORTED_MODULE_0__angular_common__["PlatformLocation"]);

BrowserPlatformLocation.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
BrowserPlatformLocation.ctorParameters = function () {
  return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT] }] }];
};

/**
 * A service that can be used to get and add meta tags.
 *
 * \@experimental
 */

var Meta = function () {
  /**
   * @param {?} _doc
   */
  function Meta(_doc) {
    _classCallCheck(this, Meta);

    this._doc = _doc;
    this._dom = getDOM();
  }
  /**
   * @param {?} tag
   * @param {?=} forceCreation
   * @return {?}
   */


  _createClass(Meta, [{
    key: 'addTag',
    value: function addTag(tag) {
      var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!tag) return null;
      return this._getOrCreateElement(tag, forceCreation);
    }
    /**
     * @param {?} tags
     * @param {?=} forceCreation
     * @return {?}
     */

  }, {
    key: 'addTags',
    value: function addTags(tags) {
      var _this4 = this;

      var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!tags) return [];
      return tags.reduce(function (result, tag) {
        if (tag) {
          result.push(_this4._getOrCreateElement(tag, forceCreation));
        }
        return result;
      }, []);
    }
    /**
     * @param {?} attrSelector
     * @return {?}
     */

  }, {
    key: 'getTag',
    value: function getTag(attrSelector) {
      if (!attrSelector) return null;
      return this._dom.querySelector(this._doc, 'meta[' + attrSelector + ']');
    }
    /**
     * @param {?} attrSelector
     * @return {?}
     */

  }, {
    key: 'getTags',
    value: function getTags(attrSelector) {
      if (!attrSelector) return [];
      var /** @type {?} */list /*NodeList*/ = this._dom.querySelectorAll(this._doc, 'meta[' + attrSelector + ']');
      return list ? [].slice.call(list) : [];
    }
    /**
     * @param {?} tag
     * @param {?=} selector
     * @return {?}
     */

  }, {
    key: 'updateTag',
    value: function updateTag(tag, selector) {
      if (!tag) return null;
      selector = selector || this._parseSelector(tag);
      var /** @type {?} */meta = this.getTag(selector);
      if (meta) {
        return this._setMetaElementAttributes(tag, meta);
      }
      return this._getOrCreateElement(tag, true);
    }
    /**
     * @param {?} attrSelector
     * @return {?}
     */

  }, {
    key: 'removeTag',
    value: function removeTag(attrSelector) {
      this.removeTagElement(this.getTag(attrSelector));
    }
    /**
     * @param {?} meta
     * @return {?}
     */

  }, {
    key: 'removeTagElement',
    value: function removeTagElement(meta) {
      if (meta) {
        this._dom.remove(meta);
      }
    }
    /**
     * @param {?} meta
     * @param {?=} forceCreation
     * @return {?}
     */

  }, {
    key: '_getOrCreateElement',
    value: function _getOrCreateElement(meta) {
      var forceCreation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!forceCreation) {
        var /** @type {?} */selector = this._parseSelector(meta);
        var /** @type {?} */elem = this.getTag(selector);
        // It's allowed to have multiple elements with the same name so it's not enough to
        // just check that element with the same name already present on the page. We also need to
        // check if element has tag attributes
        if (elem && this._containsAttributes(meta, elem)) return elem;
      }
      var /** @type {?} */element = this._dom.createElement('meta');
      this._setMetaElementAttributes(meta, element);
      var /** @type {?} */head = this._dom.getElementsByTagName(this._doc, 'head')[0];
      this._dom.appendChild(head, element);
      return element;
    }
    /**
     * @param {?} tag
     * @param {?} el
     * @return {?}
     */

  }, {
    key: '_setMetaElementAttributes',
    value: function _setMetaElementAttributes(tag, el) {
      var _this5 = this;

      Object.keys(tag).forEach(function (prop) {
        return _this5._dom.setAttribute(el, prop, tag[prop]);
      });
      return el;
    }
    /**
     * @param {?} tag
     * @return {?}
     */

  }, {
    key: '_parseSelector',
    value: function _parseSelector(tag) {
      var /** @type {?} */attr = tag.name ? 'name' : 'property';
      return attr + '="' + tag[attr] + '"';
    }
    /**
     * @param {?} tag
     * @param {?} elem
     * @return {?}
     */

  }, {
    key: '_containsAttributes',
    value: function _containsAttributes(tag, elem) {
      var _this6 = this;

      return Object.keys(tag).every(function (key) {
        return _this6._dom.getAttribute(elem, key) === tag[key];
      });
    }
  }]);

  return Meta;
}();

Meta.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
Meta.ctorParameters = function () {
  return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT] }] }];
};

/**
 * An id that identifies a particular application being bootstrapped, that should
 * match across the client/server boundary.
 */
var /** @type {?} */TRANSITION_ID = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["InjectionToken"]('TRANSITION_ID');
/**
 * @param {?} transitionId
 * @param {?} document
 * @return {?}
 */
function bootstrapListenerFactory(transitionId, document) {
  var /** @type {?} */factory = function factory() {
    var /** @type {?} */dom = getDOM();
    var /** @type {?} */styles = Array.prototype.slice.apply(dom.querySelectorAll(document, 'style[ng-transition]'));
    styles.filter(function (el) {
      return dom.getAttribute(el, 'ng-transition') === transitionId;
    }).forEach(function (el) {
      return dom.remove(el);
    });
  };
  return factory;
}
var /** @type {?} */SERVER_TRANSITION_PROVIDERS = [{
  provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["APP_INITIALIZER"],
  useFactory: bootstrapListenerFactory,
  deps: [TRANSITION_ID, DOCUMENT],
  multi: true
}];

var BrowserGetTestability = function () {
  function BrowserGetTestability() {
    _classCallCheck(this, BrowserGetTestability);
  }

  _createClass(BrowserGetTestability, [{
    key: 'addToWindow',

    /**
     * @param {?} registry
     * @return {?}
     */
    value: function addToWindow(registry) {
      global$1.getAngularTestability = function (elem) {
        var findInAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var /** @type {?} */testability = registry.findTestabilityInTree(elem, findInAncestors);
        if (testability == null) {
          throw new Error('Could not find testability for element.');
        }
        return testability;
      };
      global$1.getAllAngularTestabilities = function () {
        return registry.getAllTestabilities();
      };
      global$1.getAllAngularRootElements = function () {
        return registry.getAllRootElements();
      };
      var /** @type {?} */whenAllStable = function whenAllStable(callback /** TODO #9100 */) {
        var /** @type {?} */testabilities = global$1.getAllAngularTestabilities();
        var /** @type {?} */count = testabilities.length;
        var /** @type {?} */didWork = false;
        var /** @type {?} */decrement = function decrement(didWork_ /** TODO #9100 */) {
          didWork = didWork || didWork_;
          count--;
          if (count == 0) {
            callback(didWork);
          }
        };
        testabilities.forEach(function (testability /** TODO #9100 */) {
          testability.whenStable(decrement);
        });
      };
      if (!global$1['frameworkStabilizers']) {
        global$1['frameworkStabilizers'] = [];
      }
      global$1['frameworkStabilizers'].push(whenAllStable);
    }
    /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */

  }, {
    key: 'findTestabilityInTree',
    value: function findTestabilityInTree(registry, elem, findInAncestors) {
      if (elem == null) {
        return null;
      }
      var /** @type {?} */t = registry.getTestability(elem);
      if (isPresent(t)) {
        return t;
      } else if (!findInAncestors) {
        return null;
      }
      if (getDOM().isShadowRoot(elem)) {
        return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
      }
      return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
    }
  }], [{
    key: 'init',

    /**
     * @return {?}
     */
    value: function init() {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["setTestabilityGetter"])(new BrowserGetTestability());
    }
  }]);

  return BrowserGetTestability;
}();

/**
 * A service that can be used to get and set the title of a current HTML document.
 *
 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
 * title value.
 *
 * \@experimental
 */


var Title = function () {
  /**
   * @param {?} _doc
   */
  function Title(_doc) {
    _classCallCheck(this, Title);

    this._doc = _doc;
  }
  /**
   * Get the title of the current HTML document.
   * @return {?}
   */


  _createClass(Title, [{
    key: 'getTitle',
    value: function getTitle() {
      return getDOM().getTitle(this._doc);
    }
    /**
     * Set the title of the current HTML document.
     * @param {?} newTitle
     * @return {?}
     */

  }, {
    key: 'setTitle',
    value: function setTitle(newTitle) {
      getDOM().setTitle(this._doc, newTitle);
    }
  }]);

  return Title;
}();

Title.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
Title.ctorParameters = function () {
  return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT] }] }];
};

/**
 * Wraps Javascript Objects
 */

var StringMapWrapper = function () {
  function StringMapWrapper() {
    _classCallCheck(this, StringMapWrapper);
  }

  _createClass(StringMapWrapper, null, [{
    key: 'merge',

    /**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */
    value: function merge(m1, m2) {
      var /** @type {?} */m = {};
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Object.keys(m1)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var k = _step2.value;

          m[k] = m1[k];
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = Object.keys(m2)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _k = _step3.value;

          m[_k] = m2[_k];
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return m;
    }
    /**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */

  }, {
    key: 'equals',
    value: function equals(m1, m2) {
      var /** @type {?} */k1 = Object.keys(m1);
      var /** @type {?} */k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      for (var /** @type {?} */i = 0; i < k1.length; i++) {
        var /** @type {?} */key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    }
  }]);

  return StringMapWrapper;
}();

var /** @type {?} */CORE_TOKENS = {
  'ApplicationRef': __WEBPACK_IMPORTED_MODULE_1__angular_core__["ApplicationRef"],
  'NgZone': __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgZone"]
};
var /** @type {?} */INSPECT_GLOBAL_NAME = 'ng.probe';
var /** @type {?} */CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
/**
 * Returns a {\@link DebugElement} for the given native DOM element, or
 * null if the given native element does not have an Angular view associated
 * with it.
 * @param {?} element
 * @return {?}
 */
function inspectNativeElement(element) {
  return __WEBPACK_IMPORTED_MODULE_1__angular_core__["getDebugNode"](element);
}
/**
 * Deprecated. Use the one from '\@angular/core'.
 * @deprecated
 */

var NgProbeToken =
/**
 * @param {?} name
 * @param {?} token
 */
function NgProbeToken(name, token) {
  _classCallCheck(this, NgProbeToken);

  this.name = name;
  this.token = token;
};
/**
 * @param {?} extraTokens
 * @param {?} coreTokens
 * @return {?}
 */


function _createNgProbe(extraTokens, coreTokens) {
  var /** @type {?} */tokens = (extraTokens || []).concat(coreTokens || []);
  getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
  getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));
  return function () {
    return inspectNativeElement;
  };
}
/**
 * @param {?} tokens
 * @return {?}
 */
function _ngProbeTokensToMap(tokens) {
  return tokens.reduce(function (prev, t) {
    return prev[t.name] = t.token, prev;
  }, {});
}
/**
 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
 */
var /** @type {?} */ELEMENT_PROBE_PROVIDERS = [{
  provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["APP_INITIALIZER"],
  useFactory: _createNgProbe,
  deps: [[NgProbeToken, new __WEBPACK_IMPORTED_MODULE_1__angular_core__["Optional"]()], [__WEBPACK_IMPORTED_MODULE_1__angular_core__["NgProbeToken"], new __WEBPACK_IMPORTED_MODULE_1__angular_core__["Optional"]()]],
  multi: true
}];

/**
 * @stable
 */
var /** @type {?} */EVENT_MANAGER_PLUGINS = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["InjectionToken"]('EventManagerPlugins');
/**
 * \@stable
 */

var EventManager = function () {
  /**
   * @param {?} plugins
   * @param {?} _zone
   */
  function EventManager(plugins, _zone) {
    var _this7 = this;

    _classCallCheck(this, EventManager);

    this._zone = _zone;
    this._eventNameToPlugin = new Map();
    plugins.forEach(function (p) {
      return p.manager = _this7;
    });
    this._plugins = plugins.slice().reverse();
  }
  /**
   * @param {?} element
   * @param {?} eventName
   * @param {?} handler
   * @return {?}
   */


  _createClass(EventManager, [{
    key: 'addEventListener',
    value: function addEventListener(element, eventName, handler) {
      var /** @type {?} */plugin = this._findPluginFor(eventName);
      return plugin.addEventListener(element, eventName, handler);
    }
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */

  }, {
    key: 'addGlobalEventListener',
    value: function addGlobalEventListener(target, eventName, handler) {
      var /** @type {?} */plugin = this._findPluginFor(eventName);
      return plugin.addGlobalEventListener(target, eventName, handler);
    }
    /**
     * @return {?}
     */

  }, {
    key: 'getZone',
    value: function getZone() {
      return this._zone;
    }
    /**
     * \@internal
     * @param {?} eventName
     * @return {?}
     */

  }, {
    key: '_findPluginFor',
    value: function _findPluginFor(eventName) {
      var /** @type {?} */plugin = this._eventNameToPlugin.get(eventName);
      if (plugin) {
        return plugin;
      }
      var /** @type {?} */plugins = this._plugins;
      for (var /** @type {?} */i = 0; i < plugins.length; i++) {
        var /** @type {?} */_plugin = plugins[i];
        if (_plugin.supports(eventName)) {
          this._eventNameToPlugin.set(eventName, _plugin);
          return _plugin;
        }
      }
      throw new Error('No event manager plugin found for event ' + eventName);
    }
  }]);

  return EventManager;
}();

EventManager.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
EventManager.ctorParameters = function () {
  return [{ type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [EVENT_MANAGER_PLUGINS] }] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgZone"] }];
};
/**
 * @abstract
 */

var EventManagerPlugin = function () {
  /**
   * @param {?} _doc
   */
  function EventManagerPlugin(_doc) {
    _classCallCheck(this, EventManagerPlugin);

    this._doc = _doc;
  }
  /**
   * @abstract
   * @param {?} eventName
   * @return {?}
   */


  _createClass(EventManagerPlugin, [{
    key: 'supports',
    value: function supports(eventName) {}
    /**
     * @abstract
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */

  }, {
    key: 'addEventListener',
    value: function addEventListener(element, eventName, handler) {}
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */

  }, {
    key: 'addGlobalEventListener',
    value: function addGlobalEventListener(element, eventName, handler) {
      var /** @type {?} */target = getDOM().getGlobalEventTarget(this._doc, element);
      if (!target) {
        throw new Error('Unsupported event target ' + target + ' for event ' + eventName);
      }
      return this.addEventListener(target, eventName, handler);
    }
  }]);

  return EventManagerPlugin;
}();

var SharedStylesHost = function () {
  function SharedStylesHost() {
    _classCallCheck(this, SharedStylesHost);

    /** @internal */
    this._stylesSet = new Set();
  }
  /**
   * @param {?} styles
   * @return {?}
   */


  _createClass(SharedStylesHost, [{
    key: 'addStyles',
    value: function addStyles(styles) {
      var _this8 = this;

      var /** @type {?} */additions = new Set();
      styles.forEach(function (style) {
        if (!_this8._stylesSet.has(style)) {
          _this8._stylesSet.add(style);
          additions.add(style);
        }
      });
      this.onStylesAdded(additions);
    }
    /**
     * @param {?} additions
     * @return {?}
     */

  }, {
    key: 'onStylesAdded',
    value: function onStylesAdded(additions) {}
    /**
     * @return {?}
     */

  }, {
    key: 'getAllStyles',
    value: function getAllStyles() {
      return Array.from(this._stylesSet);
    }
  }]);

  return SharedStylesHost;
}();

SharedStylesHost.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
SharedStylesHost.ctorParameters = function () {
  return [];
};

var DomSharedStylesHost = function (_SharedStylesHost) {
  _inherits(DomSharedStylesHost, _SharedStylesHost);

  /**
   * @param {?} _doc
   */
  function DomSharedStylesHost(_doc) {
    _classCallCheck(this, DomSharedStylesHost);

    var _this9 = _possibleConstructorReturn(this, (DomSharedStylesHost.__proto__ || Object.getPrototypeOf(DomSharedStylesHost)).call(this));

    _this9._doc = _doc;
    _this9._hostNodes = new Set();
    _this9._styleNodes = new Set();
    _this9._hostNodes.add(_doc.head);
    return _this9;
  }
  /**
   * @param {?} styles
   * @param {?} host
   * @return {?}
   */


  _createClass(DomSharedStylesHost, [{
    key: '_addStylesToHost',
    value: function _addStylesToHost(styles, host) {
      var _this10 = this;

      styles.forEach(function (style) {
        var /** @type {?} */styleEl = _this10._doc.createElement('style');
        styleEl.textContent = style;
        _this10._styleNodes.add(host.appendChild(styleEl));
      });
    }
    /**
     * @param {?} hostNode
     * @return {?}
     */

  }, {
    key: 'addHost',
    value: function addHost(hostNode) {
      this._addStylesToHost(this._stylesSet, hostNode);
      this._hostNodes.add(hostNode);
    }
    /**
     * @param {?} hostNode
     * @return {?}
     */

  }, {
    key: 'removeHost',
    value: function removeHost(hostNode) {
      this._hostNodes.delete(hostNode);
    }
    /**
     * @param {?} additions
     * @return {?}
     */

  }, {
    key: 'onStylesAdded',
    value: function onStylesAdded(additions) {
      var _this11 = this;

      this._hostNodes.forEach(function (hostNode) {
        return _this11._addStylesToHost(additions, hostNode);
      });
    }
    /**
     * @return {?}
     */

  }, {
    key: 'ngOnDestroy',
    value: function ngOnDestroy() {
      this._styleNodes.forEach(function (styleNode) {
        return getDOM().remove(styleNode);
      });
    }
  }]);

  return DomSharedStylesHost;
}(SharedStylesHost);

DomSharedStylesHost.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
DomSharedStylesHost.ctorParameters = function () {
  return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT] }] }];
};

var /** @type {?} */NAMESPACE_URIS = {
  'xlink': 'http://www.w3.org/1999/xlink',
  'svg': 'http://www.w3.org/2000/svg',
  'xhtml': 'http://www.w3.org/1999/xhtml',
  'xml': 'http://www.w3.org/XML/1998/namespace'
};
var /** @type {?} */COMPONENT_REGEX = /%COMP%/g;
var /** @type {?} */COMPONENT_VARIABLE = '%COMP%';
var /** @type {?} */HOST_ATTR = '_nghost-' + COMPONENT_VARIABLE;
var /** @type {?} */CONTENT_ATTR = '_ngcontent-' + COMPONENT_VARIABLE;
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimContentAttribute(componentShortId) {
  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimHostAttribute(componentShortId) {
  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} compId
 * @param {?} styles
 * @param {?} target
 * @return {?}
 */
function flattenStyles(compId, styles, target) {
  for (var /** @type {?} */i = 0; i < styles.length; i++) {
    var /** @type {?} */style = styles[i];
    if (Array.isArray(style)) {
      flattenStyles(compId, style, target);
    } else {
      style = style.replace(COMPONENT_REGEX, compId);
      target.push(style);
    }
  }
  return target;
}
/**
 * @param {?} eventHandler
 * @return {?}
 */
function decoratePreventDefault(eventHandler) {
  return function (event) {
    var /** @type {?} */allowDefaultBehavior = eventHandler(event);
    if (allowDefaultBehavior === false) {
      // TODO(tbosch): move preventDefault into event plugins...
      event.preventDefault();
      event.returnValue = false;
    }
  };
}

var DomRendererFactoryV2 = function () {
  /**
   * @param {?} eventManager
   * @param {?} sharedStylesHost
   */
  function DomRendererFactoryV2(eventManager, sharedStylesHost) {
    _classCallCheck(this, DomRendererFactoryV2);

    this.eventManager = eventManager;
    this.sharedStylesHost = sharedStylesHost;
    this.rendererByCompId = new Map();
    this.defaultRenderer = new DefaultDomRendererV2(eventManager);
  }

  _createClass(DomRendererFactoryV2, [{
    key: 'createRenderer',

    /**
     * @param {?} element
     * @param {?} type
     * @return {?}
     */
    value: function createRenderer(element, type) {
      if (!element || !type) {
        return this.defaultRenderer;
      }
      switch (type.encapsulation) {
        case __WEBPACK_IMPORTED_MODULE_1__angular_core__["ViewEncapsulation"].Emulated:
          {
            var /** @type {?} */renderer = this.rendererByCompId.get(type.id);
            if (!renderer) {
              renderer = new EmulatedEncapsulationDomRendererV2(this.eventManager, this.sharedStylesHost, type);
              this.rendererByCompId.set(type.id, renderer);
            }
            renderer.applyToHost(element);
            return renderer;
          }
        case __WEBPACK_IMPORTED_MODULE_1__angular_core__["ViewEncapsulation"].Native:
          return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
        default:
          {
            if (!this.rendererByCompId.has(type.id)) {
              var /** @type {?} */styles = flattenStyles(type.id, type.styles, []);
              this.sharedStylesHost.addStyles(styles);
              this.rendererByCompId.set(type.id, this.defaultRenderer);
            }
            return this.defaultRenderer;
          }
      }
    }
  }]);

  return DomRendererFactoryV2;
}();

DomRendererFactoryV2.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
DomRendererFactoryV2.ctorParameters = function () {
  return [{ type: EventManager }, { type: DomSharedStylesHost }];
};

var DefaultDomRendererV2 = function () {
  /**
   * @param {?} eventManager
   */
  function DefaultDomRendererV2(eventManager) {
    _classCallCheck(this, DefaultDomRendererV2);

    this.eventManager = eventManager;
    this.data = Object.create(null);
  }
  /**
   * @return {?}
   */


  _createClass(DefaultDomRendererV2, [{
    key: 'destroy',
    value: function destroy() {}
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */

  }, {
    key: 'createElement',
    value: function createElement(name, namespace) {
      if (namespace) {
        return document.createElementNS(NAMESPACE_URIS[namespace], name);
      }
      return document.createElement(name);
    }
    /**
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'createComment',
    value: function createComment(value) {
      return document.createComment(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'createText',
    value: function createText(value) {
      return document.createTextNode(value);
    }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */

  }, {
    key: 'appendChild',
    value: function appendChild(parent, newChild) {
      parent.appendChild(newChild);
    }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */

  }, {
    key: 'insertBefore',
    value: function insertBefore(parent, newChild, refChild) {
      if (parent) {
        parent.insertBefore(newChild, refChild);
      }
    }
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */

  }, {
    key: 'removeChild',
    value: function removeChild(parent, oldChild) {
      if (parent) {
        parent.removeChild(oldChild);
      }
    }
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */

  }, {
    key: 'selectRootElement',
    value: function selectRootElement(selectorOrNode) {
      var /** @type {?} */el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) : selectorOrNode;
      if (!el) {
        throw new Error('The selector "' + selectorOrNode + '" did not match any elements');
      }
      el.textContent = '';
      return el;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'parentNode',
    value: function parentNode(node) {
      return node.parentNode;
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'nextSibling',
    value: function nextSibling(node) {
      return node.nextSibling;
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */

  }, {
    key: 'setAttribute',
    value: function setAttribute(el, name, value, namespace) {
      if (namespace) {
        el.setAttributeNS(NAMESPACE_URIS[namespace], namespace + ':' + name, value);
      } else {
        el.setAttribute(name, value);
      }
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */

  }, {
    key: 'removeAttribute',
    value: function removeAttribute(el, name, namespace) {
      if (namespace) {
        el.removeAttributeNS(NAMESPACE_URIS[namespace], name);
      } else {
        el.removeAttribute(name);
      }
    }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'addClass',
    value: function addClass(el, name) {
      el.classList.add(name);
    }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'removeClass',
    value: function removeClass(el, name) {
      el.classList.remove(name);
    }
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} hasVendorPrefix
     * @param {?} hasImportant
     * @return {?}
     */

  }, {
    key: 'setStyle',
    value: function setStyle(el, style, value, hasVendorPrefix, hasImportant) {
      if (hasVendorPrefix || hasImportant) {
        el.style.setProperty(style, value, hasImportant ? 'important' : '');
      } else {
        el.style[style] = value;
      }
    }
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} hasVendorPrefix
     * @return {?}
     */

  }, {
    key: 'removeStyle',
    value: function removeStyle(el, style, hasVendorPrefix) {
      if (hasVendorPrefix) {
        el.style.removeProperty(style);
      } else {
        // IE requires '' instead of null
        // see https://github.com/angular/angular/issues/7916
        el.style[style] = '';
      }
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setProperty',
    value: function setProperty(el, name, value) {
      el[name] = value;
    }
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'setValue',
    value: function setValue(node, value) {
      node.nodeValue = value;
    }
    /**
     * @param {?} target
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */

  }, {
    key: 'listen',
    value: function listen(target, event, callback) {
      if (typeof target === 'string') {
        return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));
      }
      return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));
    }
  }]);

  return DefaultDomRendererV2;
}();

var EmulatedEncapsulationDomRendererV2 = function (_DefaultDomRendererV) {
  _inherits(EmulatedEncapsulationDomRendererV2, _DefaultDomRendererV);

  /**
   * @param {?} eventManager
   * @param {?} sharedStylesHost
   * @param {?} component
   */
  function EmulatedEncapsulationDomRendererV2(eventManager, sharedStylesHost, component) {
    _classCallCheck(this, EmulatedEncapsulationDomRendererV2);

    var _this12 = _possibleConstructorReturn(this, (EmulatedEncapsulationDomRendererV2.__proto__ || Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2)).call(this, eventManager));

    _this12.component = component;
    var styles = flattenStyles(component.id, component.styles, []);
    sharedStylesHost.addStyles(styles);
    _this12.contentAttr = shimContentAttribute(component.id);
    _this12.hostAttr = shimHostAttribute(component.id);
    return _this12;
  }
  /**
   * @param {?} element
   * @return {?}
   */


  _createClass(EmulatedEncapsulationDomRendererV2, [{
    key: 'applyToHost',
    value: function applyToHost(element) {
      _get(EmulatedEncapsulationDomRendererV2.prototype.__proto__ || Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2.prototype), 'setAttribute', this).call(this, element, this.hostAttr, '');
    }
    /**
     * @param {?} parent
     * @param {?} name
     * @return {?}
     */

  }, {
    key: 'createElement',
    value: function createElement(parent, name) {
      var /** @type {?} */el = _get(EmulatedEncapsulationDomRendererV2.prototype.__proto__ || Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2.prototype), 'createElement', this).call(this, parent, name);
      _get(EmulatedEncapsulationDomRendererV2.prototype.__proto__ || Object.getPrototypeOf(EmulatedEncapsulationDomRendererV2.prototype), 'setAttribute', this).call(this, el, this.contentAttr, '');
      return el;
    }
  }]);

  return EmulatedEncapsulationDomRendererV2;
}(DefaultDomRendererV2);

var ShadowDomRenderer = function (_DefaultDomRendererV2) {
  _inherits(ShadowDomRenderer, _DefaultDomRendererV2);

  /**
   * @param {?} eventManager
   * @param {?} sharedStylesHost
   * @param {?} hostEl
   * @param {?} component
   */
  function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
    _classCallCheck(this, ShadowDomRenderer);

    var _this13 = _possibleConstructorReturn(this, (ShadowDomRenderer.__proto__ || Object.getPrototypeOf(ShadowDomRenderer)).call(this, eventManager));

    _this13.sharedStylesHost = sharedStylesHost;
    _this13.hostEl = hostEl;
    _this13.component = component;
    _this13.shadowRoot = hostEl.createShadowRoot();
    _this13.sharedStylesHost.addHost(_this13.shadowRoot);
    var styles = flattenStyles(component.id, component.styles, []);
    for (var i = 0; i < styles.length; i++) {
      var styleEl = document.createElement('style');
      styleEl.textContent = styles[i];
      _this13.shadowRoot.appendChild(styleEl);
    }
    return _this13;
  }
  /**
   * @param {?} node
   * @return {?}
   */


  _createClass(ShadowDomRenderer, [{
    key: 'nodeOrShadowRoot',
    value: function nodeOrShadowRoot(node) {
      return node === this.hostEl ? this.shadowRoot : node;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.sharedStylesHost.removeHost(this.shadowRoot);
    }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */

  }, {
    key: 'appendChild',
    value: function appendChild(parent, newChild) {
      return _get(ShadowDomRenderer.prototype.__proto__ || Object.getPrototypeOf(ShadowDomRenderer.prototype), 'appendChild', this).call(this, this.nodeOrShadowRoot(parent), newChild);
    }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */

  }, {
    key: 'insertBefore',
    value: function insertBefore(parent, newChild, refChild) {
      return _get(ShadowDomRenderer.prototype.__proto__ || Object.getPrototypeOf(ShadowDomRenderer.prototype), 'insertBefore', this).call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
    }
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */

  }, {
    key: 'removeChild',
    value: function removeChild(parent, oldChild) {
      return _get(ShadowDomRenderer.prototype.__proto__ || Object.getPrototypeOf(ShadowDomRenderer.prototype), 'removeChild', this).call(this, this.nodeOrShadowRoot(parent), oldChild);
    }
    /**
     * @param {?} node
     * @return {?}
     */

  }, {
    key: 'parentNode',
    value: function parentNode(node) {
      return this.nodeOrShadowRoot(_get(ShadowDomRenderer.prototype.__proto__ || Object.getPrototypeOf(ShadowDomRenderer.prototype), 'parentNode', this).call(this, this.nodeOrShadowRoot(node)));
    }
  }]);

  return ShadowDomRenderer;
}(DefaultDomRendererV2);

var DomEventsPlugin = function (_EventManagerPlugin) {
  _inherits(DomEventsPlugin, _EventManagerPlugin);

  /**
   * @param {?} doc
   */
  function DomEventsPlugin(doc) {
    _classCallCheck(this, DomEventsPlugin);

    return _possibleConstructorReturn(this, (DomEventsPlugin.__proto__ || Object.getPrototypeOf(DomEventsPlugin)).call(this, doc));
  }
  /**
   * @param {?} eventName
   * @return {?}
   */


  _createClass(DomEventsPlugin, [{
    key: 'supports',
    value: function supports(eventName) {
      return true;
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */

  }, {
    key: 'addEventListener',
    value: function addEventListener(element, eventName, handler) {
      element.addEventListener(eventName, /** @type {?} */handler, false);
      return function () {
        return element.removeEventListener(eventName, /** @type {?} */handler, false);
      };
    }
  }]);

  return DomEventsPlugin;
}(EventManagerPlugin);

DomEventsPlugin.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
DomEventsPlugin.ctorParameters = function () {
  return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT] }] }];
};

var /** @type {?} */EVENT_NAMES = {
  // pan
  'pan': true,
  'panstart': true,
  'panmove': true,
  'panend': true,
  'pancancel': true,
  'panleft': true,
  'panright': true,
  'panup': true,
  'pandown': true,
  // pinch
  'pinch': true,
  'pinchstart': true,
  'pinchmove': true,
  'pinchend': true,
  'pinchcancel': true,
  'pinchin': true,
  'pinchout': true,
  // press
  'press': true,
  'pressup': true,
  // rotate
  'rotate': true,
  'rotatestart': true,
  'rotatemove': true,
  'rotateend': true,
  'rotatecancel': true,
  // swipe
  'swipe': true,
  'swipeleft': true,
  'swiperight': true,
  'swipeup': true,
  'swipedown': true,
  // tap
  'tap': true
};
/**
 * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
 * Hammer gestures.
 *
 * @experimental
 */
var /** @type {?} */HAMMER_GESTURE_CONFIG = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["InjectionToken"]('HammerGestureConfig');
/**
 * \@experimental
 */

var HammerGestureConfig = function () {
  function HammerGestureConfig() {
    _classCallCheck(this, HammerGestureConfig);

    this.events = [];
    this.overrides = {};
  }
  /**
   * @param {?} element
   * @return {?}
   */


  _createClass(HammerGestureConfig, [{
    key: 'buildHammer',
    value: function buildHammer(element) {
      var /** @type {?} */mc = new Hammer(element);
      mc.get('pinch').set({ enable: true });
      mc.get('rotate').set({ enable: true });
      for (var /** @type {?} */eventName in this.overrides) {
        mc.get(eventName).set(this.overrides[eventName]);
      }
      return mc;
    }
  }]);

  return HammerGestureConfig;
}();

HammerGestureConfig.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
HammerGestureConfig.ctorParameters = function () {
  return [];
};

var HammerGesturesPlugin = function (_EventManagerPlugin2) {
  _inherits(HammerGesturesPlugin, _EventManagerPlugin2);

  /**
   * @param {?} doc
   * @param {?} _config
   */
  function HammerGesturesPlugin(doc, _config) {
    _classCallCheck(this, HammerGesturesPlugin);

    var _this15 = _possibleConstructorReturn(this, (HammerGesturesPlugin.__proto__ || Object.getPrototypeOf(HammerGesturesPlugin)).call(this, doc));

    _this15._config = _config;
    return _this15;
  }
  /**
   * @param {?} eventName
   * @return {?}
   */


  _createClass(HammerGesturesPlugin, [{
    key: 'supports',
    value: function supports(eventName) {
      if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
        return false;
      }
      if (!window.Hammer) {
        throw new Error('Hammer.js is not loaded, can not bind ' + eventName + ' event');
      }
      return true;
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */

  }, {
    key: 'addEventListener',
    value: function addEventListener(element, eventName, handler) {
      var _this16 = this;

      var /** @type {?} */zone = this.manager.getZone();
      eventName = eventName.toLowerCase();
      return zone.runOutsideAngular(function () {
        // Creating the manager bind events, must be done outside of angular
        var /** @type {?} */mc = _this16._config.buildHammer(element);
        var /** @type {?} */callback = function callback(eventObj) {
          zone.runGuarded(function () {
            handler(eventObj);
          });
        };
        mc.on(eventName, callback);
        return function () {
          return mc.off(eventName, callback);
        };
      });
    }
    /**
     * @param {?} eventName
     * @return {?}
     */

  }, {
    key: 'isCustomEvent',
    value: function isCustomEvent(eventName) {
      return this._config.events.indexOf(eventName) > -1;
    }
  }]);

  return HammerGesturesPlugin;
}(EventManagerPlugin);

HammerGesturesPlugin.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
HammerGesturesPlugin.ctorParameters = function () {
  return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT] }] }, { type: HammerGestureConfig, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [HAMMER_GESTURE_CONFIG] }] }];
};

var /** @type {?} */MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
var /** @type {?} */MODIFIER_KEY_GETTERS = {
  'alt': function alt(event) {
    return event.altKey;
  },
  'control': function control(event) {
    return event.ctrlKey;
  },
  'meta': function meta(event) {
    return event.metaKey;
  },
  'shift': function shift(event) {
    return event.shiftKey;
  }
};
/**
 * \@experimental
 */

var KeyEventsPlugin = function (_EventManagerPlugin3) {
  _inherits(KeyEventsPlugin, _EventManagerPlugin3);

  /**
   * @param {?} doc
   */
  function KeyEventsPlugin(doc) {
    _classCallCheck(this, KeyEventsPlugin);

    return _possibleConstructorReturn(this, (KeyEventsPlugin.__proto__ || Object.getPrototypeOf(KeyEventsPlugin)).call(this, doc));
  }
  /**
   * @param {?} eventName
   * @return {?}
   */


  _createClass(KeyEventsPlugin, [{
    key: 'supports',
    value: function supports(eventName) {
      return KeyEventsPlugin.parseEventName(eventName) != null;
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */

  }, {
    key: 'addEventListener',
    value: function addEventListener(element, eventName, handler) {
      var /** @type {?} */parsedEvent = KeyEventsPlugin.parseEventName(eventName);
      var /** @type {?} */outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
      return this.manager.getZone().runOutsideAngular(function () {
        return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
      });
    }
    /**
     * @param {?} eventName
     * @return {?}
     */

  }], [{
    key: 'parseEventName',
    value: function parseEventName(eventName) {
      var /** @type {?} */parts = eventName.toLowerCase().split('.');
      var /** @type {?} */domEventName = parts.shift();
      if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {
        return null;
      }
      var /** @type {?} */key = KeyEventsPlugin._normalizeKey(parts.pop());
      var /** @type {?} */fullKey = '';
      MODIFIER_KEYS.forEach(function (modifierName) {
        var /** @type {?} */index = parts.indexOf(modifierName);
        if (index > -1) {
          parts.splice(index, 1);
          fullKey += modifierName + '.';
        }
      });
      fullKey += key;
      if (parts.length != 0 || key.length === 0) {
        // returning null instead of throwing to let another plugin process the event
        return null;
      }
      var /** @type {?} */result = {};
      result['domEventName'] = domEventName;
      result['fullKey'] = fullKey;
      return result;
    }
    /**
     * @param {?} event
     * @return {?}
     */

  }, {
    key: 'getEventFullKey',
    value: function getEventFullKey(event) {
      var /** @type {?} */fullKey = '';
      var /** @type {?} */key = getDOM().getEventKey(event);
      key = key.toLowerCase();
      if (key === ' ') {
        key = 'space'; // for readability
      } else if (key === '.') {
        key = 'dot'; // because '.' is used as a separator in event names
      }
      MODIFIER_KEYS.forEach(function (modifierName) {
        if (modifierName != key) {
          var /** @type {?} */modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
          if (modifierGetter(event)) {
            fullKey += modifierName + '.';
          }
        }
      });
      fullKey += key;
      return fullKey;
    }
    /**
     * @param {?} fullKey
     * @param {?} handler
     * @param {?} zone
     * @return {?}
     */

  }, {
    key: 'eventCallback',
    value: function eventCallback(fullKey, handler, zone) {
      return function (event /** TODO #9100 */) {
        if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
          zone.runGuarded(function () {
            return handler(event);
          });
        }
      };
    }
    /**
     * \@internal
     * @param {?} keyName
     * @return {?}
     */

  }, {
    key: '_normalizeKey',
    value: function _normalizeKey(keyName) {
      // TODO: switch to a Map if the mapping grows too much
      switch (keyName) {
        case 'esc':
          return 'escape';
        default:
          return keyName;
      }
    }
  }]);

  return KeyEventsPlugin;
}(EventManagerPlugin);

KeyEventsPlugin.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
KeyEventsPlugin.ctorParameters = function () {
  return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT] }] }];
};

/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * The pattern disallows &, used in HTML entity declarations before
 * one of the characters in [/?#]. This disallows HTML entities used in the
 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
 * It also disallows HTML entities in the first path part of a relative path,
 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
 * that. More importantly, it disallows masking of a colon,
 * e.g. "javascript&#58;...".
 *
 * This regular expression was taken from the Closure sanitization library.
 */
var /** @type {?} */SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
/** A pattern that matches safe data URLs. Only matches image, video and audio types. */
var /** @type {?} */DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
/**
 * @param {?} url
 * @return {?}
 */
function sanitizeUrl(url) {
  url = String(url);
  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;
  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["isDevMode"])()) {
    getDOM().log('WARNING: sanitizing unsafe URL value ' + url + ' (see http://g.co/ng/security#xss)');
  }
  return 'unsafe:' + url;
}
/**
 * @param {?} srcset
 * @return {?}
 */
function sanitizeSrcset(srcset) {
  srcset = String(srcset);
  return srcset.split(',').map(function (srcset) {
    return sanitizeUrl(srcset.trim());
  }).join(', ');
}

/** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
var /** @type {?} */inertElement = null;
/** Lazily initialized to make sure the DOM adapter gets set before use. */
var /** @type {?} */DOM = null;
/**
 * Returns an HTML element that is guaranteed to not execute code when creating elements in it.
 * @return {?}
 */
function getInertElement() {
  if (inertElement) return inertElement;
  DOM = getDOM();
  // Prefer using <template> element if supported.
  var /** @type {?} */templateEl = DOM.createElement('template');
  if ('content' in templateEl) return templateEl;
  var /** @type {?} */doc = DOM.createHtmlDocument();
  inertElement = DOM.querySelector(doc, 'body');
  if (inertElement == null) {
    // usually there should be only one body element in the document, but IE doesn't have any, so we
    // need to create one.
    var /** @type {?} */html = DOM.createElement('html', doc);
    inertElement = DOM.createElement('body', doc);
    DOM.appendChild(html, inertElement);
    DOM.appendChild(doc, html);
  }
  return inertElement;
}
/**
 * @param {?} tags
 * @return {?}
 */
function tagSet(tags) {
  var /** @type {?} */res = {};
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = tags.split(',')[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var t = _step4.value;

      res[t] = true;
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  return res;
}
/**
 * @param {...?} sets
 * @return {?}
 */
function merge() {
  var /** @type {?} */res = {};

  for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
    sets[_key] = arguments[_key];
  }

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = sets[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var s = _step5.value;

      for (var /** @type {?} */v in s) {
        if (s.hasOwnProperty(v)) res[v] = true;
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5.return) {
        _iterator5.return();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  return res;
}
// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements
// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
var /** @type {?} */VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
var /** @type {?} */OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
var /** @type {?} */OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
var /** @type {?} */OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
// Safe Block Elements - HTML5
var /** @type {?} */BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
// Inline Elements - HTML5
var /** @type {?} */INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
var /** @type {?} */VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
// Attributes that have href and hence need to be sanitized
var /** @type {?} */URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
// Attributes that have special href set hence need to be sanitized
var /** @type {?} */SRCSET_ATTRS = tagSet('srcset');
var /** @type {?} */HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');
// NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
// innerHTML is required, SVG attributes should be added here.
// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
// can be sanitized, but they increase security surface area without a legitimate use case, so they
// are left out here.
var /** @type {?} */VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
/**
 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
 * attributes.
 */

var SanitizingHtmlSerializer = function () {
  function SanitizingHtmlSerializer() {
    _classCallCheck(this, SanitizingHtmlSerializer);

    this.sanitizedSomething = false;
    this.buf = [];
  }
  /**
   * @param {?} el
   * @return {?}
   */


  _createClass(SanitizingHtmlSerializer, [{
    key: 'sanitizeChildren',
    value: function sanitizeChildren(el) {
      // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
      // However this code never accesses properties off of `document` before deleting its contents
      // again, so it shouldn't be vulnerable to DOM clobbering.
      var /** @type {?} */current = el.firstChild;
      while (current) {
        if (DOM.isElementNode(current)) {
          this.startElement( /** @type {?} */current);
        } else if (DOM.isTextNode(current)) {
          this.chars(DOM.nodeValue(current));
        } else {
          // Strip non-element, non-text nodes.
          this.sanitizedSomething = true;
        }
        if (DOM.firstChild(current)) {
          current = DOM.firstChild(current);
          continue;
        }
        while (current) {
          // Leaving the element. Walk up and to the right, closing tags as we go.
          if (DOM.isElementNode(current)) {
            this.endElement( /** @type {?} */current);
          }
          if (DOM.nextSibling(current)) {
            current = DOM.nextSibling(current);
            break;
          }
          current = DOM.parentElement(current);
        }
      }
      return this.buf.join('');
    }
    /**
     * @param {?} element
     * @return {?}
     */

  }, {
    key: 'startElement',
    value: function startElement(element) {
      var _this18 = this;

      var /** @type {?} */tagName = DOM.nodeName(element).toLowerCase();
      if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
        this.sanitizedSomething = true;
        return;
      }
      this.buf.push('<');
      this.buf.push(tagName);
      DOM.attributeMap(element).forEach(function (value, attrName) {
        var /** @type {?} */lower = attrName.toLowerCase();
        if (!VALID_ATTRS.hasOwnProperty(lower)) {
          _this18.sanitizedSomething = true;
          return;
        }
        // TODO(martinprobst): Special case image URIs for data:image/...
        if (URI_ATTRS[lower]) value = sanitizeUrl(value);
        if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);
        _this18.buf.push(' ');
        _this18.buf.push(attrName);
        _this18.buf.push('="');
        _this18.buf.push(encodeEntities(value));
        _this18.buf.push('"');
      });
      this.buf.push('>');
    }
    /**
     * @param {?} current
     * @return {?}
     */

  }, {
    key: 'endElement',
    value: function endElement(current) {
      var /** @type {?} */tagName = DOM.nodeName(current).toLowerCase();
      if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
        this.buf.push('</');
        this.buf.push(tagName);
        this.buf.push('>');
      }
    }
    /**
     * @param {?} chars
     * @return {?}
     */

  }, {
    key: 'chars',
    value: function chars(_chars /** TODO #9100 */) {
      this.buf.push(encodeEntities(_chars));
    }
  }]);

  return SanitizingHtmlSerializer;
}();
// Regular Expressions for parsing tags and attributes


var /** @type {?} */SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
// ! to ~ is the ASCII range.
var /** @type {?} */NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
/**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param {?} value
 * @return {?}
 */
function encodeEntities(value) {
  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {
    var /** @type {?} */hi = match.charCodeAt(0);
    var /** @type {?} */low = match.charCodeAt(1);
    return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {
    return '&#' + match.charCodeAt(0) + ';';
  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
/**
 * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
 * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
 *
 * This is undesirable since we don't want to allow any of these custom attributes. This method
 * strips them all.
 * @param {?} el
 * @return {?}
 */
function stripCustomNsAttrs(el) {
  DOM.attributeMap(el).forEach(function (_, attrName) {
    if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
      DOM.removeAttribute(el, attrName);
    }
  });
  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    for (var _iterator6 = DOM.childNodesAsList(el)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      var n = _step6.value;

      if (DOM.isElementNode(n)) stripCustomNsAttrs( /** @type {?} */n);
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6.return) {
        _iterator6.return();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }
}
/**
 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
 * the DOM in a browser environment.
 * @param {?} defaultDoc
 * @param {?} unsafeHtmlInput
 * @return {?}
 */
function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
  try {
    var /** @type {?} */containerEl = getInertElement();
    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
    var /** @type {?} */unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
    var /** @type {?} */mXSSAttempts = 5;
    var /** @type {?} */parsedHtml = unsafeHtml;
    do {
      if (mXSSAttempts === 0) {
        throw new Error('Failed to sanitize html because the input is unstable');
      }
      mXSSAttempts--;
      unsafeHtml = parsedHtml;
      DOM.setInnerHTML(containerEl, unsafeHtml);
      if (defaultDoc.documentMode) {
        // strip custom-namespaced attributes on IE<=11
        stripCustomNsAttrs(containerEl);
      }
      parsedHtml = DOM.getInnerHTML(containerEl);
    } while (unsafeHtml !== parsedHtml);
    var /** @type {?} */sanitizer = new SanitizingHtmlSerializer();
    var /** @type {?} */safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
    // Clear out the body element.
    var /** @type {?} */parent = DOM.getTemplateContent(containerEl) || containerEl;
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = DOM.childNodesAsList(parent)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var child = _step7.value;

        DOM.removeChild(parent, child);
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7.return) {
          _iterator7.return();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["isDevMode"])() && sanitizer.sanitizedSomething) {
      DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
    }
    return safeHtml;
  } catch (e) {
    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
    inertElement = null;
    throw e;
  }
}

/**
 * Regular expression for safe style values.
 *
 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
 *
 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
 * of XSS.
 *
 * The function expression checks only for XSS safety, not for CSS validity.
 *
 * This regular expression was taken from the Closure sanitization library, and augmented for
 * transformation values.
 */
var /** @type {?} */VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
var /** @type {?} */TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
var /** @type {?} */COLOR_FNS = '(?:rgb|hsl)a?';
var /** @type {?} */GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
var /** @type {?} */CSS3_FNS = '(?:calc|attr)';
var /** @type {?} */FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
var /** @type {?} */SAFE_STYLE_VALUE = new RegExp('^(' + VALUES + '|' + ('(?:' + TRANSFORMATION_FNS + '|' + COLOR_FNS + '|' + GRADIENTS + '|' + CSS3_FNS + ')') + (FN_ARGS + ')$'), 'g');
/**
 * Matches a `url(...)` value with an arbitrary argument as long as it does
 * not contain parentheses.
 *
 * The URL value still needs to be sanitized separately.
 *
 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
 * by observing whether scroll bars are displayed, or character ranges used by a font face
 * definition.
 *
 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
 * binding a URL value without further cooperation from the page will cause an information leak, and
 * if so, it is just a leak, not a full blown XSS vulnerability.
 *
 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
 * code is permissive and allows URLs that sanitize otherwise.
 */
var /** @type {?} */URL_RE = /^url\(([^)]+)\)$/;
/**
 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
 * that neither escape (\) nor any other character that could result in
 * breaking out of a string parsing context are allowed;
 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
 *
 * This code was taken from the Closure sanitization library.
 * @param {?} value
 * @return {?}
 */
function hasBalancedQuotes(value) {
  var /** @type {?} */outsideSingle = true;
  var /** @type {?} */outsideDouble = true;
  for (var /** @type {?} */i = 0; i < value.length; i++) {
    var /** @type {?} */c = value.charAt(i);
    if (c === '\'' && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else if (c === '"' && outsideSingle) {
      outsideDouble = !outsideDouble;
    }
  }
  return outsideSingle && outsideDouble;
}
/**
 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
 * value) and returns a value that is safe to use in a browser environment.
 * @param {?} value
 * @return {?}
 */
function sanitizeStyle(value) {
  value = String(value).trim(); // Make sure it's actually a string.
  if (!value) return '';
  // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
  // reasoning behind this.
  var /** @type {?} */urlMatch = value.match(URL_RE);
  if (urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
    return value; // Safe style values.
  }
  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["isDevMode"])()) {
    getDOM().log('WARNING: sanitizing unsafe style value ' + value + ' (see http://g.co/ng/security#xss).');
  }
  return 'unsafe';
}

/**
 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
 * values to be safe to use in the different DOM contexts.
 *
 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
 * the website.
 *
 * In specific situations, it might be necessary to disable sanitization, for example if the
 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
 * methods, and then binding to that value from the template.
 *
 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
 * Cross Site Scripting (XSS) security bug!
 *
 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
 * close as possible to the source of the value, to make it easy to verify no security bug is
 * created by its use.
 *
 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
 * code. The sanitizer leaves safe values intact.
 *
 * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
 * sanitization for the value passed in. Carefully check and audit all values and code paths going
 * into this call. Make sure any user data is appropriately escaped for this security context.
 * For more detail, see the [Security Guide](http://g.co/ng/security).
 *
 * \@stable
 * @abstract
 */

var DomSanitizer = function () {
  function DomSanitizer() {
    _classCallCheck(this, DomSanitizer);
  }

  _createClass(DomSanitizer, [{
    key: 'sanitize',

    /**
     * Sanitizes a value for use in the given SecurityContext.
     *
     * If value is trusted for the context, this method will unwrap the contained safe value and use
     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
     * is responsible to make sure that the value can definitely be safely used in the given context.
     * @abstract
     * @param {?} context
     * @param {?} value
     * @return {?}
     */
    value: function sanitize(context, value) {}
    /**
     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
     * leave safe HTML intact, so in most situations this method should not be used.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustHtml',
    value: function bypassSecurityTrustHtml(value) {}
    /**
     * Bypass security and trust the given value to be safe style value (CSS).
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustStyle',
    value: function bypassSecurityTrustStyle(value) {}
    /**
     * Bypass security and trust the given value to be safe JavaScript.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustScript',
    value: function bypassSecurityTrustScript(value) {}
    /**
     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
     * in hyperlinks or `<img src>`.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustUrl',
    value: function bypassSecurityTrustUrl(value) {}
    /**
     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
     * be used to load executable code from, like `<script src>`, or `<iframe src>`.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustResourceUrl',
    value: function bypassSecurityTrustResourceUrl(value) {}
  }]);

  return DomSanitizer;
}();

var DomSanitizerImpl = function (_DomSanitizer) {
  _inherits(DomSanitizerImpl, _DomSanitizer);

  /**
   * @param {?} _doc
   */
  function DomSanitizerImpl(_doc) {
    _classCallCheck(this, DomSanitizerImpl);

    var _this19 = _possibleConstructorReturn(this, (DomSanitizerImpl.__proto__ || Object.getPrototypeOf(DomSanitizerImpl)).call(this));

    _this19._doc = _doc;
    return _this19;
  }
  /**
   * @param {?} ctx
   * @param {?} value
   * @return {?}
   */


  _createClass(DomSanitizerImpl, [{
    key: 'sanitize',
    value: function sanitize(ctx, value) {
      if (value == null) return null;
      switch (ctx) {
        case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].NONE:
          return value;
        case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].HTML:
          if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'HTML');
          return sanitizeHtml(this._doc, String(value));
        case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].STYLE:
          if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'Style');
          return sanitizeStyle(value);
        case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].SCRIPT:
          if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'Script');
          throw new Error('unsafe value used in a script context');
        case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].URL:
          if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
            // Allow resource URLs in URL contexts, they are strictly more trusted.
            return value.changingThisBreaksApplicationSecurity;
          }
          this.checkNotSafeValue(value, 'URL');
          return sanitizeUrl(String(value));
        case __WEBPACK_IMPORTED_MODULE_1__angular_core__["SecurityContext"].RESOURCE_URL:
          if (value instanceof SafeResourceUrlImpl) {
            return value.changingThisBreaksApplicationSecurity;
          }
          this.checkNotSafeValue(value, 'ResourceURL');
          throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
        default:
          throw new Error('Unexpected SecurityContext ' + ctx + ' (see http://g.co/ng/security#xss)');
      }
    }
    /**
     * @param {?} value
     * @param {?} expectedType
     * @return {?}
     */

  }, {
    key: 'checkNotSafeValue',
    value: function checkNotSafeValue(value, expectedType) {
      if (value instanceof SafeValueImpl) {
        throw new Error('Required a safe ' + expectedType + ', got a ' + value.getTypeName() + ' ' + '(see http://g.co/ng/security#xss)');
      }
    }
    /**
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustHtml',
    value: function bypassSecurityTrustHtml(value) {
      return new SafeHtmlImpl(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustStyle',
    value: function bypassSecurityTrustStyle(value) {
      return new SafeStyleImpl(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustScript',
    value: function bypassSecurityTrustScript(value) {
      return new SafeScriptImpl(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustUrl',
    value: function bypassSecurityTrustUrl(value) {
      return new SafeUrlImpl(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */

  }, {
    key: 'bypassSecurityTrustResourceUrl',
    value: function bypassSecurityTrustResourceUrl(value) {
      return new SafeResourceUrlImpl(value);
    }
  }]);

  return DomSanitizerImpl;
}(DomSanitizer);

DomSanitizerImpl.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
DomSanitizerImpl.ctorParameters = function () {
  return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Inject"], args: [DOCUMENT] }] }];
};
/**
 * @abstract
 */

var SafeValueImpl = function () {
  /**
   * @param {?} changingThisBreaksApplicationSecurity
   */
  function SafeValueImpl(changingThisBreaksApplicationSecurity) {
    _classCallCheck(this, SafeValueImpl);

    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    // empty
  }
  /**
   * @abstract
   * @return {?}
   */


  _createClass(SafeValueImpl, [{
    key: 'getTypeName',
    value: function getTypeName() {}
    /**
     * @return {?}
     */

  }, {
    key: 'toString',
    value: function toString() {
      return 'SafeValue must use [property]=binding: ' + this.changingThisBreaksApplicationSecurity + ' (see http://g.co/ng/security#xss)';
    }
  }]);

  return SafeValueImpl;
}();

var SafeHtmlImpl = function (_SafeValueImpl) {
  _inherits(SafeHtmlImpl, _SafeValueImpl);

  function SafeHtmlImpl() {
    _classCallCheck(this, SafeHtmlImpl);

    return _possibleConstructorReturn(this, (SafeHtmlImpl.__proto__ || Object.getPrototypeOf(SafeHtmlImpl)).apply(this, arguments));
  }

  _createClass(SafeHtmlImpl, [{
    key: 'getTypeName',

    /**
     * @return {?}
     */
    value: function getTypeName() {
      return 'HTML';
    }
  }]);

  return SafeHtmlImpl;
}(SafeValueImpl);

var SafeStyleImpl = function (_SafeValueImpl2) {
  _inherits(SafeStyleImpl, _SafeValueImpl2);

  function SafeStyleImpl() {
    _classCallCheck(this, SafeStyleImpl);

    return _possibleConstructorReturn(this, (SafeStyleImpl.__proto__ || Object.getPrototypeOf(SafeStyleImpl)).apply(this, arguments));
  }

  _createClass(SafeStyleImpl, [{
    key: 'getTypeName',

    /**
     * @return {?}
     */
    value: function getTypeName() {
      return 'Style';
    }
  }]);

  return SafeStyleImpl;
}(SafeValueImpl);

var SafeScriptImpl = function (_SafeValueImpl3) {
  _inherits(SafeScriptImpl, _SafeValueImpl3);

  function SafeScriptImpl() {
    _classCallCheck(this, SafeScriptImpl);

    return _possibleConstructorReturn(this, (SafeScriptImpl.__proto__ || Object.getPrototypeOf(SafeScriptImpl)).apply(this, arguments));
  }

  _createClass(SafeScriptImpl, [{
    key: 'getTypeName',

    /**
     * @return {?}
     */
    value: function getTypeName() {
      return 'Script';
    }
  }]);

  return SafeScriptImpl;
}(SafeValueImpl);

var SafeUrlImpl = function (_SafeValueImpl4) {
  _inherits(SafeUrlImpl, _SafeValueImpl4);

  function SafeUrlImpl() {
    _classCallCheck(this, SafeUrlImpl);

    return _possibleConstructorReturn(this, (SafeUrlImpl.__proto__ || Object.getPrototypeOf(SafeUrlImpl)).apply(this, arguments));
  }

  _createClass(SafeUrlImpl, [{
    key: 'getTypeName',

    /**
     * @return {?}
     */
    value: function getTypeName() {
      return 'URL';
    }
  }]);

  return SafeUrlImpl;
}(SafeValueImpl);

var SafeResourceUrlImpl = function (_SafeValueImpl5) {
  _inherits(SafeResourceUrlImpl, _SafeValueImpl5);

  function SafeResourceUrlImpl() {
    _classCallCheck(this, SafeResourceUrlImpl);

    return _possibleConstructorReturn(this, (SafeResourceUrlImpl.__proto__ || Object.getPrototypeOf(SafeResourceUrlImpl)).apply(this, arguments));
  }

  _createClass(SafeResourceUrlImpl, [{
    key: 'getTypeName',

    /**
     * @return {?}
     */
    value: function getTypeName() {
      return 'ResourceURL';
    }
  }]);

  return SafeResourceUrlImpl;
}(SafeValueImpl);

var /** @type {?} */INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{ provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["PLATFORM_ID"], useValue: __WEBPACK_IMPORTED_MODULE_0__angular_common__["ɵPLATFORM_BROWSER_ID"] }, { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["PLATFORM_INITIALIZER"], useValue: initDomAdapter, multi: true }, { provide: __WEBPACK_IMPORTED_MODULE_0__angular_common__["PlatformLocation"], useClass: BrowserPlatformLocation }, { provide: DOCUMENT, useFactory: _document, deps: [] }];
/**
 * @security Replacing built-in sanitization providers exposes the application to XSS risks.
 * Attacker-controlled data introduced by an unsanitized provider could expose your
 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
 * @experimental
 */
var /** @type {?} */BROWSER_SANITIZATION_PROVIDERS = [{ provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Sanitizer"], useExisting: DomSanitizer }, { provide: DomSanitizer, useClass: DomSanitizerImpl }];
/**
 * @stable
 */
var /** @type {?} */platformBrowser = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["createPlatformFactory"])(__WEBPACK_IMPORTED_MODULE_1__angular_core__["platformCore"], 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
/**
 * @return {?}
 */
function initDomAdapter() {
  BrowserDomAdapter.makeCurrent();
  BrowserGetTestability.init();
}
/**
 * @return {?}
 */
function errorHandler() {
  return new __WEBPACK_IMPORTED_MODULE_1__angular_core__["ErrorHandler"]();
}
/**
 * @return {?}
 */
function _document() {
  return document;
}
/**
 * The ng module for the browser.
 *
 * \@stable
 */

var BrowserModule = function () {
  /**
   * @param {?} parentModule
   */
  function BrowserModule(parentModule) {
    _classCallCheck(this, BrowserModule);

    if (parentModule) {
      throw new Error('BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.');
    }
  }
  /**
   * Configures a browser-based application to transition from a server-rendered app, if
   * one is present on the page. The specified parameters must include an application id,
   * which must match between the client and server applications.
   *
   * \@experimental
   * @param {?} params
   * @return {?}
   */


  _createClass(BrowserModule, null, [{
    key: 'withServerTransition',
    value: function withServerTransition(params) {
      return {
        ngModule: BrowserModule,
        providers: [{ provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["APP_ID"], useValue: params.appId }, { provide: TRANSITION_ID, useExisting: __WEBPACK_IMPORTED_MODULE_1__angular_core__["APP_ID"] }, SERVER_TRANSITION_PROVIDERS]
      };
    }
  }]);

  return BrowserModule;
}();

BrowserModule.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgModule"], args: [{
    providers: [BROWSER_SANITIZATION_PROVIDERS, { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["ErrorHandler"], useFactory: errorHandler, deps: [] }, { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true }, { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true }, { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true }, { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig }, DomRendererFactoryV2, { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["RendererFactoryV2"], useExisting: DomRendererFactoryV2 }, { provide: SharedStylesHost, useExisting: DomSharedStylesHost }, DomSharedStylesHost, __WEBPACK_IMPORTED_MODULE_1__angular_core__["Testability"], EventManager, ELEMENT_PROBE_PROVIDERS, Meta, Title],
    exports: [__WEBPACK_IMPORTED_MODULE_0__angular_common__["CommonModule"], __WEBPACK_IMPORTED_MODULE_1__angular_core__["ApplicationModule"]]
  }] }];
/** @nocollapse */
BrowserModule.ctorParameters = function () {
  return [{ type: BrowserModule, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["SkipSelf"] }] }];
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * JS version of browser APIs. This library can only run in the browser.
 */
var /** @type {?} */win = typeof window !== 'undefined' && window || {};

var ChangeDetectionPerfRecord =
/**
 * @param {?} msPerTick
 * @param {?} numTicks
 */
function ChangeDetectionPerfRecord(msPerTick, numTicks) {
  _classCallCheck(this, ChangeDetectionPerfRecord);

  this.msPerTick = msPerTick;
  this.numTicks = numTicks;
};
/**
 * Entry point for all Angular profiling-related debug tools. This object
 * corresponds to the `ng.profiler` in the dev console.
 */


var AngularProfiler = function () {
  /**
   * @param {?} ref
   */
  function AngularProfiler(ref) {
    _classCallCheck(this, AngularProfiler);

    this.appRef = ref.injector.get(__WEBPACK_IMPORTED_MODULE_1__angular_core__["ApplicationRef"]);
  }
  /**
   * Exercises change detection in a loop and then prints the average amount of
   * time in milliseconds how long a single round of change detection takes for
   * the current state of the UI. It runs a minimum of 5 rounds for a minimum
   * of 500 milliseconds.
   *
   * Optionally, a user may pass a `config` parameter containing a map of
   * options. Supported options are:
   *
   * `record` (boolean) - causes the profiler to record a CPU profile while
   * it exercises the change detector. Example:
   *
   * ```
   * ng.profiler.timeChangeDetection({record: true})
   * ```
   * @param {?} config
   * @return {?}
   */


  _createClass(AngularProfiler, [{
    key: 'timeChangeDetection',
    value: function timeChangeDetection(config) {
      var /** @type {?} */record = config && config['record'];
      var /** @type {?} */profileName = 'Change Detection';
      // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
      var /** @type {?} */isProfilerAvailable = isPresent(win.console.profile);
      if (record && isProfilerAvailable) {
        win.console.profile(profileName);
      }
      var /** @type {?} */start = getDOM().performanceNow();
      var /** @type {?} */numTicks = 0;
      while (numTicks < 5 || getDOM().performanceNow() - start < 500) {
        this.appRef.tick();
        numTicks++;
      }
      var /** @type {?} */end = getDOM().performanceNow();
      if (record && isProfilerAvailable) {
        // need to cast to <any> because type checker thinks there's no argument
        // while in fact there is:
        //
        // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
        win.console.profileEnd(profileName);
      }
      var /** @type {?} */msPerTick = (end - start) / numTicks;
      win.console.log('ran ' + numTicks + ' change detection cycles');
      win.console.log(msPerTick.toFixed(2) + ' ms per check');
      return new ChangeDetectionPerfRecord(msPerTick, numTicks);
    }
  }]);

  return AngularProfiler;
}();

var /** @type {?} */PROFILER_GLOBAL_NAME = 'ng.profiler';
/**
 * Enabled Angular debug tools that are accessible via your browser's
 * developer console.
 *
 * Usage:
 *
 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
 *    then hit Enter.
 *
 * \@experimental All debugging apis are currently experimental.
 * @param {?} ref
 * @return {?}
 */
function enableDebugTools(ref) {
  getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
  return ref;
}
/**
 * Disables Angular tools.
 *
 * \@experimental All debugging apis are currently experimental.
 * @return {?}
 */
function disableDebugTools() {
  getDOM().setGlobalVar(PROFILER_GLOBAL_NAME, null);
}

/**
 * Predicates for use with {\@link DebugElement}'s query functions.
 *
 * \@experimental All debugging apis are currently experimental.
 */

var By = function () {
  function By() {
    _classCallCheck(this, By);
  }

  _createClass(By, null, [{
    key: 'all',

    /**
     * Match all elements.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
     * @return {?}
     */
    value: function all() {
      return function (debugElement) {
        return true;
      };
    }
    /**
     * Match elements by the given CSS selector.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
     * @param {?} selector
     * @return {?}
     */

  }, {
    key: 'css',
    value: function css(selector) {
      return function (debugElement) {
        return isPresent(debugElement.nativeElement) ? getDOM().elementMatches(debugElement.nativeElement, selector) : false;
      };
    }
    /**
     * Match elements that have the given directive present.
     *
     * ## Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
     * @param {?} type
     * @return {?}
     */

  }, {
    key: 'directive',
    value: function directive(type) {
      return function (debugElement) {
        return debugElement.providerTokens.indexOf(type) !== -1;
      };
    }
  }]);

  return By;
}();

/**
 * @stable
 */


var /** @type {?} */VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["Version"]('4.0.0-rc.2');



/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var ToastOptions = (function () {
    function ToastOptions() {
        this.positionClass = 'toast-top-right';
        this.maxShown = 5;
        this.newestOnTop = false;
        this.animate = 'fade';
        // override-able properties
        this.toastLife = 5000;
        this.enableHTML = false;
        this.dismiss = 'auto'; //'auto' | 'click' | 'controlled'
        this.messageClass = 'toast-message';
        this.titleClass = 'toast-title';
        this.showCloseButton = false;
    }
    return ToastOptions;
}());
ToastOptions.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
ToastOptions.ctorParameters = function () { return []; };
exports.ToastOptions = ToastOptions;
//# sourceMappingURL=toast-options.js.map

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray_1 = __webpack_require__(50);
var isObject_1 = __webpack_require__(22);
var isFunction_1 = __webpack_require__(21);
var tryCatch_1 = __webpack_require__(55);
var errorObject_1 = __webpack_require__(20);
var UnsubscriptionError_1 = __webpack_require__(49);
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject_1.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
            }
        }
        if (isArray_1.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject_1.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject_1.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgLocaleLocalization", function() { return NgLocaleLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgLocalization", function() { return NgLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonModule", function() { return CommonModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgClass", function() { return NgClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgFor", function() { return NgFor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgForOf", function() { return NgForOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgIf", function() { return NgIf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgPlural", function() { return NgPlural; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgPluralCase", function() { return NgPluralCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgStyle", function() { return NgStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSwitch", function() { return NgSwitch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSwitchCase", function() { return NgSwitchCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSwitchDefault", function() { return NgSwitchDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgTemplateOutlet", function() { return NgTemplateOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgComponentOutlet", function() { return NgComponentOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncPipe", function() { return AsyncPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatePipe", function() { return DatePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I18nPluralPipe", function() { return I18nPluralPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I18nSelectPipe", function() { return I18nSelectPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonPipe", function() { return JsonPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LowerCasePipe", function() { return LowerCasePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrencyPipe", function() { return CurrencyPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecimalPipe", function() { return DecimalPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PercentPipe", function() { return PercentPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SlicePipe", function() { return SlicePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpperCasePipe", function() { return UpperCasePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TitleCasePipe", function() { return TitleCasePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_BROWSER_ID", function() { return PLATFORM_BROWSER_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_SERVER_ID", function() { return PLATFORM_SERVER_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_APP_ID", function() { return PLATFORM_WORKER_APP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_UI_ID", function() { return PLATFORM_WORKER_UI_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformBrowser", function() { return isPlatformBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformServer", function() { return isPlatformServer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformWorkerApp", function() { return isPlatformWorkerApp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformWorkerUi", function() { return isPlatformWorkerUi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformLocation", function() { return PlatformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocationStrategy", function() { return LocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_BASE_HREF", function() { return APP_BASE_HREF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashLocationStrategy", function() { return HashLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathLocationStrategy", function() { return PathLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Location", function() { return Location; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return COMMON_DIRECTIVES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return NgForOfRow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return NgIfContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return COMMON_PIPES; });
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license Angular v4.0.0-rc.2
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */


/**
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 *
 * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
 * agnostic.
 * This means that we can have different implementation of `PlatformLocation` for the different
 * platforms
 * that angular supports. For example, the default `PlatformLocation` is {\@link
 * BrowserPlatformLocation},
 * however when you run your app in a WebWorker you use {\@link WebWorkerPlatformLocation}.
 *
 * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
 * when
 * they need to interact with the DOM apis like pushState, popState, etc...
 *
 * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
 * by
 * the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
 * Router} /
 * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
 * class
 * they are all platform independent.
 *
 * \@stable
 * @abstract
 */

var PlatformLocation = function () {
    function PlatformLocation() {
        _classCallCheck(this, PlatformLocation);
    }

    _createClass(PlatformLocation, [{
        key: 'getBaseHrefFromDOM',

        /**
         * @abstract
         * @return {?}
         */
        value: function getBaseHrefFromDOM() {}
        /**
         * @abstract
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'onPopState',
        value: function onPopState(fn) {}
        /**
         * @abstract
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'onHashChange',
        value: function onHashChange(fn) {}
        /**
         * @return {?}
         */

    }, {
        key: 'replaceState',

        /**
         * @abstract
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @return {?}
         */
        value: function replaceState(state, title, url) {}
        /**
         * @abstract
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @return {?}
         */

    }, {
        key: 'pushState',
        value: function pushState(state, title, url) {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'forward',
        value: function forward() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'back',
        value: function back() {}
    }, {
        key: 'pathname',
        get: function get() {
            return null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'search',
        get: function get() {
            return null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'hash',
        get: function get() {
            return null;
        }
    }]);

    return PlatformLocation;
}();

/**
 * `LocationStrategy` is responsible for representing and reading route state
 * from the browser's URL. Angular provides two strategies:
 * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
 *
 * This is used under the hood of the {\@link Location} service.
 *
 * Applications should use the {\@link Router} or {\@link Location} services to
 * interact with application route state.
 *
 * For instance, {\@link HashLocationStrategy} produces URLs like
 * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
 * `http://example.com/foo` as an equivalent URL.
 *
 * See these two classes for more.
 *
 * \@stable
 * @abstract
 */


var LocationStrategy = function () {
    function LocationStrategy() {
        _classCallCheck(this, LocationStrategy);
    }

    _createClass(LocationStrategy, [{
        key: 'path',

        /**
         * @abstract
         * @param {?=} includeHash
         * @return {?}
         */
        value: function path(includeHash) {}
        /**
         * @abstract
         * @param {?} internal
         * @return {?}
         */

    }, {
        key: 'prepareExternalUrl',
        value: function prepareExternalUrl(internal) {}
        /**
         * @abstract
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @param {?} queryParams
         * @return {?}
         */

    }, {
        key: 'pushState',
        value: function pushState(state, title, url, queryParams) {}
        /**
         * @abstract
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @param {?} queryParams
         * @return {?}
         */

    }, {
        key: 'replaceState',
        value: function replaceState(state, title, url, queryParams) {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'forward',
        value: function forward() {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'back',
        value: function back() {}
        /**
         * @abstract
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'onPopState',
        value: function onPopState(fn) {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'getBaseHref',
        value: function getBaseHref() {}
    }]);

    return LocationStrategy;
}();
/**
 * The `APP_BASE_HREF` token represents the base href to be used with the
 * {@link PathLocationStrategy}.
 *
 * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
 * representing the URL prefix that should be preserved when generating and recognizing
 * URLs.
 *
 * ### Example
 *
 * ```typescript
 * import {Component, NgModule} from '@angular/core';
 * import {APP_BASE_HREF} from '@angular/common';
 *
 * @NgModule({
 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
 * })
 * class AppModule {}
 * ```
 *
 * @stable
 */


var /** @type {?} */APP_BASE_HREF = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('appBaseHref');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var /** @type {?} */globalScope = void 0;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
        globalScope = self;
    } else {
        globalScope = global;
    }
} else {
    globalScope = window;
}
// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var /** @type {?} */_global = globalScope;
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging(type) {
    return type['name'] || (typeof type === 'undefined' ? 'undefined' : _typeof(type));
}
// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global.assert = function assert(condition) {
    // TODO: to be fixed properly via #2830, noop for now
};
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent(obj) {
    return obj != null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
    return obj == null;
}
/**
 * @param {?} token
 * @return {?}
 */
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return '' + token.overriddenName;
    }
    if (token.name) {
        return '' + token.name;
    }
    var /** @type {?} */res = token.toString();
    var /** @type {?} */newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}

var NumberWrapper = function () {
    function NumberWrapper() {
        _classCallCheck(this, NumberWrapper);
    }

    _createClass(NumberWrapper, null, [{
        key: 'parseIntAutoRadix',

        /**
         * @param {?} text
         * @return {?}
         */
        value: function parseIntAutoRadix(text) {
            var /** @type {?} */result = parseInt(text);
            if (isNaN(result)) {
                throw new Error('Invalid integer literal when parsing ' + text);
            }
            return result;
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'isNumeric',
        value: function isNumeric(value) {
            return !isNaN(value - parseFloat(value));
        }
    }]);

    return NumberWrapper;
}();
/**
 * @param {?} o
 * @return {?}
 */


function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object');
}
var /** @type {?} */_symbolIterator = null;
/**
 * @return {?}
 */
function getSymbolIterator() {
    if (!_symbolIterator) {
        if (globalScope.Symbol && Symbol.iterator) {
            _symbolIterator = Symbol.iterator;
        } else {
            // es6-shim specific logic
            var /** @type {?} */keys = Object.getOwnPropertyNames(Map.prototype);
            for (var /** @type {?} */i = 0; i < keys.length; ++i) {
                var /** @type {?} */key = keys[i];
                if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}

/**
 * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
 * \@description
 * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
 * to the URL's path or the URL's hash segment.
 *
 * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
 * `Location` only if you need to interact with or create normalized URLs outside of
 * routing.
 *
 * `Location` is responsible for normalizing the URL against the application's base href.
 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
 * trailing slash:
 * - `/my/app/user/123` is normalized
 * - `my/app/user/123` **is not** normalized
 * - `/my/app/user/123/` **is not** normalized
 *
 * ### Example
 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
 * \@stable
 */

var Location = function () {
    /**
     * @param {?} platformStrategy
     */
    function Location(platformStrategy) {
        var _this = this;

        _classCallCheck(this, Location);

        /** @internal */
        this._subject = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this._platformStrategy = platformStrategy;
        var browserBaseHref = this._platformStrategy.getBaseHref();
        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
        this._platformStrategy.onPopState(function (ev) {
            _this._subject.emit({
                'url': _this.path(true),
                'pop': true,
                'type': ev.type
            });
        });
    }
    /**
     * @param {?=} includeHash
     * @return {?}
     */


    _createClass(Location, [{
        key: 'path',
        value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            return this.normalize(this._platformStrategy.path(includeHash));
        }
        /**
         * Normalizes the given path and compares to the current normalized path.
         * @param {?} path
         * @param {?=} query
         * @return {?}
         */

    }, {
        key: 'isCurrentPathEqualTo',
        value: function isCurrentPathEqualTo(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
        }
        /**
         * Given a string representing a URL, returns the normalized URL path without leading or
         * trailing slashes.
         * @param {?} url
         * @return {?}
         */

    }, {
        key: 'normalize',
        value: function normalize(url) {
            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
        }
        /**
         * Given a string representing a URL, returns the platform-specific external URL path.
         * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
         * before normalizing. This method will also add a hash if `HashLocationStrategy` is
         * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
         * @param {?} url
         * @return {?}
         */

    }, {
        key: 'prepareExternalUrl',
        value: function prepareExternalUrl(url) {
            if (url && url[0] !== '/') {
                url = '/' + url;
            }
            return this._platformStrategy.prepareExternalUrl(url);
        }
        /**
         * Changes the browsers URL to the normalized version of the given URL, and pushes a
         * new item onto the platform's history.
         * @param {?} path
         * @param {?=} query
         * @return {?}
         */

    }, {
        key: 'go',
        value: function go(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            this._platformStrategy.pushState(null, '', path, query);
        }
        /**
         * Changes the browsers URL to the normalized version of the given URL, and replaces
         * the top item on the platform's history stack.
         * @param {?} path
         * @param {?=} query
         * @return {?}
         */

    }, {
        key: 'replaceState',
        value: function replaceState(path) {
            var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            this._platformStrategy.replaceState(null, '', path, query);
        }
        /**
         * Navigates forward in the platform's history.
         * @return {?}
         */

    }, {
        key: 'forward',
        value: function forward() {
            this._platformStrategy.forward();
        }
        /**
         * Navigates back in the platform's history.
         * @return {?}
         */

    }, {
        key: 'back',
        value: function back() {
            this._platformStrategy.back();
        }
        /**
         * Subscribe to the platform's `popState` events.
         * @param {?} onNext
         * @param {?=} onThrow
         * @param {?=} onReturn
         * @return {?}
         */

    }, {
        key: 'subscribe',
        value: function subscribe(onNext) {
            var onThrow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var onReturn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
        }
        /**
         * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
         * is.
         * @param {?} params
         * @return {?}
         */

    }], [{
        key: 'normalizeQueryParams',
        value: function normalizeQueryParams(params) {
            return params && params[0] !== '?' ? '?' + params : params;
        }
        /**
         * Given 2 parts of a url, join them with a slash if needed.
         * @param {?} start
         * @param {?} end
         * @return {?}
         */

    }, {
        key: 'joinWithSlash',
        value: function joinWithSlash(start, end) {
            if (start.length == 0) {
                return end;
            }
            if (end.length == 0) {
                return start;
            }
            var /** @type {?} */slashes = 0;
            if (start.endsWith('/')) {
                slashes++;
            }
            if (end.startsWith('/')) {
                slashes++;
            }
            if (slashes == 2) {
                return start + end.substring(1);
            }
            if (slashes == 1) {
                return start + end;
            }
            return start + '/' + end;
        }
        /**
         * If url has a trailing slash, remove it, otherwise return url as is.
         * @param {?} url
         * @return {?}
         */

    }, {
        key: 'stripTrailingSlash',
        value: function stripTrailingSlash(url) {
            return url.replace(/\/$/, '');
        }
    }]);

    return Location;
}();

Location.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
Location.ctorParameters = function () {
    return [{ type: LocationStrategy }];
};
/**
 * @param {?} baseHref
 * @param {?} url
 * @return {?}
 */
function _stripBaseHref(baseHref, url) {
    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
}
/**
 * @param {?} url
 * @return {?}
 */
function _stripIndexHtml(url) {
    return url.replace(/\/index.html$/, '');
}

/**
 * \@whatItDoes Use URL hash for storing application location data.
 * \@description
 * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
 * {\@link Location} service to represent its state in the
 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
 * of the browser's URL.
 *
 * For instance, if you call `location.go('/foo')`, the browser's URL will become
 * `example.com#/foo`.
 *
 * ### Example
 *
 * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
 *
 * \@stable
 */

var HashLocationStrategy = function (_LocationStrategy) {
    _inherits(HashLocationStrategy, _LocationStrategy);

    /**
     * @param {?} _platformLocation
     * @param {?=} _baseHref
     */
    function HashLocationStrategy(_platformLocation, _baseHref) {
        _classCallCheck(this, HashLocationStrategy);

        var _this2 = _possibleConstructorReturn(this, (HashLocationStrategy.__proto__ || Object.getPrototypeOf(HashLocationStrategy)).call(this));

        _this2._platformLocation = _platformLocation;
        _this2._baseHref = '';
        if (isPresent(_baseHref)) {
            _this2._baseHref = _baseHref;
        }
        return _this2;
    }
    /**
     * @param {?} fn
     * @return {?}
     */


    _createClass(HashLocationStrategy, [{
        key: 'onPopState',
        value: function onPopState(fn) {
            this._platformLocation.onPopState(fn);
            this._platformLocation.onHashChange(fn);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'getBaseHref',
        value: function getBaseHref() {
            return this._baseHref;
        }
        /**
         * @param {?=} includeHash
         * @return {?}
         */

    }, {
        key: 'path',
        value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            // the hash value is always prefixed with a `#`
            // and if it is empty then it will stay empty
            var /** @type {?} */path = this._platformLocation.hash;
            if (!isPresent(path)) path = '#';
            return path.length > 0 ? path.substring(1) : path;
        }
        /**
         * @param {?} internal
         * @return {?}
         */

    }, {
        key: 'prepareExternalUrl',
        value: function prepareExternalUrl(internal) {
            var /** @type {?} */url = Location.joinWithSlash(this._baseHref, internal);
            return url.length > 0 ? '#' + url : url;
        }
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} path
         * @param {?} queryParams
         * @return {?}
         */

    }, {
        key: 'pushState',
        value: function pushState(state, title, path, queryParams) {
            var /** @type {?} */url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.pushState(state, title, url);
        }
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} path
         * @param {?} queryParams
         * @return {?}
         */

    }, {
        key: 'replaceState',
        value: function replaceState(state, title, path, queryParams) {
            var /** @type {?} */url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.replaceState(state, title, url);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'forward',
        value: function forward() {
            this._platformLocation.forward();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'back',
        value: function back() {
            this._platformLocation.back();
        }
    }]);

    return HashLocationStrategy;
}(LocationStrategy);

HashLocationStrategy.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
HashLocationStrategy.ctorParameters = function () {
    return [{ type: PlatformLocation }, { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [APP_BASE_HREF] }] }];
};

/**
 * \@whatItDoes Use URL for storing application location data.
 * \@description
 * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
 * {\@link Location} service to represent its state in the
 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
 * browser's URL.
 *
 * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
 * or add a base element to the document. This URL prefix that will be preserved
 * when generating and recognizing URLs.
 *
 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * Similarly, if you add `<base href='/my/app'/>` to the document and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * ### Example
 *
 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
 *
 * \@stable
 */

var PathLocationStrategy = function (_LocationStrategy2) {
    _inherits(PathLocationStrategy, _LocationStrategy2);

    /**
     * @param {?} _platformLocation
     * @param {?=} href
     */
    function PathLocationStrategy(_platformLocation, href) {
        _classCallCheck(this, PathLocationStrategy);

        var _this3 = _possibleConstructorReturn(this, (PathLocationStrategy.__proto__ || Object.getPrototypeOf(PathLocationStrategy)).call(this));

        _this3._platformLocation = _platformLocation;
        if (isBlank(href)) {
            href = _this3._platformLocation.getBaseHrefFromDOM();
        }
        if (isBlank(href)) {
            throw new Error('No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.');
        }
        _this3._baseHref = href;
        return _this3;
    }
    /**
     * @param {?} fn
     * @return {?}
     */


    _createClass(PathLocationStrategy, [{
        key: 'onPopState',
        value: function onPopState(fn) {
            this._platformLocation.onPopState(fn);
            this._platformLocation.onHashChange(fn);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'getBaseHref',
        value: function getBaseHref() {
            return this._baseHref;
        }
        /**
         * @param {?} internal
         * @return {?}
         */

    }, {
        key: 'prepareExternalUrl',
        value: function prepareExternalUrl(internal) {
            return Location.joinWithSlash(this._baseHref, internal);
        }
        /**
         * @param {?=} includeHash
         * @return {?}
         */

    }, {
        key: 'path',
        value: function path() {
            var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var /** @type {?} */pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search);
            var /** @type {?} */hash = this._platformLocation.hash;
            return hash && includeHash ? '' + pathname + hash : pathname;
        }
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @param {?} queryParams
         * @return {?}
         */

    }, {
        key: 'pushState',
        value: function pushState(state, title, url, queryParams) {
            var /** @type {?} */externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
            this._platformLocation.pushState(state, title, externalUrl);
        }
        /**
         * @param {?} state
         * @param {?} title
         * @param {?} url
         * @param {?} queryParams
         * @return {?}
         */

    }, {
        key: 'replaceState',
        value: function replaceState(state, title, url, queryParams) {
            var /** @type {?} */externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
            this._platformLocation.replaceState(state, title, externalUrl);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'forward',
        value: function forward() {
            this._platformLocation.forward();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'back',
        value: function back() {
            this._platformLocation.back();
        }
    }]);

    return PathLocationStrategy;
}(LocationStrategy);

PathLocationStrategy.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
PathLocationStrategy.ctorParameters = function () {
    return [{ type: PlatformLocation }, { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [APP_BASE_HREF] }] }];
};

/**
 * \@experimental
 * @abstract
 */

var NgLocalization = function () {
    function NgLocalization() {
        _classCallCheck(this, NgLocalization);
    }

    _createClass(NgLocalization, [{
        key: 'getPluralCategory',

        /**
         * @abstract
         * @param {?} value
         * @return {?}
         */
        value: function getPluralCategory(value) {}
    }]);

    return NgLocalization;
}();
/**
 * Returns the plural category for a given value.
 * - "=value" when the case exists,
 * - the plural category otherwise
 *
 * \@internal
 * @param {?} value
 * @param {?} cases
 * @param {?} ngLocalization
 * @return {?}
 */


function getPluralCategory(value, cases, ngLocalization) {
    var /** @type {?} */key = '=' + value;
    if (cases.indexOf(key) > -1) {
        return key;
    }
    key = ngLocalization.getPluralCategory(value);
    if (cases.indexOf(key) > -1) {
        return key;
    }
    if (cases.indexOf('other') > -1) {
        return 'other';
    }
    throw new Error('No plural message found for value "' + value + '"');
}
/**
 * Returns the plural case based on the locale
 *
 * \@experimental
 */

var NgLocaleLocalization = function (_NgLocalization) {
    _inherits(NgLocaleLocalization, _NgLocalization);

    /**
     * @param {?} locale
     */
    function NgLocaleLocalization(locale) {
        _classCallCheck(this, NgLocaleLocalization);

        var _this4 = _possibleConstructorReturn(this, (NgLocaleLocalization.__proto__ || Object.getPrototypeOf(NgLocaleLocalization)).call(this));

        _this4.locale = locale;
        return _this4;
    }
    /**
     * @param {?} value
     * @return {?}
     */


    _createClass(NgLocaleLocalization, [{
        key: 'getPluralCategory',
        value: function getPluralCategory(value) {
            var /** @type {?} */plural = getPluralCase(this.locale, value);
            switch (plural) {
                case Plural.Zero:
                    return 'zero';
                case Plural.One:
                    return 'one';
                case Plural.Two:
                    return 'two';
                case Plural.Few:
                    return 'few';
                case Plural.Many:
                    return 'many';
                default:
                    return 'other';
            }
        }
    }]);

    return NgLocaleLocalization;
}(NgLocalization);

NgLocaleLocalization.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
NgLocaleLocalization.ctorParameters = function () {
    return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"]] }] }];
};
var Plural = {};
Plural.Zero = 0;
Plural.One = 1;
Plural.Two = 2;
Plural.Few = 3;
Plural.Many = 4;
Plural.Other = 5;
Plural[Plural.Zero] = "Zero";
Plural[Plural.One] = "One";
Plural[Plural.Two] = "Two";
Plural[Plural.Few] = "Few";
Plural[Plural.Many] = "Many";
Plural[Plural.Other] = "Other";
/**
 * Returns the plural case based on the locale
 *
 * \@experimental
 * @param {?} locale
 * @param {?} nLike
 * @return {?}
 */
function getPluralCase(locale, nLike) {
    // TODO(vicb): lazy compute
    if (typeof nLike === 'string') {
        nLike = parseInt( /** @type {?} */nLike, 10);
    }
    var /** @type {?} */n = nLike;
    var /** @type {?} */nDecimal = n.toString().replace(/^[^.]*\.?/, '');
    var /** @type {?} */i = Math.floor(Math.abs(n));
    var /** @type {?} */v = nDecimal.length;
    var /** @type {?} */f = parseInt(nDecimal, 10);
    var /** @type {?} */t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
    var /** @type {?} */lang = locale.split('-')[0].toLowerCase();
    switch (lang) {
        case 'af':
        case 'asa':
        case 'az':
        case 'bem':
        case 'bez':
        case 'bg':
        case 'brx':
        case 'ce':
        case 'cgg':
        case 'chr':
        case 'ckb':
        case 'ee':
        case 'el':
        case 'eo':
        case 'es':
        case 'eu':
        case 'fo':
        case 'fur':
        case 'gsw':
        case 'ha':
        case 'haw':
        case 'hu':
        case 'jgo':
        case 'jmc':
        case 'ka':
        case 'kk':
        case 'kkj':
        case 'kl':
        case 'ks':
        case 'ksb':
        case 'ky':
        case 'lb':
        case 'lg':
        case 'mas':
        case 'mgo':
        case 'ml':
        case 'mn':
        case 'nb':
        case 'nd':
        case 'ne':
        case 'nn':
        case 'nnh':
        case 'nyn':
        case 'om':
        case 'or':
        case 'os':
        case 'ps':
        case 'rm':
        case 'rof':
        case 'rwk':
        case 'saq':
        case 'seh':
        case 'sn':
        case 'so':
        case 'sq':
        case 'ta':
        case 'te':
        case 'teo':
        case 'tk':
        case 'tr':
        case 'ug':
        case 'uz':
        case 'vo':
        case 'vun':
        case 'wae':
        case 'xog':
            if (n === 1) return Plural.One;
            return Plural.Other;
        case 'agq':
        case 'bas':
        case 'cu':
        case 'dav':
        case 'dje':
        case 'dua':
        case 'dyo':
        case 'ebu':
        case 'ewo':
        case 'guz':
        case 'kam':
        case 'khq':
        case 'ki':
        case 'kln':
        case 'kok':
        case 'ksf':
        case 'lrc':
        case 'lu':
        case 'luo':
        case 'luy':
        case 'mer':
        case 'mfe':
        case 'mgh':
        case 'mua':
        case 'mzn':
        case 'nmg':
        case 'nus':
        case 'qu':
        case 'rn':
        case 'rw':
        case 'sbp':
        case 'twq':
        case 'vai':
        case 'yav':
        case 'yue':
        case 'zgh':
        case 'ak':
        case 'ln':
        case 'mg':
        case 'pa':
        case 'ti':
            if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;
            return Plural.Other;
        case 'am':
        case 'as':
        case 'bn':
        case 'fa':
        case 'gu':
        case 'hi':
        case 'kn':
        case 'mr':
        case 'zu':
            if (i === 0 || n === 1) return Plural.One;
            return Plural.Other;
        case 'ar':
            if (n === 0) return Plural.Zero;
            if (n === 1) return Plural.One;
            if (n === 2) return Plural.Two;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;
            return Plural.Other;
        case 'ast':
        case 'ca':
        case 'de':
        case 'en':
        case 'et':
        case 'fi':
        case 'fy':
        case 'gl':
        case 'it':
        case 'nl':
        case 'sv':
        case 'sw':
        case 'ur':
        case 'yi':
            if (i === 1 && v === 0) return Plural.One;
            return Plural.Other;
        case 'be':
            if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14)) return Plural.Few;
            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14) return Plural.Many;
            return Plural.Other;
        case 'br':
            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;
            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;
            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99)) return Plural.Few;
            if (!(n === 0) && n % 1e6 === 0) return Plural.Many;
            return Plural.Other;
        case 'bs':
        case 'hr':
        case 'sr':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11)) return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14)) return Plural.Few;
            return Plural.Other;
        case 'cs':
        case 'sk':
            if (i === 1 && v === 0) return Plural.One;
            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;
            if (!(v === 0)) return Plural.Many;
            return Plural.Other;
        case 'cy':
            if (n === 0) return Plural.Zero;
            if (n === 1) return Plural.One;
            if (n === 2) return Plural.Two;
            if (n === 3) return Plural.Few;
            if (n === 6) return Plural.Many;
            return Plural.Other;
        case 'da':
            if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;
            return Plural.Other;
        case 'dsb':
        case 'hsb':
            if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;
            if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4) return Plural.Few;
            return Plural.Other;
        case 'ff':
        case 'fr':
        case 'hy':
        case 'kab':
            if (i === 0 || i === 1) return Plural.One;
            return Plural.Other;
        case 'fil':
            if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9)) return Plural.One;
            return Plural.Other;
        case 'ga':
            if (n === 1) return Plural.One;
            if (n === 2) return Plural.Two;
            if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;
            if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;
            return Plural.Other;
        case 'gd':
            if (n === 1 || n === 11) return Plural.One;
            if (n === 2 || n === 12) return Plural.Two;
            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;
            return Plural.Other;
        case 'gv':
            if (v === 0 && i % 10 === 1) return Plural.One;
            if (v === 0 && i % 10 === 2) return Plural.Two;
            if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80)) return Plural.Few;
            if (!(v === 0)) return Plural.Many;
            return Plural.Other;
        case 'he':
            if (i === 1 && v === 0) return Plural.One;
            if (i === 2 && v === 0) return Plural.Two;
            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;
            return Plural.Other;
        case 'is':
            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;
            return Plural.Other;
        case 'ksh':
            if (n === 0) return Plural.Zero;
            if (n === 1) return Plural.One;
            return Plural.Other;
        case 'kw':
        case 'naq':
        case 'se':
        case 'smn':
            if (n === 1) return Plural.One;
            if (n === 2) return Plural.Two;
            return Plural.Other;
        case 'lag':
            if (n === 0) return Plural.Zero;
            if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;
            return Plural.Other;
        case 'lt':
            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.Few;
            if (!(f === 0)) return Plural.Many;
            return Plural.Other;
        case 'lv':
        case 'prg':
            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19) return Plural.Zero;
            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1) return Plural.One;
            return Plural.Other;
        case 'mk':
            if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;
            return Plural.Other;
        case 'mt':
            if (n === 1) return Plural.One;
            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10) return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;
            return Plural.Other;
        case 'pl':
            if (i === 1 && v === 0) return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;
            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14) return Plural.Many;
            return Plural.Other;
        case 'pt':
            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;
            return Plural.Other;
        case 'ro':
            if (i === 1 && v === 0) return Plural.One;
            if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19) return Plural.Few;
            return Plural.Other;
        case 'ru':
        case 'uk':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;
            if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14) return Plural.Many;
            return Plural.Other;
        case 'shi':
            if (i === 0 || n === 1) return Plural.One;
            if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;
            return Plural.Other;
        case 'si':
            if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;
            return Plural.Other;
        case 'sl':
            if (v === 0 && i % 100 === 1) return Plural.One;
            if (v === 0 && i % 100 === 2) return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0)) return Plural.Few;
            return Plural.Other;
        case 'tzm':
            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99) return Plural.One;
            return Plural.Other;
        default:
            return Plural.Other;
    }
}

/**
 * @param {?} obj
 * @return {?}
 */
function isListLikeIterable(obj) {
    if (!isJsObject(obj)) return false;
    return Array.isArray(obj) || !(obj instanceof Map) && getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop
}

/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds and removes CSS classes on an HTML element.
 *
 * \@howToUse
 * ```
 *     <some-element [ngClass]="'first second'">...</some-element>
 *
 *     <some-element [ngClass]="['first', 'second']">...</some-element>
 *
 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
 *
 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
 *
 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
 * ```
 *
 * \@description
 *
 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
 * - `string` - the CSS classes listed in the string (space delimited) are added,
 * - `Array` - the CSS classes declared as Array elements are added,
 * - `Object` - keys are CSS classes that get added when the expression given in the value
 *              evaluates to a truthy value, otherwise they are removed.
 *
 * \@stable
 */

var NgClass = function () {
    /**
     * @param {?} _iterableDiffers
     * @param {?} _keyValueDiffers
     * @param {?} _ngEl
     * @param {?} _renderer
     */
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
        _classCallCheck(this, NgClass);

        this._iterableDiffers = _iterableDiffers;
        this._keyValueDiffers = _keyValueDiffers;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
        this._initialClasses = [];
    }
    /**
     * @param {?} v
     * @return {?}
     */


    _createClass(NgClass, [{
        key: 'ngDoCheck',

        /**
         * @return {?}
         */
        value: function ngDoCheck() {
            if (this._iterableDiffer) {
                var /** @type {?} */iterableChanges = this._iterableDiffer.diff( /** @type {?} */this._rawClass);
                if (iterableChanges) {
                    this._applyIterableChanges(iterableChanges);
                }
            } else if (this._keyValueDiffer) {
                var /** @type {?} */keyValueChanges = this._keyValueDiffer.diff( /** @type {?} */this._rawClass);
                if (keyValueChanges) {
                    this._applyKeyValueChanges(keyValueChanges);
                }
            }
        }
        /**
         * @param {?} rawClassVal
         * @return {?}
         */

    }, {
        key: '_cleanupClasses',
        value: function _cleanupClasses(rawClassVal) {
            this._applyClasses(rawClassVal, true);
            this._applyInitialClasses(false);
        }
        /**
         * @param {?} changes
         * @return {?}
         */

    }, {
        key: '_applyKeyValueChanges',
        value: function _applyKeyValueChanges(changes) {
            var _this5 = this;

            changes.forEachAddedItem(function (record) {
                return _this5._toggleClass(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
                return _this5._toggleClass(record.key, record.currentValue);
            });
            changes.forEachRemovedItem(function (record) {
                if (record.previousValue) {
                    _this5._toggleClass(record.key, false);
                }
            });
        }
        /**
         * @param {?} changes
         * @return {?}
         */

    }, {
        key: '_applyIterableChanges',
        value: function _applyIterableChanges(changes) {
            var _this6 = this;

            changes.forEachAddedItem(function (record) {
                if (typeof record.item === 'string') {
                    _this6._toggleClass(record.item, true);
                } else {
                    throw new Error('NgClass can only toggle CSS classes expressed as strings, got ' + stringify(record.item));
                }
            });
            changes.forEachRemovedItem(function (record) {
                return _this6._toggleClass(record.item, false);
            });
        }
        /**
         * @param {?} isCleanup
         * @return {?}
         */

    }, {
        key: '_applyInitialClasses',
        value: function _applyInitialClasses(isCleanup) {
            var _this7 = this;

            this._initialClasses.forEach(function (klass) {
                return _this7._toggleClass(klass, !isCleanup);
            });
        }
        /**
         * @param {?} rawClassVal
         * @param {?} isCleanup
         * @return {?}
         */

    }, {
        key: '_applyClasses',
        value: function _applyClasses(rawClassVal, isCleanup) {
            var _this8 = this;

            if (rawClassVal) {
                if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                    rawClassVal.forEach(function (klass) {
                        return _this8._toggleClass(klass, !isCleanup);
                    });
                } else {
                    Object.keys(rawClassVal).forEach(function (klass) {
                        if (rawClassVal[klass] != null) _this8._toggleClass(klass, !isCleanup);
                    });
                }
            }
        }
        /**
         * @param {?} klass
         * @param {?} enabled
         * @return {?}
         */

    }, {
        key: '_toggleClass',
        value: function _toggleClass(klass, enabled) {
            var _this9 = this;

            klass = klass.trim();
            if (klass) {
                klass.split(/\s+/g).forEach(function (klass) {
                    _this9._renderer.setElementClass(_this9._ngEl.nativeElement, klass, !!enabled);
                });
            }
        }
    }, {
        key: 'klass',
        set: function set(v) {
            this._applyInitialClasses(true);
            this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
            this._applyInitialClasses(false);
            this._applyClasses(this._rawClass, false);
        }
        /**
         * @param {?} v
         * @return {?}
         */

    }, {
        key: 'ngClass',
        set: function set(v) {
            this._cleanupClasses(this._rawClass);
            this._iterableDiffer = null;
            this._keyValueDiffer = null;
            this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
            if (this._rawClass) {
                if (isListLikeIterable(this._rawClass)) {
                    this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
                } else {
                    this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
                }
            }
        }
    }]);

    return NgClass;
}();

NgClass.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngClass]' }] }];
/** @nocollapse */
NgClass.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["IterableDiffers"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["KeyValueDiffers"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] }];
};
NgClass.propDecorators = {
    'klass': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['class'] }],
    'ngClass': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }]
};

/**
 * Instantiates a single {\@link Component} type and inserts its Host View into current View.
 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
 *
 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
 * any existing component will get destroyed.
 *
 * ### Fine tune control
 *
 * You can control the component creation process by using the following optional attributes:
 *
 * * `ngComponentOutletInjector`: Optional custom {\@link Injector} that will be used as parent for
 * the Component. Defaults to the injector of the current view container.
 *
 * * `ngComponentOutletProviders`: Optional injectable objects ({\@link Provider}) that are visible
 * to the component.
 *
 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
 * section of the component, if exists.
 *
 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
 * module, then load a component from that module.
 *
 * ### Syntax
 *
 * Simple
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
 * ```
 *
 * Customized injector/content
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   injector: injectorExpression;
 *                                   content: contentNodesExpression;">
 * </ng-container>
 * ```
 *
 * Customized ngModuleFactory
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   ngModuleFactory: moduleFactory;">
 * </ng-container>
 * ```
 * # Example
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
 *
 * A more complete example with additional options:
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
 * A more complete example with ngModuleFactory:
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}
 *
 * \@experimental
 */

var NgComponentOutlet = function () {
    /**
     * @param {?} _viewContainerRef
     */
    function NgComponentOutlet(_viewContainerRef) {
        _classCallCheck(this, NgComponentOutlet);

        this._viewContainerRef = _viewContainerRef;
        this._componentRef = null;
        this._moduleRef = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */


    _createClass(NgComponentOutlet, [{
        key: 'ngOnChanges',
        value: function ngOnChanges(changes) {
            if (this._componentRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._componentRef.hostView));
            }
            this._viewContainerRef.clear();
            this._componentRef = null;
            if (this.ngComponentOutlet) {
                var /** @type {?} */injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
                if (changes.ngComponentOutletNgModuleFactory) {
                    if (this._moduleRef) this._moduleRef.destroy();
                    if (this.ngComponentOutletNgModuleFactory) {
                        this._moduleRef = this.ngComponentOutletNgModuleFactory.create(injector);
                    } else {
                        this._moduleRef = null;
                    }
                }
                if (this._moduleRef) {
                    injector = this._moduleRef.injector;
                }
                var /** @type {?} */componentFactory = injector.get(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentFactoryResolver"]).resolveComponentFactory(this.ngComponentOutlet);
                this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, injector, this.ngComponentOutletContent);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'ngOnDestroy',
        value: function ngOnDestroy() {
            if (this._moduleRef) this._moduleRef.destroy();
        }
    }]);

    return NgComponentOutlet;
}();

NgComponentOutlet.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngComponentOutlet]' }] }];
/** @nocollapse */
NgComponentOutlet.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }];
};
NgComponentOutlet.propDecorators = {
    'ngComponentOutlet': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }],
    'ngComponentOutletInjector': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }],
    'ngComponentOutletContent': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }],
    'ngComponentOutletNgModuleFactory': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }]
};

var NgForOfRow = function () {
    /**
     * @param {?} $implicit
     * @param {?} index
     * @param {?} count
     */
    function NgForOfRow($implicit, index, count) {
        _classCallCheck(this, NgForOfRow);

        this.$implicit = $implicit;
        this.index = index;
        this.count = count;
    }
    /**
     * @return {?}
     */


    _createClass(NgForOfRow, [{
        key: 'first',
        get: function get() {
            return this.index === 0;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'last',
        get: function get() {
            return this.index === this.count - 1;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'even',
        get: function get() {
            return this.index % 2 === 0;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'odd',
        get: function get() {
            return !this.even;
        }
    }]);

    return NgForOfRow;
}();
/**
 * The `NgForOf` directive instantiates a template once per item from an iterable. The context
 * for each instantiated template inherits from the outer context with the given loop variable
 * set to the current item from the iterable.
 *
 * ### Local Variables
 *
 * `NgForOf` provides several exported values that can be aliased to local variables:
 *
 * * `index` will be set to the current loop iteration for each template context.
 * * `first` will be set to a boolean value indicating whether the item is the first one in the
 *   iteration.
 * * `last` will be set to a boolean value indicating whether the item is the last one in the
 *   iteration.
 * * `even` will be set to a boolean value indicating whether this item has an even index.
 * * `odd` will be set to a boolean value indicating whether this item has an odd index.
 *
 * ### Change Propagation
 *
 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 * * Otherwise, the DOM element for that item will remain the same.
 *
 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
 * those changes in the DOM. This has important implications for animations and any stateful
 * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can
 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
 * such as user input.
 *
 * It is possible for the identities of elements in the iterator to change while the data does not.
 * This can happen, for example, if the iterator produced from an RPC to the server, and that
 * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
 * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
 * elements were deleted and all new elements inserted). This is an expensive operation and should
 * be avoided if possible.
 *
 * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.
 * `trackBy` takes a function which has two arguments: `index` and `item`.
 * If `trackBy` is given, Angular tracks changes by the return value of the function.
 *
 * ### Syntax
 *
 * - `<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>`
 * - `<li template="ngFor let item of items; let i = index; trackBy: trackByFn">...</li>`
 *
 * With `<ng-template>` element:
 *
 * ```
 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
 *   <li>...</li>
 * </ng-template>
 * ```
 *
 * ### Example
 *
 * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
 * example.
 *
 * \@stable
 */


var NgForOf = function () {
    /**
     * @param {?} _viewContainer
     * @param {?} _template
     * @param {?} _differs
     */
    function NgForOf(_viewContainer, _template, _differs) {
        _classCallCheck(this, NgForOf);

        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
        this._differ = null;
    }
    /**
     * @param {?} fn
     * @return {?}
     */


    _createClass(NgForOf, [{
        key: 'ngOnChanges',

        /**
         * @param {?} changes
         * @return {?}
         */
        value: function ngOnChanges(changes) {
            if ('ngForOf' in changes) {
                // React on ngForOf changes only once all inputs have been initialized
                var /** @type {?} */value = changes['ngForOf'].currentValue;
                if (!this._differ && value) {
                    try {
                        this._differ = this._differs.find(value).create(this.ngForTrackBy);
                    } catch (e) {
                        throw new Error('Cannot find a differ supporting object \'' + value + '\' of type \'' + getTypeNameForDebugging(value) + '\'. NgFor only supports binding to Iterables such as Arrays.');
                    }
                }
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'ngDoCheck',
        value: function ngDoCheck() {
            if (this._differ) {
                var /** @type {?} */changes = this._differ.diff(this.ngForOf);
                if (changes) this._applyChanges(changes);
            }
        }
        /**
         * @param {?} changes
         * @return {?}
         */

    }, {
        key: '_applyChanges',
        value: function _applyChanges(changes) {
            var _this10 = this;

            var /** @type {?} */insertTuples = [];
            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
                if (item.previousIndex == null) {
                    var /** @type {?} */view = _this10._viewContainer.createEmbeddedView(_this10._template, new NgForOfRow(null, null, null), currentIndex);
                    var /** @type {?} */tuple = new RecordViewTuple(item, view);
                    insertTuples.push(tuple);
                } else if (currentIndex == null) {
                    _this10._viewContainer.remove(adjustedPreviousIndex);
                } else {
                    var /** @type {?} */_view = _this10._viewContainer.get(adjustedPreviousIndex);
                    _this10._viewContainer.move(_view, currentIndex);
                    var /** @type {?} */_tuple = new RecordViewTuple(item, /** @type {?} */_view);
                    insertTuples.push(_tuple);
                }
            });
            for (var /** @type {?} */i = 0; i < insertTuples.length; i++) {
                this._perViewChange(insertTuples[i].view, insertTuples[i].record);
            }
            for (var /** @type {?} */_i = 0, /** @type {?} */ilen = this._viewContainer.length; _i < ilen; _i++) {
                var /** @type {?} */viewRef = this._viewContainer.get(_i);
                viewRef.context.index = _i;
                viewRef.context.count = ilen;
            }
            changes.forEachIdentityChange(function (record) {
                var /** @type {?} */viewRef = _this10._viewContainer.get(record.currentIndex);
                viewRef.context.$implicit = record.item;
            });
        }
        /**
         * @param {?} view
         * @param {?} record
         * @return {?}
         */

    }, {
        key: '_perViewChange',
        value: function _perViewChange(view, record) {
            view.context.$implicit = record.item;
        }
    }, {
        key: 'ngForTrackBy',
        set: function set(fn) {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["isDevMode"])() && fn != null && typeof fn !== 'function') {
                // TODO(vicb): use a log service once there is a public one available
                if (console && console.warn) {
                    console.warn('trackBy must be a function, but received ' + JSON.stringify(fn) + '. ' + 'See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.');
                }
            }
            this._trackByFn = fn;
        }
        /**
         * @return {?}
         */
        ,
        get: function get() {
            return this._trackByFn;
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'ngForTemplate',
        set: function set(value) {
            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
            // The current type is too restrictive; a template that just uses index, for example,
            // should be acceptable.
            if (value) {
                this._template = value;
            }
        }
    }]);

    return NgForOf;
}();

NgForOf.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngFor][ngForOf]' }] }];
/** @nocollapse */
NgForOf.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["IterableDiffers"] }];
};
NgForOf.propDecorators = {
    'ngForOf': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }],
    'ngForTrackBy': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }],
    'ngForTemplate': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }]
};

var RecordViewTuple =
/**
 * @param {?} record
 * @param {?} view
 */
function RecordViewTuple(record, view) {
    _classCallCheck(this, RecordViewTuple);

    this.record = record;
    this.view = view;
};
/**
 * @deprecated from v4.0.0 - Use NgForOf instead.
 */


var /** @type {?} */NgFor = NgForOf;

/**
 * Conditionally includes a template based on the value of an `expression`.
 *
 * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place
 * when expression is truthy or falsy respectively. Typically the:
 *  - `then` template is the inline template of `ngIf` unless bound to a different value.
 *  - `else` template is blank unless it is bound.
 *
 * # Most common usage
 *
 * The most common usage of the `ngIf` directive is to conditionally show the inline template as
 * seen in this example:
 * {\@example common/ngIf/ts/module.ts region='NgIfSimple'}
 *
 * # Showing an alternative template using `else`
 *
 * If it is necessary to display a template when the `expression` is falsy use the `else` template
 * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.
 * The template can be defined anywhere in the component view but is typically placed right after
 * `ngIf` for readability.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfElse'}
 *
 * # Using non-inlined `then` template
 *
 * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using
 * a binding (just like `else`). Because `then` and `else` are bindings, the template references can
 * change at runtime as shown in this example.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfThenElse'}
 *
 * # Storing conditional result in a variable
 *
 * A common pattern is that we need to show a set of properties from the same object. If the
 * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against
 * dereferencing a `null` value. This is especially the case when waiting on async data such as
 * when using the `async` pipe as shown in folowing example:
 *
 * ```
 * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!
 * ```
 *
 * There are several inefficiencies in the above example:
 *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the
 *    example above.
 *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.
 *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.
 *  - We have to place the `async` pipe in parenthesis.
 *
 * A better way to do this is to use `ngIf` and store the result of the condition in a local
 * variable as shown in the the example below:
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfLet'}
 *
 * Notice that:
 *  - We use only one `async` pipe and hence only one subscription gets created.
 *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.
 *  - The local `user` can then be bound repeatedly in a more efficient way.
 *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only
 *    display the data if `userStream` returns a value.
 *  - We can display an alternative template while waiting for the data.
 *
 * ### Syntax
 *
 * Simple form:
 * - `<div *ngIf="condition">...</div>`
 * - `<div template="ngIf condition">...</div>`
 * - `<ng-template [ngIf]="condition"><div>...</div></ng-template>`
 *
 * Form with an else block:
 * ```
 * <div *ngIf="condition; else elseBlock">...</div>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * Form with a `then` and `else` block:
 * ```
 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
 * <ng-template #thenBlock>...</ng-template>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * Form with storing the value locally:
 * ```
 * <div *ngIf="condition; else elseBlock; let value">{{value}}</div>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * \@stable
 */

var NgIf = function () {
    /**
     * @param {?} _viewContainer
     * @param {?} templateRef
     */
    function NgIf(_viewContainer, templateRef) {
        _classCallCheck(this, NgIf);

        this._viewContainer = _viewContainer;
        this._context = new NgIfContext();
        this._thenTemplateRef = null;
        this._elseTemplateRef = null;
        this._thenViewRef = null;
        this._elseViewRef = null;
        this._thenTemplateRef = templateRef;
    }
    /**
     * @param {?} condition
     * @return {?}
     */


    _createClass(NgIf, [{
        key: '_updateView',

        /**
         * @return {?}
         */
        value: function _updateView() {
            if (this._context.$implicit) {
                if (!this._thenViewRef) {
                    this._viewContainer.clear();
                    this._elseViewRef = null;
                    if (this._thenTemplateRef) {
                        this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                    }
                }
            } else {
                if (!this._elseViewRef) {
                    this._viewContainer.clear();
                    this._thenViewRef = null;
                    if (this._elseTemplateRef) {
                        this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                    }
                }
            }
        }
    }, {
        key: 'ngIf',
        set: function set(condition) {
            this._context.$implicit = condition;
            this._updateView();
        }
        /**
         * @param {?} templateRef
         * @return {?}
         */

    }, {
        key: 'ngIfThen',
        set: function set(templateRef) {
            this._thenTemplateRef = templateRef;
            this._thenViewRef = null; // clear previous view if any.
            this._updateView();
        }
        /**
         * @param {?} templateRef
         * @return {?}
         */

    }, {
        key: 'ngIfElse',
        set: function set(templateRef) {
            this._elseTemplateRef = templateRef;
            this._elseViewRef = null; // clear previous view if any.
            this._updateView();
        }
    }]);

    return NgIf;
}();

NgIf.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngIf]' }] }];
/** @nocollapse */
NgIf.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"] }];
};
NgIf.propDecorators = {
    'ngIf': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }],
    'ngIfThen': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }],
    'ngIfElse': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }]
};

var NgIfContext = function NgIfContext() {
    _classCallCheck(this, NgIfContext);

    this.$implicit = null;
};

var SwitchView = function () {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _templateRef
     */
    function SwitchView(_viewContainerRef, _templateRef) {
        _classCallCheck(this, SwitchView);

        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
        this._created = false;
    }
    /**
     * @return {?}
     */


    _createClass(SwitchView, [{
        key: 'create',
        value: function create() {
            this._created = true;
            this._viewContainerRef.createEmbeddedView(this._templateRef);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this._created = false;
            this._viewContainerRef.clear();
        }
        /**
         * @param {?} created
         * @return {?}
         */

    }, {
        key: 'enforceState',
        value: function enforceState(created) {
            if (created && !this._created) {
                this.create();
            } else if (!created && this._created) {
                this.destroy();
            }
        }
    }]);

    return SwitchView;
}();
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
 *             expression.
 *
 * \@howToUse
 * ```
 *     <container-element [ngSwitch]="switch_expression">
 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *       <ng-container *ngSwitchCase="match_expression_3">
 *         <!-- use a ng-container to group multiple root nodes -->
 *         <inner-element></inner-element>
 *         <inner-other-element></inner-other-element>
 *       </ng-container>
 *       <some-element *ngSwitchDefault>...</some-element>
 *     </container-element>
 * ```
 * \@description
 *
 * `NgSwitch` stamps out nested views when their match expression value matches the value of the
 * switch expression.
 *
 * In other words:
 * - you define a container element (where you place the directive with a switch expression on the
 * `[ngSwitch]="..."` attribute)
 * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
 * root elements.
 *
 * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
 * be preserved at the location.
 *
 * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
 * expression is evaluated.
 * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
 * stamped out.
 *
 * \@stable
 */


var NgSwitch = function () {
    function NgSwitch() {
        _classCallCheck(this, NgSwitch);

        this._defaultUsed = false;
        this._caseCount = 0;
        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */


    _createClass(NgSwitch, [{
        key: '_addCase',

        /**
         * \@internal
         * @return {?}
         */
        value: function _addCase() {
            return this._caseCount++;
        }
        /**
         * \@internal
         * @param {?} view
         * @return {?}
         */

    }, {
        key: '_addDefault',
        value: function _addDefault(view) {
            if (!this._defaultViews) {
                this._defaultViews = [];
            }
            this._defaultViews.push(view);
        }
        /**
         * \@internal
         * @param {?} value
         * @return {?}
         */

    }, {
        key: '_matchCase',
        value: function _matchCase(value) {
            var /** @type {?} */matched = value == this._ngSwitch;
            this._lastCasesMatched = this._lastCasesMatched || matched;
            this._lastCaseCheckIndex++;
            if (this._lastCaseCheckIndex === this._caseCount) {
                this._updateDefaultCases(!this._lastCasesMatched);
                this._lastCaseCheckIndex = 0;
                this._lastCasesMatched = false;
            }
            return matched;
        }
        /**
         * @param {?} useDefault
         * @return {?}
         */

    }, {
        key: '_updateDefaultCases',
        value: function _updateDefaultCases(useDefault) {
            if (this._defaultViews && useDefault !== this._defaultUsed) {
                this._defaultUsed = useDefault;
                for (var /** @type {?} */i = 0; i < this._defaultViews.length; i++) {
                    var /** @type {?} */defaultView = this._defaultViews[i];
                    defaultView.enforceState(useDefault);
                }
            }
        }
    }, {
        key: 'ngSwitch',
        set: function set(newValue) {
            this._ngSwitch = newValue;
            if (this._caseCount === 0) {
                this._updateDefaultCases(true);
            }
        }
    }]);

    return NgSwitch;
}();

NgSwitch.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngSwitch]' }] }];
/** @nocollapse */
NgSwitch.ctorParameters = function () {
    return [];
};
NgSwitch.propDecorators = {
    'ngSwitch': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }]
};
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
 *             given expression evaluate to respectively the same/different value as the switch
 *             expression.
 *
 * \@howToUse
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 * </container-element>
 * ```
 * \@description
 *
 * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
 * expression.
 *
 * If multiple match expressions match the switch expression value, all of them are displayed.
 *
 * See {\@link NgSwitch} for more details and example.
 *
 * \@stable
 */

var NgSwitchCase = function () {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} ngSwitch
     */
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
        _classCallCheck(this, NgSwitchCase);

        this.ngSwitch = ngSwitch;
        ngSwitch._addCase();
        this._view = new SwitchView(viewContainer, templateRef);
    }
    /**
     * @return {?}
     */


    _createClass(NgSwitchCase, [{
        key: 'ngDoCheck',
        value: function ngDoCheck() {
            this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
        }
    }]);

    return NgSwitchCase;
}();

NgSwitchCase.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngSwitchCase]' }] }];
/** @nocollapse */
NgSwitchCase.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"] }, { type: NgSwitch, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"] }] }];
};
NgSwitchCase.propDecorators = {
    'ngSwitchCase': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }]
};
/**
 * \@ngModule CommonModule
 * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
 * match the
 *             switch expression.
 *
 * \@howToUse
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   <some-other-element *ngSwitchDefault>...</some-other-element>
 * </container-element>
 * ```
 *
 * \@description
 *
 * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
 * expression.
 *
 * See {\@link NgSwitch} for more details and example.
 *
 * \@stable
 */

var NgSwitchDefault =
/**
 * @param {?} viewContainer
 * @param {?} templateRef
 * @param {?} ngSwitch
 */
function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
    _classCallCheck(this, NgSwitchDefault);

    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
};

NgSwitchDefault.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngSwitchDefault]' }] }];
/** @nocollapse */
NgSwitchDefault.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"] }, { type: NgSwitch, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"] }] }];
};

/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
 *
 * \@howToUse
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
 *   <ng-template ngPluralCase="=1">there is one</ng-template>
 *   <ng-template ngPluralCase="few">there are a few</ng-template>
 * </some-element>
 * ```
 *
 * \@description
 *
 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
 * that match the switch expression's pluralization category.
 *
 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
 * expression:
 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
 *   matches the switch expression exactly,
 * - otherwise, the view will be treated as a "category match", and will only display if exact
 *   value matches aren't found and the value maps to its category for the defined locale.
 *
 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
 *
 * \@experimental
 */

var NgPlural = function () {
    /**
     * @param {?} _localization
     */
    function NgPlural(_localization) {
        _classCallCheck(this, NgPlural);

        this._localization = _localization;
        this._caseViews = {};
    }
    /**
     * @param {?} value
     * @return {?}
     */


    _createClass(NgPlural, [{
        key: 'addCase',

        /**
         * @param {?} value
         * @param {?} switchView
         * @return {?}
         */
        value: function addCase(value, switchView) {
            this._caseViews[value] = switchView;
        }
        /**
         * @return {?}
         */

    }, {
        key: '_updateView',
        value: function _updateView() {
            this._clearViews();
            var /** @type {?} */cases = Object.keys(this._caseViews);
            var /** @type {?} */key = getPluralCategory(this._switchValue, cases, this._localization);
            this._activateView(this._caseViews[key]);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_clearViews',
        value: function _clearViews() {
            if (this._activeView) this._activeView.destroy();
        }
        /**
         * @param {?} view
         * @return {?}
         */

    }, {
        key: '_activateView',
        value: function _activateView(view) {
            if (view) {
                this._activeView = view;
                this._activeView.create();
            }
        }
    }, {
        key: 'ngPlural',
        set: function set(value) {
            this._switchValue = value;
            this._updateView();
        }
    }]);

    return NgPlural;
}();

NgPlural.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngPlural]' }] }];
/** @nocollapse */
NgPlural.ctorParameters = function () {
    return [{ type: NgLocalization }];
};
NgPlural.propDecorators = {
    'ngPlural': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }]
};
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
 *             given expression matches the plural expression according to CLDR rules.
 *
 * \@howToUse
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">...</ng-template>
 *   <ng-template ngPluralCase="other">...</ng-template>
 * </some-element>
 * ```
 *
 * See {\@link NgPlural} for more details and example.
 *
 * \@experimental
 */

var NgPluralCase =
/**
 * @param {?} value
 * @param {?} template
 * @param {?} viewContainer
 * @param {?} ngPlural
 */
function NgPluralCase(value, template, viewContainer, ngPlural) {
    _classCallCheck(this, NgPluralCase);

    this.value = value;
    var isANumber = !isNaN(Number(value));
    ngPlural.addCase(isANumber ? '=' + value : value, new SwitchView(viewContainer, template));
};

NgPluralCase.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngPluralCase]' }] }];
/** @nocollapse */
NgPluralCase.ctorParameters = function () {
    return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"], args: ['ngPluralCase'] }] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }, { type: NgPlural, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"] }] }];
};

/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Update an HTML element styles.
 *
 * \@howToUse
 * ```
 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
 *
 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
 *
 * <some-element [ngStyle]="objExp">...</some-element>
 * ```
 *
 * \@description
 *
 * The styles are updated according to the value of the expression evaluation:
 * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
 * - values are the values assigned to those properties (expressed in the given unit).
 *
 * \@stable
 */

var NgStyle = function () {
    /**
     * @param {?} _differs
     * @param {?} _ngEl
     * @param {?} _renderer
     */
    function NgStyle(_differs, _ngEl, _renderer) {
        _classCallCheck(this, NgStyle);

        this._differs = _differs;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
    }
    /**
     * @param {?} v
     * @return {?}
     */


    _createClass(NgStyle, [{
        key: 'ngDoCheck',

        /**
         * @return {?}
         */
        value: function ngDoCheck() {
            if (this._differ) {
                var /** @type {?} */changes = this._differ.diff(this._ngStyle);
                if (changes) {
                    this._applyChanges(changes);
                }
            }
        }
        /**
         * @param {?} changes
         * @return {?}
         */

    }, {
        key: '_applyChanges',
        value: function _applyChanges(changes) {
            var _this11 = this;

            changes.forEachRemovedItem(function (record) {
                return _this11._setStyle(record.key, null);
            });
            changes.forEachAddedItem(function (record) {
                return _this11._setStyle(record.key, record.currentValue);
            });
            changes.forEachChangedItem(function (record) {
                return _this11._setStyle(record.key, record.currentValue);
            });
        }
        /**
         * @param {?} nameAndUnit
         * @param {?} value
         * @return {?}
         */

    }, {
        key: '_setStyle',
        value: function _setStyle(nameAndUnit, value) {
            var _nameAndUnit$split = nameAndUnit.split('.'),
                _nameAndUnit$split2 = _slicedToArray(_nameAndUnit$split, 2),
                name = _nameAndUnit$split2[0],
                unit = _nameAndUnit$split2[1];

            value = value != null && unit ? '' + value + unit : value;
            this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */value);
        }
    }, {
        key: 'ngStyle',
        set: function set(v) {
            this._ngStyle = v;
            if (!this._differ && v) {
                this._differ = this._differs.find(v).create();
            }
        }
    }]);

    return NgStyle;
}();

NgStyle.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngStyle]' }] }];
/** @nocollapse */
NgStyle.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["KeyValueDiffers"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] }];
};
NgStyle.propDecorators = {
    'ngStyle': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }]
};

/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
 *
 * \@howToUse
 * ```
 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
 * ```
 *
 * \@description
 *
 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
 * by the local template `let` declarations.
 *
 * Note: using the key `$implicit` in the context object will set it's value as default.
 *
 * # Example
 *
 * {\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
 *
 * \@experimental
 */

var NgTemplateOutlet = function () {
    /**
     * @param {?} _viewContainerRef
     */
    function NgTemplateOutlet(_viewContainerRef) {
        _classCallCheck(this, NgTemplateOutlet);

        this._viewContainerRef = _viewContainerRef;
    }
    /**
     * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.
     * @param {?} context
     * @return {?}
     */


    _createClass(NgTemplateOutlet, [{
        key: 'ngOnChanges',

        /**
         * @param {?} changes
         * @return {?}
         */
        value: function ngOnChanges(changes) {
            if (this._viewRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
            }
            if (this.ngTemplateOutlet) {
                this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);
            }
        }
    }, {
        key: 'ngOutletContext',
        set: function set(context) {
            this.ngTemplateOutletContext = context;
        }
    }]);

    return NgTemplateOutlet;
}();

NgTemplateOutlet.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"], args: [{ selector: '[ngTemplateOutlet]' }] }];
/** @nocollapse */
NgTemplateOutlet.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] }];
};
NgTemplateOutlet.propDecorators = {
    'ngTemplateOutletContext': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }],
    'ngTemplateOutlet': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }],
    'ngOutletContext': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] }]
};

/**
 * A collection of Angular directives that are likely to be used in each and every Angular
 * application.
 */
var /** @type {?} */COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];

/**
 * @param {?} type
 * @param {?} value
 * @return {?}
 */
function invalidPipeArgumentError(type, value) {
    return Error('InvalidPipeArgument: \'' + value + '\' for pipe \'' + stringify(type) + '\'');
}

var ObservableStrategy = function () {
    function ObservableStrategy() {
        _classCallCheck(this, ObservableStrategy);
    }

    _createClass(ObservableStrategy, [{
        key: 'createSubscription',

        /**
         * @param {?} async
         * @param {?} updateLatestValue
         * @return {?}
         */
        value: function createSubscription(async, updateLatestValue) {
            return async.subscribe({ next: updateLatestValue, error: function error(e) {
                    throw e;
                } });
        }
        /**
         * @param {?} subscription
         * @return {?}
         */

    }, {
        key: 'dispose',
        value: function dispose(subscription) {
            subscription.unsubscribe();
        }
        /**
         * @param {?} subscription
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(subscription) {
            subscription.unsubscribe();
        }
    }]);

    return ObservableStrategy;
}();

var PromiseStrategy = function () {
    function PromiseStrategy() {
        _classCallCheck(this, PromiseStrategy);
    }

    _createClass(PromiseStrategy, [{
        key: 'createSubscription',

        /**
         * @param {?} async
         * @param {?} updateLatestValue
         * @return {?}
         */
        value: function createSubscription(async, updateLatestValue) {
            return async.then(updateLatestValue, function (e) {
                throw e;
            });
        }
        /**
         * @param {?} subscription
         * @return {?}
         */

    }, {
        key: 'dispose',
        value: function dispose(subscription) {}
        /**
         * @param {?} subscription
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(subscription) {}
    }]);

    return PromiseStrategy;
}();

var /** @type {?} */_promiseStrategy = new PromiseStrategy();
var /** @type {?} */_observableStrategy = new ObservableStrategy();
/**
 * \@ngModule CommonModule
 * \@whatItDoes Unwraps a value from an asynchronous primitive.
 * \@howToUse `observable_or_promise_expression | async`
 * \@description
 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
 * potential memory leaks.
 *
 *
 * ## Examples
 *
 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
 * promise.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
 *
 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
 * to the view. The Observable continuously updates the view with the current time.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
 *
 * \@stable
 */

var AsyncPipe = function () {
    /**
     * @param {?} _ref
     */
    function AsyncPipe(_ref) {
        _classCallCheck(this, AsyncPipe);

        this._ref = _ref;
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
        this._strategy = null;
    }
    /**
     * @return {?}
     */


    _createClass(AsyncPipe, [{
        key: 'ngOnDestroy',
        value: function ngOnDestroy() {
            if (this._subscription) {
                this._dispose();
            }
        }
        /**
         * @param {?} obj
         * @return {?}
         */

    }, {
        key: 'transform',
        value: function transform(obj) {
            if (!this._obj) {
                if (obj) {
                    this._subscribe(obj);
                }
                this._latestReturnedValue = this._latestValue;
                return this._latestValue;
            }
            if (obj !== this._obj) {
                this._dispose();
                return this.transform( /** @type {?} */obj);
            }
            if (this._latestValue === this._latestReturnedValue) {
                return this._latestReturnedValue;
            }
            this._latestReturnedValue = this._latestValue;
            return __WEBPACK_IMPORTED_MODULE_0__angular_core__["WrappedValue"].wrap(this._latestValue);
        }
        /**
         * @param {?} obj
         * @return {?}
         */

    }, {
        key: '_subscribe',
        value: function _subscribe(obj) {
            var _this12 = this;

            this._obj = obj;
            this._strategy = this._selectStrategy(obj);
            this._subscription = this._strategy.createSubscription(obj, function (value) {
                return _this12._updateLatestValue(obj, value);
            });
        }
        /**
         * @param {?} obj
         * @return {?}
         */

    }, {
        key: '_selectStrategy',
        value: function _selectStrategy(obj) {
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵisPromise"])(obj)) {
                return _promiseStrategy;
            }
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵisObservable"])(obj)) {
                return _observableStrategy;
            }
            throw invalidPipeArgumentError(AsyncPipe, obj);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_dispose',
        value: function _dispose() {
            this._strategy.dispose(this._subscription);
            this._latestValue = null;
            this._latestReturnedValue = null;
            this._subscription = null;
            this._obj = null;
        }
        /**
         * @param {?} async
         * @param {?} value
         * @return {?}
         */

    }, {
        key: '_updateLatestValue',
        value: function _updateLatestValue(async, value) {
            if (async === this._obj) {
                this._latestValue = value;
                this._ref.markForCheck();
            }
        }
    }]);

    return AsyncPipe;
}();

AsyncPipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'async', pure: false }] }];
/** @nocollapse */
AsyncPipe.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"] }];
};

/**
 * Transforms text to lowercase.
 *
 * {\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }
 *
 * \@stable
 */

var LowerCasePipe = function () {
    function LowerCasePipe() {
        _classCallCheck(this, LowerCasePipe);
    }

    _createClass(LowerCasePipe, [{
        key: 'transform',

        /**
         * @param {?} value
         * @return {?}
         */
        value: function transform(value) {
            if (!value) return value;
            if (typeof value !== 'string') {
                throw invalidPipeArgumentError(LowerCasePipe, value);
            }
            return value.toLowerCase();
        }
    }]);

    return LowerCasePipe;
}();

LowerCasePipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'lowercase' }] }];
/** @nocollapse */
LowerCasePipe.ctorParameters = function () {
    return [];
};
/**
 * Helper method to transform a single word to titlecase.
 *
 * \@stable
 * @param {?} word
 * @return {?}
 */
function titleCaseWord(word) {
    if (!word) return word;
    return word[0].toUpperCase() + word.substr(1).toLowerCase();
}
/**
 * Transforms text to titlecase.
 *
 * \@stable
 */

var TitleCasePipe = function () {
    function TitleCasePipe() {
        _classCallCheck(this, TitleCasePipe);
    }

    _createClass(TitleCasePipe, [{
        key: 'transform',

        /**
         * @param {?} value
         * @return {?}
         */
        value: function transform(value) {
            if (!value) return value;
            if (typeof value !== 'string') {
                throw invalidPipeArgumentError(TitleCasePipe, value);
            }
            return value.split(/\b/g).map(function (word) {
                return titleCaseWord(word);
            }).join('');
        }
    }]);

    return TitleCasePipe;
}();

TitleCasePipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'titlecase' }] }];
/** @nocollapse */
TitleCasePipe.ctorParameters = function () {
    return [];
};
/**
 * Transforms text to uppercase.
 *
 * \@stable
 */

var UpperCasePipe = function () {
    function UpperCasePipe() {
        _classCallCheck(this, UpperCasePipe);
    }

    _createClass(UpperCasePipe, [{
        key: 'transform',

        /**
         * @param {?} value
         * @return {?}
         */
        value: function transform(value) {
            if (!value) return value;
            if (typeof value !== 'string') {
                throw invalidPipeArgumentError(UpperCasePipe, value);
            }
            return value.toUpperCase();
        }
    }]);

    return UpperCasePipe;
}();

UpperCasePipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'uppercase' }] }];
/** @nocollapse */
UpperCasePipe.ctorParameters = function () {
    return [];
};

var NumberFormatStyle = {};
NumberFormatStyle.Decimal = 0;
NumberFormatStyle.Percent = 1;
NumberFormatStyle.Currency = 2;
NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";

var NumberFormatter = function () {
    function NumberFormatter() {
        _classCallCheck(this, NumberFormatter);
    }

    _createClass(NumberFormatter, null, [{
        key: 'format',

        /**
         * @param {?} num
         * @param {?} locale
         * @param {?} style
         * @param {?=} __3
         * @return {?}
         */
        value: function format(num, locale, style) {
            var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
                minimumIntegerDigits = _ref2.minimumIntegerDigits,
                minimumFractionDigits = _ref2.minimumFractionDigits,
                maximumFractionDigits = _ref2.maximumFractionDigits,
                currency = _ref2.currency,
                _ref2$currencyAsSymbo = _ref2.currencyAsSymbol,
                currencyAsSymbol = _ref2$currencyAsSymbo === undefined ? false : _ref2$currencyAsSymbo;

            var /** @type {?} */options = {
                minimumIntegerDigits: minimumIntegerDigits,
                minimumFractionDigits: minimumFractionDigits,
                maximumFractionDigits: maximumFractionDigits,
                style: NumberFormatStyle[style].toLowerCase()
            };
            if (style == NumberFormatStyle.Currency) {
                options.currency = currency;
                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
            }
            return new Intl.NumberFormat(locale, options).format(num);
        }
    }]);

    return NumberFormatter;
}();

var /** @type {?} */DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
var /** @type {?} */PATTERN_ALIASES = {
    // Keys are quoted so they do not get renamed during closure compilation.
    'yMMMdjms': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1), digitCondition('second', 1)])),
    'yMdjm': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1)])),
    'yMMMMEEEEd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4), digitCondition('day', 1)])),
    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
};
var /** @type {?} */DATE_FORMATS = {
    // Keys are quoted so they do not get renamed.
    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
    'yy': datePartGetterFactory(digitCondition('year', 2)),
    'y': datePartGetterFactory(digitCondition('year', 1)),
    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
    'MMM': datePartGetterFactory(nameCondition('month', 3)),
    'MM': datePartGetterFactory(digitCondition('month', 2)),
    'M': datePartGetterFactory(digitCondition('month', 1)),
    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
    'L': datePartGetterFactory(nameCondition('month', 1)),
    'dd': datePartGetterFactory(digitCondition('day', 2)),
    'd': datePartGetterFactory(digitCondition('day', 1)),
    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'jj': datePartGetterFactory(digitCondition('hour', 2)),
    'j': datePartGetterFactory(digitCondition('hour', 1)),
    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
    'm': datePartGetterFactory(digitCondition('minute', 1)),
    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
    's': datePartGetterFactory(digitCondition('second', 1)),
    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
    // we can be just safely rely on using `sss` since we currently don't support single or two digit
    // fractions
    'sss': datePartGetterFactory(digitCondition('second', 3)),
    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
    'E': datePartGetterFactory(nameCondition('weekday', 1)),
    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'Z': timeZoneGetter('short'),
    'z': timeZoneGetter('long'),
    'ww': datePartGetterFactory({}),
    // first Thursday of the year. not support ?
    'w': datePartGetterFactory({}),
    // of the year not support ?
    'G': datePartGetterFactory(nameCondition('era', 1)),
    'GG': datePartGetterFactory(nameCondition('era', 2)),
    'GGG': datePartGetterFactory(nameCondition('era', 3)),
    'GGGG': datePartGetterFactory(nameCondition('era', 4))
};
/**
 * @param {?} inner
 * @return {?}
 */
function digitModifier(inner) {
    return function (date, locale) {
        var /** @type {?} */result = inner(date, locale);
        return result.length == 1 ? '0' + result : result;
    };
}
/**
 * @param {?} inner
 * @return {?}
 */
function hourClockExtractor(inner) {
    return function (date, locale) {
        return inner(date, locale).split(' ')[1];
    };
}
/**
 * @param {?} inner
 * @return {?}
 */
function hourExtractor(inner) {
    return function (date, locale) {
        return inner(date, locale).split(' ')[0];
    };
}
/**
 * @param {?} date
 * @param {?} locale
 * @param {?} options
 * @return {?}
 */
function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
}
/**
 * @param {?} timezone
 * @return {?}
 */
function timeZoneGetter(timezone) {
    // To workaround `Intl` API restriction for single timezone let format with 24 hours
    var /** @type {?} */options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
    return function (date, locale) {
        var /** @type {?} */result = intlDateFormat(date, locale, options);
        // Then extract first 3 letters that related to hours
        return result ? result.substring(3) : '';
    };
}
/**
 * @param {?} options
 * @param {?} value
 * @return {?}
 */
function hour12Modify(options, value) {
    options.hour12 = value;
    return options;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function digitCondition(prop, len) {
    var /** @type {?} */result = {};
    result[prop] = len === 2 ? '2-digit' : 'numeric';
    return result;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function nameCondition(prop, len) {
    var /** @type {?} */result = {};
    if (len < 4) {
        result[prop] = len > 1 ? 'short' : 'narrow';
    } else {
        result[prop] = 'long';
    }
    return result;
}
/**
 * @param {?} options
 * @return {?}
 */
function combine(options) {
    return Object.assign.apply(Object, [{}].concat(_toConsumableArray(options)));
}
/**
 * @param {?} ret
 * @return {?}
 */
function datePartGetterFactory(ret) {
    return function (date, locale) {
        return intlDateFormat(date, locale, ret);
    };
}
var /** @type {?} */DATE_FORMATTER_CACHE = new Map();
/**
 * @param {?} format
 * @param {?} date
 * @param {?} locale
 * @return {?}
 */
function dateFormatter(format, date, locale) {
    var /** @type {?} */fn = PATTERN_ALIASES[format];
    if (fn) return fn(date, locale);
    var /** @type {?} */cacheKey = format;
    var /** @type {?} */parts = DATE_FORMATTER_CACHE.get(cacheKey);
    if (!parts) {
        parts = [];
        var /** @type {?} */match = void 0;
        DATE_FORMATS_SPLIT.exec(format);
        while (format) {
            match = DATE_FORMATS_SPLIT.exec(format);
            if (match) {
                parts = parts.concat(match.slice(1));
                format = parts.pop();
            } else {
                parts.push(format);
                format = null;
            }
        }
        DATE_FORMATTER_CACHE.set(cacheKey, parts);
    }
    return parts.reduce(function (text, part) {
        var /** @type {?} */fn = DATE_FORMATS[part];
        return text + (fn ? fn(date, locale) : partToTime(part));
    }, '');
}
/**
 * @param {?} part
 * @return {?}
 */
function partToTime(part) {
    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
}

var DateFormatter = function () {
    function DateFormatter() {
        _classCallCheck(this, DateFormatter);
    }

    _createClass(DateFormatter, null, [{
        key: 'format',

        /**
         * @param {?} date
         * @param {?} locale
         * @param {?} pattern
         * @return {?}
         */
        value: function format(date, locale, pattern) {
            return dateFormatter(pattern, date, locale);
        }
    }]);

    return DateFormatter;
}();

var /** @type {?} */ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a date according to locale rules.
 * \@howToUse `date_expression | date[:format]`
 * \@description
 *
 * Where:
 * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
 * (https://www.w3.org/TR/NOTE-datetime).
 * - `format` indicates which date/time components to include. The format can be predefined as
 *   shown below or custom as shown in the table.
 *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
 *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
 *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
 *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
 *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
 *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
 *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
 *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
 *
 *
 *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
 *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
 *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
 *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
 *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
 *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
 *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
 *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
 *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
 *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
 *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
 *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
 *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
 *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
 *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
 *
 * In javascript, only the components specified will be respected (not the ordering,
 * punctuations, ...) and details of the formatting will be dependent on the locale.
 *
 * Timezone of the formatted text will be the local system timezone of the end-user's machine.
 *
 * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
 * applied and the formatted text will have the same day, month and year of the expression.
 *
 * WARNINGS:
 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
 *   Instead users should treat the date as an immutable object and change the reference when the
 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
 *   which would be an expensive operation).
 * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
 *   browsers.
 *
 * ### Examples
 *
 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
 * in the _local_ time and locale is 'en-US':
 *
 * ```
 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
 * ```
 *
 * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
 *
 * \@stable
 */

var DatePipe = function () {
    /**
     * @param {?} _locale
     */
    function DatePipe(_locale) {
        _classCallCheck(this, DatePipe);

        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} pattern
     * @return {?}
     */


    _createClass(DatePipe, [{
        key: 'transform',
        value: function transform(value) {
            var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mediumDate';

            var /** @type {?} */date = void 0;
            if (isBlank$1(value) || value !== value) return null;
            if (typeof value === 'string') {
                value = value.trim();
            }
            if (isDate(value)) {
                date = value;
            } else if (NumberWrapper.isNumeric(value)) {
                date = new Date(parseFloat(value));
            } else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
                /**
                * For ISO Strings without time the day, month and year must be extracted from the ISO String
                * before Date creation to avoid time offset and errors in the new Date.
                * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
                * date, some browsers (e.g. IE 9) will throw an invalid Date error
                * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
                * is applied
                * Note: ISO months are 0 for January, 1 for February, ...
                */
                var _value$split$map = value.split('-').map(function (val) {
                    return parseInt(val, 10);
                }),
                    _value$split$map2 = _slicedToArray(_value$split$map, 3),
                    y = _value$split$map2[0],
                    m = _value$split$map2[1],
                    d = _value$split$map2[2];

                date = new Date(y, m - 1, d);
            } else {
                date = new Date(value);
            }
            if (!isDate(date)) {
                var /** @type {?} */match = void 0;
                if (typeof value === 'string' && (match = value.match(ISO8601_DATE_REGEX))) {
                    date = isoStringToDate(match);
                } else {
                    throw invalidPipeArgumentError(DatePipe, value);
                }
            }
            return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
        }
    }]);

    return DatePipe;
}();
/** @internal */


DatePipe._ALIASES = {
    'medium': 'yMMMdjms',
    'short': 'yMdjm',
    'fullDate': 'yMMMMEEEEd',
    'longDate': 'yMMMMd',
    'mediumDate': 'yMMMd',
    'shortDate': 'yMd',
    'mediumTime': 'jms',
    'shortTime': 'jm'
};
DatePipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'date', pure: true }] }];
/** @nocollapse */
DatePipe.ctorParameters = function () {
    return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"]] }] }];
};
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank$1(obj) {
    return obj == null || obj === '';
}
/**
 * @param {?} obj
 * @return {?}
 */
function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
}
/**
 * @param {?} match
 * @return {?}
 */
function isoStringToDate(match) {
    var /** @type {?} */date = new Date(0);
    var /** @type {?} */tzHour = 0;
    var /** @type {?} */tzMin = 0;
    var /** @type {?} */dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
    var /** @type {?} */timeSetter = match[8] ? date.setUTCHours : date.setHours;
    if (match[9]) {
        tzHour = toInt(match[9] + match[10]);
        tzMin = toInt(match[9] + match[11]);
    }
    dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
    var /** @type {?} */h = toInt(match[4] || '0') - tzHour;
    var /** @type {?} */m = toInt(match[5] || '0') - tzMin;
    var /** @type {?} */s = toInt(match[6] || '0');
    var /** @type {?} */ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
    timeSetter.call(date, h, m, s, ms);
    return date;
}
/**
 * @param {?} str
 * @return {?}
 */
function toInt(str) {
    return parseInt(str, 10);
}

var /** @type {?} */_INTERPOLATION_REGEXP = /#/g;
/**
 * \@ngModule CommonModule
 * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
 * \@howToUse `expression | i18nPlural:mapping`
 * \@description
 *
 *  Where:
 *  - `expression` is a number.
 *  - `mapping` is an object that mimics the ICU format, see
 *    http://userguide.icu-project.org/formatparse/messages
 *
 *  ## Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
 *
 * \@experimental
 */

var I18nPluralPipe = function () {
    /**
     * @param {?} _localization
     */
    function I18nPluralPipe(_localization) {
        _classCallCheck(this, I18nPluralPipe);

        this._localization = _localization;
    }
    /**
     * @param {?} value
     * @param {?} pluralMap
     * @return {?}
     */


    _createClass(I18nPluralPipe, [{
        key: 'transform',
        value: function transform(value, pluralMap) {
            if (value == null) return '';
            if ((typeof pluralMap === 'undefined' ? 'undefined' : _typeof(pluralMap)) !== 'object' || pluralMap === null) {
                throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
            }
            var /** @type {?} */key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
        }
    }]);

    return I18nPluralPipe;
}();

I18nPluralPipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'i18nPlural', pure: true }] }];
/** @nocollapse */
I18nPluralPipe.ctorParameters = function () {
    return [{ type: NgLocalization }];
};

/**
 * \@ngModule CommonModule
 * \@whatItDoes Generic selector that displays the string that matches the current value.
 * \@howToUse `expression | i18nSelect:mapping`
 * \@description
 *
 *  Where `mapping` is an object that indicates the text that should be displayed
 *  for different values of the provided `expression`.
 *  If none of the keys of the mapping match the value of the `expression`, then the content
 *  of the `other` key is returned when present, otherwise an empty string is returned.
 *
 *  ## Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
 *
 *  \@experimental
 */

var I18nSelectPipe = function () {
    function I18nSelectPipe() {
        _classCallCheck(this, I18nSelectPipe);
    }

    _createClass(I18nSelectPipe, [{
        key: 'transform',

        /**
         * @param {?} value
         * @param {?} mapping
         * @return {?}
         */
        value: function transform(value, mapping) {
            if (value == null) return '';
            if ((typeof mapping === 'undefined' ? 'undefined' : _typeof(mapping)) !== 'object' || typeof value !== 'string') {
                throw invalidPipeArgumentError(I18nSelectPipe, mapping);
            }
            if (mapping.hasOwnProperty(value)) {
                return mapping[value];
            }
            if (mapping.hasOwnProperty('other')) {
                return mapping['other'];
            }
            return '';
        }
    }]);

    return I18nSelectPipe;
}();

I18nSelectPipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'i18nSelect', pure: true }] }];
/** @nocollapse */
I18nSelectPipe.ctorParameters = function () {
    return [];
};

/**
 * \@ngModule CommonModule
 * \@whatItDoes Converts value into JSON string.
 * \@howToUse `expression | json`
 * \@description
 *
 * Converts value into string using `JSON.stringify`. Useful for debugging.
 *
 * ### Example
 * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
 *
 * \@stable
 */

var JsonPipe = function () {
    function JsonPipe() {
        _classCallCheck(this, JsonPipe);
    }

    _createClass(JsonPipe, [{
        key: 'transform',

        /**
         * @param {?} value
         * @return {?}
         */
        value: function transform(value) {
            return JSON.stringify(value, null, 2);
        }
    }]);

    return JsonPipe;
}();

JsonPipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'json', pure: false }] }];
/** @nocollapse */
JsonPipe.ctorParameters = function () {
    return [];
};

var /** @type {?} */_NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
/**
 * @param {?} pipe
 * @param {?} locale
 * @param {?} value
 * @param {?} style
 * @param {?} digits
 * @param {?=} currency
 * @param {?=} currencyAsSymbol
 * @return {?}
 */
function formatNumber(pipe, locale, value, style, digits) {
    var currency = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var currencyAsSymbol = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;

    if (value == null) return null;
    // Convert strings to numbers
    value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;
    if (typeof value !== 'number') {
        throw invalidPipeArgumentError(pipe, value);
    }
    var /** @type {?} */minInt = void 0;
    var /** @type {?} */minFraction = void 0;
    var /** @type {?} */maxFraction = void 0;
    if (style !== NumberFormatStyle.Currency) {
        // rely on Intl default for currency
        minInt = 1;
        minFraction = 0;
        maxFraction = 3;
    }
    if (digits) {
        var /** @type {?} */parts = digits.match(_NUMBER_FORMAT_REGEXP);
        if (parts === null) {
            throw new Error(digits + ' is not a valid digit info for number pipes');
        }
        if (parts[1] != null) {
            minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
        }
        if (parts[3] != null) {
            minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
        }
        if (parts[5] != null) {
            maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
        }
    }
    return NumberFormatter.format( /** @type {?} */value, locale, style, {
        minimumIntegerDigits: minInt,
        minimumFractionDigits: minFraction,
        maximumFractionDigits: maxFraction,
        currency: currency,
        currencyAsSymbol: currencyAsSymbol
    });
}
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number according to locale rules.
 * \@howToUse `number_expression | number[:digitInfo]`
 *
 * Formats a number as text. Group sizing and separator and other locale-specific
 * configurations are based on the active locale.
 *
 * where `expression` is a number:
 *  - `digitInfo` is a `string` which has a following format: <br>
 *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
 *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
 *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
 *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
 *
 * For more information on the acceptable range for each of these numbers and other
 * details see your native internationalization library.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
 *
 * \@stable
 */

var DecimalPipe = function () {
    /**
     * @param {?} _locale
     */
    function DecimalPipe(_locale) {
        _classCallCheck(this, DecimalPipe);

        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */


    _createClass(DecimalPipe, [{
        key: 'transform',
        value: function transform(value) {
            var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
        }
    }]);

    return DecimalPipe;
}();

DecimalPipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'number' }] }];
/** @nocollapse */
DecimalPipe.ctorParameters = function () {
    return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"]] }] }];
};
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as a percentage according to locale rules.
 * \@howToUse `number_expression | percent[:digitInfo]`
 *
 * \@description
 *
 * Formats a number as percentage.
 *
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
 *
 * \@stable
 */

var PercentPipe = function () {
    /**
     * @param {?} _locale
     */
    function PercentPipe(_locale) {
        _classCallCheck(this, PercentPipe);

        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */


    _createClass(PercentPipe, [{
        key: 'transform',
        value: function transform(value) {
            var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
        }
    }]);

    return PercentPipe;
}();

PercentPipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'percent' }] }];
/** @nocollapse */
PercentPipe.ctorParameters = function () {
    return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"]] }] }];
};
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as currency using locale rules.
 * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
 * \@description
 *
 * Use `currency` to format a number as currency.
 *
 * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
 *    as `USD` for the US dollar and `EUR` for the euro.
 * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
 *   - `true`: use symbol (e.g. `$`).
 *   - `false`(default): use code (e.g. `USD`).
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
 *
 * \@stable
 */

var CurrencyPipe = function () {
    /**
     * @param {?} _locale
     */
    function CurrencyPipe(_locale) {
        _classCallCheck(this, CurrencyPipe);

        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} currencyCode
     * @param {?=} symbolDisplay
     * @param {?=} digits
     * @return {?}
     */


    _createClass(CurrencyPipe, [{
        key: 'transform',
        value: function transform(value) {
            var currencyCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';
            var symbolDisplay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var digits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
        }
    }]);

    return CurrencyPipe;
}();

CurrencyPipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'currency' }] }];
/** @nocollapse */
CurrencyPipe.ctorParameters = function () {
    return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"]] }] }];
};

/**
 * \@ngModule CommonModule
 * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
 * \@howToUse `array_or_string_expression | slice:start[:end]`
 * \@description
 *
 * Where the input expression is a `List` or `String`, and:
 * - `start`: The starting index of the subset to return.
 *   - **a positive integer**: return the item at `start` index and all items after
 *     in the list or string expression.
 *   - **a negative integer**: return the item at `start` index from the end and all items after
 *     in the list or string expression.
 *   - **if positive and greater than the size of the expression**: return an empty list or string.
 *   - **if negative and greater than the size of the expression**: return entire list or string.
 * - `end`: The ending index of the subset to return.
 *   - **omitted**: return all items until the end.
 *   - **if positive**: return all items before `end` index of the list or string.
 *   - **if negative**: return all items before `end` index from the end of the list or string.
 *
 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
 * and `String.prototype.slice()`.
 *
 * When operating on a [List], the returned list is always a copy even when all
 * the elements are being returned.
 *
 * When operating on a blank value, the pipe returns the blank value.
 *
 * ## List Example
 *
 * This `ngFor` example:
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
 *
 * produces the following:
 *
 *     <li>b</li>
 *     <li>c</li>
 *
 * ## String Examples
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
 *
 * \@stable
 */

var SlicePipe = function () {
    function SlicePipe() {
        _classCallCheck(this, SlicePipe);
    }

    _createClass(SlicePipe, [{
        key: 'transform',

        /**
         * @param {?} value
         * @param {?} start
         * @param {?=} end
         * @return {?}
         */
        value: function transform(value, start, end) {
            if (value == null) return value;
            if (!this.supports(value)) {
                throw invalidPipeArgumentError(SlicePipe, value);
            }
            return value.slice(start, end);
        }
        /**
         * @param {?} obj
         * @return {?}
         */

    }, {
        key: 'supports',
        value: function supports(obj) {
            return typeof obj === 'string' || Array.isArray(obj);
        }
    }]);

    return SlicePipe;
}();

SlicePipe.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"], args: [{ name: 'slice', pure: false }] }];
/** @nocollapse */
SlicePipe.ctorParameters = function () {
    return [];
};

/**
 * A collection of Angular pipes that are likely to be used in each and every application.
 */
var /** @type {?} */COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe];

/**
 * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgForOf}, ...
 *
 * \@stable
 */

var CommonModule = function CommonModule() {
    _classCallCheck(this, CommonModule);
};

CommonModule.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
        exports: [COMMON_DIRECTIVES, COMMON_PIPES],
        providers: [{ provide: NgLocalization, useClass: NgLocaleLocalization }]
    }] }];
/** @nocollapse */
CommonModule.ctorParameters = function () {
    return [];
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var /** @type {?} */PLATFORM_BROWSER_ID = 'browser';
var /** @type {?} */PLATFORM_SERVER_ID = 'server';
var /** @type {?} */PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
var /** @type {?} */PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
/**
 * Returns whether a platform id represents a browser platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformBrowser(platformId) {
    return platformId === PLATFORM_BROWSER_ID;
}
/**
 * Returns whether a platform id represents a server platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformServer(platformId) {
    return platformId === PLATFORM_SERVER_ID;
}
/**
 * Returns whether a platform id represents a web worker app platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformWorkerApp(platformId) {
    return platformId === PLATFORM_WORKER_APP_ID;
}
/**
 * Returns whether a platform id represents a web worker UI platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformWorkerUi(platformId) {
    return platformId === PLATFORM_WORKER_UI_ID;
}

/**
 * @stable
 */
var /** @type {?} */VERSION = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Version"]('4.0.0-rc.2');



/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var toast_1 = __webpack_require__(17);
exports.Toast = toast_1.Toast;
var toast_manager_1 = __webpack_require__(16);
exports.ToastsManager = toast_manager_1.ToastsManager;
var toast_container_component_1 = __webpack_require__(11);
exports.ToastContainer = toast_container_component_1.ToastContainer;
var toast_options_1 = __webpack_require__(7);
exports.ToastOptions = toast_options_1.ToastOptions;
var toast_module_1 = __webpack_require__(31);
exports.ToastModule = toast_module_1.ToastModule;
//# sourceMappingURL=ng2-toastr.js.map

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var animations_1 = __webpack_require__(14);
var toast_options_1 = __webpack_require__(7);
var platform_browser_1 = __webpack_require__(6);
__webpack_require__(35);
var Subject_1 = __webpack_require__(4);
var ToastContainer = (function () {
    function ToastContainer(sanitizer, cdr, _zone, options) {
        this.sanitizer = sanitizer;
        this.cdr = cdr;
        this._zone = _zone;
        this.position = 'fixed';
        this.toasts = [];
        this._fresh = true;
        this._onEnter = new Subject_1.Subject();
        this._onExit = new Subject_1.Subject();
        Object.assign(this, options);
    }
    ToastContainer.prototype.onEnter = function () {
        return this._onEnter.asObservable();
    };
    ToastContainer.prototype.onExit = function () {
        return this._onExit.asObservable();
    };
    ToastContainer.prototype.addToast = function (toast) {
        if (this.positionClass.indexOf('top') > 0) {
            if (this.newestOnTop) {
                this.toasts.unshift(toast);
            }
            else {
                this.toasts.push(toast);
            }
            if (this.toasts.length > this.maxShown) {
                var diff = this.toasts.length - this.maxShown;
                if (this.newestOnTop) {
                    this.toasts.splice(this.maxShown);
                }
                else {
                    this.toasts.splice(0, diff);
                }
            }
        }
        else {
            this.toasts.unshift(toast);
            if (this.toasts.length > this.maxShown) {
                this.toasts.splice(this.maxShown);
            }
        }
        if (this.animate === null && this._fresh) {
            this._fresh = false;
            this._onEnter.next();
            this._onEnter.complete();
        }
        this.cdr.detectChanges();
    };
    ToastContainer.prototype.removeToast = function (toast) {
        if (toast.timeoutId) {
            clearTimeout(toast.timeoutId);
            toast.timeoutId = null;
        }
        this.toasts = this.toasts.filter(function (t) {
            return t.id !== toast.id;
        });
    };
    ToastContainer.prototype.removeAllToasts = function () {
        this.toasts = [];
    };
    ToastContainer.prototype.clicked = function (toast) {
        if (this.onToastClicked) {
            this.onToastClicked(toast);
        }
    };
    ToastContainer.prototype.anyToast = function () {
        return this.toasts.length > 0;
    };
    ToastContainer.prototype.findToast = function (toastId) {
        for (var _i = 0, _a = this.toasts; _i < _a.length; _i++) {
            var toast = _a[_i];
            if (toast.id === toastId) {
                return toast;
            }
        }
        return null;
    };
    ToastContainer.prototype.onAnimationEnd = function (event) {
        var _this = this;
        if (event.toState === 'void' && !this.anyToast()) {
            this._ngExit();
        }
        else if (this._fresh && event.fromState === 'void') {
            // notify when first animation is done
            this._fresh = false;
            this._zone.run(function () {
                _this._onEnter.next();
                _this._onEnter.complete();
            });
        }
    };
    ToastContainer.prototype._ngExit = function () {
        var _this = this;
        this._zone.onMicrotaskEmpty.first().subscribe(function () {
            _this._onExit.next();
            _this._onExit.complete();
        });
    };
    ToastContainer.prototype.ngOnDestroy = function () {
        this._ngExit();
    };
    return ToastContainer;
}());
ToastContainer.decorators = [
    { type: core_1.Component, args: [{
                selector: 'toast-container',
                template: "\n    <div #toastContainer id=\"toast-container\" [style.position]=\"position\" class=\"{{positionClass}}\">\n      <div *ngFor=\"let toast of toasts\" [@inOut]=\"animate\" (@inOut.done)=\"onAnimationEnd($event)\" class=\"toast toast-{{toast.type}}\" \n      (click)=\"clicked(toast)\">\n        <div class=\"toast-close-button\" *ngIf=\"toast.config.showCloseButton\" (click)=\"removeToast(toast)\">&times;\n        </div> \n        <div *ngIf=\"toast.title\" class=\"{{toast.config.titleClass || titleClass}}\">{{toast.title}}</div>\n        <div [ngSwitch]=\"toast.config.enableHTML\">\n          <span *ngSwitchCase=\"true\" [innerHTML]=\"sanitizer.bypassSecurityTrustHtml(toast.message)\"></span>\n          <span *ngSwitchDefault class=\"{{toast.config.messageClass || messageClass}}\">{{toast.message}}</span>\n        </div>             \n      </div>\n    </div>\n    ",
                animations: [
                    animations_1.trigger('inOut', [
                        animations_1.state('flyRight, flyLeft', animations_1.style({ opacity: 1, transform: 'translateX(0)' })),
                        animations_1.state('fade', animations_1.style({ opacity: 1 })),
                        animations_1.state('slideDown, slideUp', animations_1.style({ opacity: 1, transform: 'translateY(0)' })),
                        animations_1.transition('void => flyRight', [
                            animations_1.style({
                                opacity: 0,
                                transform: 'translateX(100%)'
                            }),
                            animations_1.animate('0.2s ease-in')
                        ]),
                        animations_1.transition('flyRight => void', [
                            animations_1.animate('0.2s 10 ease-out', animations_1.style({
                                opacity: 0,
                                transform: 'translateX(100%)'
                            }))
                        ]),
                        animations_1.transition('void => flyLeft', [
                            animations_1.style({
                                opacity: 0,
                                transform: 'translateX(-100%)'
                            }),
                            animations_1.animate('0.2s ease-in')
                        ]),
                        animations_1.transition('flyLeft => void', [
                            animations_1.animate('0.2s 10 ease-out', animations_1.style({
                                opacity: 0,
                                transform: 'translateX(-100%)'
                            }))
                        ]),
                        animations_1.transition('void => fade', [
                            animations_1.style({
                                opacity: 0,
                            }),
                            animations_1.animate('0.3s ease-in')
                        ]),
                        animations_1.transition('fade => void', [
                            animations_1.animate('0.3s 10 ease-out', animations_1.style({
                                opacity: 0,
                            }))
                        ]),
                        animations_1.transition('void => slideDown', [
                            animations_1.style({
                                opacity: 0,
                                transform: 'translateY(-200%)'
                            }),
                            animations_1.animate('0.3s ease-in')
                        ]),
                        animations_1.transition('slideDown => void', [
                            animations_1.animate('0.3s 10 ease-out', animations_1.style({
                                opacity: 0,
                                transform: 'translateY(-200%)'
                            }))
                        ]),
                        animations_1.transition('void => slideUp', [
                            animations_1.style({
                                opacity: 0,
                                transform: 'translateY(200%)'
                            }),
                            animations_1.animate('0.3s ease-in')
                        ]),
                        animations_1.transition('slideUp => void', [
                            animations_1.animate('0.3s 10 ease-out', animations_1.style({
                                opacity: 0,
                                transform: 'translateY(200%)'
                            }))
                        ]),
                    ]),
                ],
            },] },
];
/** @nocollapse */
ToastContainer.ctorParameters = function () { return [
    { type: platform_browser_1.DomSanitizer, },
    { type: core_1.ChangeDetectorRef, },
    { type: core_1.NgZone, },
    { type: toast_options_1.ToastOptions, },
]; };
exports.ToastContainer = ToastContainer;
//# sourceMappingURL=toast-container.component.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(5);
function getSymbolObservable(context) {
    var $$observable;
    var Symbol = context.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.observable) {
            $$observable = Symbol.observable;
        }
        else {
            $$observable = Symbol('observable');
            Symbol.observable = $$observable;
        }
    }
    else {
        $$observable = '@@observable';
    }
    return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.$$observable = getSymbolObservable(root_1.root);
//# sourceMappingURL=observable.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(5);
var Symbol = root_1.root.Symbol;
exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
    Symbol.for('rxSubscriber') : '@@rxSubscriber';
//# sourceMappingURL=rxSubscriber.js.map

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTO_STYLE", function() { return AUTO_STYLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return animate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "group", function() { return group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function() { return keyframes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function() { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "state", function() { return state; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "style", function() { return style; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return transition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trigger", function() { return trigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationPlayer", function() { return AnimationPlayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoopAnimationPlayer", function() { return NoopAnimationPlayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationGroupPlayer", function() { return AnimationGroupPlayer; });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license Angular v4.0.0-rc.2
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @experimental Animation support is experimental.
 */
var /** @type {?} */AUTO_STYLE = '*';
/**
 * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `trigger` Creates an animation trigger which will a list of {\@link state state} and {\@link
 * transition transition} entries that will be evaluated when the expression bound to the trigger
 * changes.
 *
 * Triggers are registered within the component annotation data under the {\@link
 * Component#animations-anchor animations section}. An animation trigger can be placed on an element
 * within a template by referencing the name of the trigger followed by the expression value that the
 * trigger is bound to (in the form of `[\@triggerName]="expression"`.
 *
 * ### Usage
 *
 * `trigger` will create an animation trigger reference based on the provided `name` value. The
 * provided `animation` value is expected to be an array consisting of {\@link state state} and {\@link
 * transition transition} declarations.
 *
 * ```typescript
 * \@Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * tools/gulp-tasks/validate-commit-message.js ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */
function trigger(name, definitions) {
  return { name: name, definitions: definitions };
}
/**
 * `animate` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `animate` specifies an animation step that will apply the provided `styles` data for a given
 * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
 * to be used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link
 * transition transition}.
 *
 * ### Usage
 *
 * The `animate` function accepts two input parameters: `timing` and `styles`:
 *
 * - `timing` is a string based value that can be a combination of a duration with optional delay
 * and easing values. The format for the expression breaks down to `duration delay easing`
 * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
 * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
 * `duration` value in millisecond form.
 * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
 * keyframes keyframes}. If left empty then the styles from the destination state will be collected
 * and used (this is useful when describing an animation step that will complete an animation by
 * {\@link transition#the-final-animate-call animating to the final state}).
 *
 * ```typescript
 * // various functions for specifying timing data
 * animate(500, style(...))
 * animate("1s", style(...))
 * animate("100ms 0.5s", style(...))
 * animate("5s ease", style(...))
 * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
 *
 * // either style() of keyframes() can be used
 * animate(500, style({ background: "red" }))
 * animate(500, keyframes([
 *   style({ background: "blue" })),
 *   style({ background: "red" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} timings
 * @param {?=} styles
 * @return {?}
 */
function animate(timings) {
  var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  return { type: 4 /* Animate */, styles: styles, timings: timings };
}
/**
 * `group` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
 * useful when a series of styles must be animated/closed off at different statrting/ending times.
 *
 * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
 * transition} and it will only continue to the next instruction once all of the inner animation
 * steps have completed.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `group` animation function can either consist of {\@link
 * style style} or {\@link animate animate} function calls. Each call to `style()` or `animate()`
 * within a group will be executed instantly (use {\@link keyframes keyframes} or a {\@link
 * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
 *
 * ```typescript
 * group([
 *   animate("1s", { background: "black" }))
 *   animate("2s", { color: "white" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */
function group(steps) {
  return { type: 3 /* Group */, steps: steps };
}
/**
 * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
 * default when an array is passed as animation data into {\@link transition transition}.)
 *
 * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
 * transition} and it will only continue to the next instruction once each of the inner animation
 * steps have completed.
 *
 * To perform animation styling in parallel with other animation steps then have a look at the
 * {\@link group group} animation function.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `sequence` animation function can either consist of
 * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
 * provided styling data immediately while a call to `animate()` will apply its styling data over a
 * given time depending on its timing data.
 *
 * ```typescript
 * sequence([
 *   style({ opacity: 0 })),
 *   animate("1s", { opacity: 1 }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */
function sequence(steps) {
  return { type: 2 /* Sequence */, steps: steps };
}
/**
 * `style` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `style` declares a key/value object containing CSS properties/styles that can then be used for
 * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
 * for both {\@link animate animate} and {\@link keyframes keyframes}.
 *
 * ### Usage
 *
 * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
 * to be defined.
 *
 * ```typescript
 * // string values are used for css properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical (pixel) values are also supported
 * style({ width: 100, height: 0 })
 * ```
 *
 * #### Auto-styles (using `*`)
 *
 * When an asterix (`*`) character is used as a value then it will be detected from the element
 * being animated and applied as animation data when the animation starts.
 *
 * This feature proves useful for a state depending on layout and/or environment factors; in such
 * cases the styles are calculated just before the animation starts.
 *
 * ```typescript
 * // the steps below will animate from 0 to the
 * // actual height of the element
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} tokens
 * @return {?}
 */
function style(tokens) {
  return { type: 6 /* Style */, styles: tokens };
}
/**
 * `state` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `state` declares an animation state within the given trigger. When a state is active within a
 * component then its associated styles will persist on the element that the trigger is attached to
 * (even when the animation ends).
 *
 * To animate between states, have a look at the animation {\@link transition transition} DSL
 * function. To register states to an animation trigger please have a look at the {\@link trigger
 * trigger} function.
 *
 * #### The `void` state
 *
 * The `void` state value is a reserved word that angular uses to determine when the element is not
 * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
 * associated element is void).
 *
 * #### The `*` (default) state
 *
 * The `*` state (when styled) is a fallback state that will be used if the state that is being
 * animated is not declared within the trigger.
 *
 * ### Usage
 *
 * `state` will declare an animation state with its associated styles
 * within the given trigger.
 *
 * - `stateNameExpr` can be one or more state names separated by commas.
 * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
 * the state has been reached.
 *
 * ```typescript
 * // "void" is a reserved name for a state and is used to represent
 * // the state in which an element is detached from from the application.
 * state("void", style({ height: 0 }))
 *
 * // user-defined states
 * state("closed", style({ height: 0 }))
 * state("open, visible", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} styles
 * @return {?}
 */
function state(name, styles) {
  return { type: 0 /* State */, name: name, styles: styles };
}
/**
 * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
 * by an `offset` value.
 *
 * ### Usage
 *
 * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
 * animation function. Instead of applying animations from where they are currently to their
 * destination, keyframes can describe how each style entry is applied and at what point within the
 * animation arc (much like CSS Keyframe Animations do).
 *
 * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
 * percentage of the animate time the styles will be applied.
 *
 * ```typescript
 * // the provided offset values describe when each backgroundColor value is applied.
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red", offset: 0 }),
 *   style({ backgroundColor: "blue", offset: 0.2 }),
 *   style({ backgroundColor: "orange", offset: 0.3 }),
 *   style({ backgroundColor: "black", offset: 1 })
 * ]))
 * ```
 *
 * Alternatively, if there are no `offset` values used within the style entries then the offsets
 * will be calculated automatically.
 *
 * ```typescript
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red" }) // offset = 0
 *   style({ backgroundColor: "blue" }) // offset = 0.33
 *   style({ backgroundColor: "orange" }) // offset = 0.66
 *   style({ backgroundColor: "black" }) // offset = 1
 * ]))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */
function keyframes(steps) {
  return { type: 5 /* KeyframeSequence */, steps: steps };
}
/**
 * `transition` is an animation-specific function that is designed to be used inside of Angular2's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations-anchor component animations metadata page} to gain a better understanding of
 * how animations in Angular2 are used.
 *
 * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
 * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
 * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
 * and/or ending state).
 *
 * A function can also be provided as the `stateChangeExpr` argument for a transition and this
 * function will be executed each time a state change occurs. If the value returned within the
 * function is true then the associated animation will be run.
 *
 * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
 * to animate to a state value and persist its styles then one or more {\@link state animation
 * states} is expected to be defined.
 *
 * ### Usage
 *
 * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
 * what the previous state is and what the current state has become. In other words, if a transition
 * is defined that matches the old/current state criteria then the associated animation will be
 * triggered.
 *
 * ```typescript
 * // all transition/state changes are defined within an animation trigger
 * trigger("myAnimationTrigger", [
 *   // if a state is defined then its styles will be persisted when the
 *   // animation has fully completed itself
 *   state("on", style({ background: "green" })),
 *   state("off", style({ background: "grey" })),
 *
 *   // a transition animation that will be kicked off when the state value
 *   // bound to "myAnimationTrigger" changes from "on" to "off"
 *   transition("on => off", animate(500)),
 *
 *   // it is also possible to do run the same animation for both directions
 *   transition("on <=> off", animate(500)),
 *
 *   // or to define multiple states pairs separated by commas
 *   transition("on => off, off => void", animate(500)),
 *
 *   // this is a catch-all state change for when an element is inserted into
 *   // the page and the destination state is unknown
 *   transition("void => *", [
 *     style({ opacity: 0 }),
 *     animate(500)
 *   ]),
 *
 *   // this will capture a state change between any states
 *   transition("* => *", animate("1s 0s")),
 *
 *   // you can also go full out and include a function
 *   transition((fromState, toState) => {
 *     // when `true` then it will allow the animation below to be invoked
 *     return fromState == "off" && toState == "on";
 *   }, animate("1s 0s"))
 * ])
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * #### The final `animate` call
 *
 * If the final step within the transition steps is a call to `animate()` that **only** uses a
 * timing value with **no style data** then it will be automatically used as the final animation arc
 * for the element to animate itself to the final state. This involves an automatic mix of
 * adding/removing CSS styles so that the element will be in the exact state it should be for the
 * applied state to be presented correctly.
 *
 * ```
 * // start off by hiding the element, but make sure that it animates properly to whatever state
 * // is currently active for "myAnimationTrigger"
 * transition("void => *", [
 *   style({ opacity: 0 }),
 *   animate(500)
 * ])
 * ```
 *
 * ### Transition Aliases (`:enter` and `:leave`)
 *
 * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
 * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
 * => void` state changes.
 *
 * ```
 * transition(":enter", [
 *   style({ opacity: 0 }),
 *   animate(500, style({ opacity: 1 }))
 * ])
 * transition(":leave", [
 *   animate(500, style({ opacity: 0 }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @return {?}
 */
function transition(stateChangeExpr, steps) {
  return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps };
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @param {?} cb
 * @return {?}
 */
function scheduleMicroTask(cb) {
  Promise.resolve(null).then(cb);
}

/**
 * \@experimental Animation support is experimental.
 * @abstract
 */

var AnimationPlayer = function () {
  function AnimationPlayer() {
    _classCallCheck(this, AnimationPlayer);
  }

  _createClass(AnimationPlayer, [{
    key: 'onDone',

    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    value: function onDone(fn) {}
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onStart',
    value: function onStart(fn) {}
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onDestroy',
    value: function onDestroy(fn) {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'init',
    value: function init() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'hasStarted',
    value: function hasStarted() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'play',
    value: function play() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'pause',
    value: function pause() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'restart',
    value: function restart() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'finish',
    value: function finish() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'destroy',
    value: function destroy() {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'reset',
    value: function reset() {}
    /**
     * @abstract
     * @param {?} p
     * @return {?}
     */

  }, {
    key: 'setPosition',
    value: function setPosition(p) {}
    /**
     * @abstract
     * @return {?}
     */

  }, {
    key: 'getPosition',
    value: function getPosition() {}
    /**
     * @return {?}
     */

  }, {
    key: 'parentPlayer',
    get: function get() {
      throw new Error('NOT IMPLEMENTED: Base Class');
    }
    /**
     * @param {?} player
     * @return {?}
     */
    ,
    set: function set(player) {
      throw new Error('NOT IMPLEMENTED: Base Class');
    }
  }]);

  return AnimationPlayer;
}();
/**
 * \@experimental Animation support is experimental.
 */


var NoopAnimationPlayer = function () {
  function NoopAnimationPlayer() {
    var _this = this;

    _classCallCheck(this, NoopAnimationPlayer);

    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._started = false;
    this._destroyed = false;
    this._finished = false;
    this.parentPlayer = null;
    scheduleMicroTask(function () {
      return _this._onFinish();
    });
  }
  /**
   * @return {?}
   */


  _createClass(NoopAnimationPlayer, [{
    key: '_onFinish',
    value: function _onFinish() {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function (fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    }
    /**
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onStart',
    value: function onStart(fn) {
      this._onStartFns.push(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onDone',
    value: function onDone(fn) {
      this._onDoneFns.push(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onDestroy',
    value: function onDestroy(fn) {
      this._onDestroyFns.push(fn);
    }
    /**
     * @return {?}
     */

  }, {
    key: 'hasStarted',
    value: function hasStarted() {
      return this._started;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'init',
    value: function init() {}
    /**
     * @return {?}
     */

  }, {
    key: 'play',
    value: function play() {
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function (fn) {
          return fn();
        });
        this._onStartFns = [];
      }
      this._started = true;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'pause',
    value: function pause() {}
    /**
     * @return {?}
     */

  }, {
    key: 'restart',
    value: function restart() {}
    /**
     * @return {?}
     */

  }, {
    key: 'finish',
    value: function finish() {
      this._onFinish();
    }
    /**
     * @return {?}
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      if (!this._destroyed) {
        this._destroyed = true;
        this.finish();
        this._onDestroyFns.forEach(function (fn) {
          return fn();
        });
        this._onDestroyFns = [];
      }
    }
    /**
     * @return {?}
     */

  }, {
    key: 'reset',
    value: function reset() {}
    /**
     * @param {?} p
     * @return {?}
     */

  }, {
    key: 'setPosition',
    value: function setPosition(p) {}
    /**
     * @return {?}
     */

  }, {
    key: 'getPosition',
    value: function getPosition() {
      return 0;
    }
  }]);

  return NoopAnimationPlayer;
}();

var AnimationGroupPlayer = function () {
  /**
   * @param {?} _players
   */
  function AnimationGroupPlayer(_players) {
    var _this2 = this;

    _classCallCheck(this, AnimationGroupPlayer);

    this._players = _players;
    this._onDoneFns = [];
    this._onStartFns = [];
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    this._onDestroyFns = [];
    this.parentPlayer = null;
    var count = 0;
    var total = this._players.length;
    if (total == 0) {
      scheduleMicroTask(function () {
        return _this2._onFinish();
      });
    } else {
      this._players.forEach(function (player) {
        player.parentPlayer = _this2;
        player.onDone(function () {
          if (++count >= total) {
            _this2._onFinish();
          }
        });
      });
    }
  }
  /**
   * @return {?}
   */


  _createClass(AnimationGroupPlayer, [{
    key: '_onFinish',
    value: function _onFinish() {
      if (!this._finished) {
        this._finished = true;
        this._onDoneFns.forEach(function (fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    }
    /**
     * @return {?}
     */

  }, {
    key: 'init',
    value: function init() {
      this._players.forEach(function (player) {
        return player.init();
      });
    }
    /**
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onStart',
    value: function onStart(fn) {
      this._onStartFns.push(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onDone',
    value: function onDone(fn) {
      this._onDoneFns.push(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */

  }, {
    key: 'onDestroy',
    value: function onDestroy(fn) {
      this._onDestroyFns.push(fn);
    }
    /**
     * @return {?}
     */

  }, {
    key: 'hasStarted',
    value: function hasStarted() {
      return this._started;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'play',
    value: function play() {
      if (!this.parentPlayer) {
        this.init();
      }
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function (fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._players.forEach(function (player) {
        return player.play();
      });
    }
    /**
     * @return {?}
     */

  }, {
    key: 'pause',
    value: function pause() {
      this._players.forEach(function (player) {
        return player.pause();
      });
    }
    /**
     * @return {?}
     */

  }, {
    key: 'restart',
    value: function restart() {
      this._players.forEach(function (player) {
        return player.restart();
      });
    }
    /**
     * @return {?}
     */

  }, {
    key: 'finish',
    value: function finish() {
      this._onFinish();
      this._players.forEach(function (player) {
        return player.finish();
      });
    }
    /**
     * @return {?}
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      if (!this._destroyed) {
        this._onFinish();
        this._players.forEach(function (player) {
          return player.destroy();
        });
        this._destroyed = true;
        this._onDestroyFns.forEach(function (fn) {
          return fn();
        });
        this._onDestroyFns = [];
      }
    }
    /**
     * @return {?}
     */

  }, {
    key: 'reset',
    value: function reset() {
      this._players.forEach(function (player) {
        return player.reset();
      });
      this._destroyed = false;
      this._finished = false;
      this._started = false;
    }
    /**
     * @param {?} p
     * @return {?}
     */

  }, {
    key: 'setPosition',
    value: function setPosition(p) {
      this._players.forEach(function (player) {
        player.setPosition(p);
      });
    }
    /**
     * @return {?}
     */

  }, {
    key: 'getPosition',
    value: function getPosition() {
      var /** @type {?} */min = 0;
      this._players.forEach(function (player) {
        var /** @type {?} */p = player.getPosition();
        min = Math.min(p, min);
      });
      return min;
    }
    /**
     * @return {?}
     */

  }, {
    key: 'players',
    get: function get() {
      return this._players;
    }
  }]);

  return AnimationGroupPlayer;
}();




/***/ }),
/* 15 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 15;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var toast_container_component_1 = __webpack_require__(11);
var toast_options_1 = __webpack_require__(7);
var toast_1 = __webpack_require__(17);
var Subject_1 = __webpack_require__(4);
var ToastsManager = (function () {
    function ToastsManager(componentFactoryResolver, appRef, options) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.options = options;
        this.index = 0;
        this.toastClicked = new Subject_1.Subject();
    }
    ToastsManager.prototype.setRootViewContainerRef = function (vRef) {
        this._rootViewContainerRef = vRef;
    };
    ToastsManager.prototype.onClickToast = function () {
        return this.toastClicked.asObservable();
    };
    ToastsManager.prototype.show = function (toast, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!_this.container) {
                // get app root view component ref
                if (!_this._rootViewContainerRef) {
                    try {
                        _this._rootViewContainerRef = _this.appRef['_rootComponents'][0]['_hostElement'].vcRef;
                    }
                    catch (e) {
                        reject(new Error('Please set root ViewContainerRef using setRootViewContainerRef(vRef: ViewContainerRef) method.'));
                    }
                }
                // get options providers
                var providers = core_1.ReflectiveInjector.resolve([
                    { provide: toast_options_1.ToastOptions, useValue: _this.options }
                ]);
                // create and load ToastContainer
                var toastFactory = _this.componentFactoryResolver.resolveComponentFactory(toast_container_component_1.ToastContainer);
                var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(providers, _this._rootViewContainerRef.parentInjector);
                _this.container = _this._rootViewContainerRef.createComponent(toastFactory, _this._rootViewContainerRef.length, childInjector);
                _this.container.instance.onToastClicked = function (toast) {
                    _this._onToastClicked(toast);
                };
                _this.container.instance.onExit().subscribe(function () {
                    _this.dispose();
                });
            }
            resolve(_this.setupToast(toast, options));
        });
    };
    ToastsManager.prototype.createTimeout = function (toast) {
        var _this = this;
        var task = setTimeout(function () {
            _this.clearToast(toast);
        }, toast.config.toastLife);
        return task.toString();
    };
    ToastsManager.prototype.setupToast = function (toast, options) {
        toast.id = ++this.index;
        if (options && options.hasOwnProperty('toastLife')) {
            options.dismiss = 'auto';
        }
        var customConfig = Object.assign({}, this.options, options || {});
        Object.keys(toast.config).forEach(function (k) {
            if (customConfig.hasOwnProperty(k)) {
                toast.config[k] = customConfig[k];
            }
        });
        if (toast.config.dismiss === 'auto') {
            toast.timeoutId = this.createTimeout(toast);
        }
        this.container.instance.addToast(toast);
        return toast;
    };
    ToastsManager.prototype._onToastClicked = function (toast) {
        this.toastClicked.next(toast);
        if (toast.config.dismiss === 'click') {
            this.clearToast(toast);
        }
    };
    ToastsManager.prototype.dismissToast = function (toast) {
        this.clearToast(toast);
    };
    ToastsManager.prototype.clearToast = function (toast) {
        if (this.container) {
            var instance = this.container.instance;
            instance.removeToast(toast);
        }
    };
    ToastsManager.prototype.clearAllToasts = function () {
        if (this.container) {
            var instance = this.container.instance;
            instance.removeAllToasts();
            this.dispose();
        }
    };
    ToastsManager.prototype.dispose = function () {
        this.container.destroy();
        this.container = null;
    };
    ToastsManager.prototype.error = function (message, title, options) {
        var data = options && options.data ? options.data : null;
        var toast = new toast_1.Toast('error', message, title, data);
        return this.show(toast, options);
    };
    ToastsManager.prototype.info = function (message, title, options) {
        var data = options && options.data ? options.data : null;
        var toast = new toast_1.Toast('info', message, title, data);
        return this.show(toast, options);
    };
    ToastsManager.prototype.success = function (message, title, options) {
        var data = options && options.data ? options.data : null;
        var toast = new toast_1.Toast('success', message, title, data);
        return this.show(toast, options);
    };
    ToastsManager.prototype.warning = function (message, title, options) {
        var data = options && options.data ? options.data : null;
        var toast = new toast_1.Toast('warning', message, title, data);
        return this.show(toast, options);
    };
    // allow user define custom background color and image
    ToastsManager.prototype.custom = function (message, title, options) {
        var data = options && options.data ? options.data : null;
        var toast = new toast_1.Toast('custom', message, title, data);
        return this.show(toast, options);
    };
    return ToastsManager;
}());
ToastsManager.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
ToastsManager.ctorParameters = function () { return [
    { type: core_1.ComponentFactoryResolver, },
    { type: core_1.ApplicationRef, },
    { type: toast_options_1.ToastOptions, },
]; };
exports.ToastsManager = ToastsManager;
//# sourceMappingURL=toast-manager.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Toast = (function () {
    function Toast(type, message, title, data) {
        this.type = type;
        this.message = message;
        this.title = title;
        this.data = data;
        this.config = {
            dismiss: 'auto',
            enableHTML: false,
            titleClass: '',
            messageClass: '',
            toastLife: 3000,
            showCloseButton: false,
        };
    }
    return Toast;
}());
exports.Toast = Toast;
//# sourceMappingURL=toast.js.map

/***/ }),
/* 18 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.empty = {
    closed: true,
    next: function (value) { },
    error: function (err) { throw err; },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// typeof any so that it we don't have to cast when comparing a result to the error object
exports.errorObject = { e: {} };
//# sourceMappingURL=errorObject.js.map

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isFunction(x) {
    return typeof x === 'function';
}
exports.isFunction = isFunction;
//# sourceMappingURL=isFunction.js.map

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isObject(x) {
    return x != null && typeof x === 'object';
}
exports.isObject = isObject;
//# sourceMappingURL=isObject.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
exports.isScheduler = isScheduler;
//# sourceMappingURL=isScheduler.js.map

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_compiler__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_common__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__ = __webpack_require__(6);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESOURCE_CACHE_PROVIDER", function() { return RESOURCE_CACHE_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "platformBrowserDynamic", function() { return platformBrowserDynamic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS", function() { return INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵResourceLoaderImpl", function() { return ResourceLoaderImpl; });
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @license Angular v4.0.0-rc.2
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */





var ResourceLoaderImpl = function (_ResourceLoader) {
    _inherits(ResourceLoaderImpl, _ResourceLoader);

    function ResourceLoaderImpl() {
        _classCallCheck(this, ResourceLoaderImpl);

        return _possibleConstructorReturn(this, (ResourceLoaderImpl.__proto__ || Object.getPrototypeOf(ResourceLoaderImpl)).apply(this, arguments));
    }

    _createClass(ResourceLoaderImpl, [{
        key: 'get',
        value: function get(url) {
            var resolve = void 0;
            var reject = void 0;
            var promise = new Promise(function (res, rej) {
                resolve = res;
                reject = rej;
            });
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.responseType = 'text';
            xhr.onload = function () {
                // responseText is the old-school way of retrieving response (supported by IE8 & 9)
                // response/responseType properties were introduced in ResourceLoader Level2 spec (supported
                // by IE10)
                var response = xhr.response || xhr.responseText;
                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                var status = xhr.status === 1223 ? 204 : xhr.status;
                // fix status code when it is 0 (0 status is undocumented).
                // Occurs when accessing file resources or on Android 4.1 stock browser
                // while retrieving files from application cache.
                if (status === 0) {
                    status = response ? 200 : 0;
                }
                if (200 <= status && status <= 300) {
                    resolve(response);
                } else {
                    reject('Failed to load ' + url);
                }
            };
            xhr.onerror = function () {
                reject('Failed to load ' + url);
            };
            xhr.send();
            return promise;
        }
    }]);

    return ResourceLoaderImpl;
}(__WEBPACK_IMPORTED_MODULE_0__angular_compiler__["a" /* ResourceLoader */]);

ResourceLoaderImpl.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["Injectable"] }];
/** @nocollapse */
ResourceLoaderImpl.ctorParameters = function () {
    return [];
};

var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [__WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__["ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS"], {
    provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["COMPILER_OPTIONS"],
    useValue: { providers: [{ provide: __WEBPACK_IMPORTED_MODULE_0__angular_compiler__["a" /* ResourceLoader */], useClass: ResourceLoaderImpl }] },
    multi: true
}, { provide: __WEBPACK_IMPORTED_MODULE_1__angular_core__["PLATFORM_ID"], useValue: __WEBPACK_IMPORTED_MODULE_2__angular_common__["ɵPLATFORM_BROWSER_ID"] }];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var globalScope = void 0;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
        globalScope = self;
    } else {
        globalScope = global;
    }
} else {
    globalScope = window;
}
// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var _global = globalScope;
// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global.assert = function assert(condition) {
    // TODO: to be fixed properly via #2830, noop for now
};

/**
 * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
 * ResourceLoader.
 *
 * The template cache needs to be built and loaded into window.$templateCache
 * via a separate mechanism.
 */

var CachedResourceLoader = function (_ResourceLoader2) {
    _inherits(CachedResourceLoader, _ResourceLoader2);

    function CachedResourceLoader() {
        _classCallCheck(this, CachedResourceLoader);

        var _this2 = _possibleConstructorReturn(this, (CachedResourceLoader.__proto__ || Object.getPrototypeOf(CachedResourceLoader)).call(this));

        _this2._cache = _global.$templateCache;
        if (_this2._cache == null) {
            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
        }
        return _this2;
    }

    _createClass(CachedResourceLoader, [{
        key: 'get',
        value: function get(url) {
            if (this._cache.hasOwnProperty(url)) {
                return Promise.resolve(this._cache[url]);
            } else {
                return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
            }
        }
    }]);

    return CachedResourceLoader;
}(__WEBPACK_IMPORTED_MODULE_0__angular_compiler__["a" /* ResourceLoader */]);

/**
 * @stable
 */


var VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__["Version"]('4.0.0-rc.2');

/**
 * @experimental
 */
var RESOURCE_CACHE_PROVIDER = [{ provide: __WEBPACK_IMPORTED_MODULE_0__angular_compiler__["a" /* ResourceLoader */], useClass: CachedResourceLoader }];
/**
 * @stable
 */
var platformBrowserDynamic = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["createPlatformFactory"])(__WEBPACK_IMPORTED_MODULE_0__angular_compiler__["b" /* platformCoreDynamic */], 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);



/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    // feature test for Symbol support
    var supportsSymbol = typeof Symbol === "function";
    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
    var HashMap;
    (function (HashMap) {
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
        HashMap.create = supportsCreate
            ? function () { return MakeDictionary(Object.create(null)); }
            : supportsProto
                ? function () { return MakeDictionary({ __proto__: null }); }
                : function () { return MakeDictionary({}); };
        HashMap.has = downLevel
            ? function (map, key) { return hasOwn.call(map, key); }
            : function (map, key) { return key in map; };
        HashMap.get = downLevel
            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
            : function (map, key) { return map[key]; };
    })(HashMap || (HashMap = {}));
    // Load global or shim versions of Map, Set, and WeakMap
    var functionPrototype = Object.getPrototypeOf(Function);
    var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
    var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
    var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
    var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
    // [[Metadata]] internal slot
    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
    var Metadata = new _WeakMap();
    /**
      * Applies a set of decorators to a property of a target object.
      * @param decorators An array of decorators.
      * @param target The target object.
      * @param propertyKey (Optional) The property key to decorate.
      * @param attributes (Optional) The property descriptor for the target key.
      * @remarks Decorators are applied in reverse order.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Example = Reflect.decorate(decoratorsArray, Example);
      *
      *     // property (on constructor)
      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Object.defineProperty(Example, "staticMethod",
      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
      *
      *     // method (on prototype)
      *     Object.defineProperty(Example.prototype, "method",
      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
      *
      */
    function decorate(decorators, target, propertyKey, attributes) {
        if (!IsUndefined(propertyKey)) {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsObject(target))
                throw new TypeError();
            if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                throw new TypeError();
            if (IsNull(attributes))
                attributes = undefined;
            propertyKey = ToPropertyKey(propertyKey);
            return DecorateProperty(decorators, target, propertyKey, attributes);
        }
        else {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsConstructor(target))
                throw new TypeError();
            return DecorateConstructor(decorators, target);
        }
    }
    Reflect.decorate = decorate;
    // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
    /**
      * A default metadata decorator factory that can be used on a class, class member, or parameter.
      * @param metadataKey The key for the metadata entry.
      * @param metadataValue The value for the metadata entry.
      * @returns A decorator function.
      * @remarks
      * If `metadataKey` is already defined for the target and target key, the
      * metadataValue for that key will be overwritten.
      * @example
      *
      *     // constructor
      *     @Reflect.metadata(key, value)
      *     class Example {
      *     }
      *
      *     // property (on constructor, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticProperty;
      *     }
      *
      *     // property (on prototype, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         property;
      *     }
      *
      *     // method (on constructor)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticMethod() { }
      *     }
      *
      *     // method (on prototype)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         method() { }
      *     }
      *
      */
    function metadata(metadataKey, metadataValue) {
        function decorator(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                throw new TypeError();
            OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        return decorator;
    }
    Reflect.metadata = metadata;
    /**
      * Define a unique metadata entry on the target.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param metadataValue A value that contains attached metadata.
      * @param target The target object on which to define metadata.
      * @param propertyKey (Optional) The property key for the target.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Reflect.defineMetadata("custom:annotation", options, Example);
      *
      *     // property (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
      *
      *     // method (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
      *
      *     // decorator factory as metadata-producing annotation.
      *     function MyAnnotation(options): Decorator {
      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
      *     }
      *
      */
    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
    }
    Reflect.defineMetadata = defineMetadata;
    /**
      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
    }
    Reflect.hasMetadata = hasMetadata;
    /**
      * Gets a value indicating whether the target object has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
    }
    Reflect.hasOwnMetadata = hasOwnMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
    }
    Reflect.getMetadata = getMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
    }
    Reflect.getOwnMetadata = getOwnMetadata;
    /**
      * Gets the metadata keys defined on the target object or its prototype chain.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
      *
      */
    function getMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryMetadataKeys(target, propertyKey);
    }
    Reflect.getMetadataKeys = getMetadataKeys;
    /**
      * Gets the unique metadata keys defined on the target object.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
      *
      */
    function getOwnMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryOwnMetadataKeys(target, propertyKey);
    }
    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
    /**
      * Deletes the metadata entry from the target object with the provided key.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.deleteMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function deleteMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        if (!metadataMap.delete(metadataKey))
            return false;
        if (metadataMap.size > 0)
            return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(propertyKey);
        if (targetMetadata.size > 0)
            return true;
        Metadata.delete(target);
        return true;
    }
    Reflect.deleteMetadata = deleteMetadata;
    function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsConstructor(decorated))
                    throw new TypeError();
                target = decorated;
            }
        }
        return target;
    }
    function DecorateProperty(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target, propertyKey, descriptor);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsObject(decorated))
                    throw new TypeError();
                descriptor = decorated;
            }
        }
        return descriptor;
    }
    function GetOrCreateMetadataMap(O, P, Create) {
        var targetMetadata = Metadata.get(O);
        if (IsUndefined(targetMetadata)) {
            if (!Create)
                return undefined;
            targetMetadata = new _Map();
            Metadata.set(O, targetMetadata);
        }
        var metadataMap = targetMetadata.get(P);
        if (IsUndefined(metadataMap)) {
            if (!Create)
                return undefined;
            metadataMap = new _Map();
            targetMetadata.set(P, metadataMap);
        }
        return metadataMap;
    }
    // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
    function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return true;
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryHasMetadata(MetadataKey, parent, P);
        return false;
    }
    // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        return ToBoolean(metadataMap.has(MetadataKey));
    }
    // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
    function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryGetMetadata(MetadataKey, parent, P);
        return undefined;
    }
    // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return undefined;
        return metadataMap.get(MetadataKey);
    }
    // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
        metadataMap.set(MetadataKey, MetadataValue);
    }
    // 3.1.6.1 OrdinaryMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
    function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (parent === null)
            return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
            return ownKeys;
        if (ownKeys.length <= 0)
            return parentKeys;
        var set = new _Set();
        var keys = [];
        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
            var key = ownKeys_1[_i];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
            var key = parentKeys_1[_a];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        return keys;
    }
    // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
    function OrdinaryOwnMetadataKeys(O, P) {
        var keys = [];
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return keys;
        var keysObj = metadataMap.keys();
        var iterator = GetIterator(keysObj);
        var k = 0;
        while (true) {
            var next = IteratorStep(iterator);
            if (!next) {
                keys.length = k;
                return keys;
            }
            var nextValue = IteratorValue(next);
            try {
                keys[k] = nextValue;
            }
            catch (e) {
                try {
                    IteratorClose(iterator);
                }
                finally {
                    throw e;
                }
            }
            k++;
        }
    }
    // 6 ECMAScript Data Typ0es and Values
    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
    function Type(x) {
        if (x === null)
            return 1 /* Null */;
        switch (typeof x) {
            case "undefined": return 0 /* Undefined */;
            case "boolean": return 2 /* Boolean */;
            case "string": return 3 /* String */;
            case "symbol": return 4 /* Symbol */;
            case "number": return 5 /* Number */;
            case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
            default: return 6 /* Object */;
        }
    }
    // 6.1.1 The Undefined Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
    function IsUndefined(x) {
        return x === undefined;
    }
    // 6.1.2 The Null Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
    function IsNull(x) {
        return x === null;
    }
    // 6.1.5 The Symbol Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
    function IsSymbol(x) {
        return typeof x === "symbol";
    }
    // 6.1.7 The Object Type
    // https://tc39.github.io/ecma262/#sec-object-type
    function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
    }
    // 7.1 Type Conversion
    // https://tc39.github.io/ecma262/#sec-type-conversion
    // 7.1.1 ToPrimitive(input [, PreferredType])
    // https://tc39.github.io/ecma262/#sec-toprimitive
    function ToPrimitive(input, PreferredType) {
        switch (Type(input)) {
            case 0 /* Undefined */: return input;
            case 1 /* Null */: return input;
            case 2 /* Boolean */: return input;
            case 3 /* String */: return input;
            case 4 /* Symbol */: return input;
            case 5 /* Number */: return input;
        }
        var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
        if (exoticToPrim !== undefined) {
            var result = exoticToPrim.call(input, hint);
            if (IsObject(result))
                throw new TypeError();
            return result;
        }
        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
    }
    // 7.1.1.1 OrdinaryToPrimitive(O, hint)
    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
    function OrdinaryToPrimitive(O, hint) {
        if (hint === "string") {
            var toString_1 = O.toString;
            if (IsCallable(toString_1)) {
                var result = toString_1.call(O);
                if (!IsObject(result))
                    return result;
            }
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        else {
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
            var toString_2 = O.toString;
            if (IsCallable(toString_2)) {
                var result = toString_2.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        throw new TypeError();
    }
    // 7.1.2 ToBoolean(argument)
    // https://tc39.github.io/ecma262/2016/#sec-toboolean
    function ToBoolean(argument) {
        return !!argument;
    }
    // 7.1.12 ToString(argument)
    // https://tc39.github.io/ecma262/#sec-tostring
    function ToString(argument) {
        return "" + argument;
    }
    // 7.1.14 ToPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-topropertykey
    function ToPropertyKey(argument) {
        var key = ToPrimitive(argument, 3 /* String */);
        if (IsSymbol(key))
            return key;
        return ToString(key);
    }
    // 7.2 Testing and Comparison Operations
    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
    // 7.2.2 IsArray(argument)
    // https://tc39.github.io/ecma262/#sec-isarray
    function IsArray(argument) {
        return Array.isArray
            ? Array.isArray(argument)
            : argument instanceof Object
                ? argument instanceof Array
                : Object.prototype.toString.call(argument) === "[object Array]";
    }
    // 7.2.3 IsCallable(argument)
    // https://tc39.github.io/ecma262/#sec-iscallable
    function IsCallable(argument) {
        // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
        return typeof argument === "function";
    }
    // 7.2.4 IsConstructor(argument)
    // https://tc39.github.io/ecma262/#sec-isconstructor
    function IsConstructor(argument) {
        // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
        return typeof argument === "function";
    }
    // 7.2.7 IsPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-ispropertykey
    function IsPropertyKey(argument) {
        switch (Type(argument)) {
            case 3 /* String */: return true;
            case 4 /* Symbol */: return true;
            default: return false;
        }
    }
    // 7.3 Operations on Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-objects
    // 7.3.9 GetMethod(V, P)
    // https://tc39.github.io/ecma262/#sec-getmethod
    function GetMethod(V, P) {
        var func = V[P];
        if (func === undefined || func === null)
            return undefined;
        if (!IsCallable(func))
            throw new TypeError();
        return func;
    }
    // 7.4 Operations on Iterator Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
    function GetIterator(obj) {
        var method = GetMethod(obj, iteratorSymbol);
        if (!IsCallable(method))
            throw new TypeError(); // from Call
        var iterator = method.call(obj);
        if (!IsObject(iterator))
            throw new TypeError();
        return iterator;
    }
    // 7.4.4 IteratorValue(iterResult)
    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
    function IteratorValue(iterResult) {
        return iterResult.value;
    }
    // 7.4.5 IteratorStep(iterator)
    // https://tc39.github.io/ecma262/#sec-iteratorstep
    function IteratorStep(iterator) {
        var result = iterator.next();
        return result.done ? false : result;
    }
    // 7.4.6 IteratorClose(iterator, completion)
    // https://tc39.github.io/ecma262/#sec-iteratorclose
    function IteratorClose(iterator) {
        var f = iterator["return"];
        if (f)
            f.call(iterator);
    }
    // 9.1 Ordinary Object Internal Methods and Internal Slots
    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
    // 9.1.1.1 OrdinaryGetPrototypeOf(O)
    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
    function OrdinaryGetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
            return proto;
        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
        // Try to determine the superclass constructor. Compatible implementations
        // must either set __proto__ on a subclass constructor to the superclass constructor,
        // or ensure each class has a valid `constructor` property on its prototype that
        // points back to the constructor.
        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
        // This is the case when in ES6 or when using __proto__ in a compatible browser.
        if (proto !== functionPrototype)
            return proto;
        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
        var prototype = O.prototype;
        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
        if (prototypeProto == null || prototypeProto === Object.prototype)
            return proto;
        // If the constructor was not a function, then we cannot determine the heritage.
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
            return proto;
        // If we have some kind of self-reference, then we cannot determine the heritage.
        if (constructor === O)
            return proto;
        // we have a pretty good guess at the heritage.
        return constructor;
    }
    // naive Map shim
    function CreateMapPolyfill() {
        var cacheSentinel = {};
        var arraySentinel = [];
        var MapIterator = (function () {
            function MapIterator(keys, values, selector) {
                this._index = 0;
                this._keys = keys;
                this._values = values;
                this._selector = selector;
            }
            MapIterator.prototype["@@iterator"] = function () { return this; };
            MapIterator.prototype[iteratorSymbol] = function () { return this; };
            MapIterator.prototype.next = function () {
                var index = this._index;
                if (index >= 0 && index < this._keys.length) {
                    var result = this._selector(this._keys[index], this._values[index]);
                    if (index + 1 >= this._keys.length) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    else {
                        this._index++;
                    }
                    return { value: result, done: false };
                }
                return { value: undefined, done: true };
            };
            MapIterator.prototype.throw = function (error) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                throw error;
            };
            MapIterator.prototype.return = function (value) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                return { value: value, done: true };
            };
            return MapIterator;
        }());
        return (function () {
            function Map() {
                this._keys = [];
                this._values = [];
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            }
            Object.defineProperty(Map.prototype, "size", {
                get: function () { return this._keys.length; },
                enumerable: true,
                configurable: true
            });
            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
            Map.prototype.get = function (key) {
                var index = this._find(key, /*insert*/ false);
                return index >= 0 ? this._values[index] : undefined;
            };
            Map.prototype.set = function (key, value) {
                var index = this._find(key, /*insert*/ true);
                this._values[index] = value;
                return this;
            };
            Map.prototype.delete = function (key) {
                var index = this._find(key, /*insert*/ false);
                if (index >= 0) {
                    var size = this._keys.length;
                    for (var i = index + 1; i < size; i++) {
                        this._keys[i - 1] = this._keys[i];
                        this._values[i - 1] = this._values[i];
                    }
                    this._keys.length--;
                    this._values.length--;
                    if (key === this._cacheKey) {
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                    }
                    return true;
                }
                return false;
            };
            Map.prototype.clear = function () {
                this._keys.length = 0;
                this._values.length = 0;
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            };
            Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
            Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
            Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
            Map.prototype["@@iterator"] = function () { return this.entries(); };
            Map.prototype[iteratorSymbol] = function () { return this.entries(); };
            Map.prototype._find = function (key, insert) {
                if (this._cacheKey !== key) {
                    this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                }
                if (this._cacheIndex < 0 && insert) {
                    this._cacheIndex = this._keys.length;
                    this._keys.push(key);
                    this._values.push(undefined);
                }
                return this._cacheIndex;
            };
            return Map;
        }());
        function getKey(key, _) {
            return key;
        }
        function getValue(_, value) {
            return value;
        }
        function getEntry(key, value) {
            return [key, value];
        }
    }
    // naive Set shim
    function CreateSetPolyfill() {
        return (function () {
            function Set() {
                this._map = new _Map();
            }
            Object.defineProperty(Set.prototype, "size", {
                get: function () { return this._map.size; },
                enumerable: true,
                configurable: true
            });
            Set.prototype.has = function (value) { return this._map.has(value); };
            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
            Set.prototype.delete = function (value) { return this._map.delete(value); };
            Set.prototype.clear = function () { this._map.clear(); };
            Set.prototype.keys = function () { return this._map.keys(); };
            Set.prototype.values = function () { return this._map.values(); };
            Set.prototype.entries = function () { return this._map.entries(); };
            Set.prototype["@@iterator"] = function () { return this.keys(); };
            Set.prototype[iteratorSymbol] = function () { return this.keys(); };
            return Set;
        }());
    }
    // naive WeakMap shim
    function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys = HashMap.create();
        var rootKey = CreateUniqueKey();
        return (function () {
            function WeakMap() {
                this._key = CreateUniqueKey();
            }
            WeakMap.prototype.has = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.has(table, this._key) : false;
            };
            WeakMap.prototype.get = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.get(table, this._key) : undefined;
            };
            WeakMap.prototype.set = function (target, value) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                table[this._key] = value;
                return this;
            };
            WeakMap.prototype.delete = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? delete table[this._key] : false;
            };
            WeakMap.prototype.clear = function () {
                // NOTE: not a real clear, just makes the previous data unreachable
                this._key = CreateUniqueKey();
            };
            return WeakMap;
        }());
        function CreateUniqueKey() {
            var key;
            do
                key = "@@WeakMap@@" + CreateUUID();
            while (HashMap.has(keys, key));
            keys[key] = true;
            return key;
        }
        function GetOrCreateWeakMapTable(target, create) {
            if (!hasOwn.call(target, rootKey)) {
                if (!create)
                    return undefined;
                Object.defineProperty(target, rootKey, { value: HashMap.create() });
            }
            return target[rootKey];
        }
        function FillRandomBytes(buffer, size) {
            for (var i = 0; i < size; ++i)
                buffer[i] = Math.random() * 0xff | 0;
            return buffer;
        }
        function GenRandomBytes(size) {
            if (typeof Uint8Array === "function") {
                if (typeof crypto !== "undefined")
                    return crypto.getRandomValues(new Uint8Array(size));
                if (typeof msCrypto !== "undefined")
                    return msCrypto.getRandomValues(new Uint8Array(size));
                return FillRandomBytes(new Uint8Array(size), size);
            }
            return FillRandomBytes(new Array(size), size);
        }
        function CreateUUID() {
            var data = GenRandomBytes(UUID_SIZE);
            // mark as random - RFC 4122 § 4.4
            data[6] = data[6] & 0x4f | 0x40;
            data[8] = data[8] & 0xbf | 0x80;
            var result = "";
            for (var offset = 0; offset < UUID_SIZE; ++offset) {
                var byte = data[offset];
                if (offset === 4 || offset === 6 || offset === 8)
                    result += "-";
                if (byte < 16)
                    result += "0";
                result += byte.toString(16).toLowerCase();
            }
            return result;
        }
    }
    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
    function MakeDictionary(obj) {
        obj.__ = undefined;
        delete obj.__;
        return obj;
    }
    // patch global Reflect
    (function (__global) {
        if (typeof __global.Reflect !== "undefined") {
            if (__global.Reflect !== Reflect) {
                for (var p in Reflect) {
                    if (hasOwn.call(Reflect, p)) {
                        __global.Reflect[p] = Reflect[p];
                    }
                }
            }
        }
        else {
            __global.Reflect = Reflect;
        }
    })(typeof global !== "undefined" ? global :
        typeof self !== "undefined" ? self :
            Function("return this;")());
})(Reflect || (Reflect = {}));
//# sourceMappingURL=Reflect.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18), __webpack_require__(2)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Created by dereks on 8/24/16.
 */

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var platform_browser_1 = __webpack_require__(6);
var app_component_1 = __webpack_require__(56);
var ng2_toastr_1 = __webpack_require__(10);
var animations_1 = __webpack_require__(30);
var custom_option_1 = __webpack_require__(57);
var AppModule = (function () {
    function AppModule() {
    }
    return AppModule;
}());
AppModule = __decorate([
    core_1.NgModule({
        imports: [platform_browser_1.BrowserModule, animations_1.BrowserAnimationsModule, ng2_toastr_1.ToastModule.forRoot()],
        declarations: [app_component_1.AppComponent],
        providers: [
            { provide: ng2_toastr_1.ToastOptions, useClass: custom_option_1.CustomOption },
        ],
        bootstrap: [app_component_1.AppComponent],
    })
], AppModule);
exports.AppModule = AppModule;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

/**
* @license
* Copyright Google Inc. All Rights Reserved.
*
* Use of this source code is governed by an MIT-style license that can be
* found in the LICENSE file at https://angular.io/license
*/
(function (global, factory) {
     true ? factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (factory());
}(this, (function () { 'use strict';

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NEWLINE = '\n';
var SEP = '  -------------  ';
var IGNORE_FRAMES = [];
var creationTrace = '__creationTrace__';
var LongStackTrace = (function () {
    function LongStackTrace() {
        this.error = getStacktrace();
        this.timestamp = new Date();
    }
    return LongStackTrace;
}());
function getStacktraceWithUncaughtError() {
    return new Error('STACKTRACE TRACKING');
}
function getStacktraceWithCaughtError() {
    try {
        throw getStacktraceWithUncaughtError();
    }
    catch (error) {
        return error;
    }
}
// Some implementations of exception handling don't create a stack trace if the exception
// isn't thrown, however it's faster not to actually throw the exception.
var error = getStacktraceWithUncaughtError();
var coughtError = getStacktraceWithCaughtError();
var getStacktrace = error.stack ?
    getStacktraceWithUncaughtError :
    (coughtError.stack ? getStacktraceWithCaughtError : getStacktraceWithUncaughtError);
function getFrames(error) {
    return error.stack ? error.stack.split(NEWLINE) : [];
}
function addErrorStack(lines, error) {
    var trace = getFrames(error);
    for (var i = 0; i < trace.length; i++) {
        var frame = trace[i];
        // Filter out the Frames which are part of stack capturing.
        if (!(i < IGNORE_FRAMES.length && IGNORE_FRAMES[i] === frame)) {
            lines.push(trace[i]);
        }
    }
}
function renderLongStackTrace(frames, stack) {
    var longTrace = [stack];
    if (frames) {
        var timestamp = new Date().getTime();
        for (var i = 0; i < frames.length; i++) {
            var traceFrames = frames[i];
            var lastTime = traceFrames.timestamp;
            longTrace.push(SEP + " Elapsed: " + (timestamp - lastTime.getTime()) + " ms; At: " + lastTime + " " + SEP);
            addErrorStack(longTrace, traceFrames.error);
            timestamp = lastTime.getTime();
        }
    }
    return longTrace.join(NEWLINE);
}
Zone['longStackTraceZoneSpec'] = {
    name: 'long-stack-trace',
    longStackTraceLimit: 10,
    onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {
        var currentTask = Zone.currentTask;
        var trace = currentTask && currentTask.data && currentTask.data[creationTrace] || [];
        trace = [new LongStackTrace()].concat(trace);
        if (trace.length > this.longStackTraceLimit) {
            trace.length = this.longStackTraceLimit;
        }
        if (!task.data)
            task.data = {};
        task.data[creationTrace] = trace;
        return parentZoneDelegate.scheduleTask(targetZone, task);
    },
    onHandleError: function (parentZoneDelegate, currentZone, targetZone, error) {
        var parentTask = Zone.currentTask || error.task;
        if (error instanceof Error && parentTask) {
            var stackSetSucceeded = null;
            try {
                var descriptor = Object.getOwnPropertyDescriptor(error, 'stack');
                if (descriptor && descriptor.configurable) {
                    var delegateGet_1 = descriptor.get;
                    var value_1 = descriptor.value;
                    descriptor = {
                        get: function () {
                            return renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], delegateGet_1 ? delegateGet_1.apply(this) : value_1);
                        }
                    };
                    Object.defineProperty(error, 'stack', descriptor);
                    stackSetSucceeded = true;
                }
            }
            catch (err) {
            }
            var longStack = stackSetSucceeded ?
                null :
                renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], error.stack);
            if (!stackSetSucceeded) {
                try {
                    stackSetSucceeded = error.stack = longStack;
                }
                catch (err) {
                }
            }
            if (!stackSetSucceeded) {
                try {
                    stackSetSucceeded = error.longStack = longStack;
                }
                catch (err) {
                }
            }
        }
        return parentZoneDelegate.handleError(targetZone, error);
    }
};
function captureStackTraces(stackTraces, count) {
    if (count > 0) {
        stackTraces.push(getFrames((new LongStackTrace()).error));
        captureStackTraces(stackTraces, count - 1);
    }
}
function computeIgnoreFrames() {
    var frames = [];
    captureStackTraces(frames, 2);
    var frames1 = frames[0];
    var frames2 = frames[1];
    for (var i = 0; i < frames1.length; i++) {
        var frame1 = frames1[i];
        var frame2 = frames2[i];
        if (frame1 === frame2) {
            IGNORE_FRAMES.push(frame1);
        }
        else {
            break;
        }
    }
}
computeIgnoreFrames();

})));


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {/**
* @license
* Copyright Google Inc. All Rights Reserved.
*
* Use of this source code is governed by an MIT-style license that can be
* found in the LICENSE file at https://angular.io/license
*/
(function (global, factory) {
     true ? factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (factory());
}(this, (function () { 'use strict';

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var Zone$1 = (function (global) {
    if (global['Zone']) {
        throw new Error('Zone already loaded.');
    }
    var NO_ZONE = { name: 'NO ZONE' };
    var notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling';
    var microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';
    var Zone = (function () {
        function Zone(parent, zoneSpec) {
            this._properties = null;
            this._parent = parent;
            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
            this._properties = zoneSpec && zoneSpec.properties || {};
            this._zoneDelegate =
                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
        }
        Zone.assertZonePatched = function () {
            if (global.Promise !== ZoneAwarePromise) {
                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +
                    'has been overwritten.\n' +
                    'Most likely cause is that a Promise polyfill has been loaded ' +
                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +
                    'If you must load one, do so before loading zone.js.)');
            }
        };
        Object.defineProperty(Zone, "root", {
            get: function () {
                var zone = Zone.current;
                while (zone.parent) {
                    zone = zone.parent;
                }
                return zone;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Zone, "current", {
            get: function () {
                return _currentZoneFrame.zone;
            },
            enumerable: true,
            configurable: true
        });
        
        Object.defineProperty(Zone, "currentTask", {
            get: function () {
                return _currentTask;
            },
            enumerable: true,
            configurable: true
        });
        
        Object.defineProperty(Zone.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            enumerable: true,
            configurable: true
        });
        
        Object.defineProperty(Zone.prototype, "name", {
            get: function () {
                return this._name;
            },
            enumerable: true,
            configurable: true
        });
        
        Zone.prototype.get = function (key) {
            var zone = this.getZoneWith(key);
            if (zone)
                return zone._properties[key];
        };
        Zone.prototype.getZoneWith = function (key) {
            var current = this;
            while (current) {
                if (current._properties.hasOwnProperty(key)) {
                    return current;
                }
                current = current._parent;
            }
            return null;
        };
        Zone.prototype.fork = function (zoneSpec) {
            if (!zoneSpec)
                throw new Error('ZoneSpec required!');
            return this._zoneDelegate.fork(this, zoneSpec);
        };
        Zone.prototype.wrap = function (callback, source) {
            if (typeof callback !== 'function') {
                throw new Error('Expecting function got: ' + callback);
            }
            var _callback = this._zoneDelegate.intercept(this, callback, source);
            var zone = this;
            return function () {
                return zone.runGuarded(_callback, this, arguments, source);
            };
        };
        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
            if (applyThis === void 0) { applyThis = undefined; }
            if (applyArgs === void 0) { applyArgs = null; }
            if (source === void 0) { source = null; }
            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
            try {
                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
            }
            finally {
                _currentZoneFrame = _currentZoneFrame.parent;
            }
        };
        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
            if (applyThis === void 0) { applyThis = null; }
            if (applyArgs === void 0) { applyArgs = null; }
            if (source === void 0) { source = null; }
            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
            try {
                try {
                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
                }
                catch (error) {
                    if (this._zoneDelegate.handleError(this, error)) {
                        throw error;
                    }
                }
            }
            finally {
                _currentZoneFrame = _currentZoneFrame.parent;
            }
        };
        Zone.prototype.runTask = function (task, applyThis, applyArgs) {
            if (task.zone != this)
                throw new Error('A task can only be run in the zone of creation! (Creation: ' +
                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
            var reEntryGuard = task.state != running;
            reEntryGuard && task._transitionTo(running, scheduled);
            task.runCount++;
            var previousTask = _currentTask;
            _currentTask = task;
            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
            try {
                if (task.type == macroTask && task.data && !task.data.isPeriodic) {
                    task.cancelFn = null;
                }
                try {
                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
                }
                catch (error) {
                    if (this._zoneDelegate.handleError(this, error)) {
                        throw error;
                    }
                }
            }
            finally {
                if (task.type == eventTask || (task.data && task.data.isPeriodic)) {
                    reEntryGuard && task._transitionTo(scheduled, running, notScheduled);
                }
                else {
                    task.runCount = 0;
                    this._updateTaskCount(task, -1);
                    reEntryGuard && task._transitionTo(notScheduled, running, notScheduled);
                }
                _currentZoneFrame = _currentZoneFrame.parent;
                _currentTask = previousTask;
            }
        };
        Zone.prototype.scheduleTask = function (task) {
            task._transitionTo(scheduling, notScheduled);
            var zoneDelegates = [];
            task._zoneDelegates = zoneDelegates;
            task.zone = this;
            task = this._zoneDelegate.scheduleTask(this, task);
            if (task._zoneDelegates === zoneDelegates) {
                // we have to check because internally the delegate can reschedule the task.
                this._updateTaskCount(task, 1);
            }
            if (task.state == scheduling) {
                task._transitionTo(scheduled, scheduling);
            }
            return task;
        };
        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));
        };
        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
        };
        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
        };
        Zone.prototype.cancelTask = function (task) {
            task._transitionTo(canceling, scheduled, running);
            this._zoneDelegate.cancelTask(this, task);
            this._updateTaskCount(task, -1);
            task._transitionTo(notScheduled, canceling);
            task.runCount = 0;
            return task;
        };
        Zone.prototype._updateTaskCount = function (task, count) {
            var zoneDelegates = task._zoneDelegates;
            if (count == -1) {
                task._zoneDelegates = null;
            }
            for (var i = 0; i < zoneDelegates.length; i++) {
                zoneDelegates[i]._updateTaskCount(task.type, count);
            }
        };
        Zone.__symbol__ = __symbol__;
        return Zone;
    }());
    var DELEGATE_ZS = {
        name: '',
        onHasTask: function (delegate, _, target, hasTaskState) {
            return delegate.hasTask(target, hasTaskState);
        },
        onScheduleTask: function (delegate, _, target, task) {
            return delegate.scheduleTask(target, task);
        },
        onInvokeTask: function (delegate, _, target, task, applyThis, applyArgs) {
            return delegate.invokeTask(target, task, applyThis, applyArgs);
        },
        onCancelTask: function (delegate, _, target, task) {
            return delegate.cancelTask(target, task);
        }
    };
    var ZoneDelegate = (function () {
        function ZoneDelegate(zone, parentDelegate, zoneSpec) {
            this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };
            this.zone = zone;
            this._parentDelegate = parentDelegate;
            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);
            this._interceptZS =
                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
            this._interceptDlgt =
                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
            this._interceptCurrZone =
                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);
            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
            this._invokeDlgt =
                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);
            this._handleErrorZS =
                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
            this._handleErrorDlgt =
                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
            this._handleErrorCurrZone =
                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);
            this._scheduleTaskZS =
                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
            this._scheduleTaskDlgt =
                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
            this._scheduleTaskCurrZone =
                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);
            this._invokeTaskZS =
                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
            this._invokeTaskDlgt =
                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
            this._invokeTaskCurrZone =
                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);
            this._cancelTaskZS =
                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
            this._cancelTaskDlgt =
                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
            this._cancelTaskCurrZone =
                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);
            this._hasTaskZS = null;
            this._hasTaskDlgt = null;
            this._hasTaskDlgtOwner = null;
            this._hasTaskCurrZone = null;
            var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
            var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;
            if (zoneSpecHasTask || parentHasTask) {
                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such
                // a case all task related interceptors must go through this ZD. We can't short circuit it.
                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
                this._hasTaskDlgt = parentDelegate;
                this._hasTaskDlgtOwner = this;
                this._hasTaskCurrZone = zone;
                if (!zoneSpec.onScheduleTask) {
                    this._scheduleTaskZS = DELEGATE_ZS;
                    this._scheduleTaskDlgt = parentDelegate;
                    this._scheduleTaskCurrZone = this.zone;
                }
                if (!zoneSpec.onInvokeTask) {
                    this._invokeTaskZS = DELEGATE_ZS;
                    this._invokeTaskDlgt = parentDelegate;
                    this._invokeTaskCurrZone = this.zone;
                }
                if (!zoneSpec.onCancelTask) {
                    this._cancelTaskZS = DELEGATE_ZS;
                    this._cancelTaskDlgt = parentDelegate;
                    this._cancelTaskCurrZone = this.zone;
                }
            }
        }
        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :
                new Zone(targetZone, zoneSpec);
        };
        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
            return this._interceptZS ?
                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :
                callback;
        };
        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
            return this._invokeZS ?
                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :
                callback.apply(applyThis, applyArgs);
        };
        ZoneDelegate.prototype.handleError = function (targetZone, error) {
            return this._handleErrorZS ?
                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :
                true;
        };
        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
            var returnTask = task;
            if (this._scheduleTaskZS) {
                if (this._hasTaskZS) {
                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
                }
                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
                if (!returnTask)
                    returnTask = task;
            }
            else {
                if (task.scheduleFn) {
                    task.scheduleFn(task);
                }
                else if (task.type == microTask) {
                    scheduleMicroTask(task);
                }
                else {
                    throw new Error('Task is missing scheduleFn.');
                }
            }
            return returnTask;
        };
        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
            return this._invokeTaskZS ?
                this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :
                task.callback.apply(applyThis, applyArgs);
        };
        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
            var value;
            if (this._cancelTaskZS) {
                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
            }
            else {
                value = task.cancelFn(task);
            }
            return value;
        };
        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
            return this._hasTaskZS &&
                this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
        };
        ZoneDelegate.prototype._updateTaskCount = function (type, count) {
            var counts = this._taskCounts;
            var prev = counts[type];
            var next = counts[type] = prev + count;
            if (next < 0) {
                throw new Error('More tasks executed then were scheduled.');
            }
            if (prev == 0 || next == 0) {
                var isEmpty = {
                    microTask: counts.microTask > 0,
                    macroTask: counts.macroTask > 0,
                    eventTask: counts.eventTask > 0,
                    change: type
                };
                // TODO(misko): what should happen if it throws?
                this.hasTask(this.zone, isEmpty);
            }
        };
        return ZoneDelegate;
    }());
    var ZoneTask = (function () {
        function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
            this.zone = null;
            this.runCount = 0;
            this._zoneDelegates = null;
            this._state = 'notScheduled';
            this.type = type;
            this.source = source;
            this.data = options;
            this.scheduleFn = scheduleFn;
            this.cancelFn = cancelFn;
            this.callback = callback;
            var self = this;
            this.invoke = function () {
                _numberOfNestedTaskFrames++;
                try {
                    self.runCount++;
                    return self.zone.runTask(self, this, arguments);
                }
                finally {
                    if (_numberOfNestedTaskFrames == 1) {
                        drainMicroTaskQueue();
                    }
                    _numberOfNestedTaskFrames--;
                }
            };
        }
        Object.defineProperty(ZoneTask.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        ZoneTask.prototype.cancelScheduleRequest = function () {
            this._transitionTo(notScheduled, scheduling);
        };
        ZoneTask.prototype._transitionTo = function (toState, fromState1, fromState2) {
            if (this._state === fromState1 || this._state === fromState2) {
                this._state = toState;
                if (toState == notScheduled) {
                    this._zoneDelegates = null;
                }
            }
            else {
                debugger;
                throw new Error(this.type + " '" + this.source + "': can not transition to '" + toState + "', expecting state '" + fromState1 + "'" + (fromState2 ?
                    ' or \'' + fromState2 + '\'' :
                    '') + ", was '" + this._state + "'.");
            }
        };
        ZoneTask.prototype.toString = function () {
            if (this.data && typeof this.data.handleId !== 'undefined') {
                return this.data.handleId;
            }
            else {
                return Object.prototype.toString.call(this);
            }
        };
        // add toJSON method to prevent cyclic error when
        // call JSON.stringify(zoneTask)
        ZoneTask.prototype.toJSON = function () {
            return {
                type: this.type,
                state: this.state,
                source: this.source,
                data: this.data,
                zone: this.zone.name,
                invoke: this.invoke,
                scheduleFn: this.scheduleFn,
                cancelFn: this.cancelFn,
                runCount: this.runCount,
                callback: this.callback
            };
        };
        return ZoneTask;
    }());
    var ZoneFrame = (function () {
        function ZoneFrame(parent, zone) {
            this.parent = parent;
            this.zone = zone;
        }
        return ZoneFrame;
    }());
    function __symbol__(name) {
        return '__zone_symbol__' + name;
    }
    
    var symbolSetTimeout = __symbol__('setTimeout');
    var symbolPromise = __symbol__('Promise');
    var symbolThen = __symbol__('then');
    var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));
    var _currentTask = null;
    var _microTaskQueue = [];
    var _isDrainingMicrotaskQueue = false;
    var _uncaughtPromiseErrors = [];
    var _numberOfNestedTaskFrames = 0;
    function scheduleQueueDrain() {
        // if we are not running in any task, and there has not been anything scheduled
        // we must bootstrap the initial task creation by manually scheduling the drain
        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
            // We are not running in Task, so we need to kickstart the microtask queue.
            if (global[symbolPromise]) {
                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
            }
            else {
                global[symbolSetTimeout](drainMicroTaskQueue, 0);
            }
        }
    }
    function scheduleMicroTask(task) {
        scheduleQueueDrain();
        _microTaskQueue.push(task);
    }
    function consoleError(e) {
        var rejection = e && e.rejection;
        if (rejection) {
            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
        }
        console.error(e);
    }
    function drainMicroTaskQueue() {
        if (!_isDrainingMicrotaskQueue) {
            _isDrainingMicrotaskQueue = true;
            while (_microTaskQueue.length) {
                var queue = _microTaskQueue;
                _microTaskQueue = [];
                for (var i = 0; i < queue.length; i++) {
                    var task = queue[i];
                    try {
                        task.zone.runTask(task, null, null);
                    }
                    catch (error) {
                        consoleError(error);
                    }
                }
            }
            while (_uncaughtPromiseErrors.length) {
                var _loop_1 = function() {
                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
                    try {
                        uncaughtPromiseError.zone.runGuarded(function () {
                            throw uncaughtPromiseError;
                        });
                    }
                    catch (error) {
                        consoleError(error);
                    }
                };
                while (_uncaughtPromiseErrors.length) {
                    _loop_1();
                }
            }
            _isDrainingMicrotaskQueue = false;
        }
    }
    function isThenable(value) {
        return value && value.then;
    }
    function forwardResolution(value) {
        return value;
    }
    function forwardRejection(rejection) {
        return ZoneAwarePromise.reject(rejection);
    }
    var symbolState = __symbol__('state');
    var symbolValue = __symbol__('value');
    var source = 'Promise.then';
    var UNRESOLVED = null;
    var RESOLVED = true;
    var REJECTED = false;
    var REJECTED_NO_CATCH = 0;
    function makeResolver(promise, state) {
        return function (v) {
            try {
                resolvePromise(promise, state, v);
            }
            catch (err) {
                resolvePromise(promise, false, err);
            }
            // Do not return value or you will break the Promise spec.
        };
    }
    var once = function () {
        var wasCalled = false;
        return function wrapper(wrappedFunction) {
            return function () {
                if (wasCalled) {
                    return;
                }
                wasCalled = true;
                wrappedFunction.apply(null, arguments);
            };
        };
    };
    // Promise Resolution
    function resolvePromise(promise, state, value) {
        var onceWrapper = once();
        if (promise === value) {
            throw new TypeError('Promise resolved with itself');
        }
        if (promise[symbolState] === UNRESOLVED) {
            // should only get value.then once based on promise spec.
            var then = null;
            try {
                if (typeof value === 'object' || typeof value === 'function') {
                    then = value && value.then;
                }
            }
            catch (err) {
                onceWrapper(function () {
                    resolvePromise(promise, false, err);
                })();
                return promise;
            }
            // if (value instanceof ZoneAwarePromise) {
            if (state !== REJECTED && value instanceof ZoneAwarePromise &&
                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&
                value[symbolState] !== UNRESOLVED) {
                clearRejectedNoCatch(value);
                resolvePromise(promise, value[symbolState], value[symbolValue]);
            }
            else if (state !== REJECTED && typeof then === 'function') {
                try {
                    then.apply(value, [
                        onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false))
                    ]);
                }
                catch (err) {
                    onceWrapper(function () {
                        resolvePromise(promise, false, err);
                    })();
                }
            }
            else {
                promise[symbolState] = state;
                var queue = promise[symbolValue];
                promise[symbolValue] = value;
                for (var i = 0; i < queue.length;) {
                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
                }
                if (queue.length == 0 && state == REJECTED) {
                    promise[symbolState] = REJECTED_NO_CATCH;
                    try {
                        throw new Error('Uncaught (in promise): ' + value +
                            (value && value.stack ? '\n' + value.stack : ''));
                    }
                    catch (err) {
                        var error_1 = err;
                        error_1.rejection = value;
                        error_1.promise = promise;
                        error_1.zone = Zone.current;
                        error_1.task = Zone.currentTask;
                        _uncaughtPromiseErrors.push(error_1);
                        scheduleQueueDrain();
                    }
                }
            }
        }
        // Resolving an already resolved promise is a noop.
        return promise;
    }
    function clearRejectedNoCatch(promise) {
        if (promise[symbolState] === REJECTED_NO_CATCH) {
            promise[symbolState] = REJECTED;
            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
                if (promise === _uncaughtPromiseErrors[i].promise) {
                    _uncaughtPromiseErrors.splice(i, 1);
                    break;
                }
            }
        }
    }
    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
        clearRejectedNoCatch(promise);
        var delegate = promise[symbolState] ?
            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :
            (typeof onRejected === 'function') ? onRejected : forwardRejection;
        zone.scheduleMicroTask(source, function () {
            try {
                resolvePromise(chainPromise, true, zone.run(delegate, undefined, [promise[symbolValue]]));
            }
            catch (error) {
                resolvePromise(chainPromise, false, error);
            }
        });
    }
    var ZoneAwarePromise = (function () {
        function ZoneAwarePromise(executor) {
            var promise = this;
            if (!(promise instanceof ZoneAwarePromise)) {
                throw new Error('Must be an instanceof Promise.');
            }
            promise[symbolState] = UNRESOLVED;
            promise[symbolValue] = []; // queue;
            try {
                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
            }
            catch (error) {
                resolvePromise(promise, false, error);
            }
        }
        ZoneAwarePromise.toString = function () {
            return 'function ZoneAwarePromise() { [native code] }';
        };
        ZoneAwarePromise.resolve = function (value) {
            return resolvePromise(new this(null), RESOLVED, value);
        };
        ZoneAwarePromise.reject = function (error) {
            return resolvePromise(new this(null), REJECTED, error);
        };
        ZoneAwarePromise.race = function (values) {
            var resolve;
            var reject;
            var promise = new this(function (res, rej) {
                _a = [res, rej], resolve = _a[0], reject = _a[1];
                var _a;
            });
            function onResolve(value) {
                promise && (promise = null || resolve(value));
            }
            function onReject(error) {
                promise && (promise = null || reject(error));
            }
            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                var value = values_1[_i];
                if (!isThenable(value)) {
                    value = this.resolve(value);
                }
                value.then(onResolve, onReject);
            }
            return promise;
        };
        ZoneAwarePromise.all = function (values) {
            var resolve;
            var reject;
            var promise = new this(function (res, rej) {
                resolve = res;
                reject = rej;
            });
            var count = 0;
            var resolvedValues = [];
            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
                var value = values_2[_i];
                if (!isThenable(value)) {
                    value = this.resolve(value);
                }
                value.then((function (index) { return function (value) {
                    resolvedValues[index] = value;
                    count--;
                    if (!count) {
                        resolve(resolvedValues);
                    }
                }; })(count), reject);
                count++;
            }
            if (!count)
                resolve(resolvedValues);
            return promise;
        };
        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
            var chainPromise = new this.constructor(null);
            var zone = Zone.current;
            if (this[symbolState] == UNRESOLVED) {
                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
            }
            else {
                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
            }
            return chainPromise;
        };
        ZoneAwarePromise.prototype.catch = function (onRejected) {
            return this.then(null, onRejected);
        };
        return ZoneAwarePromise;
    }());
    // Protect against aggressive optimizers dropping seemingly unused properties.
    // E.g. Closure Compiler in advanced mode.
    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
    ZoneAwarePromise['race'] = ZoneAwarePromise.race;
    ZoneAwarePromise['all'] = ZoneAwarePromise.all;
    var NativePromise = global[symbolPromise] = global['Promise'];
    global['Promise'] = ZoneAwarePromise;
    var symbolThenPatched = __symbol__('thenPatched');
    function patchThen(Ctor) {
        var proto = Ctor.prototype;
        var originalThen = proto.then;
        // Keep a reference to the original method.
        proto[symbolThen] = originalThen;
        Ctor.prototype.then = function (onResolve, onReject) {
            var _this = this;
            var wrapped = new ZoneAwarePromise(function (resolve, reject) {
                originalThen.call(_this, resolve, reject);
            });
            return wrapped.then(onResolve, onReject);
        };
        Ctor[symbolThenPatched] = true;
    }
    function zoneify(fn) {
        return function () {
            var resultPromise = fn.apply(this, arguments);
            if (resultPromise instanceof ZoneAwarePromise) {
                return resultPromise;
            }
            var Ctor = resultPromise.constructor;
            if (!Ctor[symbolThenPatched]) {
                patchThen(Ctor);
            }
            return resultPromise;
        };
    }
    if (NativePromise) {
        patchThen(NativePromise);
        var fetch = global['fetch'];
        if (typeof fetch == 'function') {
            global['fetch'] = zoneify(fetch);
        }
    }
    // This is not part of public API, but it is usefull for tests, so we expose it.
    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
    /*
     * This code patches Error so that:
     *   - It ignores un-needed stack frames.
     *   - It Shows the associated Zone for reach frame.
     */
    var FrameType;
    (function (FrameType) {
        /// Skip this frame when printing out stack
        FrameType[FrameType["blackList"] = 0] = "blackList";
        /// This frame marks zone transition
        FrameType[FrameType["transition"] = 1] = "transition";
    })(FrameType || (FrameType = {}));
    var NativeError = global[__symbol__('Error')] = global.Error;
    // Store the frames which should be removed from the stack frames
    var blackListedStackFrames = {};
    // We must find the frame where Error was created, otherwise we assume we don't understand stack
    var zoneAwareFrame;
    global.Error = ZoneAwareError;
    // How should the stack frames be parsed.
    var frameParserStrategy = null;
    var stackRewrite = 'stackRewrite';
    // fix #595, create property descriptor
    // for error properties
    var createProperty = function (props, key) {
        // if property is already defined, skip it.
        if (props[key]) {
            return;
        }
        // define a local property
        // in case error property is not settable
        var name = __symbol__(key);
        props[key] = {
            configurable: true,
            enumerable: true,
            get: function () {
                // if local property has no value
                // use internal error's property value
                if (!this[name]) {
                    var error_2 = this[__symbol__('error')];
                    if (error_2) {
                        this[name] = error_2[key];
                    }
                }
                return this[name];
            },
            set: function (value) {
                // setter will set value to local property value
                this[name] = value;
            }
        };
    };
    // fix #595, create property descriptor
    // for error method properties
    var createMethodProperty = function (props, key) {
        if (props[key]) {
            return;
        }
        props[key] = {
            configurable: true,
            enumerable: true,
            writable: true,
            value: function () {
                var error = this[__symbol__('error')];
                var errorMethod = (error && error[key]) || this[key];
                if (errorMethod) {
                    return errorMethod.apply(error, arguments);
                }
            }
        };
    };
    var createErrorProperties = function () {
        var props = Object.create(null);
        var error = new NativeError();
        var keys = Object.getOwnPropertyNames(error);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(error, key)) {
                createProperty(props, key);
            }
        }
        var proto = NativeError.prototype;
        if (proto) {
            var pKeys = Object.getOwnPropertyNames(proto);
            for (var i = 0; i < pKeys.length; i++) {
                var key = pKeys[i];
                // skip constructor
                if (key !== 'constructor' && key !== 'toString' && key !== 'toSource') {
                    createProperty(props, key);
                }
            }
        }
        // some other properties are not
        // in NativeError
        createProperty(props, 'originalStack');
        createProperty(props, 'zoneAwareStack');
        // define toString, toSource as method property
        createMethodProperty(props, 'toString');
        createMethodProperty(props, 'toSource');
        return props;
    };
    var errorProperties = createErrorProperties();
    // for derived Error class which extends ZoneAwareError
    // we should not override the derived class's property
    // so we create a new props object only copy the properties
    // from errorProperties which not exist in derived Error's prototype
    var getErrorPropertiesForPrototype = function (prototype) {
        // if the prototype is ZoneAwareError.prototype
        // we just return the prebuilt errorProperties.
        if (prototype === ZoneAwareError.prototype) {
            return errorProperties;
        }
        var newProps = Object.create(null);
        var cKeys = Object.getOwnPropertyNames(errorProperties);
        var keys = Object.getOwnPropertyNames(prototype);
        cKeys.forEach(function (cKey) {
            if (keys.filter(function (key) {
                return key === cKey;
            })
                .length === 0) {
                newProps[cKey] = errorProperties[cKey];
            }
        });
        return newProps;
    };
    /**
     * This is ZoneAwareError which processes the stack frame and cleans up extra frames as well as
     * adds zone information to it.
     */
    function ZoneAwareError() {
        // make sure we have a valid this
        // if this is undefined(call Error without new) or this is global
        // or this is some other objects, we should force to create a
        // valid ZoneAwareError by call Object.create()
        if (!(this instanceof ZoneAwareError)) {
            return ZoneAwareError.apply(Object.create(ZoneAwareError.prototype), arguments);
        }
        // Create an Error.
        var error = NativeError.apply(this, arguments);
        this[__symbol__('error')] = error;
        // Save original stack trace
        error.originalStack = error.stack;
        // Process the stack trace and rewrite the frames.
        if (ZoneAwareError[stackRewrite] && error.originalStack) {
            var frames_1 = error.originalStack.split('\n');
            var zoneFrame = _currentZoneFrame;
            var i = 0;
            // Find the first frame
            while (frames_1[i] !== zoneAwareFrame && i < frames_1.length) {
                i++;
            }
            for (; i < frames_1.length && zoneFrame; i++) {
                var frame = frames_1[i];
                if (frame.trim()) {
                    var frameType = blackListedStackFrames.hasOwnProperty(frame) && blackListedStackFrames[frame];
                    if (frameType === FrameType.blackList) {
                        frames_1.splice(i, 1);
                        i--;
                    }
                    else if (frameType === FrameType.transition) {
                        if (zoneFrame.parent) {
                            // This is the special frame where zone changed. Print and process it accordingly
                            frames_1[i] += " [" + zoneFrame.parent.zone.name + " => " + zoneFrame.zone.name + "]";
                            zoneFrame = zoneFrame.parent;
                        }
                        else {
                            zoneFrame = null;
                        }
                    }
                    else {
                        frames_1[i] += " [" + zoneFrame.zone.name + "]";
                    }
                }
            }
            error.stack = error.zoneAwareStack = frames_1.join('\n');
        }
        // use defineProperties here instead of copy property value
        // because of issue #595 which will break angular2.
        Object.defineProperties(this, getErrorPropertiesForPrototype(Object.getPrototypeOf(this)));
        return this;
    }
    // Copy the prototype so that instanceof operator works as expected
    ZoneAwareError.prototype = NativeError.prototype;
    ZoneAwareError[Zone.__symbol__('blacklistedStackFrames')] = blackListedStackFrames;
    ZoneAwareError[stackRewrite] = false;
    if (NativeError.hasOwnProperty('stackTraceLimit')) {
        // Extend default stack limit as we will be removing few frames.
        NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);
        // make sure that ZoneAwareError has the same property which forwards to NativeError.
        Object.defineProperty(ZoneAwareError, 'stackTraceLimit', {
            get: function () {
                return NativeError.stackTraceLimit;
            },
            set: function (value) {
                return NativeError.stackTraceLimit = value;
            }
        });
    }
    if (NativeError.hasOwnProperty('captureStackTrace')) {
        Object.defineProperty(ZoneAwareError, 'captureStackTrace', {
            // add named function here because we need to remove this
            // stack frame when prepareStackTrace below
            value: function zoneCaptureStackTrace(targetObject, constructorOpt) {
                NativeError.captureStackTrace(targetObject, constructorOpt);
            }
        });
    }
    Object.defineProperty(ZoneAwareError, 'prepareStackTrace', {
        get: function () {
            return NativeError.prepareStackTrace;
        },
        set: function (value) {
            if (!value || typeof value !== 'function') {
                return NativeError.prepareStackTrace = value;
            }
            return NativeError.prepareStackTrace = function (error, structuredStackTrace) {
                // remove additional stack information from ZoneAwareError.captureStackTrace
                if (structuredStackTrace) {
                    for (var i = 0; i < structuredStackTrace.length; i++) {
                        var st = structuredStackTrace[i];
                        // remove the first function which name is zoneCaptureStackTrace
                        if (st.getFunctionName() === 'zoneCaptureStackTrace') {
                            structuredStackTrace.splice(i, 1);
                            break;
                        }
                    }
                }
                return value.apply(this, [error, structuredStackTrace]);
            };
        }
    });
    // Now we need to populet the `blacklistedStackFrames` as well as find the
    // run/runGuraded/runTask frames. This is done by creating a detect zone and then threading
    // the execution through all of the above methods so that we can look at the stack trace and
    // find the frames of interest.
    var detectZone = Zone.current.fork({
        name: 'detect',
        onInvoke: function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
            // Here only so that it will show up in the stack frame so that it can be black listed.
            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
        },
        onHandleError: function (parentZD, current, target, error) {
            if (error.originalStack && Error === ZoneAwareError) {
                var frames_2 = error.originalStack.split(/\n/);
                var runFrame = false, runGuardedFrame = false, runTaskFrame = false;
                while (frames_2.length) {
                    var frame = frames_2.shift();
                    // On safari it is possible to have stack frame with no line number.
                    // This check makes sure that we don't filter frames on name only (must have
                    // linenumber)
                    if (/:\d+:\d+/.test(frame)) {
                        // Get rid of the path so that we don't accidintely find function name in path.
                        // In chrome the seperator is `(` and `@` in FF and safari
                        // Chrome: at Zone.run (zone.js:100)
                        // Chrome: at Zone.run (http://localhost:9876/base/build/lib/zone.js:100:24)
                        // FireFox: Zone.prototype.run@http://localhost:9876/base/build/lib/zone.js:101:24
                        // Safari: run@http://localhost:9876/base/build/lib/zone.js:101:24
                        var fnName = frame.split('(')[0].split('@')[0];
                        var frameType = FrameType.transition;
                        if (fnName.indexOf('ZoneAwareError') !== -1) {
                            zoneAwareFrame = frame;
                        }
                        if (fnName.indexOf('runGuarded') !== -1) {
                            runGuardedFrame = true;
                        }
                        else if (fnName.indexOf('runTask') !== -1) {
                            runTaskFrame = true;
                        }
                        else if (fnName.indexOf('run') !== -1) {
                            runFrame = true;
                        }
                        else {
                            frameType = FrameType.blackList;
                        }
                        blackListedStackFrames[frame] = frameType;
                        // Once we find all of the frames we can stop looking.
                        if (runFrame && runGuardedFrame && runTaskFrame) {
                            ZoneAwareError[stackRewrite] = true;
                            break;
                        }
                    }
                }
            }
            return false;
        }
    });
    // carefully constructor a stack frame which contains all of the frames of interest which
    // need to be detected and blacklisted.
    var detectRunFn = function () {
        detectZone.run(function () {
            detectZone.runGuarded(function () {
                throw new Error('blacklistStackFrames');
            });
        });
    };
    // Cause the error to extract the stack frames.
    detectZone.runTask(detectZone.scheduleMacroTask('detect', detectRunFn, null, function () { return null; }, null));
    return global['Zone'] = Zone;
})(typeof window === 'object' && window || typeof self === 'object' && self || global);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Suppress closure compiler errors about unknown 'Zone' variable
 * @fileoverview
 * @suppress {undefinedVars}
 */
var zoneSymbol = function (n) { return ("__zone_symbol__" + n); };
var _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;
function bindArguments(args, source) {
    for (var i = args.length - 1; i >= 0; i--) {
        if (typeof args[i] === 'function') {
            args[i] = Zone.current.wrap(args[i], source + '_' + i);
        }
    }
    return args;
}
function patchPrototype(prototype, fnNames) {
    var source = prototype.constructor['name'];
    var _loop_1 = function(i) {
        var name_1 = fnNames[i];
        var delegate = prototype[name_1];
        if (delegate) {
            prototype[name_1] = (function (delegate) {
                return function () {
                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
                };
            })(delegate);
        }
    };
    for (var i = 0; i < fnNames.length; i++) {
        _loop_1(i);
    }
}
var isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);
var isNode = (!('nw' in _global$1) && typeof process !== 'undefined' &&
    {}.toString.call(process) === '[object process]');
var isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);
// we are in electron of nw, so we are both browser and nodejs
var isMix = typeof process !== 'undefined' &&
    {}.toString.call(process) === '[object process]' && !isWebWorker &&
    !!(typeof window !== 'undefined' && window['HTMLElement']);
function patchProperty(obj, prop) {
    var desc = Object.getOwnPropertyDescriptor(obj, prop) || { enumerable: true, configurable: true };
    var originalDesc = Object.getOwnPropertyDescriptor(obj, 'original' + prop);
    if (!originalDesc && desc.get) {
        Object.defineProperty(obj, 'original' + prop, { enumerable: false, configurable: true, get: desc.get });
    }
    // A property descriptor cannot have getter/setter and be writable
    // deleting the writable and value properties avoids this error:
    //
    // TypeError: property descriptors must not specify a value or be writable when a
    // getter or setter has been specified
    delete desc.writable;
    delete desc.value;
    // substr(2) cuz 'onclick' -> 'click', etc
    var eventName = prop.substr(2);
    var _prop = '_' + prop;
    desc.set = function (fn) {
        if (this[_prop]) {
            this.removeEventListener(eventName, this[_prop]);
        }
        if (typeof fn === 'function') {
            var wrapFn = function (event) {
                var result;
                result = fn.apply(this, arguments);
                if (result != undefined && !result)
                    event.preventDefault();
            };
            this[_prop] = wrapFn;
            this.addEventListener(eventName, wrapFn, false);
        }
        else {
            this[_prop] = null;
        }
    };
    // The getter would return undefined for unassigned properties but the default value of an
    // unassigned property is null
    desc.get = function () {
        var r = this[_prop] || null;
        // result will be null when use inline event attribute,
        // such as <button onclick="func();">OK</button>
        // because the onclick function is internal raw uncompiled handler
        // the onclick will be evaluated when first time event was triggered or
        // the property is accessed, https://github.com/angular/zone.js/issues/525
        // so we should use original native get to retrieve the handler
        if (r === null) {
            if (originalDesc && originalDesc.get) {
                r = originalDesc.get.apply(this, arguments);
                if (r) {
                    desc.set.apply(this, [r]);
                    if (typeof this['removeAttribute'] === 'function') {
                        this.removeAttribute(prop);
                    }
                }
            }
        }
        return this[_prop] || null;
    };
    Object.defineProperty(obj, prop, desc);
}

function patchOnProperties(obj, properties) {
    var onProperties = [];
    for (var prop in obj) {
        if (prop.substr(0, 2) == 'on') {
            onProperties.push(prop);
        }
    }
    for (var j = 0; j < onProperties.length; j++) {
        patchProperty(obj, onProperties[j]);
    }
    if (properties) {
        for (var i = 0; i < properties.length; i++) {
            patchProperty(obj, 'on' + properties[i]);
        }
    }
}

var EVENT_TASKS = zoneSymbol('eventTasks');
// For EventTarget
var ADD_EVENT_LISTENER = 'addEventListener';
var REMOVE_EVENT_LISTENER = 'removeEventListener';
function findExistingRegisteredTask(target, handler, name, capture, remove) {
    var eventTasks = target[EVENT_TASKS];
    if (eventTasks) {
        for (var i = 0; i < eventTasks.length; i++) {
            var eventTask = eventTasks[i];
            var data = eventTask.data;
            var listener = data.handler;
            if ((data.handler === handler || listener.listener === handler) &&
                data.useCapturing === capture && data.eventName === name) {
                if (remove) {
                    eventTasks.splice(i, 1);
                }
                return eventTask;
            }
        }
    }
    return null;
}
function findAllExistingRegisteredTasks(target, name, capture, remove) {
    var eventTasks = target[EVENT_TASKS];
    if (eventTasks) {
        var result = [];
        for (var i = eventTasks.length - 1; i >= 0; i--) {
            var eventTask = eventTasks[i];
            var data = eventTask.data;
            if (data.eventName === name && data.useCapturing === capture) {
                result.push(eventTask);
                if (remove) {
                    eventTasks.splice(i, 1);
                }
            }
        }
        return result;
    }
    return null;
}
function attachRegisteredEvent(target, eventTask, isPrepend) {
    var eventTasks = target[EVENT_TASKS];
    if (!eventTasks) {
        eventTasks = target[EVENT_TASKS] = [];
    }
    if (isPrepend) {
        eventTasks.unshift(eventTask);
    }
    else {
        eventTasks.push(eventTask);
    }
}
var defaultListenerMetaCreator = function (self, args) {
    return {
        useCapturing: args[2],
        eventName: args[0],
        handler: args[1],
        target: self || _global$1,
        name: args[0],
        invokeAddFunc: function (addFnSymbol, delegate) {
            if (delegate && delegate.invoke) {
                return this.target[addFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
            }
            else {
                return this.target[addFnSymbol](this.eventName, delegate, this.useCapturing);
            }
        },
        invokeRemoveFunc: function (removeFnSymbol, delegate) {
            if (delegate && delegate.invoke) {
                return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
            }
            else {
                return this.target[removeFnSymbol](this.eventName, delegate, this.useCapturing);
            }
        }
    };
};
function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {
    if (useCapturingParam === void 0) { useCapturingParam = true; }
    if (allowDuplicates === void 0) { allowDuplicates = false; }
    if (isPrepend === void 0) { isPrepend = false; }
    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
    var addFnSymbol = zoneSymbol(addFnName);
    var removeFnSymbol = zoneSymbol(removeFnName);
    var defaultUseCapturing = useCapturingParam ? false : undefined;
    function scheduleEventListener(eventTask) {
        var meta = eventTask.data;
        attachRegisteredEvent(meta.target, eventTask, isPrepend);
        return meta.invokeAddFunc(addFnSymbol, eventTask);
    }
    function cancelEventListener(eventTask) {
        var meta = eventTask.data;
        findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
        return meta.invokeRemoveFunc(removeFnSymbol, eventTask);
    }
    return function zoneAwareAddListener(self, args) {
        var data = metaCreator(self, args);
        data.useCapturing = data.useCapturing || defaultUseCapturing;
        // - Inside a Web Worker, `this` is undefined, the context is `global`
        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
        // see https://github.com/angular/zone.js/issues/190
        var delegate = null;
        if (typeof data.handler == 'function') {
            delegate = data.handler;
        }
        else if (data.handler && data.handler.handleEvent) {
            delegate = function (event) { return data.handler.handleEvent(event); };
        }
        var validZoneHandler = false;
        try {
            // In cross site contexts (such as WebDriver frameworks like Selenium),
            // accessing the handler object here will cause an exception to be thrown which
            // will fail tests prematurely.
            validZoneHandler = data.handler && data.handler.toString() === '[object FunctionWrapper]';
        }
        catch (error) {
            // Returning nothing here is fine, because objects in a cross-site context are unusable
            return;
        }
        // Ignore special listeners of IE11 & Edge dev tools, see
        // https://github.com/angular/zone.js/issues/150
        if (!delegate || validZoneHandler) {
            return data.invokeAddFunc(addFnSymbol, data.handler);
        }
        if (!allowDuplicates) {
            var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, false);
            if (eventTask) {
                // we already registered, so this will have noop.
                return data.invokeAddFunc(addFnSymbol, eventTask);
            }
        }
        var zone = Zone.current;
        var source = data.target.constructor['name'] + '.' + addFnName + ':' + data.eventName;
        zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
    };
}
function makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {
    if (useCapturingParam === void 0) { useCapturingParam = true; }
    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
    var symbol = zoneSymbol(fnName);
    var defaultUseCapturing = useCapturingParam ? false : undefined;
    return function zoneAwareRemoveListener(self, args) {
        var data = metaCreator(self, args);
        data.useCapturing = data.useCapturing || defaultUseCapturing;
        // - Inside a Web Worker, `this` is undefined, the context is `global`
        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
        // see https://github.com/angular/zone.js/issues/190
        var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, true);
        if (eventTask) {
            eventTask.zone.cancelTask(eventTask);
        }
        else {
            data.invokeRemoveFunc(symbol, data.handler);
        }
    };
}


var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
function patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {
    if (addFnName === void 0) { addFnName = ADD_EVENT_LISTENER; }
    if (removeFnName === void 0) { removeFnName = REMOVE_EVENT_LISTENER; }
    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
    if (obj && obj[addFnName]) {
        patchMethod(obj, addFnName, function () { return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator); });
        patchMethod(obj, removeFnName, function () { return makeZoneAwareRemoveListener(removeFnName, true, metaCreator); });
        return true;
    }
    else {
        return false;
    }
}
var originalInstanceKey = zoneSymbol('originalInstance');
// wrap some native API on `window`
function patchClass(className) {
    var OriginalClass = _global$1[className];
    if (!OriginalClass)
        return;
    _global$1[className] = function () {
        var a = bindArguments(arguments, className);
        switch (a.length) {
            case 0:
                this[originalInstanceKey] = new OriginalClass();
                break;
            case 1:
                this[originalInstanceKey] = new OriginalClass(a[0]);
                break;
            case 2:
                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
                break;
            case 3:
                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
                break;
            case 4:
                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
                break;
            default:
                throw new Error('Arg list too long.');
        }
    };
    var instance = new OriginalClass(function () { });
    var prop;
    for (prop in instance) {
        // https://bugs.webkit.org/show_bug.cgi?id=44721
        if (className === 'XMLHttpRequest' && prop === 'responseBlob')
            continue;
        (function (prop) {
            if (typeof instance[prop] === 'function') {
                _global$1[className].prototype[prop] = function () {
                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
                };
            }
            else {
                Object.defineProperty(_global$1[className].prototype, prop, {
                    set: function (fn) {
                        if (typeof fn === 'function') {
                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);
                        }
                        else {
                            this[originalInstanceKey][prop] = fn;
                        }
                    },
                    get: function () {
                        return this[originalInstanceKey][prop];
                    }
                });
            }
        }(prop));
    }
    for (prop in OriginalClass) {
        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
            _global$1[className][prop] = OriginalClass[prop];
        }
    }
}

function createNamedFn(name, delegate) {
    try {
        return (Function('f', "return function " + name + "(){return f(this, arguments)}"))(delegate);
    }
    catch (error) {
        // if we fail, we must be CSP, just return delegate.
        return function () {
            return delegate(this, arguments);
        };
    }
}
function patchMethod(target, name, patchFn) {
    var proto = target;
    while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
        proto = Object.getPrototypeOf(proto);
    }
    if (!proto && target[name]) {
        // somehow we did not find it, but we can see it. This happens on IE for Window properties.
        proto = target;
    }
    var delegateName = zoneSymbol(name);
    var delegate;
    if (proto && !(delegate = proto[delegateName])) {
        delegate = proto[delegateName] = proto[name];
        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
    }
    return delegate;
}
// TODO: @JiaLiPassion, support cancel task later if necessary

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function patchTimer(window, setName, cancelName, nameSuffix) {
    var setNative = null;
    var clearNative = null;
    setName += nameSuffix;
    cancelName += nameSuffix;
    var tasksByHandleId = {};
    function scheduleTask(task) {
        var data = task.data;
        data.args[0] = function () {
            task.invoke.apply(this, arguments);
            delete tasksByHandleId[data.handleId];
        };
        data.handleId = setNative.apply(window, data.args);
        tasksByHandleId[data.handleId] = task;
        return task;
    }
    function clearTask(task) {
        delete tasksByHandleId[task.data.handleId];
        return clearNative(task.data.handleId);
    }
    setNative =
        patchMethod(window, setName, function (delegate) { return function (self, args) {
            if (typeof args[0] === 'function') {
                var zone = Zone.current;
                var options = {
                    handleId: null,
                    isPeriodic: nameSuffix === 'Interval',
                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,
                    args: args
                };
                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
                if (!task) {
                    return task;
                }
                // Node.js must additionally support the ref and unref functions.
                var handle = task.data.handleId;
                // check whether handle is null, because some polyfill or browser
                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame
                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&
                    typeof handle.unref === 'function') {
                    task.ref = handle.ref.bind(handle);
                    task.unref = handle.unref.bind(handle);
                }
                return task;
            }
            else {
                // cause an error by calling it directly.
                return delegate.apply(window, args);
            }
        }; });
    clearNative =
        patchMethod(window, cancelName, function (delegate) { return function (self, args) {
            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];
            if (task && typeof task.type === 'string') {
                if (task.state !== 'notScheduled' &&
                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
                    // Do not cancel already canceled functions
                    task.zone.cancelTask(task);
                }
            }
            else {
                // cause an error by calling it directly.
                delegate.apply(window, args);
            }
        }; });
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/*
 * This is necessary for Chrome and Chrome mobile, to enable
 * things like redefining `createdCallback` on an element.
 */
var _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;
var _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =
    Object.getOwnPropertyDescriptor;
var _create = Object.create;
var unconfigurablesKey = zoneSymbol('unconfigurables');
function propertyPatch() {
    Object.defineProperty = function (obj, prop, desc) {
        if (isUnconfigurable(obj, prop)) {
            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
        }
        var originalConfigurableFlag = desc.configurable;
        if (prop !== 'prototype') {
            desc = rewriteDescriptor(obj, prop, desc);
        }
        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
    };
    Object.defineProperties = function (obj, props) {
        Object.keys(props).forEach(function (prop) {
            Object.defineProperty(obj, prop, props[prop]);
        });
        return obj;
    };
    Object.create = function (obj, proto) {
        if (typeof proto === 'object' && !Object.isFrozen(proto)) {
            Object.keys(proto).forEach(function (prop) {
                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
            });
        }
        return _create(obj, proto);
    };
    Object.getOwnPropertyDescriptor = function (obj, prop) {
        var desc = _getOwnPropertyDescriptor(obj, prop);
        if (isUnconfigurable(obj, prop)) {
            desc.configurable = false;
        }
        return desc;
    };
}

function _redefineProperty(obj, prop, desc) {
    var originalConfigurableFlag = desc.configurable;
    desc = rewriteDescriptor(obj, prop, desc);
    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
}

function isUnconfigurable(obj, prop) {
    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
}
function rewriteDescriptor(obj, prop, desc) {
    desc.configurable = true;
    if (!desc.configurable) {
        if (!obj[unconfigurablesKey]) {
            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
        }
        obj[unconfigurablesKey][prop] = true;
    }
    return desc;
}
function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
    try {
        return _defineProperty(obj, prop, desc);
    }
    catch (error) {
        if (desc.configurable) {
            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's
            // retry with the original flag value
            if (typeof originalConfigurableFlag == 'undefined') {
                delete desc.configurable;
            }
            else {
                desc.configurable = originalConfigurableFlag;
            }
            try {
                return _defineProperty(obj, prop, desc);
            }
            catch (error) {
                var descJson = null;
                try {
                    descJson = JSON.stringify(desc);
                }
                catch (error) {
                    descJson = descJson.toString();
                }
                console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + error);
            }
        }
        else {
            throw error;
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'
    .split(',');
var EVENT_TARGET = 'EventTarget';
function eventTargetPatch(_global) {
    var apis = [];
    var isWtf = _global['wtf'];
    if (isWtf) {
        // Workaround for: https://github.com/google/tracing-framework/issues/555
        apis = WTF_ISSUE_555.split(',').map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);
    }
    else if (_global[EVENT_TARGET]) {
        apis.push(EVENT_TARGET);
    }
    else {
        // Note: EventTarget is not available in all browsers,
        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
        apis = NO_EVENT_TARGET;
    }
    for (var i = 0; i < apis.length; i++) {
        var type = _global[apis[i]];
        patchEventTargetMethods(type && type.prototype);
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// we have to patch the instance since the proto is non-configurable
function apply(_global) {
    var WS = _global.WebSocket;
    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
    // On older Chrome, no need since EventTarget was already patched
    if (!_global.EventTarget) {
        patchEventTargetMethods(WS.prototype);
    }
    _global.WebSocket = function (a, b) {
        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
        var proxySocket;
        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
        if (onmessageDesc && onmessageDesc.configurable === false) {
            proxySocket = Object.create(socket);
            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
                proxySocket[propName] = function () {
                    return socket[propName].apply(socket, arguments);
                };
            });
        }
        else {
            // we can patch the real socket
            proxySocket = socket;
        }
        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);
        return proxySocket;
    };
    for (var prop in WS) {
        _global.WebSocket[prop] = WS[prop];
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'
    .split(' ');
function propertyDescriptorPatch(_global) {
    if (isNode && !isMix) {
        return;
    }
    var supportsWebSocket = typeof WebSocket !== 'undefined';
    if (canPatchViaPropertyDescriptor()) {
        // for browsers that we can patch the descriptor:  Chrome & Firefox
        if (isBrowser) {
            patchOnProperties(HTMLElement.prototype, eventNames);
        }
        patchOnProperties(XMLHttpRequest.prototype, null);
        if (typeof IDBIndex !== 'undefined') {
            patchOnProperties(IDBIndex.prototype, null);
            patchOnProperties(IDBRequest.prototype, null);
            patchOnProperties(IDBOpenDBRequest.prototype, null);
            patchOnProperties(IDBDatabase.prototype, null);
            patchOnProperties(IDBTransaction.prototype, null);
            patchOnProperties(IDBCursor.prototype, null);
        }
        if (supportsWebSocket) {
            patchOnProperties(WebSocket.prototype, null);
        }
    }
    else {
        // Safari, Android browsers (Jelly Bean)
        patchViaCapturingAllTheEvents();
        patchClass('XMLHttpRequest');
        if (supportsWebSocket) {
            apply(_global);
        }
    }
}
function canPatchViaPropertyDescriptor() {
    if ((isBrowser || isMix) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&
        typeof Element !== 'undefined') {
        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
        // IDL interface attributes are not configurable
        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
        if (desc && !desc.configurable)
            return false;
    }
    var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, 'onreadystatechange');
    // add enumerable and configurable here because in opera
    // by default XMLHttpRequest.prototype.onreadystatechange is undefined
    // without adding enumerable and configurable will cause onreadystatechange
    // non-configurable
    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {
        enumerable: true,
        configurable: true,
        get: function () {
            return true;
        }
    });
    var req = new XMLHttpRequest();
    var result = !!req.onreadystatechange;
    // restore original desc
    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', xhrDesc || {});
    return result;
}

var unboundKey = zoneSymbol('unbound');
// Whenever any eventListener fires, we check the eventListener target and all parents
// for `onwhatever` properties and replace them with zone-bound functions
// - Chrome (for now)
function patchViaCapturingAllTheEvents() {
    var _loop_1 = function(i) {
        var property = eventNames[i];
        var onproperty = 'on' + property;
        self.addEventListener(property, function (event) {
            var elt = event.target, bound, source;
            if (elt) {
                source = elt.constructor['name'] + '.' + onproperty;
            }
            else {
                source = 'unknown.' + onproperty;
            }
            while (elt) {
                if (elt[onproperty] && !elt[onproperty][unboundKey]) {
                    bound = Zone.current.wrap(elt[onproperty], source);
                    bound[unboundKey] = elt[onproperty];
                    elt[onproperty] = bound;
                }
                elt = elt.parentElement;
            }
        }, true);
    };
    for (var i = 0; i < eventNames.length; i++) {
        _loop_1(i);
    }
    
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function registerElementPatch(_global) {
    if ((!isBrowser && !isMix) || !('registerElement' in _global.document)) {
        return;
    }
    var _registerElement = document.registerElement;
    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
    document.registerElement = function (name, opts) {
        if (opts && opts.prototype) {
            callbacks.forEach(function (callback) {
                var source = 'Document.registerElement::' + callback;
                if (opts.prototype.hasOwnProperty(callback)) {
                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
                    if (descriptor && descriptor.value) {
                        descriptor.value = Zone.current.wrap(descriptor.value, source);
                        _redefineProperty(opts.prototype, callback, descriptor);
                    }
                    else {
                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
                    }
                }
                else if (opts.prototype[callback]) {
                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
                }
            });
        }
        return _registerElement.apply(document, [name, opts]);
    };
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var set = 'set';
var clear = 'clear';
var blockingMethods = ['alert', 'prompt', 'confirm'];
var _global = typeof window === 'object' && window || typeof self === 'object' && self || global;
patchTimer(_global, set, clear, 'Timeout');
patchTimer(_global, set, clear, 'Interval');
patchTimer(_global, set, clear, 'Immediate');
patchTimer(_global, 'request', 'cancel', 'AnimationFrame');
patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');
patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
for (var i = 0; i < blockingMethods.length; i++) {
    var name_1 = blockingMethods[i];
    patchMethod(_global, name_1, function (delegate, symbol, name) {
        return function (s, args) {
            return Zone.current.run(delegate, _global, args, name);
        };
    });
}
eventTargetPatch(_global);
propertyDescriptorPatch(_global);
patchClass('MutationObserver');
patchClass('WebKitMutationObserver');
patchClass('FileReader');
propertyPatch();
registerElementPatch(_global);
// Treat XMLHTTPRequest as a macrotask.
patchXHR(_global);
var XHR_TASK = zoneSymbol('xhrTask');
var XHR_SYNC = zoneSymbol('xhrSync');
var XHR_LISTENER = zoneSymbol('xhrListener');
var XHR_SCHEDULED = zoneSymbol('xhrScheduled');
function patchXHR(window) {
    function findPendingTask(target) {
        var pendingTask = target[XHR_TASK];
        return pendingTask;
    }
    function scheduleTask(task) {
        self[XHR_SCHEDULED] = false;
        var data = task.data;
        // remove existing event listener
        var listener = data.target[XHR_LISTENER];
        if (listener) {
            data.target.removeEventListener('readystatechange', listener);
        }
        var newListener = data.target[XHR_LISTENER] = function () {
            if (data.target.readyState === data.target.DONE) {
                if (!data.aborted && self[XHR_SCHEDULED]) {
                    task.invoke();
                }
            }
        };
        data.target.addEventListener('readystatechange', newListener);
        var storedTask = data.target[XHR_TASK];
        if (!storedTask) {
            data.target[XHR_TASK] = task;
        }
        sendNative.apply(data.target, data.args);
        self[XHR_SCHEDULED] = true;
        return task;
    }
    function placeholderCallback() { }
    function clearTask(task) {
        var data = task.data;
        // Note - ideally, we would call data.target.removeEventListener here, but it's too late
        // to prevent it from firing. So instead, we store info for the event listener.
        data.aborted = true;
        return abortNative.apply(data.target, data.args);
    }
    var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {
        self[XHR_SYNC] = args[2] == false;
        return openNative.apply(self, args);
    }; });
    var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {
        var zone = Zone.current;
        if (self[XHR_SYNC]) {
            // if the XHR is sync there is no task to schedule, just execute the code.
            return sendNative.apply(self, args);
        }
        else {
            var options = { target: self, isPeriodic: false, delay: null, args: args, aborted: false };
            return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);
        }
    }; });
    var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {
        var task = findPendingTask(self);
        if (task && typeof task.type == 'string') {
            // If the XHR has already completed, do nothing.
            // If the XHR has already been aborted, do nothing.
            // Fix #569, call abort multiple times before done will cause
            // macroTask task count be negative number
            if (task.cancelFn == null || (task.data && task.data.aborted)) {
                return;
            }
            task.zone.cancelTask(task);
        }
        // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task
        // to cancel. Do nothing.
    }; });
}
/// GEO_LOCATION
if (_global['navigator'] && _global['navigator'].geolocation) {
    patchPrototype(_global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(18)))

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* unused harmony export VERSION */
/* unused harmony export TEMPLATE_TRANSFORMS */
/* unused harmony export CompilerConfig */
/* unused harmony export JitCompiler */
/* unused harmony export DirectiveResolver */
/* unused harmony export PipeResolver */
/* unused harmony export NgModuleResolver */
/* unused harmony export DEFAULT_INTERPOLATION_CONFIG */
/* unused harmony export InterpolationConfig */
/* unused harmony export NgModuleCompiler */
/* unused harmony export ViewCompiler */
/* unused harmony export isSyntaxError */
/* unused harmony export syntaxError */
/* unused harmony export TextAst */
/* unused harmony export BoundTextAst */
/* unused harmony export AttrAst */
/* unused harmony export BoundElementPropertyAst */
/* unused harmony export BoundEventAst */
/* unused harmony export ReferenceAst */
/* unused harmony export VariableAst */
/* unused harmony export ElementAst */
/* unused harmony export EmbeddedTemplateAst */
/* unused harmony export BoundDirectivePropertyAst */
/* unused harmony export DirectiveAst */
/* unused harmony export ProviderAst */
/* unused harmony export ProviderAstType */
/* unused harmony export NgContentAst */
/* unused harmony export PropertyBindingType */
/* unused harmony export templateVisitAll */
/* unused harmony export CompileAnimationEntryMetadata */
/* unused harmony export CompileAnimationStateMetadata */
/* unused harmony export CompileAnimationStateDeclarationMetadata */
/* unused harmony export CompileAnimationStateTransitionMetadata */
/* unused harmony export CompileAnimationMetadata */
/* unused harmony export CompileAnimationKeyframesSequenceMetadata */
/* unused harmony export CompileAnimationStyleMetadata */
/* unused harmony export CompileAnimationAnimateMetadata */
/* unused harmony export CompileAnimationWithStepsMetadata */
/* unused harmony export CompileAnimationSequenceMetadata */
/* unused harmony export CompileAnimationGroupMetadata */
/* unused harmony export identifierName */
/* unused harmony export identifierModuleUrl */
/* unused harmony export viewClassName */
/* unused harmony export rendererTypeName */
/* unused harmony export hostViewClassName */
/* unused harmony export dirWrapperClassName */
/* unused harmony export componentFactoryName */
/* unused harmony export CompileSummaryKind */
/* unused harmony export tokenName */
/* unused harmony export tokenReference */
/* unused harmony export CompileStylesheetMetadata */
/* unused harmony export CompileTemplateMetadata */
/* unused harmony export CompileDirectiveMetadata */
/* unused harmony export createHostComponentMeta */
/* unused harmony export CompilePipeMetadata */
/* unused harmony export CompileNgModuleMetadata */
/* unused harmony export TransitiveCompileNgModuleMetadata */
/* unused harmony export ProviderMeta */
/* unused harmony export createAotCompiler */
/* unused harmony export AotCompiler */
/* unused harmony export analyzeNgModules */
/* unused harmony export analyzeAndValidateNgModules */
/* unused harmony export extractProgramSymbols */
/* unused harmony export StaticReflector */
/* unused harmony export StaticAndDynamicReflectionCapabilities */
/* unused harmony export StaticSymbol */
/* unused harmony export StaticSymbolCache */
/* unused harmony export ResolvedStaticSymbol */
/* unused harmony export StaticSymbolResolver */
/* unused harmony export unescapeIdentifier */
/* unused harmony export AotSummaryResolver */
/* unused harmony export SummaryResolver */
/* unused harmony export COMPILER_PROVIDERS */
/* unused harmony export JitCompilerFactory */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return platformCoreDynamic; });
/* unused harmony export createUrlResolverWithoutPackagePrefix */
/* unused harmony export createOfflineCompileUrlResolver */
/* unused harmony export DEFAULT_PACKAGE_URL_PROVIDER */
/* unused harmony export UrlResolver */
/* unused harmony export getUrlScheme */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResourceLoader; });
/* unused harmony export ElementSchemaRegistry */
/* unused harmony export Extractor */
/* unused harmony export I18NHtmlParser */
/* unused harmony export MessageBundle */
/* unused harmony export Serializer */
/* unused harmony export Xliff */
/* unused harmony export Xmb */
/* unused harmony export Xtb */
/* unused harmony export DirectiveNormalizer */
/* unused harmony export ParserError */
/* unused harmony export ParseSpan */
/* unused harmony export AST */
/* unused harmony export Quote */
/* unused harmony export EmptyExpr */
/* unused harmony export ImplicitReceiver */
/* unused harmony export Chain */
/* unused harmony export Conditional */
/* unused harmony export PropertyRead */
/* unused harmony export PropertyWrite */
/* unused harmony export SafePropertyRead */
/* unused harmony export KeyedRead */
/* unused harmony export KeyedWrite */
/* unused harmony export BindingPipe */
/* unused harmony export LiteralPrimitive */
/* unused harmony export LiteralArray */
/* unused harmony export LiteralMap */
/* unused harmony export Interpolation */
/* unused harmony export Binary */
/* unused harmony export PrefixNot */
/* unused harmony export MethodCall */
/* unused harmony export SafeMethodCall */
/* unused harmony export FunctionCall */
/* unused harmony export ASTWithSource */
/* unused harmony export TemplateBinding */
/* unused harmony export RecursiveAstVisitor */
/* unused harmony export AstTransformer */
/* unused harmony export TokenType */
/* unused harmony export Lexer */
/* unused harmony export Token */
/* unused harmony export EOF */
/* unused harmony export isIdentifier */
/* unused harmony export isQuote */
/* unused harmony export SplitInterpolation */
/* unused harmony export TemplateBindingParseResult */
/* unused harmony export Parser */
/* unused harmony export _ParseAST */
/* unused harmony export ERROR_COLLECTOR_TOKEN */
/* unused harmony export CompileMetadataResolver */
/* unused harmony export componentModuleUrl */
/* unused harmony export Text */
/* unused harmony export Expansion */
/* unused harmony export ExpansionCase */
/* unused harmony export Attribute */
/* unused harmony export Element */
/* unused harmony export Comment */
/* unused harmony export visitAll */
/* unused harmony export ParseTreeResult */
/* unused harmony export TreeError */
/* unused harmony export HtmlParser */
/* unused harmony export HtmlTagDefinition */
/* unused harmony export getHtmlTagDefinition */
/* unused harmony export TagContentType */
/* unused harmony export splitNsName */
/* unused harmony export getNsPrefix */
/* unused harmony export mergeNsAndName */
/* unused harmony export NAMED_ENTITIES */
/* unused harmony export ImportResolver */
/* unused harmony export debugOutputAstAsTypeScript */
/* unused harmony export TypeScriptEmitter */
/* unused harmony export ParseLocation */
/* unused harmony export ParseSourceFile */
/* unused harmony export ParseSourceSpan */
/* unused harmony export ParseErrorLevel */
/* unused harmony export ParseError */
/* unused harmony export DomElementSchemaRegistry */
/* unused harmony export CssSelector */
/* unused harmony export SelectorMatcher */
/* unused harmony export SelectorListContext */
/* unused harmony export SelectorContext */
/* unused harmony export StylesCompileDependency */
/* unused harmony export StylesCompileResult */
/* unused harmony export CompiledStylesheet */
/* unused harmony export StyleCompiler */
/* unused harmony export TemplateParseError */
/* unused harmony export TemplateParseResult */
/* unused harmony export TemplateParser */
/* unused harmony export splitClasses */
/* unused harmony export createElementCssSelector */
/* unused harmony export removeSummaryDuplicates */
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license Angular v4.0.0-rc.2
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */


/**
 * @stable
 */
var /** @type {?} */VERSION = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Version"]('4.0.0-rc.2');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A segment of text within the template.
 */

var TextAst = function () {
    /**
     * @param {?} value
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     */
    function TextAst(value, ngContentIndex, sourceSpan) {
        _classCallCheck(this, TextAst);

        this.value = value;
        this.ngContentIndex = ngContentIndex;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(TextAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitText(this, context);
        }
    }]);

    return TextAst;
}();
/**
 * A bound expression within the text of a template.
 */


var BoundTextAst = function () {
    /**
     * @param {?} value
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     */
    function BoundTextAst(value, ngContentIndex, sourceSpan) {
        _classCallCheck(this, BoundTextAst);

        this.value = value;
        this.ngContentIndex = ngContentIndex;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(BoundTextAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitBoundText(this, context);
        }
    }]);

    return BoundTextAst;
}();
/**
 * A plain attribute on an element.
 */


var AttrAst = function () {
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     */
    function AttrAst(name, value, sourceSpan) {
        _classCallCheck(this, AttrAst);

        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(AttrAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitAttr(this, context);
        }
    }]);

    return AttrAst;
}();
/**
 * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
 * `[\@trigger]="stateExp"`)
 */


var BoundElementPropertyAst = function () {
    /**
     * @param {?} name
     * @param {?} type
     * @param {?} securityContext
     * @param {?} value
     * @param {?} unit
     * @param {?} sourceSpan
     */
    function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
        _classCallCheck(this, BoundElementPropertyAst);

        this.name = name;
        this.type = type;
        this.securityContext = securityContext;
        this.value = value;
        this.unit = unit;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(BoundElementPropertyAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitElementProperty(this, context);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isAnimation',
        get: function get() {
            return this.type === PropertyBindingType.Animation;
        }
    }]);

    return BoundElementPropertyAst;
}();
/**
 * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
 * `(\@trigger.phase)="callback($event)"`).
 */


var BoundEventAst = function () {
    /**
     * @param {?} name
     * @param {?} target
     * @param {?} phase
     * @param {?} handler
     * @param {?} sourceSpan
     */
    function BoundEventAst(name, target, phase, handler, sourceSpan) {
        _classCallCheck(this, BoundEventAst);

        this.name = name;
        this.target = target;
        this.phase = phase;
        this.handler = handler;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} name
     * @param {?} target
     * @param {?} phase
     * @return {?}
     */


    _createClass(BoundEventAst, [{
        key: 'visit',

        /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
        value: function visit(visitor, context) {
            return visitor.visitEvent(this, context);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'fullName',
        get: function get() {
            return BoundEventAst.calcFullName(this.name, this.target, this.phase);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isAnimation',
        get: function get() {
            return !!this.phase;
        }
    }], [{
        key: 'calcFullName',
        value: function calcFullName(name, target, phase) {
            if (target) {
                return target + ':' + name;
            } else if (phase) {
                return '@' + name + '.' + phase;
            } else {
                return name;
            }
        }
    }]);

    return BoundEventAst;
}();
/**
 * A reference declaration on an element (e.g. `let someName="expression"`).
 */


var ReferenceAst = function () {
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     */
    function ReferenceAst(name, value, sourceSpan) {
        _classCallCheck(this, ReferenceAst);

        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ReferenceAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitReference(this, context);
        }
    }]);

    return ReferenceAst;
}();
/**
 * A variable declaration on a <ng-template> (e.g. `var-someName="someLocalName"`).
 */


var VariableAst = function () {
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     */
    function VariableAst(name, value, sourceSpan) {
        _classCallCheck(this, VariableAst);

        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(VariableAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitVariable(this, context);
        }
    }]);

    return VariableAst;
}();
/**
 * An element declaration in a template.
 */


var ElementAst = function () {
    /**
     * @param {?} name
     * @param {?} attrs
     * @param {?} inputs
     * @param {?} outputs
     * @param {?} references
     * @param {?} directives
     * @param {?} providers
     * @param {?} hasViewContainer
     * @param {?} queryMatches
     * @param {?} children
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     * @param {?} endSourceSpan
     */
    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {
        _classCallCheck(this, ElementAst);

        this.name = name;
        this.attrs = attrs;
        this.inputs = inputs;
        this.outputs = outputs;
        this.references = references;
        this.directives = directives;
        this.providers = providers;
        this.hasViewContainer = hasViewContainer;
        this.queryMatches = queryMatches;
        this.children = children;
        this.ngContentIndex = ngContentIndex;
        this.sourceSpan = sourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ElementAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitElement(this, context);
        }
    }]);

    return ElementAst;
}();
/**
 * A `<ng-template>` element included in an Angular template.
 */


var EmbeddedTemplateAst = function () {
    /**
     * @param {?} attrs
     * @param {?} outputs
     * @param {?} references
     * @param {?} variables
     * @param {?} directives
     * @param {?} providers
     * @param {?} hasViewContainer
     * @param {?} queryMatches
     * @param {?} children
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     */
    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {
        _classCallCheck(this, EmbeddedTemplateAst);

        this.attrs = attrs;
        this.outputs = outputs;
        this.references = references;
        this.variables = variables;
        this.directives = directives;
        this.providers = providers;
        this.hasViewContainer = hasViewContainer;
        this.queryMatches = queryMatches;
        this.children = children;
        this.ngContentIndex = ngContentIndex;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(EmbeddedTemplateAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitEmbeddedTemplate(this, context);
        }
    }]);

    return EmbeddedTemplateAst;
}();
/**
 * A directive property with a bound value (e.g. `*ngIf="condition").
 */


var BoundDirectivePropertyAst = function () {
    /**
     * @param {?} directiveName
     * @param {?} templateName
     * @param {?} value
     * @param {?} sourceSpan
     */
    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
        _classCallCheck(this, BoundDirectivePropertyAst);

        this.directiveName = directiveName;
        this.templateName = templateName;
        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(BoundDirectivePropertyAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitDirectiveProperty(this, context);
        }
    }]);

    return BoundDirectivePropertyAst;
}();
/**
 * A directive declared on an element.
 */


var DirectiveAst = function () {
    /**
     * @param {?} directive
     * @param {?} inputs
     * @param {?} hostProperties
     * @param {?} hostEvents
     * @param {?} contentQueryStartId
     * @param {?} sourceSpan
     */
    function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {
        _classCallCheck(this, DirectiveAst);

        this.directive = directive;
        this.inputs = inputs;
        this.hostProperties = hostProperties;
        this.hostEvents = hostEvents;
        this.contentQueryStartId = contentQueryStartId;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(DirectiveAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitDirective(this, context);
        }
    }]);

    return DirectiveAst;
}();
/**
 * A provider declared on an element
 */


var ProviderAst = function () {
    /**
     * @param {?} token
     * @param {?} multiProvider
     * @param {?} eager
     * @param {?} providers
     * @param {?} providerType
     * @param {?} lifecycleHooks
     * @param {?} sourceSpan
     */
    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
        _classCallCheck(this, ProviderAst);

        this.token = token;
        this.multiProvider = multiProvider;
        this.eager = eager;
        this.providers = providers;
        this.providerType = providerType;
        this.lifecycleHooks = lifecycleHooks;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ProviderAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            // No visit method in the visitor for now...
            return null;
        }
    }]);

    return ProviderAst;
}();

var ProviderAstType = {};
ProviderAstType.PublicService = 0;
ProviderAstType.PrivateService = 1;
ProviderAstType.Component = 2;
ProviderAstType.Directive = 3;
ProviderAstType.Builtin = 4;
ProviderAstType[ProviderAstType.PublicService] = "PublicService";
ProviderAstType[ProviderAstType.PrivateService] = "PrivateService";
ProviderAstType[ProviderAstType.Component] = "Component";
ProviderAstType[ProviderAstType.Directive] = "Directive";
ProviderAstType[ProviderAstType.Builtin] = "Builtin";
/**
 * Position where content is to be projected (instance of `<ng-content>` in a template).
 */

var NgContentAst = function () {
    /**
     * @param {?} index
     * @param {?} ngContentIndex
     * @param {?} sourceSpan
     */
    function NgContentAst(index, ngContentIndex, sourceSpan) {
        _classCallCheck(this, NgContentAst);

        this.index = index;
        this.ngContentIndex = ngContentIndex;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(NgContentAst, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitNgContent(this, context);
        }
    }]);

    return NgContentAst;
}();

var PropertyBindingType = {};
PropertyBindingType.Property = 0;
PropertyBindingType.Attribute = 1;
PropertyBindingType.Class = 2;
PropertyBindingType.Style = 3;
PropertyBindingType.Animation = 4;
PropertyBindingType[PropertyBindingType.Property] = "Property";
PropertyBindingType[PropertyBindingType.Attribute] = "Attribute";
PropertyBindingType[PropertyBindingType.Class] = "Class";
PropertyBindingType[PropertyBindingType.Style] = "Style";
PropertyBindingType[PropertyBindingType.Animation] = "Animation";
/**
 * Visit every node in a list of {\@link TemplateAst}s with the given {\@link TemplateAstVisitor}.
 * @param {?} visitor
 * @param {?} asts
 * @param {?=} context
 * @return {?}
 */
function templateVisitAll(visitor, asts) {
    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var /** @type {?} */result = [];
    var /** @type {?} */visit = visitor.visit ? function (ast) {
        return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function (ast) {
        return ast.visit(visitor, context);
    };
    asts.forEach(function (ast) {
        var /** @type {?} */astResult = visit(ast);
        if (astResult) {
            result.push(astResult);
        }
    });
    return result;
}

/**
 * A token representing the a reference to a static type.
 *
 * This token is unique for a filePath and name and can be used as a hash table key.
 */

var StaticSymbol = function () {
    /**
     * @param {?} filePath
     * @param {?} name
     * @param {?} members
     */
    function StaticSymbol(filePath, name, members) {
        _classCallCheck(this, StaticSymbol);

        this.filePath = filePath;
        this.name = name;
        this.members = members;
    }
    /**
     * @return {?}
     */


    _createClass(StaticSymbol, [{
        key: 'assertNoMembers',
        value: function assertNoMembers() {
            if (this.members.length) {
                throw new Error('Illegal state: symbol without members expected, but got ' + JSON.stringify(this) + '.');
            }
        }
    }]);

    return StaticSymbol;
}();
/**
 * A cache of static symbol used by the StaticReflector to return the same symbol for the
 * same symbol values.
 */


var StaticSymbolCache = function () {
    function StaticSymbolCache() {
        _classCallCheck(this, StaticSymbolCache);

        this.cache = new Map();
    }
    /**
     * @param {?} declarationFile
     * @param {?} name
     * @param {?=} members
     * @return {?}
     */


    _createClass(StaticSymbolCache, [{
        key: 'get',
        value: function get(declarationFile, name, members) {
            members = members || [];
            var /** @type {?} */memberSuffix = members.length ? '.' + members.join('.') : '';
            var /** @type {?} */key = '"' + declarationFile + '".' + name + memberSuffix;
            var /** @type {?} */result = this.cache.get(key);
            if (!result) {
                result = new StaticSymbol(declarationFile, name, members);
                this.cache.set(key, result);
            }
            return result;
        }
    }]);

    return StaticSymbolCache;
}();

/**
 * @param {?} obj
 * @return {?}
 */


function isPresent(obj) {
    return obj != null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
    return obj == null;
}
var /** @type {?} */STRING_MAP_PROTO = Object.getPrototypeOf({});
/**
 * @param {?} obj
 * @return {?}
 */
function isStrictStringMap(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
/**
 * @param {?} token
 * @return {?}
 */
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return '' + token.overriddenName;
    }
    if (token.name) {
        return '' + token.name;
    }
    var /** @type {?} */res = token.toString();
    var /** @type {?} */newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}

var NumberWrapper = function () {
    function NumberWrapper() {
        _classCallCheck(this, NumberWrapper);
    }

    _createClass(NumberWrapper, null, [{
        key: 'parseIntAutoRadix',

        /**
         * @param {?} text
         * @return {?}
         */
        value: function parseIntAutoRadix(text) {
            var /** @type {?} */result = parseInt(text);
            if (isNaN(result)) {
                throw new Error('Invalid integer literal when parsing ' + text);
            }
            return result;
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'isNumeric',
        value: function isNumeric(value) {
            return !isNaN(value - parseFloat(value));
        }
    }]);

    return NumberWrapper;
}();
/**
 * @param {?} o
 * @return {?}
 */


function isJsObject(o) {
    return o !== null && (typeof o === 'function' || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object');
}
/**
 * @param {?} obj
 * @return {?}
 */
function isPrimitive(obj) {
    return !isJsObject(obj);
}
/**
 * @param {?} s
 * @return {?}
 */
function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
}

/**
 * Wraps Javascript Objects
 */

var StringMapWrapper = function () {
    function StringMapWrapper() {
        _classCallCheck(this, StringMapWrapper);
    }

    _createClass(StringMapWrapper, null, [{
        key: 'merge',

        /**
         * @param {?} m1
         * @param {?} m2
         * @return {?}
         */
        value: function merge(m1, m2) {
            var /** @type {?} */m = {};
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Object.keys(m1)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var k = _step.value;

                    m[k] = m1[k];
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.keys(m2)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _k = _step2.value;

                    m[_k] = m2[_k];
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            return m;
        }
        /**
         * @param {?} m1
         * @param {?} m2
         * @return {?}
         */

    }, {
        key: 'equals',
        value: function equals(m1, m2) {
            var /** @type {?} */k1 = Object.keys(m1);
            var /** @type {?} */k2 = Object.keys(m2);
            if (k1.length != k2.length) {
                return false;
            }
            for (var /** @type {?} */i = 0; i < k1.length; i++) {
                var /** @type {?} */key = k1[i];
                if (m1[key] !== m2[key]) {
                    return false;
                }
            }
            return true;
        }
    }]);

    return StringMapWrapper;
}();

var ListWrapper = function () {
    function ListWrapper() {
        _classCallCheck(this, ListWrapper);
    }

    _createClass(ListWrapper, null, [{
        key: 'findLast',

        /**
         * @param {?} arr
         * @param {?} condition
         * @return {?}
         */
        value: function findLast(arr, condition) {
            for (var /** @type {?} */i = arr.length - 1; i >= 0; i--) {
                if (condition(arr[i])) {
                    return arr[i];
                }
            }
            return null;
        }
        /**
         * @param {?} list
         * @param {?} items
         * @return {?}
         */

    }, {
        key: 'removeAll',
        value: function removeAll(list, items) {
            for (var /** @type {?} */i = 0; i < items.length; ++i) {
                var /** @type {?} */index = list.indexOf(items[i]);
                if (index > -1) {
                    list.splice(index, 1);
                }
            }
        }
        /**
         * @param {?} list
         * @param {?} el
         * @return {?}
         */

    }, {
        key: 'remove',
        value: function remove(list, el) {
            var /** @type {?} */index = list.indexOf(el);
            if (index > -1) {
                list.splice(index, 1);
                return true;
            }
            return false;
        }
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */

    }, {
        key: 'equals',
        value: function equals(a, b) {
            if (a.length != b.length) return false;
            for (var /** @type {?} */i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        }
        /**
         * @param {?} list
         * @return {?}
         */

    }, {
        key: 'flatten',
        value: function flatten(list) {
            return list.reduce(function (flat, item) {
                var /** @type {?} */flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
                return flat.concat(flatItem);
            }, []);
        }
    }]);

    return ListWrapper;
}();

var TagContentType = {};
TagContentType.RAW_TEXT = 0;
TagContentType.ESCAPABLE_RAW_TEXT = 1;
TagContentType.PARSABLE_DATA = 2;
TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT";
TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";
/**
 * @param {?} elementName
 * @return {?}
 */
function splitNsName(elementName) {
    if (elementName[0] != ':') {
        return [null, elementName];
    }
    var /** @type {?} */colonIndex = elementName.indexOf(':', 1);
    if (colonIndex == -1) {
        throw new Error('Unsupported format "' + elementName + '" expecting ":namespace:name"');
    }
    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
}
/**
 * @param {?} fullName
 * @return {?}
 */
function getNsPrefix(fullName) {
    return fullName === null ? null : splitNsName(fullName)[0];
}
/**
 * @param {?} prefix
 * @param {?} localName
 * @return {?}
 */
function mergeNsAndName(prefix, localName) {
    return prefix ? ':' + prefix + ':' + localName : localName;
}
// see http://www.w3.org/TR/html51/syntax.html#named-character-references
// see https://html.spec.whatwg.org/multipage/entities.json
// This list is not exhaustive to keep the compiler footprint low.
// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
var /** @type {?} */NAMED_ENTITIES = {
    'Aacute': '\xC1',
    'aacute': '\xE1',
    'Acirc': '\xC2',
    'acirc': '\xE2',
    'acute': '\xB4',
    'AElig': '\xC6',
    'aelig': '\xE6',
    'Agrave': '\xC0',
    'agrave': '\xE0',
    'alefsym': '\u2135',
    'Alpha': '\u0391',
    'alpha': '\u03B1',
    'amp': '&',
    'and': '\u2227',
    'ang': '\u2220',
    'apos': '\'',
    'Aring': '\xC5',
    'aring': '\xE5',
    'asymp': '\u2248',
    'Atilde': '\xC3',
    'atilde': '\xE3',
    'Auml': '\xC4',
    'auml': '\xE4',
    'bdquo': '\u201E',
    'Beta': '\u0392',
    'beta': '\u03B2',
    'brvbar': '\xA6',
    'bull': '\u2022',
    'cap': '\u2229',
    'Ccedil': '\xC7',
    'ccedil': '\xE7',
    'cedil': '\xB8',
    'cent': '\xA2',
    'Chi': '\u03A7',
    'chi': '\u03C7',
    'circ': '\u02C6',
    'clubs': '\u2663',
    'cong': '\u2245',
    'copy': '\xA9',
    'crarr': '\u21B5',
    'cup': '\u222A',
    'curren': '\xA4',
    'dagger': '\u2020',
    'Dagger': '\u2021',
    'darr': '\u2193',
    'dArr': '\u21D3',
    'deg': '\xB0',
    'Delta': '\u0394',
    'delta': '\u03B4',
    'diams': '\u2666',
    'divide': '\xF7',
    'Eacute': '\xC9',
    'eacute': '\xE9',
    'Ecirc': '\xCA',
    'ecirc': '\xEA',
    'Egrave': '\xC8',
    'egrave': '\xE8',
    'empty': '\u2205',
    'emsp': '\u2003',
    'ensp': '\u2002',
    'Epsilon': '\u0395',
    'epsilon': '\u03B5',
    'equiv': '\u2261',
    'Eta': '\u0397',
    'eta': '\u03B7',
    'ETH': '\xD0',
    'eth': '\xF0',
    'Euml': '\xCB',
    'euml': '\xEB',
    'euro': '\u20AC',
    'exist': '\u2203',
    'fnof': '\u0192',
    'forall': '\u2200',
    'frac12': '\xBD',
    'frac14': '\xBC',
    'frac34': '\xBE',
    'frasl': '\u2044',
    'Gamma': '\u0393',
    'gamma': '\u03B3',
    'ge': '\u2265',
    'gt': '>',
    'harr': '\u2194',
    'hArr': '\u21D4',
    'hearts': '\u2665',
    'hellip': '\u2026',
    'Iacute': '\xCD',
    'iacute': '\xED',
    'Icirc': '\xCE',
    'icirc': '\xEE',
    'iexcl': '\xA1',
    'Igrave': '\xCC',
    'igrave': '\xEC',
    'image': '\u2111',
    'infin': '\u221E',
    'int': '\u222B',
    'Iota': '\u0399',
    'iota': '\u03B9',
    'iquest': '\xBF',
    'isin': '\u2208',
    'Iuml': '\xCF',
    'iuml': '\xEF',
    'Kappa': '\u039A',
    'kappa': '\u03BA',
    'Lambda': '\u039B',
    'lambda': '\u03BB',
    'lang': '\u27E8',
    'laquo': '\xAB',
    'larr': '\u2190',
    'lArr': '\u21D0',
    'lceil': '\u2308',
    'ldquo': '\u201C',
    'le': '\u2264',
    'lfloor': '\u230A',
    'lowast': '\u2217',
    'loz': '\u25CA',
    'lrm': '\u200E',
    'lsaquo': '\u2039',
    'lsquo': '\u2018',
    'lt': '<',
    'macr': '\xAF',
    'mdash': '\u2014',
    'micro': '\xB5',
    'middot': '\xB7',
    'minus': '\u2212',
    'Mu': '\u039C',
    'mu': '\u03BC',
    'nabla': '\u2207',
    'nbsp': '\xA0',
    'ndash': '\u2013',
    'ne': '\u2260',
    'ni': '\u220B',
    'not': '\xAC',
    'notin': '\u2209',
    'nsub': '\u2284',
    'Ntilde': '\xD1',
    'ntilde': '\xF1',
    'Nu': '\u039D',
    'nu': '\u03BD',
    'Oacute': '\xD3',
    'oacute': '\xF3',
    'Ocirc': '\xD4',
    'ocirc': '\xF4',
    'OElig': '\u0152',
    'oelig': '\u0153',
    'Ograve': '\xD2',
    'ograve': '\xF2',
    'oline': '\u203E',
    'Omega': '\u03A9',
    'omega': '\u03C9',
    'Omicron': '\u039F',
    'omicron': '\u03BF',
    'oplus': '\u2295',
    'or': '\u2228',
    'ordf': '\xAA',
    'ordm': '\xBA',
    'Oslash': '\xD8',
    'oslash': '\xF8',
    'Otilde': '\xD5',
    'otilde': '\xF5',
    'otimes': '\u2297',
    'Ouml': '\xD6',
    'ouml': '\xF6',
    'para': '\xB6',
    'permil': '\u2030',
    'perp': '\u22A5',
    'Phi': '\u03A6',
    'phi': '\u03C6',
    'Pi': '\u03A0',
    'pi': '\u03C0',
    'piv': '\u03D6',
    'plusmn': '\xB1',
    'pound': '\xA3',
    'prime': '\u2032',
    'Prime': '\u2033',
    'prod': '\u220F',
    'prop': '\u221D',
    'Psi': '\u03A8',
    'psi': '\u03C8',
    'quot': '"',
    'radic': '\u221A',
    'rang': '\u27E9',
    'raquo': '\xBB',
    'rarr': '\u2192',
    'rArr': '\u21D2',
    'rceil': '\u2309',
    'rdquo': '\u201D',
    'real': '\u211C',
    'reg': '\xAE',
    'rfloor': '\u230B',
    'Rho': '\u03A1',
    'rho': '\u03C1',
    'rlm': '\u200F',
    'rsaquo': '\u203A',
    'rsquo': '\u2019',
    'sbquo': '\u201A',
    'Scaron': '\u0160',
    'scaron': '\u0161',
    'sdot': '\u22C5',
    'sect': '\xA7',
    'shy': '\xAD',
    'Sigma': '\u03A3',
    'sigma': '\u03C3',
    'sigmaf': '\u03C2',
    'sim': '\u223C',
    'spades': '\u2660',
    'sub': '\u2282',
    'sube': '\u2286',
    'sum': '\u2211',
    'sup': '\u2283',
    'sup1': '\xB9',
    'sup2': '\xB2',
    'sup3': '\xB3',
    'supe': '\u2287',
    'szlig': '\xDF',
    'Tau': '\u03A4',
    'tau': '\u03C4',
    'there4': '\u2234',
    'Theta': '\u0398',
    'theta': '\u03B8',
    'thetasym': '\u03D1',
    'thinsp': '\u2009',
    'THORN': '\xDE',
    'thorn': '\xFE',
    'tilde': '\u02DC',
    'times': '\xD7',
    'trade': '\u2122',
    'Uacute': '\xDA',
    'uacute': '\xFA',
    'uarr': '\u2191',
    'uArr': '\u21D1',
    'Ucirc': '\xDB',
    'ucirc': '\xFB',
    'Ugrave': '\xD9',
    'ugrave': '\xF9',
    'uml': '\xA8',
    'upsih': '\u03D2',
    'Upsilon': '\u03A5',
    'upsilon': '\u03C5',
    'Uuml': '\xDC',
    'uuml': '\xFC',
    'weierp': '\u2118',
    'Xi': '\u039E',
    'xi': '\u03BE',
    'Yacute': '\xDD',
    'yacute': '\xFD',
    'yen': '\xA5',
    'yuml': '\xFF',
    'Yuml': '\u0178',
    'Zeta': '\u0396',
    'zeta': '\u03B6',
    'zwj': '\u200D',
    'zwnj': '\u200C'
};

var HtmlTagDefinition = function () {
    /**
     * @param {?=} __0
     */
    function HtmlTagDefinition() {
        var _this = this;

        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            closedByChildren = _ref.closedByChildren,
            requiredParents = _ref.requiredParents,
            implicitNamespacePrefix = _ref.implicitNamespacePrefix,
            _ref$contentType = _ref.contentType,
            contentType = _ref$contentType === undefined ? TagContentType.PARSABLE_DATA : _ref$contentType,
            _ref$closedByParent = _ref.closedByParent,
            closedByParent = _ref$closedByParent === undefined ? false : _ref$closedByParent,
            _ref$isVoid = _ref.isVoid,
            isVoid = _ref$isVoid === undefined ? false : _ref$isVoid,
            _ref$ignoreFirstLf = _ref.ignoreFirstLf,
            ignoreFirstLf = _ref$ignoreFirstLf === undefined ? false : _ref$ignoreFirstLf;

        _classCallCheck(this, HtmlTagDefinition);

        this.closedByChildren = {};
        this.closedByParent = false;
        this.canSelfClose = false;
        if (closedByChildren && closedByChildren.length > 0) {
            closedByChildren.forEach(function (tagName) {
                return _this.closedByChildren[tagName] = true;
            });
        }
        this.isVoid = isVoid;
        this.closedByParent = closedByParent || isVoid;
        if (requiredParents && requiredParents.length > 0) {
            this.requiredParents = {};
            // The first parent is the list is automatically when none of the listed parents are present
            this.parentToAdd = requiredParents[0];
            requiredParents.forEach(function (tagName) {
                return _this.requiredParents[tagName] = true;
            });
        }
        this.implicitNamespacePrefix = implicitNamespacePrefix;
        this.contentType = contentType;
        this.ignoreFirstLf = ignoreFirstLf;
    }
    /**
     * @param {?} currentParent
     * @return {?}
     */


    _createClass(HtmlTagDefinition, [{
        key: 'requireExtraParent',
        value: function requireExtraParent(currentParent) {
            if (!this.requiredParents) {
                return false;
            }
            if (!currentParent) {
                return true;
            }
            var /** @type {?} */lcParent = currentParent.toLowerCase();
            var /** @type {?} */isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';
            return !isParentTemplate && this.requiredParents[lcParent] != true;
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'isClosedByChild',
        value: function isClosedByChild(name) {
            return this.isVoid || name.toLowerCase() in this.closedByChildren;
        }
    }]);

    return HtmlTagDefinition;
}();
// see http://www.w3.org/TR/html51/syntax.html#optional-tags
// This implementation does not fully conform to the HTML5 spec.


var /** @type {?} */TAG_DEFINITIONS = {
    'base': new HtmlTagDefinition({ isVoid: true }),
    'meta': new HtmlTagDefinition({ isVoid: true }),
    'area': new HtmlTagDefinition({ isVoid: true }),
    'embed': new HtmlTagDefinition({ isVoid: true }),
    'link': new HtmlTagDefinition({ isVoid: true }),
    'img': new HtmlTagDefinition({ isVoid: true }),
    'input': new HtmlTagDefinition({ isVoid: true }),
    'param': new HtmlTagDefinition({ isVoid: true }),
    'hr': new HtmlTagDefinition({ isVoid: true }),
    'br': new HtmlTagDefinition({ isVoid: true }),
    'source': new HtmlTagDefinition({ isVoid: true }),
    'track': new HtmlTagDefinition({ isVoid: true }),
    'wbr': new HtmlTagDefinition({ isVoid: true }),
    'p': new HtmlTagDefinition({
        closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],
        closedByParent: true
    }),
    'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
    'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
    'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
    'tr': new HtmlTagDefinition({
        closedByChildren: ['tr'],
        requiredParents: ['tbody', 'tfoot', 'thead'],
        closedByParent: true
    }),
    'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
    'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
    'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
    'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
    'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
    'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
    'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
    'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
    'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
    'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
    'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
    'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
    'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
    'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
    'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
    'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
    'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
    'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
    'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
    'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true })
};
var /** @type {?} */_DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
/**
 * @param {?} tagName
 * @return {?}
 */
function getHtmlTagDefinition(tagName) {
    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
}

var /** @type {?} */_SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' +
// "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
'(?:\\[([-.\\w*]+)(?:=([\"\']?)([^\\]\"\']*)\\5)?\\])|' +
// "[name="value"]",
// "[name='value']"
'(\\))|' + '(\\s*,\\s*)', // ","
'g');
/**
 * A css selector contains an element name,
 * css classes and attribute/value pairs with the purpose
 * of selecting subsets out of them.
 */

var CssSelector = function () {
    function CssSelector() {
        _classCallCheck(this, CssSelector);

        this.element = null;
        this.classNames = [];
        this.attrs = [];
        this.notSelectors = [];
    }
    /**
     * @param {?} selector
     * @return {?}
     */


    _createClass(CssSelector, [{
        key: 'isElementSelector',

        /**
         * @return {?}
         */
        value: function isElementSelector() {
            return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'hasElementSelector',
        value: function hasElementSelector() {
            return !!this.element;
        }
        /**
         * @param {?=} element
         * @return {?}
         */

    }, {
        key: 'setElement',
        value: function setElement() {
            var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            this.element = element;
        }
        /**
         * Gets a template string for an element that matches the selector.
         * @return {?}
         */

    }, {
        key: 'getMatchingElementTemplate',
        value: function getMatchingElementTemplate() {
            var /** @type {?} */tagName = this.element || 'div';
            var /** @type {?} */classAttr = this.classNames.length > 0 ? ' class="' + this.classNames.join(' ') + '"' : '';
            var /** @type {?} */attrs = '';
            for (var /** @type {?} */i = 0; i < this.attrs.length; i += 2) {
                var /** @type {?} */attrName = this.attrs[i];
                var /** @type {?} */attrValue = this.attrs[i + 1] !== '' ? '="' + this.attrs[i + 1] + '"' : '';
                attrs += ' ' + attrName + attrValue;
            }
            return getHtmlTagDefinition(tagName).isVoid ? '<' + tagName + classAttr + attrs + '/>' : '<' + tagName + classAttr + attrs + '></' + tagName + '>';
        }
        /**
         * @param {?} name
         * @param {?=} value
         * @return {?}
         */

    }, {
        key: 'addAttribute',
        value: function addAttribute(name) {
            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            this.attrs.push(name, value && value.toLowerCase() || '');
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'addClassName',
        value: function addClassName(name) {
            this.classNames.push(name.toLowerCase());
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var /** @type {?} */res = this.element || '';
            if (this.classNames) {
                this.classNames.forEach(function (klass) {
                    return res += '.' + klass;
                });
            }
            if (this.attrs) {
                for (var /** @type {?} */i = 0; i < this.attrs.length; i += 2) {
                    var /** @type {?} */name = this.attrs[i];
                    var /** @type {?} */value = this.attrs[i + 1];
                    res += '[' + name + (value ? '=' + value : '') + ']';
                }
            }
            this.notSelectors.forEach(function (notSelector) {
                return res += ':not(' + notSelector + ')';
            });
            return res;
        }
    }], [{
        key: 'parse',
        value: function parse(selector) {
            var /** @type {?} */results = [];
            var /** @type {?} */_addResult = function _addResult(res, cssSel) {
                if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 && cssSel.attrs.length == 0) {
                    cssSel.element = '*';
                }
                res.push(cssSel);
            };
            var /** @type {?} */cssSelector = new CssSelector();
            var /** @type {?} */match = void 0;
            var /** @type {?} */current = cssSelector;
            var /** @type {?} */inNot = false;
            _SELECTOR_REGEXP.lastIndex = 0;
            while (match = _SELECTOR_REGEXP.exec(selector)) {
                if (match[1]) {
                    if (inNot) {
                        throw new Error('Nesting :not is not allowed in a selector');
                    }
                    inNot = true;
                    current = new CssSelector();
                    cssSelector.notSelectors.push(current);
                }
                if (match[2]) {
                    current.setElement(match[2]);
                }
                if (match[3]) {
                    current.addClassName(match[3]);
                }
                if (match[4]) {
                    current.addAttribute(match[4], match[6]);
                }
                if (match[7]) {
                    inNot = false;
                    current = cssSelector;
                }
                if (match[8]) {
                    if (inNot) {
                        throw new Error('Multiple selectors in :not are not supported');
                    }
                    _addResult(results, cssSelector);
                    cssSelector = current = new CssSelector();
                }
            }
            _addResult(results, cssSelector);
            return results;
        }
    }]);

    return CssSelector;
}();
/**
 * Reads a list of CssSelectors and allows to calculate which ones
 * are contained in a given CssSelector.
 */


var SelectorMatcher = function () {
    function SelectorMatcher() {
        _classCallCheck(this, SelectorMatcher);

        this._elementMap = new Map();
        this._elementPartialMap = new Map();
        this._classMap = new Map();
        this._classPartialMap = new Map();
        this._attrValueMap = new Map();
        this._attrValuePartialMap = new Map();
        this._listContexts = [];
    }
    /**
     * @param {?} notSelectors
     * @return {?}
     */


    _createClass(SelectorMatcher, [{
        key: 'addSelectables',

        /**
         * @param {?} cssSelectors
         * @param {?=} callbackCtxt
         * @return {?}
         */
        value: function addSelectables(cssSelectors, callbackCtxt) {
            var /** @type {?} */listContext = null;
            if (cssSelectors.length > 1) {
                listContext = new SelectorListContext(cssSelectors);
                this._listContexts.push(listContext);
            }
            for (var /** @type {?} */i = 0; i < cssSelectors.length; i++) {
                this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
            }
        }
        /**
         * Add an object that can be found later on by calling `match`.
         * @param {?} cssSelector A css selector
         * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function
         * @param {?} listContext
         * @return {?}
         */

    }, {
        key: '_addSelectable',
        value: function _addSelectable(cssSelector, callbackCtxt, listContext) {
            var /** @type {?} */matcher = this;
            var /** @type {?} */element = cssSelector.element;
            var /** @type {?} */classNames = cssSelector.classNames;
            var /** @type {?} */attrs = cssSelector.attrs;
            var /** @type {?} */selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
            if (element) {
                var /** @type {?} */isTerminal = attrs.length === 0 && classNames.length === 0;
                if (isTerminal) {
                    this._addTerminal(matcher._elementMap, element, selectable);
                } else {
                    matcher = this._addPartial(matcher._elementPartialMap, element);
                }
            }
            if (classNames) {
                for (var /** @type {?} */i = 0; i < classNames.length; i++) {
                    var /** @type {?} */_isTerminal = attrs.length === 0 && i === classNames.length - 1;
                    var /** @type {?} */className = classNames[i];
                    if (_isTerminal) {
                        this._addTerminal(matcher._classMap, className, selectable);
                    } else {
                        matcher = this._addPartial(matcher._classPartialMap, className);
                    }
                }
            }
            if (attrs) {
                for (var /** @type {?} */_i = 0; _i < attrs.length; _i += 2) {
                    var /** @type {?} */_isTerminal2 = _i === attrs.length - 2;
                    var /** @type {?} */name = attrs[_i];
                    var /** @type {?} */value = attrs[_i + 1];
                    if (_isTerminal2) {
                        var /** @type {?} */terminalMap = matcher._attrValueMap;
                        var /** @type {?} */terminalValuesMap = terminalMap.get(name);
                        if (!terminalValuesMap) {
                            terminalValuesMap = new Map();
                            terminalMap.set(name, terminalValuesMap);
                        }
                        this._addTerminal(terminalValuesMap, value, selectable);
                    } else {
                        var /** @type {?} */partialMap = matcher._attrValuePartialMap;
                        var /** @type {?} */partialValuesMap = partialMap.get(name);
                        if (!partialValuesMap) {
                            partialValuesMap = new Map();
                            partialMap.set(name, partialValuesMap);
                        }
                        matcher = this._addPartial(partialValuesMap, value);
                    }
                }
            }
        }
        /**
         * @param {?} map
         * @param {?} name
         * @param {?} selectable
         * @return {?}
         */

    }, {
        key: '_addTerminal',
        value: function _addTerminal(map, name, selectable) {
            var /** @type {?} */terminalList = map.get(name);
            if (!terminalList) {
                terminalList = [];
                map.set(name, terminalList);
            }
            terminalList.push(selectable);
        }
        /**
         * @param {?} map
         * @param {?} name
         * @return {?}
         */

    }, {
        key: '_addPartial',
        value: function _addPartial(map, name) {
            var /** @type {?} */matcher = map.get(name);
            if (!matcher) {
                matcher = new SelectorMatcher();
                map.set(name, matcher);
            }
            return matcher;
        }
        /**
         * Find the objects that have been added via `addSelectable`
         * whose css selector is contained in the given css selector.
         * @param {?} cssSelector A css selector
         * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`
         * @return {?} boolean true if a match was found
         */

    }, {
        key: 'match',
        value: function match(cssSelector, matchedCallback) {
            var /** @type {?} */result = false;
            var /** @type {?} */element = cssSelector.element;
            var /** @type {?} */classNames = cssSelector.classNames;
            var /** @type {?} */attrs = cssSelector.attrs;
            for (var /** @type {?} */i = 0; i < this._listContexts.length; i++) {
                this._listContexts[i].alreadyMatched = false;
            }
            result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
            result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
            if (classNames) {
                for (var /** @type {?} */_i2 = 0; _i2 < classNames.length; _i2++) {
                    var /** @type {?} */className = classNames[_i2];
                    result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
                    result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
                }
            }
            if (attrs) {
                for (var /** @type {?} */_i3 = 0; _i3 < attrs.length; _i3 += 2) {
                    var /** @type {?} */name = attrs[_i3];
                    var /** @type {?} */value = attrs[_i3 + 1];
                    var /** @type {?} */terminalValuesMap = this._attrValueMap.get(name);
                    if (value) {
                        result = this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
                    }
                    result = this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
                    var /** @type {?} */partialValuesMap = this._attrValuePartialMap.get(name);
                    if (value) {
                        result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
                    }
                    result = this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
                }
            }
            return result;
        }
        /**
         * \@internal
         * @param {?} map
         * @param {?} name
         * @param {?} cssSelector
         * @param {?} matchedCallback
         * @return {?}
         */

    }, {
        key: '_matchTerminal',
        value: function _matchTerminal(map, name, cssSelector, matchedCallback) {
            if (!map || typeof name !== 'string') {
                return false;
            }
            var /** @type {?} */selectables = map.get(name) || [];
            var /** @type {?} */starSelectables = map.get('*');
            if (starSelectables) {
                selectables = selectables.concat(starSelectables);
            }
            if (selectables.length === 0) {
                return false;
            }
            var /** @type {?} */selectable = void 0;
            var /** @type {?} */result = false;
            for (var /** @type {?} */i = 0; i < selectables.length; i++) {
                selectable = selectables[i];
                result = selectable.finalize(cssSelector, matchedCallback) || result;
            }
            return result;
        }
        /**
         * \@internal
         * @param {?} map
         * @param {?} name
         * @param {?} cssSelector
         * @param {?} matchedCallback
         * @return {?}
         */

    }, {
        key: '_matchPartial',
        value: function _matchPartial(map, name, cssSelector, matchedCallback) {
            if (!map || typeof name !== 'string') {
                return false;
            }
            var /** @type {?} */nestedSelector = map.get(name);
            if (!nestedSelector) {
                return false;
            }
            // TODO(perf): get rid of recursion and measure again
            // TODO(perf): don't pass the whole selector into the recursion,
            // but only the not processed parts
            return nestedSelector.match(cssSelector, matchedCallback);
        }
    }], [{
        key: 'createNotMatcher',
        value: function createNotMatcher(notSelectors) {
            var /** @type {?} */notMatcher = new SelectorMatcher();
            notMatcher.addSelectables(notSelectors, null);
            return notMatcher;
        }
    }]);

    return SelectorMatcher;
}();

var SelectorListContext =
/**
 * @param {?} selectors
 */
function SelectorListContext(selectors) {
    _classCallCheck(this, SelectorListContext);

    this.selectors = selectors;
    this.alreadyMatched = false;
};

var SelectorContext = function () {
    /**
     * @param {?} selector
     * @param {?} cbContext
     * @param {?} listContext
     */
    function SelectorContext(selector, cbContext, listContext) {
        _classCallCheck(this, SelectorContext);

        this.selector = selector;
        this.cbContext = cbContext;
        this.listContext = listContext;
        this.notSelectors = selector.notSelectors;
    }
    /**
     * @param {?} cssSelector
     * @param {?} callback
     * @return {?}
     */


    _createClass(SelectorContext, [{
        key: 'finalize',
        value: function finalize(cssSelector, callback) {
            var /** @type {?} */result = true;
            if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
                var /** @type {?} */notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
                result = !notMatcher.match(cssSelector, null);
            }
            if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
                if (this.listContext) {
                    this.listContext.alreadyMatched = true;
                }
                callback(this.selector, this.cbContext);
            }
            return result;
        }
    }]);

    return SelectorContext;
}();

var /** @type {?} */MODULE_SUFFIX = '';
var /** @type {?} */DASH_CASE_REGEXP = /-+([a-z0-9])/g;
/**
 * @param {?} input
 * @return {?}
 */
function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, function () {
        for (var _len = arguments.length, m = Array(_len), _key = 0; _key < _len; _key++) {
            m[_key] = arguments[_key];
        }

        return m[1].toUpperCase();
    });
}
/**
 * @param {?} input
 * @param {?} defaultValues
 * @return {?}
 */
function splitAtColon(input, defaultValues) {
    return _splitAt(input, ':', defaultValues);
}
/**
 * @param {?} input
 * @param {?} defaultValues
 * @return {?}
 */
function splitAtPeriod(input, defaultValues) {
    return _splitAt(input, '.', defaultValues);
}
/**
 * @param {?} input
 * @param {?} character
 * @param {?} defaultValues
 * @return {?}
 */
function _splitAt(input, character, defaultValues) {
    var /** @type {?} */characterIndex = input.indexOf(character);
    if (characterIndex == -1) return defaultValues;
    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
}
/**
 * @param {?} value
 * @param {?} visitor
 * @param {?} context
 * @return {?}
 */
function visitValue(value, visitor, context) {
    if (Array.isArray(value)) {
        return visitor.visitArray( /** @type {?} */value, context);
    }
    if (isStrictStringMap(value)) {
        return visitor.visitStringMap( /** @type {?} */value, context);
    }
    if (value == null || isPrimitive(value)) {
        return visitor.visitPrimitive(value, context);
    }
    return visitor.visitOther(value, context);
}

var ValueTransformer = function () {
    function ValueTransformer() {
        _classCallCheck(this, ValueTransformer);
    }

    _createClass(ValueTransformer, [{
        key: 'visitArray',

        /**
         * @param {?} arr
         * @param {?} context
         * @return {?}
         */
        value: function visitArray(arr, context) {
            var _this2 = this;

            return arr.map(function (value) {
                return visitValue(value, _this2, context);
            });
        }
        /**
         * @param {?} map
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitStringMap',
        value: function visitStringMap(map, context) {
            var _this3 = this;

            var /** @type {?} */result = {};
            Object.keys(map).forEach(function (key) {
                result[key] = visitValue(map[key], _this3, context);
            });
            return result;
        }
        /**
         * @param {?} value
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPrimitive',
        value: function visitPrimitive(value, context) {
            return value;
        }
        /**
         * @param {?} value
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitOther',
        value: function visitOther(value, context) {
            return value;
        }
    }]);

    return ValueTransformer;
}();

var SyncAsyncResult =
/**
 * @param {?} syncResult
 * @param {?=} asyncResult
 */
function SyncAsyncResult(syncResult) {
    var asyncResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, SyncAsyncResult);

    this.syncResult = syncResult;
    this.asyncResult = asyncResult;
    if (!asyncResult) {
        this.asyncResult = Promise.resolve(syncResult);
    }
};
/**
 * @param {?} msg
 * @return {?}
 */


function syntaxError(msg) {
    var /** @type {?} */error = Error(msg);
    error[ERROR_SYNTAX_ERROR] = true;
    return error;
}
var /** @type {?} */ERROR_SYNTAX_ERROR = 'ngSyntaxError';
/**
 * @param {?} error
 * @return {?}
 */
function isSyntaxError(error) {
    return error[ERROR_SYNTAX_ERROR];
}

// group 0: "[prop] or (event) or @trigger"
// group 1: "prop" from "[prop]"
// group 2: "event" from "(event)"
// group 3: "@trigger" from "@trigger"
var /** @type {?} */HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;

var CompileAnimationEntryMetadata =
/**
 * @param {?=} name
 * @param {?=} definitions
 */
function CompileAnimationEntryMetadata() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var definitions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, CompileAnimationEntryMetadata);

    this.name = name;
    this.definitions = definitions;
};
/**
 * @abstract
 */


var CompileAnimationStateMetadata = function CompileAnimationStateMetadata() {
    _classCallCheck(this, CompileAnimationStateMetadata);
};

var CompileAnimationStateDeclarationMetadata = function (_CompileAnimationStat) {
    _inherits(CompileAnimationStateDeclarationMetadata, _CompileAnimationStat);

    /**
     * @param {?} stateNameExpr
     * @param {?} styles
     */
    function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
        _classCallCheck(this, CompileAnimationStateDeclarationMetadata);

        var _this4 = _possibleConstructorReturn(this, (CompileAnimationStateDeclarationMetadata.__proto__ || Object.getPrototypeOf(CompileAnimationStateDeclarationMetadata)).call(this));

        _this4.stateNameExpr = stateNameExpr;
        _this4.styles = styles;
        return _this4;
    }

    return CompileAnimationStateDeclarationMetadata;
}(CompileAnimationStateMetadata);

var CompileAnimationStateTransitionMetadata = function (_CompileAnimationStat2) {
    _inherits(CompileAnimationStateTransitionMetadata, _CompileAnimationStat2);

    /**
     * @param {?} stateChangeExpr
     * @param {?} steps
     */
    function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
        _classCallCheck(this, CompileAnimationStateTransitionMetadata);

        var _this5 = _possibleConstructorReturn(this, (CompileAnimationStateTransitionMetadata.__proto__ || Object.getPrototypeOf(CompileAnimationStateTransitionMetadata)).call(this));

        _this5.stateChangeExpr = stateChangeExpr;
        _this5.steps = steps;
        return _this5;
    }

    return CompileAnimationStateTransitionMetadata;
}(CompileAnimationStateMetadata);
/**
 * @abstract
 */


var CompileAnimationMetadata = function CompileAnimationMetadata() {
    _classCallCheck(this, CompileAnimationMetadata);
};

var CompileAnimationKeyframesSequenceMetadata = function (_CompileAnimationMeta) {
    _inherits(CompileAnimationKeyframesSequenceMetadata, _CompileAnimationMeta);

    /**
     * @param {?=} steps
     */
    function CompileAnimationKeyframesSequenceMetadata() {
        var steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        _classCallCheck(this, CompileAnimationKeyframesSequenceMetadata);

        var _this6 = _possibleConstructorReturn(this, (CompileAnimationKeyframesSequenceMetadata.__proto__ || Object.getPrototypeOf(CompileAnimationKeyframesSequenceMetadata)).call(this));

        _this6.steps = steps;
        return _this6;
    }

    return CompileAnimationKeyframesSequenceMetadata;
}(CompileAnimationMetadata);

var CompileAnimationStyleMetadata = function (_CompileAnimationMeta2) {
    _inherits(CompileAnimationStyleMetadata, _CompileAnimationMeta2);

    /**
     * @param {?} offset
     * @param {?=} styles
     */
    function CompileAnimationStyleMetadata(offset) {
        var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, CompileAnimationStyleMetadata);

        var _this7 = _possibleConstructorReturn(this, (CompileAnimationStyleMetadata.__proto__ || Object.getPrototypeOf(CompileAnimationStyleMetadata)).call(this));

        _this7.offset = offset;
        _this7.styles = styles;
        return _this7;
    }

    return CompileAnimationStyleMetadata;
}(CompileAnimationMetadata);

var CompileAnimationAnimateMetadata = function (_CompileAnimationMeta3) {
    _inherits(CompileAnimationAnimateMetadata, _CompileAnimationMeta3);

    /**
     * @param {?=} timings
     * @param {?=} styles
     */
    function CompileAnimationAnimateMetadata() {
        var timings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, CompileAnimationAnimateMetadata);

        var _this8 = _possibleConstructorReturn(this, (CompileAnimationAnimateMetadata.__proto__ || Object.getPrototypeOf(CompileAnimationAnimateMetadata)).call(this));

        _this8.timings = timings;
        _this8.styles = styles;
        return _this8;
    }

    return CompileAnimationAnimateMetadata;
}(CompileAnimationMetadata);
/**
 * @abstract
 */


var CompileAnimationWithStepsMetadata = function (_CompileAnimationMeta4) {
    _inherits(CompileAnimationWithStepsMetadata, _CompileAnimationMeta4);

    /**
     * @param {?=} steps
     */
    function CompileAnimationWithStepsMetadata() {
        var steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, CompileAnimationWithStepsMetadata);

        var _this9 = _possibleConstructorReturn(this, (CompileAnimationWithStepsMetadata.__proto__ || Object.getPrototypeOf(CompileAnimationWithStepsMetadata)).call(this));

        _this9.steps = steps;
        return _this9;
    }

    return CompileAnimationWithStepsMetadata;
}(CompileAnimationMetadata);

var CompileAnimationSequenceMetadata = function (_CompileAnimationWith) {
    _inherits(CompileAnimationSequenceMetadata, _CompileAnimationWith);

    /**
     * @param {?=} steps
     */
    function CompileAnimationSequenceMetadata() {
        var steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, CompileAnimationSequenceMetadata);

        return _possibleConstructorReturn(this, (CompileAnimationSequenceMetadata.__proto__ || Object.getPrototypeOf(CompileAnimationSequenceMetadata)).call(this, steps));
    }

    return CompileAnimationSequenceMetadata;
}(CompileAnimationWithStepsMetadata);

var CompileAnimationGroupMetadata = function (_CompileAnimationWith2) {
    _inherits(CompileAnimationGroupMetadata, _CompileAnimationWith2);

    /**
     * @param {?=} steps
     */
    function CompileAnimationGroupMetadata() {
        var steps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, CompileAnimationGroupMetadata);

        return _possibleConstructorReturn(this, (CompileAnimationGroupMetadata.__proto__ || Object.getPrototypeOf(CompileAnimationGroupMetadata)).call(this, steps));
    }

    return CompileAnimationGroupMetadata;
}(CompileAnimationWithStepsMetadata);
/**
 * @param {?} name
 * @return {?}
 */


function _sanitizeIdentifier(name) {
    return name.replace(/\W/g, '_');
}
var /** @type {?} */_anonymousTypeIndex = 0;
/**
 * @param {?} compileIdentifier
 * @return {?}
 */
function identifierName(compileIdentifier) {
    if (!compileIdentifier || !compileIdentifier.reference) {
        return null;
    }
    var /** @type {?} */ref = compileIdentifier.reference;
    if (ref instanceof StaticSymbol) {
        return ref.name;
    }
    if (ref['__anonymousType']) {
        return ref['__anonymousType'];
    }
    var /** @type {?} */identifier = stringify(ref);
    if (identifier.indexOf('(') >= 0) {
        // case: anonymous functions!
        identifier = 'anonymous_' + _anonymousTypeIndex++;
        ref['__anonymousType'] = identifier;
    } else {
        identifier = _sanitizeIdentifier(identifier);
    }
    return identifier;
}
/**
 * @param {?} compileIdentifier
 * @return {?}
 */
function identifierModuleUrl(compileIdentifier) {
    var /** @type {?} */ref = compileIdentifier.reference;
    if (ref instanceof StaticSymbol) {
        return ref.filePath;
    }
    return __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"].importUri(ref);
}
/**
 * @param {?} compType
 * @param {?} embeddedTemplateIndex
 * @return {?}
 */
function viewClassName(compType, embeddedTemplateIndex) {
    return 'View_' + identifierName({ reference: compType }) + '_' + embeddedTemplateIndex;
}
/**
 * @param {?} compType
 * @return {?}
 */
function rendererTypeName(compType) {
    return 'RenderType_' + identifierName({ reference: compType });
}
/**
 * @param {?} compType
 * @return {?}
 */
function hostViewClassName(compType) {
    return 'HostView_' + identifierName({ reference: compType });
}
/**
 * @param {?} dirType
 * @return {?}
 */
function dirWrapperClassName(dirType) {
    return 'Wrapper_' + identifierName({ reference: dirType });
}
/**
 * @param {?} compType
 * @return {?}
 */
function componentFactoryName(compType) {
    return identifierName({ reference: compType }) + 'NgFactory';
}
var CompileSummaryKind = {};
CompileSummaryKind.Pipe = 0;
CompileSummaryKind.Directive = 1;
CompileSummaryKind.NgModule = 2;
CompileSummaryKind.Injectable = 3;
CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe";
CompileSummaryKind[CompileSummaryKind.Directive] = "Directive";
CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule";
CompileSummaryKind[CompileSummaryKind.Injectable] = "Injectable";
/**
 * @param {?} token
 * @return {?}
 */
function tokenName(token) {
    return isPresent(token.value) ? _sanitizeIdentifier(token.value) : identifierName(token.identifier);
}
/**
 * @param {?} token
 * @return {?}
 */
function tokenReference(token) {
    if (isPresent(token.identifier)) {
        return token.identifier.reference;
    } else {
        return token.value;
    }
}
/**
 * Metadata about a stylesheet
 */

var CompileStylesheetMetadata =
/**
 * @param {?=} __0
 */
function CompileStylesheetMetadata() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        moduleUrl = _ref2.moduleUrl,
        styles = _ref2.styles,
        styleUrls = _ref2.styleUrls;

    _classCallCheck(this, CompileStylesheetMetadata);

    this.moduleUrl = moduleUrl;
    this.styles = _normalizeArray(styles);
    this.styleUrls = _normalizeArray(styleUrls);
};
/**
 * Metadata regarding compilation of a template.
 */


var CompileTemplateMetadata = function () {
    /**
     * @param {?=} __0
     */
    function CompileTemplateMetadata() {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            encapsulation = _ref3.encapsulation,
            template = _ref3.template,
            templateUrl = _ref3.templateUrl,
            styles = _ref3.styles,
            styleUrls = _ref3.styleUrls,
            externalStylesheets = _ref3.externalStylesheets,
            animations = _ref3.animations,
            ngContentSelectors = _ref3.ngContentSelectors,
            interpolation = _ref3.interpolation;

        _classCallCheck(this, CompileTemplateMetadata);

        this.encapsulation = encapsulation;
        this.template = template;
        this.templateUrl = templateUrl;
        this.styles = _normalizeArray(styles);
        this.styleUrls = _normalizeArray(styleUrls);
        this.externalStylesheets = _normalizeArray(externalStylesheets);
        this.animations = animations ? ListWrapper.flatten(animations) : [];
        this.ngContentSelectors = ngContentSelectors || [];
        if (interpolation && interpolation.length != 2) {
            throw new Error('\'interpolation\' should have a start and an end symbol.');
        }
        this.interpolation = interpolation;
    }
    /**
     * @return {?}
     */


    _createClass(CompileTemplateMetadata, [{
        key: 'toSummary',
        value: function toSummary() {
            return {
                animations: this.animations.map(function (anim) {
                    return anim.name;
                }),
                ngContentSelectors: this.ngContentSelectors,
                encapsulation: this.encapsulation
            };
        }
    }]);

    return CompileTemplateMetadata;
}();
/**
 * Metadata regarding compilation of a directive.
 */


var CompileDirectiveMetadata = function () {
    _createClass(CompileDirectiveMetadata, null, [{
        key: 'create',

        /**
         * @param {?=} __0
         * @return {?}
         */
        value: function create() {
            var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                isHost = _ref4.isHost,
                type = _ref4.type,
                isComponent = _ref4.isComponent,
                selector = _ref4.selector,
                exportAs = _ref4.exportAs,
                changeDetection = _ref4.changeDetection,
                inputs = _ref4.inputs,
                outputs = _ref4.outputs,
                host = _ref4.host,
                providers = _ref4.providers,
                viewProviders = _ref4.viewProviders,
                queries = _ref4.queries,
                viewQueries = _ref4.viewQueries,
                entryComponents = _ref4.entryComponents,
                template = _ref4.template,
                componentViewType = _ref4.componentViewType,
                rendererType = _ref4.rendererType,
                componentFactory = _ref4.componentFactory;

            var /** @type {?} */hostListeners = {};
            var /** @type {?} */hostProperties = {};
            var /** @type {?} */hostAttributes = {};
            if (isPresent(host)) {
                Object.keys(host).forEach(function (key) {
                    var /** @type {?} */value = host[key];
                    var /** @type {?} */matches = key.match(HOST_REG_EXP);
                    if (matches === null) {
                        hostAttributes[key] = value;
                    } else if (isPresent(matches[1])) {
                        hostProperties[matches[1]] = value;
                    } else if (isPresent(matches[2])) {
                        hostListeners[matches[2]] = value;
                    }
                });
            }
            var /** @type {?} */inputsMap = {};
            if (isPresent(inputs)) {
                inputs.forEach(function (bindConfig) {
                    // canonical syntax: `dirProp: elProp`
                    // if there is no `:`, use dirProp = elProp
                    var /** @type {?} */parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
                    inputsMap[parts[0]] = parts[1];
                });
            }
            var /** @type {?} */outputsMap = {};
            if (isPresent(outputs)) {
                outputs.forEach(function (bindConfig) {
                    // canonical syntax: `dirProp: elProp`
                    // if there is no `:`, use dirProp = elProp
                    var /** @type {?} */parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
                    outputsMap[parts[0]] = parts[1];
                });
            }
            return new CompileDirectiveMetadata({
                isHost: isHost,
                type: type,
                isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,
                inputs: inputsMap,
                outputs: outputsMap,
                hostListeners: hostListeners,
                hostProperties: hostProperties,
                hostAttributes: hostAttributes,
                providers: providers,
                viewProviders: viewProviders,
                queries: queries,
                viewQueries: viewQueries,
                entryComponents: entryComponents,
                template: template,
                componentViewType: componentViewType,
                rendererType: rendererType,
                componentFactory: componentFactory
            });
        }
        /**
         * @param {?=} __0
         */

    }]);

    function CompileDirectiveMetadata() {
        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            isHost = _ref5.isHost,
            type = _ref5.type,
            isComponent = _ref5.isComponent,
            selector = _ref5.selector,
            exportAs = _ref5.exportAs,
            changeDetection = _ref5.changeDetection,
            inputs = _ref5.inputs,
            outputs = _ref5.outputs,
            hostListeners = _ref5.hostListeners,
            hostProperties = _ref5.hostProperties,
            hostAttributes = _ref5.hostAttributes,
            providers = _ref5.providers,
            viewProviders = _ref5.viewProviders,
            queries = _ref5.queries,
            viewQueries = _ref5.viewQueries,
            entryComponents = _ref5.entryComponents,
            template = _ref5.template,
            componentViewType = _ref5.componentViewType,
            rendererType = _ref5.rendererType,
            componentFactory = _ref5.componentFactory;

        _classCallCheck(this, CompileDirectiveMetadata);

        this.isHost = !!isHost;
        this.type = type;
        this.isComponent = isComponent;
        this.selector = selector;
        this.exportAs = exportAs;
        this.changeDetection = changeDetection;
        this.inputs = inputs;
        this.outputs = outputs;
        this.hostListeners = hostListeners;
        this.hostProperties = hostProperties;
        this.hostAttributes = hostAttributes;
        this.providers = _normalizeArray(providers);
        this.viewProviders = _normalizeArray(viewProviders);
        this.queries = _normalizeArray(queries);
        this.viewQueries = _normalizeArray(viewQueries);
        this.entryComponents = _normalizeArray(entryComponents);
        this.template = template;
        this.componentViewType = componentViewType;
        this.rendererType = rendererType;
        this.componentFactory = componentFactory;
    }
    /**
     * @return {?}
     */


    _createClass(CompileDirectiveMetadata, [{
        key: 'toSummary',
        value: function toSummary() {
            return {
                summaryKind: CompileSummaryKind.Directive,
                type: this.type,
                isComponent: this.isComponent,
                selector: this.selector,
                exportAs: this.exportAs,
                inputs: this.inputs,
                outputs: this.outputs,
                hostListeners: this.hostListeners,
                hostProperties: this.hostProperties,
                hostAttributes: this.hostAttributes,
                providers: this.providers,
                viewProviders: this.viewProviders,
                queries: this.queries,
                viewQueries: this.viewQueries,
                entryComponents: this.entryComponents,
                changeDetection: this.changeDetection,
                template: this.template && this.template.toSummary(),
                componentViewType: this.componentViewType,
                rendererType: this.rendererType,
                componentFactory: this.componentFactory
            };
        }
    }]);

    return CompileDirectiveMetadata;
}();
/**
 * Construct {\@link CompileDirectiveMetadata} from {\@link ComponentTypeMetadata} and a selector.
 * @param {?} hostTypeReference
 * @param {?} compMeta
 * @param {?} hostViewType
 * @return {?}
 */


function createHostComponentMeta(hostTypeReference, compMeta, hostViewType) {
    var /** @type {?} */template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
    return CompileDirectiveMetadata.create({
        isHost: true,
        type: { reference: hostTypeReference, diDeps: [], lifecycleHooks: [] },
        template: new CompileTemplateMetadata({
            encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None,
            template: template,
            templateUrl: '',
            styles: [],
            styleUrls: [],
            ngContentSelectors: [],
            animations: []
        }),
        changeDetection: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].Default,
        inputs: [],
        outputs: [],
        host: {},
        isComponent: true,
        selector: '*',
        providers: [],
        viewProviders: [],
        queries: [],
        viewQueries: [],
        componentViewType: hostViewType,
        rendererType: { id: '__Host__', encapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None, styles: [], data: {} }
    });
}

var CompilePipeMetadata = function () {
    /**
     * @param {?=} __0
     */
    function CompilePipeMetadata() {
        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            type = _ref6.type,
            name = _ref6.name,
            pure = _ref6.pure;

        _classCallCheck(this, CompilePipeMetadata);

        this.type = type;
        this.name = name;
        this.pure = !!pure;
    }
    /**
     * @return {?}
     */


    _createClass(CompilePipeMetadata, [{
        key: 'toSummary',
        value: function toSummary() {
            return {
                summaryKind: CompileSummaryKind.Pipe,
                type: this.type,
                name: this.name,
                pure: this.pure
            };
        }
    }]);

    return CompilePipeMetadata;
}();
/**
 * Metadata regarding compilation of a module.
 */


var CompileNgModuleMetadata = function () {
    /**
     * @param {?=} __0
     */
    function CompileNgModuleMetadata() {
        var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            type = _ref7.type,
            providers = _ref7.providers,
            declaredDirectives = _ref7.declaredDirectives,
            exportedDirectives = _ref7.exportedDirectives,
            declaredPipes = _ref7.declaredPipes,
            exportedPipes = _ref7.exportedPipes,
            entryComponents = _ref7.entryComponents,
            bootstrapComponents = _ref7.bootstrapComponents,
            importedModules = _ref7.importedModules,
            exportedModules = _ref7.exportedModules,
            schemas = _ref7.schemas,
            transitiveModule = _ref7.transitiveModule,
            id = _ref7.id;

        _classCallCheck(this, CompileNgModuleMetadata);

        this.type = type;
        this.declaredDirectives = _normalizeArray(declaredDirectives);
        this.exportedDirectives = _normalizeArray(exportedDirectives);
        this.declaredPipes = _normalizeArray(declaredPipes);
        this.exportedPipes = _normalizeArray(exportedPipes);
        this.providers = _normalizeArray(providers);
        this.entryComponents = _normalizeArray(entryComponents);
        this.bootstrapComponents = _normalizeArray(bootstrapComponents);
        this.importedModules = _normalizeArray(importedModules);
        this.exportedModules = _normalizeArray(exportedModules);
        this.schemas = _normalizeArray(schemas);
        this.id = id;
        this.transitiveModule = transitiveModule;
    }
    /**
     * @return {?}
     */


    _createClass(CompileNgModuleMetadata, [{
        key: 'toSummary',
        value: function toSummary() {
            return {
                summaryKind: CompileSummaryKind.NgModule,
                type: this.type,
                entryComponents: this.transitiveModule.entryComponents,
                providers: this.transitiveModule.providers,
                modules: this.transitiveModule.modules,
                exportedDirectives: this.transitiveModule.exportedDirectives,
                exportedPipes: this.transitiveModule.exportedPipes
            };
        }
    }]);

    return CompileNgModuleMetadata;
}();

var TransitiveCompileNgModuleMetadata = function () {
    function TransitiveCompileNgModuleMetadata() {
        _classCallCheck(this, TransitiveCompileNgModuleMetadata);

        this.directivesSet = new Set();
        this.directives = [];
        this.exportedDirectivesSet = new Set();
        this.exportedDirectives = [];
        this.pipesSet = new Set();
        this.pipes = [];
        this.exportedPipesSet = new Set();
        this.exportedPipes = [];
        this.modulesSet = new Set();
        this.modules = [];
        this.entryComponentsSet = new Set();
        this.entryComponents = [];
        this.providers = [];
    }
    /**
     * @param {?} provider
     * @param {?} module
     * @return {?}
     */


    _createClass(TransitiveCompileNgModuleMetadata, [{
        key: 'addProvider',
        value: function addProvider(provider, module) {
            this.providers.push({ provider: provider, module: module });
        }
        /**
         * @param {?} id
         * @return {?}
         */

    }, {
        key: 'addDirective',
        value: function addDirective(id) {
            if (!this.directivesSet.has(id.reference)) {
                this.directivesSet.add(id.reference);
                this.directives.push(id);
            }
        }
        /**
         * @param {?} id
         * @return {?}
         */

    }, {
        key: 'addExportedDirective',
        value: function addExportedDirective(id) {
            if (!this.exportedDirectivesSet.has(id.reference)) {
                this.exportedDirectivesSet.add(id.reference);
                this.exportedDirectives.push(id);
            }
        }
        /**
         * @param {?} id
         * @return {?}
         */

    }, {
        key: 'addPipe',
        value: function addPipe(id) {
            if (!this.pipesSet.has(id.reference)) {
                this.pipesSet.add(id.reference);
                this.pipes.push(id);
            }
        }
        /**
         * @param {?} id
         * @return {?}
         */

    }, {
        key: 'addExportedPipe',
        value: function addExportedPipe(id) {
            if (!this.exportedPipesSet.has(id.reference)) {
                this.exportedPipesSet.add(id.reference);
                this.exportedPipes.push(id);
            }
        }
        /**
         * @param {?} id
         * @return {?}
         */

    }, {
        key: 'addModule',
        value: function addModule(id) {
            if (!this.modulesSet.has(id.reference)) {
                this.modulesSet.add(id.reference);
                this.modules.push(id);
            }
        }
        /**
         * @param {?} ec
         * @return {?}
         */

    }, {
        key: 'addEntryComponent',
        value: function addEntryComponent(ec) {
            if (!this.entryComponentsSet.has(ec.componentType)) {
                this.entryComponentsSet.add(ec.componentType);
                this.entryComponents.push(ec);
            }
        }
    }]);

    return TransitiveCompileNgModuleMetadata;
}();
/**
 * @param {?} obj
 * @return {?}
 */


function _normalizeArray(obj) {
    return obj || [];
}

var ProviderMeta =
/**
 * @param {?} token
 * @param {?} __1
 */
function ProviderMeta(token, _ref8) {
    var useClass = _ref8.useClass,
        useValue = _ref8.useValue,
        useExisting = _ref8.useExisting,
        useFactory = _ref8.useFactory,
        deps = _ref8.deps,
        multi = _ref8.multi;

    _classCallCheck(this, ProviderMeta);

    this.token = token;
    this.useClass = useClass;
    this.useValue = useValue;
    this.useExisting = useExisting;
    this.useFactory = useFactory;
    this.dependencies = deps;
    this.multi = !!multi;
};

var CompilerConfig = function () {
    /**
     * @param {?=} __0
     */
    function CompilerConfig() {
        var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref9$defaultEncapsul = _ref9.defaultEncapsulation,
            defaultEncapsulation = _ref9$defaultEncapsul === undefined ? __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].Emulated : _ref9$defaultEncapsul,
            genDebugInfo = _ref9.genDebugInfo,
            logBindingUpdate = _ref9.logBindingUpdate,
            _ref9$useJit = _ref9.useJit,
            useJit = _ref9$useJit === undefined ? true : _ref9$useJit,
            missingTranslation = _ref9.missingTranslation,
            enableLegacyTemplate = _ref9.enableLegacyTemplate;

        _classCallCheck(this, CompilerConfig);

        this.defaultEncapsulation = defaultEncapsulation;
        this._genDebugInfo = genDebugInfo;
        this._logBindingUpdate = logBindingUpdate;
        this.useJit = useJit;
        this.missingTranslation = missingTranslation;
        this.enableLegacyTemplate = enableLegacyTemplate !== false;
    }
    /**
     * @return {?}
     */


    _createClass(CompilerConfig, [{
        key: 'genDebugInfo',
        get: function get() {
            return this._genDebugInfo === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["isDevMode"])() : this._genDebugInfo;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'logBindingUpdate',
        get: function get() {
            return this._logBindingUpdate === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["isDevMode"])() : this._logBindingUpdate;
        }
    }]);

    return CompilerConfig;
}();

var ParserError =
/**
 * @param {?} message
 * @param {?} input
 * @param {?} errLocation
 * @param {?=} ctxLocation
 */
function ParserError(message, input, errLocation, ctxLocation) {
    _classCallCheck(this, ParserError);

    this.input = input;
    this.errLocation = errLocation;
    this.ctxLocation = ctxLocation;
    this.message = 'Parser Error: ' + message + ' ' + errLocation + ' [' + input + '] in ' + ctxLocation;
};

var ParseSpan =
/**
 * @param {?} start
 * @param {?} end
 */
function ParseSpan(start, end) {
    _classCallCheck(this, ParseSpan);

    this.start = start;
    this.end = end;
};

var AST = function () {
    /**
     * @param {?} span
     */
    function AST(span) {
        _classCallCheck(this, AST);

        this.span = span;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(AST, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return null;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',
        value: function toString() {
            return 'AST';
        }
    }]);

    return AST;
}();
/**
 * Represents a quoted expression of the form:
 *
 * quote = prefix `:` uninterpretedExpression
 * prefix = identifier
 * uninterpretedExpression = arbitrary string
 *
 * A quoted expression is meant to be pre-processed by an AST transformer that
 * converts it into another AST that no longer contains quoted expressions.
 * It is meant to allow third-party developers to extend Angular template
 * expression language. The `uninterpretedExpression` part of the quote is
 * therefore not interpreted by the Angular's own expression parser.
 */


var Quote = function (_AST) {
    _inherits(Quote, _AST);

    /**
     * @param {?} span
     * @param {?} prefix
     * @param {?} uninterpretedExpression
     * @param {?} location
     */
    function Quote(span, prefix, uninterpretedExpression, location) {
        _classCallCheck(this, Quote);

        var _this12 = _possibleConstructorReturn(this, (Quote.__proto__ || Object.getPrototypeOf(Quote)).call(this, span));

        _this12.prefix = prefix;
        _this12.uninterpretedExpression = uninterpretedExpression;
        _this12.location = location;
        return _this12;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(Quote, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitQuote(this, context);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',
        value: function toString() {
            return 'Quote';
        }
    }]);

    return Quote;
}(AST);

var EmptyExpr = function (_AST2) {
    _inherits(EmptyExpr, _AST2);

    function EmptyExpr() {
        _classCallCheck(this, EmptyExpr);

        return _possibleConstructorReturn(this, (EmptyExpr.__proto__ || Object.getPrototypeOf(EmptyExpr)).apply(this, arguments));
    }

    _createClass(EmptyExpr, [{
        key: 'visit',

        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        value: function visit(visitor) {
            // do nothing

            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        }
    }]);

    return EmptyExpr;
}(AST);

var ImplicitReceiver = function (_AST3) {
    _inherits(ImplicitReceiver, _AST3);

    function ImplicitReceiver() {
        _classCallCheck(this, ImplicitReceiver);

        return _possibleConstructorReturn(this, (ImplicitReceiver.__proto__ || Object.getPrototypeOf(ImplicitReceiver)).apply(this, arguments));
    }

    _createClass(ImplicitReceiver, [{
        key: 'visit',

        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitImplicitReceiver(this, context);
        }
    }]);

    return ImplicitReceiver;
}(AST);
/**
 * Multiple expressions separated by a semicolon.
 */


var Chain = function (_AST4) {
    _inherits(Chain, _AST4);

    /**
     * @param {?} span
     * @param {?} expressions
     */
    function Chain(span, expressions) {
        _classCallCheck(this, Chain);

        var _this15 = _possibleConstructorReturn(this, (Chain.__proto__ || Object.getPrototypeOf(Chain)).call(this, span));

        _this15.expressions = expressions;
        return _this15;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(Chain, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitChain(this, context);
        }
    }]);

    return Chain;
}(AST);

var Conditional = function (_AST5) {
    _inherits(Conditional, _AST5);

    /**
     * @param {?} span
     * @param {?} condition
     * @param {?} trueExp
     * @param {?} falseExp
     */
    function Conditional(span, condition, trueExp, falseExp) {
        _classCallCheck(this, Conditional);

        var _this16 = _possibleConstructorReturn(this, (Conditional.__proto__ || Object.getPrototypeOf(Conditional)).call(this, span));

        _this16.condition = condition;
        _this16.trueExp = trueExp;
        _this16.falseExp = falseExp;
        return _this16;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(Conditional, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitConditional(this, context);
        }
    }]);

    return Conditional;
}(AST);

var PropertyRead = function (_AST6) {
    _inherits(PropertyRead, _AST6);

    /**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     */
    function PropertyRead(span, receiver, name) {
        _classCallCheck(this, PropertyRead);

        var _this17 = _possibleConstructorReturn(this, (PropertyRead.__proto__ || Object.getPrototypeOf(PropertyRead)).call(this, span));

        _this17.receiver = receiver;
        _this17.name = name;
        return _this17;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(PropertyRead, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitPropertyRead(this, context);
        }
    }]);

    return PropertyRead;
}(AST);

var PropertyWrite = function (_AST7) {
    _inherits(PropertyWrite, _AST7);

    /**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     * @param {?} value
     */
    function PropertyWrite(span, receiver, name, value) {
        _classCallCheck(this, PropertyWrite);

        var _this18 = _possibleConstructorReturn(this, (PropertyWrite.__proto__ || Object.getPrototypeOf(PropertyWrite)).call(this, span));

        _this18.receiver = receiver;
        _this18.name = name;
        _this18.value = value;
        return _this18;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(PropertyWrite, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitPropertyWrite(this, context);
        }
    }]);

    return PropertyWrite;
}(AST);

var SafePropertyRead = function (_AST8) {
    _inherits(SafePropertyRead, _AST8);

    /**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     */
    function SafePropertyRead(span, receiver, name) {
        _classCallCheck(this, SafePropertyRead);

        var _this19 = _possibleConstructorReturn(this, (SafePropertyRead.__proto__ || Object.getPrototypeOf(SafePropertyRead)).call(this, span));

        _this19.receiver = receiver;
        _this19.name = name;
        return _this19;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(SafePropertyRead, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitSafePropertyRead(this, context);
        }
    }]);

    return SafePropertyRead;
}(AST);

var KeyedRead = function (_AST9) {
    _inherits(KeyedRead, _AST9);

    /**
     * @param {?} span
     * @param {?} obj
     * @param {?} key
     */
    function KeyedRead(span, obj, key) {
        _classCallCheck(this, KeyedRead);

        var _this20 = _possibleConstructorReturn(this, (KeyedRead.__proto__ || Object.getPrototypeOf(KeyedRead)).call(this, span));

        _this20.obj = obj;
        _this20.key = key;
        return _this20;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(KeyedRead, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitKeyedRead(this, context);
        }
    }]);

    return KeyedRead;
}(AST);

var KeyedWrite = function (_AST10) {
    _inherits(KeyedWrite, _AST10);

    /**
     * @param {?} span
     * @param {?} obj
     * @param {?} key
     * @param {?} value
     */
    function KeyedWrite(span, obj, key, value) {
        _classCallCheck(this, KeyedWrite);

        var _this21 = _possibleConstructorReturn(this, (KeyedWrite.__proto__ || Object.getPrototypeOf(KeyedWrite)).call(this, span));

        _this21.obj = obj;
        _this21.key = key;
        _this21.value = value;
        return _this21;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(KeyedWrite, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitKeyedWrite(this, context);
        }
    }]);

    return KeyedWrite;
}(AST);

var BindingPipe = function (_AST11) {
    _inherits(BindingPipe, _AST11);

    /**
     * @param {?} span
     * @param {?} exp
     * @param {?} name
     * @param {?} args
     */
    function BindingPipe(span, exp, name, args) {
        _classCallCheck(this, BindingPipe);

        var _this22 = _possibleConstructorReturn(this, (BindingPipe.__proto__ || Object.getPrototypeOf(BindingPipe)).call(this, span));

        _this22.exp = exp;
        _this22.name = name;
        _this22.args = args;
        return _this22;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(BindingPipe, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return visitor.visitPipe(this, context);
        }
    }]);

    return BindingPipe;
}(AST);

var LiteralPrimitive = function (_AST12) {
    _inherits(LiteralPrimitive, _AST12);

    /**
     * @param {?} span
     * @param {?} value
     */
    function LiteralPrimitive(span, value) {
        _classCallCheck(this, LiteralPrimitive);

        var _this23 = _possibleConstructorReturn(this, (LiteralPrimitive.__proto__ || Object.getPrototypeOf(LiteralPrimitive)).call(this, span));

        _this23.value = value;
        return _this23;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(LiteralPrimitive, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitLiteralPrimitive(this, context);
        }
    }]);

    return LiteralPrimitive;
}(AST);

var LiteralArray = function (_AST13) {
    _inherits(LiteralArray, _AST13);

    /**
     * @param {?} span
     * @param {?} expressions
     */
    function LiteralArray(span, expressions) {
        _classCallCheck(this, LiteralArray);

        var _this24 = _possibleConstructorReturn(this, (LiteralArray.__proto__ || Object.getPrototypeOf(LiteralArray)).call(this, span));

        _this24.expressions = expressions;
        return _this24;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(LiteralArray, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitLiteralArray(this, context);
        }
    }]);

    return LiteralArray;
}(AST);

var LiteralMap = function (_AST14) {
    _inherits(LiteralMap, _AST14);

    /**
     * @param {?} span
     * @param {?} keys
     * @param {?} values
     */
    function LiteralMap(span, keys, values) {
        _classCallCheck(this, LiteralMap);

        var _this25 = _possibleConstructorReturn(this, (LiteralMap.__proto__ || Object.getPrototypeOf(LiteralMap)).call(this, span));

        _this25.keys = keys;
        _this25.values = values;
        return _this25;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(LiteralMap, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitLiteralMap(this, context);
        }
    }]);

    return LiteralMap;
}(AST);

var Interpolation = function (_AST15) {
    _inherits(Interpolation, _AST15);

    /**
     * @param {?} span
     * @param {?} strings
     * @param {?} expressions
     */
    function Interpolation(span, strings, expressions) {
        _classCallCheck(this, Interpolation);

        var _this26 = _possibleConstructorReturn(this, (Interpolation.__proto__ || Object.getPrototypeOf(Interpolation)).call(this, span));

        _this26.strings = strings;
        _this26.expressions = expressions;
        return _this26;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(Interpolation, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitInterpolation(this, context);
        }
    }]);

    return Interpolation;
}(AST);

var Binary = function (_AST16) {
    _inherits(Binary, _AST16);

    /**
     * @param {?} span
     * @param {?} operation
     * @param {?} left
     * @param {?} right
     */
    function Binary(span, operation, left, right) {
        _classCallCheck(this, Binary);

        var _this27 = _possibleConstructorReturn(this, (Binary.__proto__ || Object.getPrototypeOf(Binary)).call(this, span));

        _this27.operation = operation;
        _this27.left = left;
        _this27.right = right;
        return _this27;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(Binary, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitBinary(this, context);
        }
    }]);

    return Binary;
}(AST);

var PrefixNot = function (_AST17) {
    _inherits(PrefixNot, _AST17);

    /**
     * @param {?} span
     * @param {?} expression
     */
    function PrefixNot(span, expression) {
        _classCallCheck(this, PrefixNot);

        var _this28 = _possibleConstructorReturn(this, (PrefixNot.__proto__ || Object.getPrototypeOf(PrefixNot)).call(this, span));

        _this28.expression = expression;
        return _this28;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(PrefixNot, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitPrefixNot(this, context);
        }
    }]);

    return PrefixNot;
}(AST);

var MethodCall = function (_AST18) {
    _inherits(MethodCall, _AST18);

    /**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     * @param {?} args
     */
    function MethodCall(span, receiver, name, args) {
        _classCallCheck(this, MethodCall);

        var _this29 = _possibleConstructorReturn(this, (MethodCall.__proto__ || Object.getPrototypeOf(MethodCall)).call(this, span));

        _this29.receiver = receiver;
        _this29.name = name;
        _this29.args = args;
        return _this29;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(MethodCall, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitMethodCall(this, context);
        }
    }]);

    return MethodCall;
}(AST);

var SafeMethodCall = function (_AST19) {
    _inherits(SafeMethodCall, _AST19);

    /**
     * @param {?} span
     * @param {?} receiver
     * @param {?} name
     * @param {?} args
     */
    function SafeMethodCall(span, receiver, name, args) {
        _classCallCheck(this, SafeMethodCall);

        var _this30 = _possibleConstructorReturn(this, (SafeMethodCall.__proto__ || Object.getPrototypeOf(SafeMethodCall)).call(this, span));

        _this30.receiver = receiver;
        _this30.name = name;
        _this30.args = args;
        return _this30;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(SafeMethodCall, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitSafeMethodCall(this, context);
        }
    }]);

    return SafeMethodCall;
}(AST);

var FunctionCall = function (_AST20) {
    _inherits(FunctionCall, _AST20);

    /**
     * @param {?} span
     * @param {?} target
     * @param {?} args
     */
    function FunctionCall(span, target, args) {
        _classCallCheck(this, FunctionCall);

        var _this31 = _possibleConstructorReturn(this, (FunctionCall.__proto__ || Object.getPrototypeOf(FunctionCall)).call(this, span));

        _this31.target = target;
        _this31.args = args;
        return _this31;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(FunctionCall, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return visitor.visitFunctionCall(this, context);
        }
    }]);

    return FunctionCall;
}(AST);

var ASTWithSource = function (_AST21) {
    _inherits(ASTWithSource, _AST21);

    /**
     * @param {?} ast
     * @param {?} source
     * @param {?} location
     * @param {?} errors
     */
    function ASTWithSource(ast, source, location, errors) {
        _classCallCheck(this, ASTWithSource);

        var _this32 = _possibleConstructorReturn(this, (ASTWithSource.__proto__ || Object.getPrototypeOf(ASTWithSource)).call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length)));

        _this32.ast = ast;
        _this32.source = source;
        _this32.location = location;
        _this32.errors = errors;
        return _this32;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(ASTWithSource, [{
        key: 'visit',
        value: function visit(visitor) {
            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            return this.ast.visit(visitor, context);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',
        value: function toString() {
            return this.source + ' in ' + this.location;
        }
    }]);

    return ASTWithSource;
}(AST);

var TemplateBinding =
/**
 * @param {?} span
 * @param {?} key
 * @param {?} keyIsVar
 * @param {?} name
 * @param {?} expression
 */
function TemplateBinding(span, key, keyIsVar, name, expression) {
    _classCallCheck(this, TemplateBinding);

    this.span = span;
    this.key = key;
    this.keyIsVar = keyIsVar;
    this.name = name;
    this.expression = expression;
};

var RecursiveAstVisitor = function () {
    function RecursiveAstVisitor() {
        _classCallCheck(this, RecursiveAstVisitor);
    }

    _createClass(RecursiveAstVisitor, [{
        key: 'visitBinary',

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        value: function visitBinary(ast, context) {
            ast.left.visit(this);
            ast.right.visit(this);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitChain',
        value: function visitChain(ast, context) {
            return this.visitAll(ast.expressions, context);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitConditional',
        value: function visitConditional(ast, context) {
            ast.condition.visit(this);
            ast.trueExp.visit(this);
            ast.falseExp.visit(this);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPipe',
        value: function visitPipe(ast, context) {
            ast.exp.visit(this);
            this.visitAll(ast.args, context);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitFunctionCall',
        value: function visitFunctionCall(ast, context) {
            ast.target.visit(this);
            this.visitAll(ast.args, context);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitImplicitReceiver',
        value: function visitImplicitReceiver(ast, context) {
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitInterpolation',
        value: function visitInterpolation(ast, context) {
            return this.visitAll(ast.expressions, context);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitKeyedRead',
        value: function visitKeyedRead(ast, context) {
            ast.obj.visit(this);
            ast.key.visit(this);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitKeyedWrite',
        value: function visitKeyedWrite(ast, context) {
            ast.obj.visit(this);
            ast.key.visit(this);
            ast.value.visit(this);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralArray',
        value: function visitLiteralArray(ast, context) {
            return this.visitAll(ast.expressions, context);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralMap',
        value: function visitLiteralMap(ast, context) {
            return this.visitAll(ast.values, context);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralPrimitive',
        value: function visitLiteralPrimitive(ast, context) {
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitMethodCall',
        value: function visitMethodCall(ast, context) {
            ast.receiver.visit(this);
            return this.visitAll(ast.args, context);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPrefixNot',
        value: function visitPrefixNot(ast, context) {
            ast.expression.visit(this);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPropertyRead',
        value: function visitPropertyRead(ast, context) {
            ast.receiver.visit(this);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPropertyWrite',
        value: function visitPropertyWrite(ast, context) {
            ast.receiver.visit(this);
            ast.value.visit(this);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitSafePropertyRead',
        value: function visitSafePropertyRead(ast, context) {
            ast.receiver.visit(this);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitSafeMethodCall',
        value: function visitSafeMethodCall(ast, context) {
            ast.receiver.visit(this);
            return this.visitAll(ast.args, context);
        }
        /**
         * @param {?} asts
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAll',
        value: function visitAll(asts, context) {
            var _this33 = this;

            asts.forEach(function (ast) {
                return ast.visit(_this33, context);
            });
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitQuote',
        value: function visitQuote(ast, context) {
            return null;
        }
    }]);

    return RecursiveAstVisitor;
}();

var AstTransformer = function () {
    function AstTransformer() {
        _classCallCheck(this, AstTransformer);
    }

    _createClass(AstTransformer, [{
        key: 'visitImplicitReceiver',

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        value: function visitImplicitReceiver(ast, context) {
            return ast;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitInterpolation',
        value: function visitInterpolation(ast, context) {
            return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralPrimitive',
        value: function visitLiteralPrimitive(ast, context) {
            return new LiteralPrimitive(ast.span, ast.value);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPropertyRead',
        value: function visitPropertyRead(ast, context) {
            return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPropertyWrite',
        value: function visitPropertyWrite(ast, context) {
            return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitSafePropertyRead',
        value: function visitSafePropertyRead(ast, context) {
            return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitMethodCall',
        value: function visitMethodCall(ast, context) {
            return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitSafeMethodCall',
        value: function visitSafeMethodCall(ast, context) {
            return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitFunctionCall',
        value: function visitFunctionCall(ast, context) {
            return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralArray',
        value: function visitLiteralArray(ast, context) {
            return new LiteralArray(ast.span, this.visitAll(ast.expressions));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralMap',
        value: function visitLiteralMap(ast, context) {
            return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitBinary',
        value: function visitBinary(ast, context) {
            return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPrefixNot',
        value: function visitPrefixNot(ast, context) {
            return new PrefixNot(ast.span, ast.expression.visit(this));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitConditional',
        value: function visitConditional(ast, context) {
            return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPipe',
        value: function visitPipe(ast, context) {
            return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitKeyedRead',
        value: function visitKeyedRead(ast, context) {
            return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitKeyedWrite',
        value: function visitKeyedWrite(ast, context) {
            return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
        }
        /**
         * @param {?} asts
         * @return {?}
         */

    }, {
        key: 'visitAll',
        value: function visitAll(asts) {
            var /** @type {?} */res = new Array(asts.length);
            for (var /** @type {?} */i = 0; i < asts.length; ++i) {
                res[i] = asts[i].visit(this);
            }
            return res;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitChain',
        value: function visitChain(ast, context) {
            return new Chain(ast.span, this.visitAll(ast.expressions));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitQuote',
        value: function visitQuote(ast, context) {
            return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);
        }
    }]);

    return AstTransformer;
}();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var /** @type {?} */$EOF = 0;
var /** @type {?} */$TAB = 9;
var /** @type {?} */$LF = 10;
var /** @type {?} */$VTAB = 11;
var /** @type {?} */$FF = 12;
var /** @type {?} */$CR = 13;
var /** @type {?} */$SPACE = 32;
var /** @type {?} */$BANG = 33;
var /** @type {?} */$DQ = 34;
var /** @type {?} */$HASH = 35;
var /** @type {?} */$$ = 36;
var /** @type {?} */$PERCENT = 37;
var /** @type {?} */$AMPERSAND = 38;
var /** @type {?} */$SQ = 39;
var /** @type {?} */$LPAREN = 40;
var /** @type {?} */$RPAREN = 41;
var /** @type {?} */$STAR = 42;
var /** @type {?} */$PLUS = 43;
var /** @type {?} */$COMMA = 44;
var /** @type {?} */$MINUS = 45;
var /** @type {?} */$PERIOD = 46;
var /** @type {?} */$SLASH = 47;
var /** @type {?} */$COLON = 58;
var /** @type {?} */$SEMICOLON = 59;
var /** @type {?} */$LT = 60;
var /** @type {?} */$EQ = 61;
var /** @type {?} */$GT = 62;
var /** @type {?} */$QUESTION = 63;
var /** @type {?} */$0 = 48;
var /** @type {?} */$9 = 57;
var /** @type {?} */$A = 65;
var /** @type {?} */$E = 69;
var /** @type {?} */$F = 70;
var /** @type {?} */$X = 88;
var /** @type {?} */$Z = 90;
var /** @type {?} */$LBRACKET = 91;
var /** @type {?} */$BACKSLASH = 92;
var /** @type {?} */$RBRACKET = 93;
var /** @type {?} */$CARET = 94;
var /** @type {?} */$_ = 95;
var /** @type {?} */$a = 97;
var /** @type {?} */$e = 101;
var /** @type {?} */$f = 102;
var /** @type {?} */$n = 110;
var /** @type {?} */$r = 114;
var /** @type {?} */$t = 116;
var /** @type {?} */$u = 117;
var /** @type {?} */$v = 118;
var /** @type {?} */$x = 120;
var /** @type {?} */$z = 122;
var /** @type {?} */$LBRACE = 123;
var /** @type {?} */$BAR = 124;
var /** @type {?} */$RBRACE = 125;
var /** @type {?} */$NBSP = 160;
var /** @type {?} */$BT = 96;
/**
 * @param {?} code
 * @return {?}
 */
function isWhitespace(code) {
    return code >= $TAB && code <= $SPACE || code == $NBSP;
}
/**
 * @param {?} code
 * @return {?}
 */
function isDigit(code) {
    return $0 <= code && code <= $9;
}
/**
 * @param {?} code
 * @return {?}
 */
function isAsciiLetter(code) {
    return code >= $a && code <= $z || code >= $A && code <= $Z;
}
/**
 * @param {?} code
 * @return {?}
 */
function isAsciiHexDigit(code) {
    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
}

/**
 * A replacement for \@Injectable to be used in the compiler, so that
 * we don't try to evaluate the metadata in the compiler during AoT.
 * This decorator is enough to make the compiler work with the ReflectiveInjector though.
 * \@Annotation
 * @return {?}
 */
function CompilerInjectable() {
    return function (x) {
        return x;
    };
}

/**
 * @param {?} identifier
 * @param {?} value
 * @return {?}
 */
function assertArrayOfStrings(identifier, value) {
    if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["isDevMode"])() || isBlank(value)) {
        return;
    }
    if (!Array.isArray(value)) {
        throw new Error('Expected \'' + identifier + '\' to be an array of strings.');
    }
    for (var /** @type {?} */i = 0; i < value.length; i += 1) {
        if (typeof value[i] !== 'string') {
            throw new Error('Expected \'' + identifier + '\' to be an array of strings.');
        }
    }
}
var /** @type {?} */INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
/**
 * @param {?} identifier
 * @param {?} value
 * @return {?}
 */
function assertInterpolationSymbols(identifier, value) {
    if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
        throw new Error('Expected \'' + identifier + '\' to be an array, [start, end].');
    } else if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["isDevMode"])() && !isBlank(value)) {
        var /** @type {?} */start = value[0];
        var /** @type {?} */end = value[1];
        // black list checking
        INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
            if (regexp.test(start) || regexp.test(end)) {
                throw new Error('[\'' + start + '\', \'' + end + '\'] contains unusable interpolation symbol.');
            }
        });
    }
}

var InterpolationConfig = function () {
    /**
     * @param {?} start
     * @param {?} end
     */
    function InterpolationConfig(start, end) {
        _classCallCheck(this, InterpolationConfig);

        this.start = start;
        this.end = end;
    }
    /**
     * @param {?} markers
     * @return {?}
     */


    _createClass(InterpolationConfig, null, [{
        key: 'fromArray',
        value: function fromArray(markers) {
            if (!markers) {
                return DEFAULT_INTERPOLATION_CONFIG;
            }
            assertInterpolationSymbols('interpolation', markers);
            return new InterpolationConfig(markers[0], markers[1]);
        }
    }]);

    return InterpolationConfig;
}();

var /** @type {?} */DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');

var TokenType = {};
TokenType.Character = 0;
TokenType.Identifier = 1;
TokenType.Keyword = 2;
TokenType.String = 3;
TokenType.Operator = 4;
TokenType.Number = 5;
TokenType.Error = 6;
TokenType[TokenType.Character] = "Character";
TokenType[TokenType.Identifier] = "Identifier";
TokenType[TokenType.Keyword] = "Keyword";
TokenType[TokenType.String] = "String";
TokenType[TokenType.Operator] = "Operator";
TokenType[TokenType.Number] = "Number";
TokenType[TokenType.Error] = "Error";
var /** @type {?} */KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];

var Lexer = function () {
    function Lexer() {
        _classCallCheck(this, Lexer);
    }

    _createClass(Lexer, [{
        key: 'tokenize',

        /**
         * @param {?} text
         * @return {?}
         */
        value: function tokenize(text) {
            var /** @type {?} */scanner = new _Scanner(text);
            var /** @type {?} */tokens = [];
            var /** @type {?} */token = scanner.scanToken();
            while (token != null) {
                tokens.push(token);
                token = scanner.scanToken();
            }
            return tokens;
        }
    }]);

    return Lexer;
}();

Lexer.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
Lexer.ctorParameters = function () {
    return [];
};

var Token = function () {
    /**
     * @param {?} index
     * @param {?} type
     * @param {?} numValue
     * @param {?} strValue
     */
    function Token(index, type, numValue, strValue) {
        _classCallCheck(this, Token);

        this.index = index;
        this.type = type;
        this.numValue = numValue;
        this.strValue = strValue;
    }
    /**
     * @param {?} code
     * @return {?}
     */


    _createClass(Token, [{
        key: 'isCharacter',
        value: function isCharacter(code) {
            return this.type == TokenType.Character && this.numValue == code;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isNumber',
        value: function isNumber() {
            return this.type == TokenType.Number;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isString',
        value: function isString() {
            return this.type == TokenType.String;
        }
        /**
         * @param {?} operater
         * @return {?}
         */

    }, {
        key: 'isOperator',
        value: function isOperator(operater) {
            return this.type == TokenType.Operator && this.strValue == operater;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isIdentifier',
        value: function isIdentifier() {
            return this.type == TokenType.Identifier;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isKeyword',
        value: function isKeyword() {
            return this.type == TokenType.Keyword;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isKeywordLet',
        value: function isKeywordLet() {
            return this.type == TokenType.Keyword && this.strValue == 'let';
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isKeywordNull',
        value: function isKeywordNull() {
            return this.type == TokenType.Keyword && this.strValue == 'null';
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isKeywordUndefined',
        value: function isKeywordUndefined() {
            return this.type == TokenType.Keyword && this.strValue == 'undefined';
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isKeywordTrue',
        value: function isKeywordTrue() {
            return this.type == TokenType.Keyword && this.strValue == 'true';
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isKeywordFalse',
        value: function isKeywordFalse() {
            return this.type == TokenType.Keyword && this.strValue == 'false';
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isKeywordThis',
        value: function isKeywordThis() {
            return this.type == TokenType.Keyword && this.strValue == 'this';
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isError',
        value: function isError() {
            return this.type == TokenType.Error;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toNumber',
        value: function toNumber() {
            return this.type == TokenType.Number ? this.numValue : -1;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toString',
        value: function toString() {
            switch (this.type) {
                case TokenType.Character:
                case TokenType.Identifier:
                case TokenType.Keyword:
                case TokenType.Operator:
                case TokenType.String:
                case TokenType.Error:
                    return this.strValue;
                case TokenType.Number:
                    return this.numValue.toString();
                default:
                    return null;
            }
        }
    }]);

    return Token;
}();
/**
 * @param {?} index
 * @param {?} code
 * @return {?}
 */


function newCharacterToken(index, code) {
    return new Token(index, TokenType.Character, code, String.fromCharCode(code));
}
/**
 * @param {?} index
 * @param {?} text
 * @return {?}
 */
function newIdentifierToken(index, text) {
    return new Token(index, TokenType.Identifier, 0, text);
}
/**
 * @param {?} index
 * @param {?} text
 * @return {?}
 */
function newKeywordToken(index, text) {
    return new Token(index, TokenType.Keyword, 0, text);
}
/**
 * @param {?} index
 * @param {?} text
 * @return {?}
 */
function newOperatorToken(index, text) {
    return new Token(index, TokenType.Operator, 0, text);
}
/**
 * @param {?} index
 * @param {?} text
 * @return {?}
 */
function newStringToken(index, text) {
    return new Token(index, TokenType.String, 0, text);
}
/**
 * @param {?} index
 * @param {?} n
 * @return {?}
 */
function newNumberToken(index, n) {
    return new Token(index, TokenType.Number, n, '');
}
/**
 * @param {?} index
 * @param {?} message
 * @return {?}
 */
function newErrorToken(index, message) {
    return new Token(index, TokenType.Error, 0, message);
}
var /** @type {?} */EOF = new Token(-1, TokenType.Character, 0, '');

var _Scanner = function () {
    /**
     * @param {?} input
     */
    function _Scanner(input) {
        _classCallCheck(this, _Scanner);

        this.input = input;
        this.peek = 0;
        this.index = -1;
        this.length = input.length;
        this.advance();
    }
    /**
     * @return {?}
     */


    _createClass(_Scanner, [{
        key: 'advance',
        value: function advance() {
            this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'scanToken',
        value: function scanToken() {
            var /** @type {?} */input = this.input,
                /** @type {?} */length = this.length;
            var /** @type {?} */peek = this.peek,
                /** @type {?} */index = this.index;
            // Skip whitespace.
            while (peek <= $SPACE) {
                if (++index >= length) {
                    peek = $EOF;
                    break;
                } else {
                    peek = input.charCodeAt(index);
                }
            }
            this.peek = peek;
            this.index = index;
            if (index >= length) {
                return null;
            }
            // Handle identifiers and numbers.
            if (isIdentifierStart(peek)) return this.scanIdentifier();
            if (isDigit(peek)) return this.scanNumber(index);
            var /** @type {?} */start = index;
            switch (peek) {
                case $PERIOD:
                    this.advance();
                    return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
                case $LPAREN:
                case $RPAREN:
                case $LBRACE:
                case $RBRACE:
                case $LBRACKET:
                case $RBRACKET:
                case $COMMA:
                case $COLON:
                case $SEMICOLON:
                    return this.scanCharacter(start, peek);
                case $SQ:
                case $DQ:
                    return this.scanString();
                case $HASH:
                case $PLUS:
                case $MINUS:
                case $STAR:
                case $SLASH:
                case $PERCENT:
                case $CARET:
                    return this.scanOperator(start, String.fromCharCode(peek));
                case $QUESTION:
                    return this.scanComplexOperator(start, '?', $PERIOD, '.');
                case $LT:
                case $GT:
                    return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
                case $BANG:
                case $EQ:
                    return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
                case $AMPERSAND:
                    return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
                case $BAR:
                    return this.scanComplexOperator(start, '|', $BAR, '|');
                case $NBSP:
                    while (isWhitespace(this.peek)) {
                        this.advance();
                    }return this.scanToken();
            }
            this.advance();
            return this.error('Unexpected character [' + String.fromCharCode(peek) + ']', 0);
        }
        /**
         * @param {?} start
         * @param {?} code
         * @return {?}
         */

    }, {
        key: 'scanCharacter',
        value: function scanCharacter(start, code) {
            this.advance();
            return newCharacterToken(start, code);
        }
        /**
         * @param {?} start
         * @param {?} str
         * @return {?}
         */

    }, {
        key: 'scanOperator',
        value: function scanOperator(start, str) {
            this.advance();
            return newOperatorToken(start, str);
        }
        /**
         * Tokenize a 2/3 char long operator
         *
         * @param {?} start start index in the expression
         * @param {?} one first symbol (always part of the operator)
         * @param {?} twoCode code point for the second symbol
         * @param {?} two second symbol (part of the operator when the second code point matches)
         * @param {?=} threeCode code point for the third symbol
         * @param {?=} three third symbol (part of the operator when provided and matches source expression)
         * @return {?}
         */

    }, {
        key: 'scanComplexOperator',
        value: function scanComplexOperator(start, one, twoCode, two, threeCode, three) {
            this.advance();
            var /** @type {?} */str = one;
            if (this.peek == twoCode) {
                this.advance();
                str += two;
            }
            if (threeCode != null && this.peek == threeCode) {
                this.advance();
                str += three;
            }
            return newOperatorToken(start, str);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'scanIdentifier',
        value: function scanIdentifier() {
            var /** @type {?} */start = this.index;
            this.advance();
            while (isIdentifierPart(this.peek)) {
                this.advance();
            }var /** @type {?} */str = this.input.substring(start, this.index);
            return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
        }
        /**
         * @param {?} start
         * @return {?}
         */

    }, {
        key: 'scanNumber',
        value: function scanNumber(start) {
            var /** @type {?} */simple = this.index === start;
            this.advance(); // Skip initial digit.
            while (true) {
                if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {
                    simple = false;
                } else if (isExponentStart(this.peek)) {
                    this.advance();
                    if (isExponentSign(this.peek)) this.advance();
                    if (!isDigit(this.peek)) return this.error('Invalid exponent', -1);
                    simple = false;
                } else {
                    break;
                }
                this.advance();
            }
            var /** @type {?} */str = this.input.substring(start, this.index);
            var /** @type {?} */value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
            return newNumberToken(start, value);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'scanString',
        value: function scanString() {
            var /** @type {?} */start = this.index;
            var /** @type {?} */quote = this.peek;
            this.advance(); // Skip initial quote.
            var /** @type {?} */buffer = '';
            var /** @type {?} */marker = this.index;
            var /** @type {?} */input = this.input;
            while (this.peek != quote) {
                if (this.peek == $BACKSLASH) {
                    buffer += input.substring(marker, this.index);
                    this.advance();
                    var /** @type {?} */unescapedCode = void 0;
                    // Workaround for TS2.1-introduced type strictness
                    this.peek = this.peek;
                    if (this.peek == $u) {
                        // 4 character hex code for unicode character.
                        var /** @type {?} */hex = input.substring(this.index + 1, this.index + 5);
                        if (/^[0-9a-f]+$/i.test(hex)) {
                            unescapedCode = parseInt(hex, 16);
                        } else {
                            return this.error('Invalid unicode escape [\\u' + hex + ']', 0);
                        }
                        for (var /** @type {?} */i = 0; i < 5; i++) {
                            this.advance();
                        }
                    } else {
                        unescapedCode = unescape(this.peek);
                        this.advance();
                    }
                    buffer += String.fromCharCode(unescapedCode);
                    marker = this.index;
                } else if (this.peek == $EOF) {
                    return this.error('Unterminated quote', 0);
                } else {
                    this.advance();
                }
            }
            var /** @type {?} */last = input.substring(marker, this.index);
            this.advance(); // Skip terminating quote.
            return newStringToken(start, buffer + last);
        }
        /**
         * @param {?} message
         * @param {?} offset
         * @return {?}
         */

    }, {
        key: 'error',
        value: function error(message, offset) {
            var /** @type {?} */position = this.index + offset;
            return newErrorToken(position, 'Lexer Error: ' + message + ' at column ' + position + ' in expression [' + this.input + ']');
        }
    }]);

    return _Scanner;
}();
/**
 * @param {?} code
 * @return {?}
 */


function isIdentifierStart(code) {
    return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$;
}
/**
 * @param {?} input
 * @return {?}
 */
function isIdentifier(input) {
    if (input.length == 0) return false;
    var /** @type {?} */scanner = new _Scanner(input);
    if (!isIdentifierStart(scanner.peek)) return false;
    scanner.advance();
    while (scanner.peek !== $EOF) {
        if (!isIdentifierPart(scanner.peek)) return false;
        scanner.advance();
    }
    return true;
}
/**
 * @param {?} code
 * @return {?}
 */
function isIdentifierPart(code) {
    return isAsciiLetter(code) || isDigit(code) || code == $_ || code == $$;
}
/**
 * @param {?} code
 * @return {?}
 */
function isExponentStart(code) {
    return code == $e || code == $E;
}
/**
 * @param {?} code
 * @return {?}
 */
function isExponentSign(code) {
    return code == $MINUS || code == $PLUS;
}
/**
 * @param {?} code
 * @return {?}
 */
function isQuote(code) {
    return code === $SQ || code === $DQ || code === $BT;
}
/**
 * @param {?} code
 * @return {?}
 */
function unescape(code) {
    switch (code) {
        case $n:
            return $LF;
        case $f:
            return $FF;
        case $r:
            return $CR;
        case $t:
            return $TAB;
        case $v:
            return $VTAB;
        default:
            return code;
    }
}

var SplitInterpolation =
/**
 * @param {?} strings
 * @param {?} expressions
 * @param {?} offsets
 */
function SplitInterpolation(strings, expressions, offsets) {
    _classCallCheck(this, SplitInterpolation);

    this.strings = strings;
    this.expressions = expressions;
    this.offsets = offsets;
};

var TemplateBindingParseResult =
/**
 * @param {?} templateBindings
 * @param {?} warnings
 * @param {?} errors
 */
function TemplateBindingParseResult(templateBindings, warnings, errors) {
    _classCallCheck(this, TemplateBindingParseResult);

    this.templateBindings = templateBindings;
    this.warnings = warnings;
    this.errors = errors;
};
/**
 * @param {?} config
 * @return {?}
 */


function _createInterpolateRegExp(config) {
    var /** @type {?} */pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
    return new RegExp(pattern, 'g');
}

var Parser = function () {
    /**
     * @param {?} _lexer
     */
    function Parser(_lexer) {
        _classCallCheck(this, Parser);

        this._lexer = _lexer;
        this.errors = [];
    }
    /**
     * @param {?} input
     * @param {?} location
     * @param {?=} interpolationConfig
     * @return {?}
     */


    _createClass(Parser, [{
        key: 'parseAction',
        value: function parseAction(input, location) {
            var interpolationConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_INTERPOLATION_CONFIG;

            this._checkNoInterpolation(input, location, interpolationConfig);
            var /** @type {?} */sourceToLex = this._stripComments(input);
            var /** @type {?} */tokens = this._lexer.tokenize(this._stripComments(input));
            var /** @type {?} */ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();
            return new ASTWithSource(ast, input, location, this.errors);
        }
        /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */

    }, {
        key: 'parseBinding',
        value: function parseBinding(input, location) {
            var interpolationConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_INTERPOLATION_CONFIG;

            var /** @type {?} */ast = this._parseBindingAst(input, location, interpolationConfig);
            return new ASTWithSource(ast, input, location, this.errors);
        }
        /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */

    }, {
        key: 'parseSimpleBinding',
        value: function parseSimpleBinding(input, location) {
            var interpolationConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_INTERPOLATION_CONFIG;

            var /** @type {?} */ast = this._parseBindingAst(input, location, interpolationConfig);
            var /** @type {?} */errors = SimpleExpressionChecker.check(ast);
            if (errors.length > 0) {
                this._reportError('Host binding expression cannot contain ' + errors.join(' '), input, location);
            }
            return new ASTWithSource(ast, input, location, this.errors);
        }
        /**
         * @param {?} message
         * @param {?} input
         * @param {?} errLocation
         * @param {?=} ctxLocation
         * @return {?}
         */

    }, {
        key: '_reportError',
        value: function _reportError(message, input, errLocation, ctxLocation) {
            this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
        }
        /**
         * @param {?} input
         * @param {?} location
         * @param {?} interpolationConfig
         * @return {?}
         */

    }, {
        key: '_parseBindingAst',
        value: function _parseBindingAst(input, location, interpolationConfig) {
            // Quotes expressions use 3rd-party expression language. We don't want to use
            // our lexer or parser for that, so we check for that ahead of time.
            var /** @type {?} */quote = this._parseQuote(input, location);
            if (isPresent(quote)) {
                return quote;
            }
            this._checkNoInterpolation(input, location, interpolationConfig);
            var /** @type {?} */sourceToLex = this._stripComments(input);
            var /** @type {?} */tokens = this._lexer.tokenize(sourceToLex);
            return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();
        }
        /**
         * @param {?} input
         * @param {?} location
         * @return {?}
         */

    }, {
        key: '_parseQuote',
        value: function _parseQuote(input, location) {
            if (isBlank(input)) return null;
            var /** @type {?} */prefixSeparatorIndex = input.indexOf(':');
            if (prefixSeparatorIndex == -1) return null;
            var /** @type {?} */prefix = input.substring(0, prefixSeparatorIndex).trim();
            if (!isIdentifier(prefix)) return null;
            var /** @type {?} */uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
            return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
        }
        /**
         * @param {?} prefixToken
         * @param {?} input
         * @param {?} location
         * @return {?}
         */

    }, {
        key: 'parseTemplateBindings',
        value: function parseTemplateBindings(prefixToken, input, location) {
            var /** @type {?} */tokens = this._lexer.tokenize(input);
            if (prefixToken) {
                // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
                var /** @type {?} */prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
                    t.index = 0;
                    return t;
                });
                tokens.unshift.apply(tokens, _toConsumableArray(prefixTokens));
            }
            return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0).parseTemplateBindings();
        }
        /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */

    }, {
        key: 'parseInterpolation',
        value: function parseInterpolation(input, location) {
            var interpolationConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_INTERPOLATION_CONFIG;

            var /** @type {?} */split = this.splitInterpolation(input, location, interpolationConfig);
            if (split == null) return null;
            var /** @type {?} */expressions = [];
            for (var /** @type {?} */i = 0; i < split.expressions.length; ++i) {
                var /** @type {?} */expressionText = split.expressions[i];
                var /** @type {?} */sourceToLex = this._stripComments(expressionText);
                var /** @type {?} */tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
                var /** @type {?} */ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();
                expressions.push(ast);
            }
            return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
        }
        /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */

    }, {
        key: 'splitInterpolation',
        value: function splitInterpolation(input, location) {
            var interpolationConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_INTERPOLATION_CONFIG;

            var /** @type {?} */regexp = _createInterpolateRegExp(interpolationConfig);
            var /** @type {?} */parts = input.split(regexp);
            if (parts.length <= 1) {
                return null;
            }
            var /** @type {?} */strings = [];
            var /** @type {?} */expressions = [];
            var /** @type {?} */offsets = [];
            var /** @type {?} */offset = 0;
            for (var /** @type {?} */i = 0; i < parts.length; i++) {
                var /** @type {?} */part = parts[i];
                if (i % 2 === 0) {
                    // fixed string
                    strings.push(part);
                    offset += part.length;
                } else if (part.trim().length > 0) {
                    offset += interpolationConfig.start.length;
                    expressions.push(part);
                    offsets.push(offset);
                    offset += part.length + interpolationConfig.end.length;
                } else {
                    this._reportError('Blank expressions are not allowed in interpolated strings', input, 'at column ' + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + ' in', location);
                    expressions.push('$implict');
                    offsets.push(offset);
                }
            }
            return new SplitInterpolation(strings, expressions, offsets);
        }
        /**
         * @param {?} input
         * @param {?} location
         * @return {?}
         */

    }, {
        key: 'wrapLiteralPrimitive',
        value: function wrapLiteralPrimitive(input, location) {
            return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
        }
        /**
         * @param {?} input
         * @return {?}
         */

    }, {
        key: '_stripComments',
        value: function _stripComments(input) {
            var /** @type {?} */i = this._commentStart(input);
            return isPresent(i) ? input.substring(0, i).trim() : input;
        }
        /**
         * @param {?} input
         * @return {?}
         */

    }, {
        key: '_commentStart',
        value: function _commentStart(input) {
            var /** @type {?} */outerQuote = null;
            for (var /** @type {?} */i = 0; i < input.length - 1; i++) {
                var /** @type {?} */char = input.charCodeAt(i);
                var /** @type {?} */nextChar = input.charCodeAt(i + 1);
                if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote)) return i;
                if (outerQuote === char) {
                    outerQuote = null;
                } else if (isBlank(outerQuote) && isQuote(char)) {
                    outerQuote = char;
                }
            }
            return null;
        }
        /**
         * @param {?} input
         * @param {?} location
         * @param {?} interpolationConfig
         * @return {?}
         */

    }, {
        key: '_checkNoInterpolation',
        value: function _checkNoInterpolation(input, location, interpolationConfig) {
            var /** @type {?} */regexp = _createInterpolateRegExp(interpolationConfig);
            var /** @type {?} */parts = input.split(regexp);
            if (parts.length > 1) {
                this._reportError('Got interpolation (' + interpolationConfig.start + interpolationConfig.end + ') where expression was expected', input, 'at column ' + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + ' in', location);
            }
        }
        /**
         * @param {?} parts
         * @param {?} partInErrIdx
         * @param {?} interpolationConfig
         * @return {?}
         */

    }, {
        key: '_findInterpolationErrorColumn',
        value: function _findInterpolationErrorColumn(parts, partInErrIdx, interpolationConfig) {
            var /** @type {?} */errLocation = '';
            for (var /** @type {?} */j = 0; j < partInErrIdx; j++) {
                errLocation += j % 2 === 0 ? parts[j] : '' + interpolationConfig.start + parts[j] + interpolationConfig.end;
            }
            return errLocation.length;
        }
    }]);

    return Parser;
}();

Parser.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
Parser.ctorParameters = function () {
    return [{ type: Lexer }];
};

var _ParseAST = function () {
    /**
     * @param {?} input
     * @param {?} location
     * @param {?} tokens
     * @param {?} inputLength
     * @param {?} parseAction
     * @param {?} errors
     * @param {?} offset
     */
    function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
        _classCallCheck(this, _ParseAST);

        this.input = input;
        this.location = location;
        this.tokens = tokens;
        this.inputLength = inputLength;
        this.parseAction = parseAction;
        this.errors = errors;
        this.offset = offset;
        this.rparensExpected = 0;
        this.rbracketsExpected = 0;
        this.rbracesExpected = 0;
        this.index = 0;
    }
    /**
     * @param {?} offset
     * @return {?}
     */


    _createClass(_ParseAST, [{
        key: 'peek',
        value: function peek(offset) {
            var /** @type {?} */i = this.index + offset;
            return i < this.tokens.length ? this.tokens[i] : EOF;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'span',

        /**
         * @param {?} start
         * @return {?}
         */
        value: function span(start) {
            return new ParseSpan(start, this.inputIndex);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'advance',
        value: function advance() {
            this.index++;
        }
        /**
         * @param {?} code
         * @return {?}
         */

    }, {
        key: 'optionalCharacter',
        value: function optionalCharacter(code) {
            if (this.next.isCharacter(code)) {
                this.advance();
                return true;
            } else {
                return false;
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'peekKeywordLet',
        value: function peekKeywordLet() {
            return this.next.isKeywordLet();
        }
        /**
         * @param {?} code
         * @return {?}
         */

    }, {
        key: 'expectCharacter',
        value: function expectCharacter(code) {
            if (this.optionalCharacter(code)) return;
            this.error('Missing expected ' + String.fromCharCode(code));
        }
        /**
         * @param {?} op
         * @return {?}
         */

    }, {
        key: 'optionalOperator',
        value: function optionalOperator(op) {
            if (this.next.isOperator(op)) {
                this.advance();
                return true;
            } else {
                return false;
            }
        }
        /**
         * @param {?} operator
         * @return {?}
         */

    }, {
        key: 'expectOperator',
        value: function expectOperator(operator) {
            if (this.optionalOperator(operator)) return;
            this.error('Missing expected operator ' + operator);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'expectIdentifierOrKeyword',
        value: function expectIdentifierOrKeyword() {
            var /** @type {?} */n = this.next;
            if (!n.isIdentifier() && !n.isKeyword()) {
                this.error('Unexpected token ' + n + ', expected identifier or keyword');
                return '';
            }
            this.advance();
            return n.toString();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'expectIdentifierOrKeywordOrString',
        value: function expectIdentifierOrKeywordOrString() {
            var /** @type {?} */n = this.next;
            if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
                this.error('Unexpected token ' + n + ', expected identifier, keyword, or string');
                return '';
            }
            this.advance();
            return n.toString();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseChain',
        value: function parseChain() {
            var /** @type {?} */exprs = [];
            var /** @type {?} */start = this.inputIndex;
            while (this.index < this.tokens.length) {
                var /** @type {?} */expr = this.parsePipe();
                exprs.push(expr);
                if (this.optionalCharacter($SEMICOLON)) {
                    if (!this.parseAction) {
                        this.error('Binding expression cannot contain chained expression');
                    }
                    while (this.optionalCharacter($SEMICOLON)) {} // read all semicolons
                } else if (this.index < this.tokens.length) {
                    this.error('Unexpected token \'' + this.next + '\'');
                }
            }
            if (exprs.length == 0) return new EmptyExpr(this.span(start));
            if (exprs.length == 1) return exprs[0];
            return new Chain(this.span(start), exprs);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parsePipe',
        value: function parsePipe() {
            var /** @type {?} */result = this.parseExpression();
            if (this.optionalOperator('|')) {
                if (this.parseAction) {
                    this.error('Cannot have a pipe in an action expression');
                }
                do {
                    var /** @type {?} */name = this.expectIdentifierOrKeyword();
                    var /** @type {?} */args = [];
                    while (this.optionalCharacter($COLON)) {
                        args.push(this.parseExpression());
                    }
                    result = new BindingPipe(this.span(result.span.start), result, name, args);
                } while (this.optionalOperator('|'));
            }
            return result;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseExpression',
        value: function parseExpression() {
            return this.parseConditional();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseConditional',
        value: function parseConditional() {
            var /** @type {?} */start = this.inputIndex;
            var /** @type {?} */result = this.parseLogicalOr();
            if (this.optionalOperator('?')) {
                var /** @type {?} */yes = this.parsePipe();
                var /** @type {?} */no = void 0;
                if (!this.optionalCharacter($COLON)) {
                    var /** @type {?} */end = this.inputIndex;
                    var /** @type {?} */expression = this.input.substring(start, end);
                    this.error('Conditional expression ' + expression + ' requires all 3 expressions');
                    no = new EmptyExpr(this.span(start));
                } else {
                    no = this.parsePipe();
                }
                return new Conditional(this.span(start), result, yes, no);
            } else {
                return result;
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseLogicalOr',
        value: function parseLogicalOr() {
            // '||'
            var /** @type {?} */result = this.parseLogicalAnd();
            while (this.optionalOperator('||')) {
                var /** @type {?} */right = this.parseLogicalAnd();
                result = new Binary(this.span(result.span.start), '||', result, right);
            }
            return result;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseLogicalAnd',
        value: function parseLogicalAnd() {
            // '&&'
            var /** @type {?} */result = this.parseEquality();
            while (this.optionalOperator('&&')) {
                var /** @type {?} */right = this.parseEquality();
                result = new Binary(this.span(result.span.start), '&&', result, right);
            }
            return result;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseEquality',
        value: function parseEquality() {
            // '==','!=','===','!=='
            var /** @type {?} */result = this.parseRelational();
            while (this.next.type == TokenType.Operator) {
                var /** @type {?} */operator = this.next.strValue;
                switch (operator) {
                    case '==':
                    case '===':
                    case '!=':
                    case '!==':
                        this.advance();
                        var /** @type {?} */right = this.parseRelational();
                        result = new Binary(this.span(result.span.start), operator, result, right);
                        continue;
                }
                break;
            }
            return result;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseRelational',
        value: function parseRelational() {
            // '<', '>', '<=', '>='
            var /** @type {?} */result = this.parseAdditive();
            while (this.next.type == TokenType.Operator) {
                var /** @type {?} */operator = this.next.strValue;
                switch (operator) {
                    case '<':
                    case '>':
                    case '<=':
                    case '>=':
                        this.advance();
                        var /** @type {?} */right = this.parseAdditive();
                        result = new Binary(this.span(result.span.start), operator, result, right);
                        continue;
                }
                break;
            }
            return result;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseAdditive',
        value: function parseAdditive() {
            // '+', '-'
            var /** @type {?} */result = this.parseMultiplicative();
            while (this.next.type == TokenType.Operator) {
                var /** @type {?} */operator = this.next.strValue;
                switch (operator) {
                    case '+':
                    case '-':
                        this.advance();
                        var /** @type {?} */right = this.parseMultiplicative();
                        result = new Binary(this.span(result.span.start), operator, result, right);
                        continue;
                }
                break;
            }
            return result;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseMultiplicative',
        value: function parseMultiplicative() {
            // '*', '%', '/'
            var /** @type {?} */result = this.parsePrefix();
            while (this.next.type == TokenType.Operator) {
                var /** @type {?} */operator = this.next.strValue;
                switch (operator) {
                    case '*':
                    case '%':
                    case '/':
                        this.advance();
                        var /** @type {?} */right = this.parsePrefix();
                        result = new Binary(this.span(result.span.start), operator, result, right);
                        continue;
                }
                break;
            }
            return result;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parsePrefix',
        value: function parsePrefix() {
            if (this.next.type == TokenType.Operator) {
                var /** @type {?} */start = this.inputIndex;
                var /** @type {?} */operator = this.next.strValue;
                var /** @type {?} */result = void 0;
                switch (operator) {
                    case '+':
                        this.advance();
                        return this.parsePrefix();
                    case '-':
                        this.advance();
                        result = this.parsePrefix();
                        return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
                    case '!':
                        this.advance();
                        result = this.parsePrefix();
                        return new PrefixNot(this.span(start), result);
                }
            }
            return this.parseCallChain();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseCallChain',
        value: function parseCallChain() {
            var /** @type {?} */result = this.parsePrimary();
            while (true) {
                if (this.optionalCharacter($PERIOD)) {
                    result = this.parseAccessMemberOrMethodCall(result, false);
                } else if (this.optionalOperator('?.')) {
                    result = this.parseAccessMemberOrMethodCall(result, true);
                } else if (this.optionalCharacter($LBRACKET)) {
                    this.rbracketsExpected++;
                    var /** @type {?} */key = this.parsePipe();
                    this.rbracketsExpected--;
                    this.expectCharacter($RBRACKET);
                    if (this.optionalOperator('=')) {
                        var /** @type {?} */value = this.parseConditional();
                        result = new KeyedWrite(this.span(result.span.start), result, key, value);
                    } else {
                        result = new KeyedRead(this.span(result.span.start), result, key);
                    }
                } else if (this.optionalCharacter($LPAREN)) {
                    this.rparensExpected++;
                    var /** @type {?} */args = this.parseCallArguments();
                    this.rparensExpected--;
                    this.expectCharacter($RPAREN);
                    result = new FunctionCall(this.span(result.span.start), result, args);
                } else {
                    return result;
                }
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parsePrimary',
        value: function parsePrimary() {
            var /** @type {?} */start = this.inputIndex;
            if (this.optionalCharacter($LPAREN)) {
                this.rparensExpected++;
                var /** @type {?} */result = this.parsePipe();
                this.rparensExpected--;
                this.expectCharacter($RPAREN);
                return result;
            } else if (this.next.isKeywordNull()) {
                this.advance();
                return new LiteralPrimitive(this.span(start), null);
            } else if (this.next.isKeywordUndefined()) {
                this.advance();
                return new LiteralPrimitive(this.span(start), void 0);
            } else if (this.next.isKeywordTrue()) {
                this.advance();
                return new LiteralPrimitive(this.span(start), true);
            } else if (this.next.isKeywordFalse()) {
                this.advance();
                return new LiteralPrimitive(this.span(start), false);
            } else if (this.next.isKeywordThis()) {
                this.advance();
                return new ImplicitReceiver(this.span(start));
            } else if (this.optionalCharacter($LBRACKET)) {
                this.rbracketsExpected++;
                var /** @type {?} */elements = this.parseExpressionList($RBRACKET);
                this.rbracketsExpected--;
                this.expectCharacter($RBRACKET);
                return new LiteralArray(this.span(start), elements);
            } else if (this.next.isCharacter($LBRACE)) {
                return this.parseLiteralMap();
            } else if (this.next.isIdentifier()) {
                return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
            } else if (this.next.isNumber()) {
                var /** @type {?} */value = this.next.toNumber();
                this.advance();
                return new LiteralPrimitive(this.span(start), value);
            } else if (this.next.isString()) {
                var /** @type {?} */literalValue = this.next.toString();
                this.advance();
                return new LiteralPrimitive(this.span(start), literalValue);
            } else if (this.index >= this.tokens.length) {
                this.error('Unexpected end of expression: ' + this.input);
                return new EmptyExpr(this.span(start));
            } else {
                this.error('Unexpected token ' + this.next);
                return new EmptyExpr(this.span(start));
            }
        }
        /**
         * @param {?} terminator
         * @return {?}
         */

    }, {
        key: 'parseExpressionList',
        value: function parseExpressionList(terminator) {
            var /** @type {?} */result = [];
            if (!this.next.isCharacter(terminator)) {
                do {
                    result.push(this.parsePipe());
                } while (this.optionalCharacter($COMMA));
            }
            return result;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseLiteralMap',
        value: function parseLiteralMap() {
            var /** @type {?} */keys = [];
            var /** @type {?} */values = [];
            var /** @type {?} */start = this.inputIndex;
            this.expectCharacter($LBRACE);
            if (!this.optionalCharacter($RBRACE)) {
                this.rbracesExpected++;
                do {
                    var /** @type {?} */key = this.expectIdentifierOrKeywordOrString();
                    keys.push(key);
                    this.expectCharacter($COLON);
                    values.push(this.parsePipe());
                } while (this.optionalCharacter($COMMA));
                this.rbracesExpected--;
                this.expectCharacter($RBRACE);
            }
            return new LiteralMap(this.span(start), keys, values);
        }
        /**
         * @param {?} receiver
         * @param {?=} isSafe
         * @return {?}
         */

    }, {
        key: 'parseAccessMemberOrMethodCall',
        value: function parseAccessMemberOrMethodCall(receiver) {
            var isSafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var /** @type {?} */start = receiver.span.start;
            var /** @type {?} */id = this.expectIdentifierOrKeyword();
            if (this.optionalCharacter($LPAREN)) {
                this.rparensExpected++;
                var /** @type {?} */args = this.parseCallArguments();
                this.expectCharacter($RPAREN);
                this.rparensExpected--;
                var /** @type {?} */span = this.span(start);
                return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
            } else {
                if (isSafe) {
                    if (this.optionalOperator('=')) {
                        this.error('The \'?.\' operator cannot be used in the assignment');
                        return new EmptyExpr(this.span(start));
                    } else {
                        return new SafePropertyRead(this.span(start), receiver, id);
                    }
                } else {
                    if (this.optionalOperator('=')) {
                        if (!this.parseAction) {
                            this.error('Bindings cannot contain assignments');
                            return new EmptyExpr(this.span(start));
                        }
                        var /** @type {?} */value = this.parseConditional();
                        return new PropertyWrite(this.span(start), receiver, id, value);
                    } else {
                        return new PropertyRead(this.span(start), receiver, id);
                    }
                }
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseCallArguments',
        value: function parseCallArguments() {
            if (this.next.isCharacter($RPAREN)) return [];
            var /** @type {?} */positionals = [];
            do {
                positionals.push(this.parsePipe());
            } while (this.optionalCharacter($COMMA));
            return positionals;
        }
        /**
         * An identifier, a keyword, a string with an optional `-` inbetween.
         * @return {?}
         */

    }, {
        key: 'expectTemplateBindingKey',
        value: function expectTemplateBindingKey() {
            var /** @type {?} */result = '';
            var /** @type {?} */operatorFound = false;
            do {
                result += this.expectIdentifierOrKeywordOrString();
                operatorFound = this.optionalOperator('-');
                if (operatorFound) {
                    result += '-';
                }
            } while (operatorFound);
            return result.toString();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'parseTemplateBindings',
        value: function parseTemplateBindings() {
            var /** @type {?} */bindings = [];
            var /** @type {?} */prefix = null;
            var /** @type {?} */warnings = [];
            while (this.index < this.tokens.length) {
                var /** @type {?} */start = this.inputIndex;
                var /** @type {?} */keyIsVar = this.peekKeywordLet();
                if (keyIsVar) {
                    this.advance();
                }
                var /** @type {?} */key = this.expectTemplateBindingKey();
                if (!keyIsVar) {
                    if (prefix == null) {
                        prefix = key;
                    } else {
                        key = prefix + key[0].toUpperCase() + key.substring(1);
                    }
                }
                this.optionalCharacter($COLON);
                var /** @type {?} */name = null;
                var /** @type {?} */expression = null;
                if (keyIsVar) {
                    if (this.optionalOperator('=')) {
                        name = this.expectTemplateBindingKey();
                    } else {
                        name = '\$implicit';
                    }
                } else if (this.next !== EOF && !this.peekKeywordLet()) {
                    var /** @type {?} */_start = this.inputIndex;
                    var /** @type {?} */ast = this.parsePipe();
                    var /** @type {?} */source = this.input.substring(_start - this.offset, this.inputIndex - this.offset);
                    expression = new ASTWithSource(ast, source, this.location, this.errors);
                }
                bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name, expression));
                if (!this.optionalCharacter($SEMICOLON)) {
                    this.optionalCharacter($COMMA);
                }
            }
            return new TemplateBindingParseResult(bindings, warnings, this.errors);
        }
        /**
         * @param {?} message
         * @param {?=} index
         * @return {?}
         */

    }, {
        key: 'error',
        value: function error(message) {
            var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
            this.skip();
        }
        /**
         * @param {?=} index
         * @return {?}
         */

    }, {
        key: 'locationText',
        value: function locationText() {
            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (isBlank(index)) index = this.index;
            return index < this.tokens.length ? 'at column ' + (this.tokens[index].index + 1) + ' in' : 'at the end of the expression';
        }
        /**
         * @return {?}
         */

    }, {
        key: 'skip',
        value: function skip() {
            var /** @type {?} */n = this.next;
            while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
                if (this.next.isError()) {
                    this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
                }
                this.advance();
                n = this.next;
            }
        }
    }, {
        key: 'next',
        get: function get() {
            return this.peek(0);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'inputIndex',
        get: function get() {
            return this.index < this.tokens.length ? this.next.index + this.offset : this.inputLength + this.offset;
        }
    }]);

    return _ParseAST;
}();

var SimpleExpressionChecker = function () {
    function SimpleExpressionChecker() {
        _classCallCheck(this, SimpleExpressionChecker);

        this.errors = [];
    }
    /**
     * @param {?} ast
     * @return {?}
     */


    _createClass(SimpleExpressionChecker, [{
        key: 'visitImplicitReceiver',

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        value: function visitImplicitReceiver(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitInterpolation',
        value: function visitInterpolation(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralPrimitive',
        value: function visitLiteralPrimitive(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPropertyRead',
        value: function visitPropertyRead(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPropertyWrite',
        value: function visitPropertyWrite(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitSafePropertyRead',
        value: function visitSafePropertyRead(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitMethodCall',
        value: function visitMethodCall(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitSafeMethodCall',
        value: function visitSafeMethodCall(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitFunctionCall',
        value: function visitFunctionCall(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralArray',
        value: function visitLiteralArray(ast, context) {
            this.visitAll(ast.expressions);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralMap',
        value: function visitLiteralMap(ast, context) {
            this.visitAll(ast.values);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitBinary',
        value: function visitBinary(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPrefixNot',
        value: function visitPrefixNot(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitConditional',
        value: function visitConditional(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPipe',
        value: function visitPipe(ast, context) {
            this.errors.push('pipes');
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitKeyedRead',
        value: function visitKeyedRead(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitKeyedWrite',
        value: function visitKeyedWrite(ast, context) {}
        /**
         * @param {?} asts
         * @return {?}
         */

    }, {
        key: 'visitAll',
        value: function visitAll(asts) {
            var _this34 = this;

            return asts.map(function (node) {
                return node.visit(_this34);
            });
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitChain',
        value: function visitChain(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitQuote',
        value: function visitQuote(ast, context) {}
    }], [{
        key: 'check',
        value: function check(ast) {
            var /** @type {?} */s = new SimpleExpressionChecker();
            ast.visit(s);
            return s.errors;
        }
    }]);

    return SimpleExpressionChecker;
}();

var ParseLocation = function () {
    /**
     * @param {?} file
     * @param {?} offset
     * @param {?} line
     * @param {?} col
     */
    function ParseLocation(file, offset, line, col) {
        _classCallCheck(this, ParseLocation);

        this.file = file;
        this.offset = offset;
        this.line = line;
        this.col = col;
    }
    /**
     * @return {?}
     */


    _createClass(ParseLocation, [{
        key: 'toString',
        value: function toString() {
            return isPresent(this.offset) ? this.file.url + '@' + this.line + ':' + this.col : this.file.url;
        }
        /**
         * @param {?} delta
         * @return {?}
         */

    }, {
        key: 'moveBy',
        value: function moveBy(delta) {
            var /** @type {?} */source = this.file.content;
            var /** @type {?} */len = source.length;
            var /** @type {?} */offset = this.offset;
            var /** @type {?} */line = this.line;
            var /** @type {?} */col = this.col;
            while (offset > 0 && delta < 0) {
                offset--;
                delta++;
                var /** @type {?} */ch = source.charCodeAt(offset);
                if (ch == $LF) {
                    line--;
                    var /** @type {?} */priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
                    col = priorLine > 0 ? offset - priorLine : offset;
                } else {
                    col--;
                }
            }
            while (offset < len && delta > 0) {
                var /** @type {?} */_ch = source.charCodeAt(offset);
                offset++;
                delta--;
                if (_ch == $LF) {
                    line++;
                    col = 0;
                } else {
                    col++;
                }
            }
            return new ParseLocation(this.file, offset, line, col);
        }
        /**
         * @param {?} maxChars
         * @param {?} maxLines
         * @return {?}
         */

    }, {
        key: 'getContext',
        value: function getContext(maxChars, maxLines) {
            var /** @type {?} */content = this.file.content;
            var /** @type {?} */startOffset = this.offset;
            if (isPresent(startOffset)) {
                if (startOffset > content.length - 1) {
                    startOffset = content.length - 1;
                }
                var /** @type {?} */endOffset = startOffset;
                var /** @type {?} */ctxChars = 0;
                var /** @type {?} */ctxLines = 0;
                while (ctxChars < maxChars && startOffset > 0) {
                    startOffset--;
                    ctxChars++;
                    if (content[startOffset] == '\n') {
                        if (++ctxLines == maxLines) {
                            break;
                        }
                    }
                }
                ctxChars = 0;
                ctxLines = 0;
                while (ctxChars < maxChars && endOffset < content.length - 1) {
                    endOffset++;
                    ctxChars++;
                    if (content[endOffset] == '\n') {
                        if (++ctxLines == maxLines) {
                            break;
                        }
                    }
                }
                return {
                    before: content.substring(startOffset, this.offset),
                    after: content.substring(this.offset, endOffset + 1)
                };
            }
            return null;
        }
    }]);

    return ParseLocation;
}();

var ParseSourceFile =
/**
 * @param {?} content
 * @param {?} url
 */
function ParseSourceFile(content, url) {
    _classCallCheck(this, ParseSourceFile);

    this.content = content;
    this.url = url;
};

var ParseSourceSpan = function () {
    /**
     * @param {?} start
     * @param {?} end
     * @param {?=} details
     */
    function ParseSourceSpan(start, end) {
        var details = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, ParseSourceSpan);

        this.start = start;
        this.end = end;
        this.details = details;
    }
    /**
     * @return {?}
     */


    _createClass(ParseSourceSpan, [{
        key: 'toString',
        value: function toString() {
            return this.start.file.content.substring(this.start.offset, this.end.offset);
        }
    }]);

    return ParseSourceSpan;
}();

var ParseErrorLevel = {};
ParseErrorLevel.WARNING = 0;
ParseErrorLevel.FATAL = 1;
ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING";
ParseErrorLevel[ParseErrorLevel.FATAL] = "FATAL";

var ParseError = function () {
    /**
     * @param {?} span
     * @param {?} msg
     * @param {?=} level
     */
    function ParseError(span, msg) {
        var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.FATAL;

        _classCallCheck(this, ParseError);

        this.span = span;
        this.msg = msg;
        this.level = level;
    }
    /**
     * @return {?}
     */


    _createClass(ParseError, [{
        key: 'toString',
        value: function toString() {
            var /** @type {?} */ctx = this.span.start.getContext(100, 3);
            var /** @type {?} */contextStr = ctx ? ' ("' + ctx.before + '[ERROR ->]' + ctx.after + '")' : '';
            var /** @type {?} */details = this.span.details ? ', ' + this.span.details : '';
            return '' + this.msg + contextStr + ': ' + this.span.start + details;
        }
    }]);

    return ParseError;
}();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var Text = function () {
    /**
     * @param {?} value
     * @param {?} sourceSpan
     */
    function Text(value, sourceSpan) {
        _classCallCheck(this, Text);

        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(Text, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitText(this, context);
        }
    }]);

    return Text;
}();

var Expansion = function () {
    /**
     * @param {?} switchValue
     * @param {?} type
     * @param {?} cases
     * @param {?} sourceSpan
     * @param {?} switchValueSourceSpan
     */
    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
        _classCallCheck(this, Expansion);

        this.switchValue = switchValue;
        this.type = type;
        this.cases = cases;
        this.sourceSpan = sourceSpan;
        this.switchValueSourceSpan = switchValueSourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(Expansion, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitExpansion(this, context);
        }
    }]);

    return Expansion;
}();

var ExpansionCase = function () {
    /**
     * @param {?} value
     * @param {?} expression
     * @param {?} sourceSpan
     * @param {?} valueSourceSpan
     * @param {?} expSourceSpan
     */
    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
        _classCallCheck(this, ExpansionCase);

        this.value = value;
        this.expression = expression;
        this.sourceSpan = sourceSpan;
        this.valueSourceSpan = valueSourceSpan;
        this.expSourceSpan = expSourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ExpansionCase, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitExpansionCase(this, context);
        }
    }]);

    return ExpansionCase;
}();

var Attribute$1 = function () {
    /**
     * @param {?} name
     * @param {?} value
     * @param {?} sourceSpan
     * @param {?=} valueSpan
     */
    function Attribute$1(name, value, sourceSpan, valueSpan) {
        _classCallCheck(this, Attribute$1);

        this.name = name;
        this.value = value;
        this.sourceSpan = sourceSpan;
        this.valueSpan = valueSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(Attribute$1, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitAttribute(this, context);
        }
    }]);

    return Attribute$1;
}();

var Element = function () {
    /**
     * @param {?} name
     * @param {?} attrs
     * @param {?} children
     * @param {?} sourceSpan
     * @param {?} startSourceSpan
     * @param {?} endSourceSpan
     */
    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
        _classCallCheck(this, Element);

        this.name = name;
        this.attrs = attrs;
        this.children = children;
        this.sourceSpan = sourceSpan;
        this.startSourceSpan = startSourceSpan;
        this.endSourceSpan = endSourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(Element, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitElement(this, context);
        }
    }]);

    return Element;
}();

var Comment = function () {
    /**
     * @param {?} value
     * @param {?} sourceSpan
     */
    function Comment(value, sourceSpan) {
        _classCallCheck(this, Comment);

        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(Comment, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitComment(this, context);
        }
    }]);

    return Comment;
}();
/**
 * @param {?} visitor
 * @param {?} nodes
 * @param {?=} context
 * @return {?}
 */


function visitAll(visitor, nodes) {
    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var /** @type {?} */result = [];
    var /** @type {?} */visit = visitor.visit ? function (ast) {
        return visitor.visit(ast, context) || ast.visit(visitor, context);
    } : function (ast) {
        return ast.visit(visitor, context);
    };
    nodes.forEach(function (ast) {
        var /** @type {?} */astResult = visit(ast);
        if (astResult) {
            result.push(astResult);
        }
    });
    return result;
}

var TokenType$1 = {};
TokenType$1.TAG_OPEN_START = 0;
TokenType$1.TAG_OPEN_END = 1;
TokenType$1.TAG_OPEN_END_VOID = 2;
TokenType$1.TAG_CLOSE = 3;
TokenType$1.TEXT = 4;
TokenType$1.ESCAPABLE_RAW_TEXT = 5;
TokenType$1.RAW_TEXT = 6;
TokenType$1.COMMENT_START = 7;
TokenType$1.COMMENT_END = 8;
TokenType$1.CDATA_START = 9;
TokenType$1.CDATA_END = 10;
TokenType$1.ATTR_NAME = 11;
TokenType$1.ATTR_VALUE = 12;
TokenType$1.DOC_TYPE = 13;
TokenType$1.EXPANSION_FORM_START = 14;
TokenType$1.EXPANSION_CASE_VALUE = 15;
TokenType$1.EXPANSION_CASE_EXP_START = 16;
TokenType$1.EXPANSION_CASE_EXP_END = 17;
TokenType$1.EXPANSION_FORM_END = 18;
TokenType$1.EOF = 19;
TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START";
TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END";
TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID";
TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE";
TokenType$1[TokenType$1.TEXT] = "TEXT";
TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT";
TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START";
TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END";
TokenType$1[TokenType$1.CDATA_START] = "CDATA_START";
TokenType$1[TokenType$1.CDATA_END] = "CDATA_END";
TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME";
TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE";
TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE";
TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START";
TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE";
TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START";
TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END";
TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END";
TokenType$1[TokenType$1.EOF] = "EOF";

var Token$1 =
/**
 * @param {?} type
 * @param {?} parts
 * @param {?} sourceSpan
 */
function Token$1(type, parts, sourceSpan) {
    _classCallCheck(this, Token$1);

    this.type = type;
    this.parts = parts;
    this.sourceSpan = sourceSpan;
};

var TokenError = function (_ParseError) {
    _inherits(TokenError, _ParseError);

    /**
     * @param {?} errorMsg
     * @param {?} tokenType
     * @param {?} span
     */
    function TokenError(errorMsg, tokenType, span) {
        _classCallCheck(this, TokenError);

        var _this35 = _possibleConstructorReturn(this, (TokenError.__proto__ || Object.getPrototypeOf(TokenError)).call(this, span, errorMsg));

        _this35.tokenType = tokenType;
        return _this35;
    }

    return TokenError;
}(ParseError);

var TokenizeResult =
/**
 * @param {?} tokens
 * @param {?} errors
 */
function TokenizeResult(tokens, errors) {
    _classCallCheck(this, TokenizeResult);

    this.tokens = tokens;
    this.errors = errors;
};
/**
 * @param {?} source
 * @param {?} url
 * @param {?} getTagDefinition
 * @param {?=} tokenizeExpansionForms
 * @param {?=} interpolationConfig
 * @return {?}
 */


function tokenize(source, url, getTagDefinition) {
    var tokenizeExpansionForms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var interpolationConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_INTERPOLATION_CONFIG;

    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
}
var /** @type {?} */_CR_OR_CRLF_REGEXP = /\r\n?/g;
/**
 * @param {?} charCode
 * @return {?}
 */
function _unexpectedCharacterErrorMsg(charCode) {
    var /** @type {?} */char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
    return 'Unexpected character "' + char + '"';
}
/**
 * @param {?} entitySrc
 * @return {?}
 */
function _unknownEntityErrorMsg(entitySrc) {
    return 'Unknown entity "' + entitySrc + '" - use the "&#<decimal>;" or  "&#x<hex>;" syntax';
}

var _ControlFlowError =
/**
 * @param {?} error
 */
function _ControlFlowError(error) {
    _classCallCheck(this, _ControlFlowError);

    this.error = error;
};

var _Tokenizer = function () {
    /**
     * @param {?} _file The html source
     * @param {?} _getTagDefinition
     * @param {?} _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
     * @param {?=} _interpolationConfig
     */
    function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu) {
        var _interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;

        _classCallCheck(this, _Tokenizer);

        this._file = _file;
        this._getTagDefinition = _getTagDefinition;
        this._tokenizeIcu = _tokenizeIcu;
        this._interpolationConfig = _interpolationConfig;
        this._peek = -1;
        this._nextPeek = -1;
        this._index = -1;
        this._line = 0;
        this._column = -1;
        this._expansionCaseStack = [];
        this._inInterpolation = false;
        this.tokens = [];
        this.errors = [];
        this._input = _file.content;
        this._length = _file.content.length;
        this._advance();
    }
    /**
     * @param {?} content
     * @return {?}
     */


    _createClass(_Tokenizer, [{
        key: '_processCarriageReturns',
        value: function _processCarriageReturns(content) {
            // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
            // In order to keep the original position in the source, we can not
            // pre-process it.
            // Instead CRs are processed right before instantiating the tokens.
            return content.replace(_CR_OR_CRLF_REGEXP, '\n');
        }
        /**
         * @return {?}
         */

    }, {
        key: 'tokenize',
        value: function tokenize() {
            while (this._peek !== $EOF) {
                var /** @type {?} */start = this._getLocation();
                try {
                    if (this._attemptCharCode($LT)) {
                        if (this._attemptCharCode($BANG)) {
                            if (this._attemptCharCode($LBRACKET)) {
                                this._consumeCdata(start);
                            } else if (this._attemptCharCode($MINUS)) {
                                this._consumeComment(start);
                            } else {
                                this._consumeDocType(start);
                            }
                        } else if (this._attemptCharCode($SLASH)) {
                            this._consumeTagClose(start);
                        } else {
                            this._consumeTagOpen(start);
                        }
                    } else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
                        this._consumeText();
                    }
                } catch (e) {
                    if (e instanceof _ControlFlowError) {
                        this.errors.push(e.error);
                    } else {
                        throw e;
                    }
                }
            }
            this._beginToken(TokenType$1.EOF);
            this._endToken([]);
            return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
        }
        /**
         * \@internal
         * @return {?}
         */

    }, {
        key: '_tokenizeExpansionForm',
        value: function _tokenizeExpansionForm() {
            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
                this._consumeExpansionFormStart();
                return true;
            }
            if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
                this._consumeExpansionCaseStart();
                return true;
            }
            if (this._peek === $RBRACE) {
                if (this._isInExpansionCase()) {
                    this._consumeExpansionCaseEnd();
                    return true;
                }
                if (this._isInExpansionForm()) {
                    this._consumeExpansionFormEnd();
                    return true;
                }
            }
            return false;
        }
        /**
         * @return {?}
         */

    }, {
        key: '_getLocation',
        value: function _getLocation() {
            return new ParseLocation(this._file, this._index, this._line, this._column);
        }
        /**
         * @param {?=} start
         * @param {?=} end
         * @return {?}
         */

    }, {
        key: '_getSpan',
        value: function _getSpan() {
            var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getLocation();
            var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getLocation();

            return new ParseSourceSpan(start, end);
        }
        /**
         * @param {?} type
         * @param {?=} start
         * @return {?}
         */

    }, {
        key: '_beginToken',
        value: function _beginToken(type) {
            var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getLocation();

            this._currentTokenStart = start;
            this._currentTokenType = type;
        }
        /**
         * @param {?} parts
         * @param {?=} end
         * @return {?}
         */

    }, {
        key: '_endToken',
        value: function _endToken(parts) {
            var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getLocation();

            var /** @type {?} */token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
            this.tokens.push(token);
            this._currentTokenStart = null;
            this._currentTokenType = null;
            return token;
        }
        /**
         * @param {?} msg
         * @param {?} span
         * @return {?}
         */

    }, {
        key: '_createError',
        value: function _createError(msg, span) {
            if (this._isInExpansionForm()) {
                msg += ' (Do you have an unescaped "{" in your template? Use "{{ \'{\' }}") to escape it.)';
            }
            var /** @type {?} */error = new TokenError(msg, this._currentTokenType, span);
            this._currentTokenStart = null;
            this._currentTokenType = null;
            return new _ControlFlowError(error);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_advance',
        value: function _advance() {
            if (this._index >= this._length) {
                throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
            }
            if (this._peek === $LF) {
                this._line++;
                this._column = 0;
            } else if (this._peek !== $LF && this._peek !== $CR) {
                this._column++;
            }
            this._index++;
            this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
            this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
        }
        /**
         * @param {?} charCode
         * @return {?}
         */

    }, {
        key: '_attemptCharCode',
        value: function _attemptCharCode(charCode) {
            if (this._peek === charCode) {
                this._advance();
                return true;
            }
            return false;
        }
        /**
         * @param {?} charCode
         * @return {?}
         */

    }, {
        key: '_attemptCharCodeCaseInsensitive',
        value: function _attemptCharCodeCaseInsensitive(charCode) {
            if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
                this._advance();
                return true;
            }
            return false;
        }
        /**
         * @param {?} charCode
         * @return {?}
         */

    }, {
        key: '_requireCharCode',
        value: function _requireCharCode(charCode) {
            var /** @type {?} */location = this._getLocation();
            if (!this._attemptCharCode(charCode)) {
                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
            }
        }
        /**
         * @param {?} chars
         * @return {?}
         */

    }, {
        key: '_attemptStr',
        value: function _attemptStr(chars) {
            var /** @type {?} */len = chars.length;
            if (this._index + len > this._length) {
                return false;
            }
            var /** @type {?} */initialPosition = this._savePosition();
            for (var /** @type {?} */i = 0; i < len; i++) {
                if (!this._attemptCharCode(chars.charCodeAt(i))) {
                    // If attempting to parse the string fails, we want to reset the parser
                    // to where it was before the attempt
                    this._restorePosition(initialPosition);
                    return false;
                }
            }
            return true;
        }
        /**
         * @param {?} chars
         * @return {?}
         */

    }, {
        key: '_attemptStrCaseInsensitive',
        value: function _attemptStrCaseInsensitive(chars) {
            for (var /** @type {?} */i = 0; i < chars.length; i++) {
                if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
                    return false;
                }
            }
            return true;
        }
        /**
         * @param {?} chars
         * @return {?}
         */

    }, {
        key: '_requireStr',
        value: function _requireStr(chars) {
            var /** @type {?} */location = this._getLocation();
            if (!this._attemptStr(chars)) {
                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
            }
        }
        /**
         * @param {?} predicate
         * @return {?}
         */

    }, {
        key: '_attemptCharCodeUntilFn',
        value: function _attemptCharCodeUntilFn(predicate) {
            while (!predicate(this._peek)) {
                this._advance();
            }
        }
        /**
         * @param {?} predicate
         * @param {?} len
         * @return {?}
         */

    }, {
        key: '_requireCharCodeUntilFn',
        value: function _requireCharCodeUntilFn(predicate, len) {
            var /** @type {?} */start = this._getLocation();
            this._attemptCharCodeUntilFn(predicate);
            if (this._index - start.offset < len) {
                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
            }
        }
        /**
         * @param {?} char
         * @return {?}
         */

    }, {
        key: '_attemptUntilChar',
        value: function _attemptUntilChar(char) {
            while (this._peek !== char) {
                this._advance();
            }
        }
        /**
         * @param {?} decodeEntities
         * @return {?}
         */

    }, {
        key: '_readChar',
        value: function _readChar(decodeEntities) {
            if (decodeEntities && this._peek === $AMPERSAND) {
                return this._decodeEntity();
            } else {
                var /** @type {?} */index = this._index;
                this._advance();
                return this._input[index];
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: '_decodeEntity',
        value: function _decodeEntity() {
            var /** @type {?} */start = this._getLocation();
            this._advance();
            if (this._attemptCharCode($HASH)) {
                var /** @type {?} */isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
                var /** @type {?} */numberStart = this._getLocation().offset;
                this._attemptCharCodeUntilFn(isDigitEntityEnd);
                if (this._peek != $SEMICOLON) {
                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
                }
                this._advance();
                var /** @type {?} */strNum = this._input.substring(numberStart, this._index - 1);
                try {
                    var /** @type {?} */charCode = parseInt(strNum, isHex ? 16 : 10);
                    return String.fromCharCode(charCode);
                } catch (e) {
                    var /** @type {?} */entity = this._input.substring(start.offset + 1, this._index - 1);
                    throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
                }
            } else {
                var /** @type {?} */startPosition = this._savePosition();
                this._attemptCharCodeUntilFn(isNamedEntityEnd);
                if (this._peek != $SEMICOLON) {
                    this._restorePosition(startPosition);
                    return '&';
                }
                this._advance();
                var /** @type {?} */name = this._input.substring(start.offset + 1, this._index - 1);
                var /** @type {?} */char = NAMED_ENTITIES[name];
                if (!char) {
                    throw this._createError(_unknownEntityErrorMsg(name), this._getSpan(start));
                }
                return char;
            }
        }
        /**
         * @param {?} decodeEntities
         * @param {?} firstCharOfEnd
         * @param {?} attemptEndRest
         * @return {?}
         */

    }, {
        key: '_consumeRawText',
        value: function _consumeRawText(decodeEntities, firstCharOfEnd, attemptEndRest) {
            var /** @type {?} */tagCloseStart = void 0;
            var /** @type {?} */textStart = this._getLocation();
            this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
            var /** @type {?} */parts = [];
            while (true) {
                tagCloseStart = this._getLocation();
                if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
                    break;
                }
                if (this._index > tagCloseStart.offset) {
                    // add the characters consumed by the previous if statement to the output
                    parts.push(this._input.substring(tagCloseStart.offset, this._index));
                }
                while (this._peek !== firstCharOfEnd) {
                    parts.push(this._readChar(decodeEntities));
                }
            }
            return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
        }
        /**
         * @param {?} start
         * @return {?}
         */

    }, {
        key: '_consumeComment',
        value: function _consumeComment(start) {
            var _this36 = this;

            this._beginToken(TokenType$1.COMMENT_START, start);
            this._requireCharCode($MINUS);
            this._endToken([]);
            var /** @type {?} */textToken = this._consumeRawText(false, $MINUS, function () {
                return _this36._attemptStr('->');
            });
            this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
            this._endToken([]);
        }
        /**
         * @param {?} start
         * @return {?}
         */

    }, {
        key: '_consumeCdata',
        value: function _consumeCdata(start) {
            var _this37 = this;

            this._beginToken(TokenType$1.CDATA_START, start);
            this._requireStr('CDATA[');
            this._endToken([]);
            var /** @type {?} */textToken = this._consumeRawText(false, $RBRACKET, function () {
                return _this37._attemptStr(']>');
            });
            this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
            this._endToken([]);
        }
        /**
         * @param {?} start
         * @return {?}
         */

    }, {
        key: '_consumeDocType',
        value: function _consumeDocType(start) {
            this._beginToken(TokenType$1.DOC_TYPE, start);
            this._attemptUntilChar($GT);
            this._advance();
            this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_consumePrefixAndName',
        value: function _consumePrefixAndName() {
            var /** @type {?} */nameOrPrefixStart = this._index;
            var /** @type {?} */prefix = null;
            while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
                this._advance();
            }
            var /** @type {?} */nameStart = void 0;
            if (this._peek === $COLON) {
                this._advance();
                prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
                nameStart = this._index;
            } else {
                nameStart = nameOrPrefixStart;
            }
            this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
            var /** @type {?} */name = this._input.substring(nameStart, this._index);
            return [prefix, name];
        }
        /**
         * @param {?} start
         * @return {?}
         */

    }, {
        key: '_consumeTagOpen',
        value: function _consumeTagOpen(start) {
            var /** @type {?} */savedPos = this._savePosition();
            var /** @type {?} */tagName = void 0;
            var /** @type {?} */lowercaseTagName = void 0;
            try {
                if (!isAsciiLetter(this._peek)) {
                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
                }
                var /** @type {?} */nameStart = this._index;
                this._consumeTagOpenStart(start);
                tagName = this._input.substring(nameStart, this._index);
                lowercaseTagName = tagName.toLowerCase();
                this._attemptCharCodeUntilFn(isNotWhitespace);
                while (this._peek !== $SLASH && this._peek !== $GT) {
                    this._consumeAttributeName();
                    this._attemptCharCodeUntilFn(isNotWhitespace);
                    if (this._attemptCharCode($EQ)) {
                        this._attemptCharCodeUntilFn(isNotWhitespace);
                        this._consumeAttributeValue();
                    }
                    this._attemptCharCodeUntilFn(isNotWhitespace);
                }
                this._consumeTagOpenEnd();
            } catch (e) {
                if (e instanceof _ControlFlowError) {
                    // When the start tag is invalid, assume we want a "<"
                    this._restorePosition(savedPos);
                    // Back to back text tokens are merged at the end
                    this._beginToken(TokenType$1.TEXT, start);
                    this._endToken(['<']);
                    return;
                }
                throw e;
            }
            var /** @type {?} */contentTokenType = this._getTagDefinition(tagName).contentType;
            if (contentTokenType === TagContentType.RAW_TEXT) {
                this._consumeRawTextWithTagClose(lowercaseTagName, false);
            } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
                this._consumeRawTextWithTagClose(lowercaseTagName, true);
            }
        }
        /**
         * @param {?} lowercaseTagName
         * @param {?} decodeEntities
         * @return {?}
         */

    }, {
        key: '_consumeRawTextWithTagClose',
        value: function _consumeRawTextWithTagClose(lowercaseTagName, decodeEntities) {
            var _this38 = this;

            var /** @type {?} */textToken = this._consumeRawText(decodeEntities, $LT, function () {
                if (!_this38._attemptCharCode($SLASH)) return false;
                _this38._attemptCharCodeUntilFn(isNotWhitespace);
                if (!_this38._attemptStrCaseInsensitive(lowercaseTagName)) return false;
                _this38._attemptCharCodeUntilFn(isNotWhitespace);
                return _this38._attemptCharCode($GT);
            });
            this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
            this._endToken([null, lowercaseTagName]);
        }
        /**
         * @param {?} start
         * @return {?}
         */

    }, {
        key: '_consumeTagOpenStart',
        value: function _consumeTagOpenStart(start) {
            this._beginToken(TokenType$1.TAG_OPEN_START, start);
            var /** @type {?} */parts = this._consumePrefixAndName();
            this._endToken(parts);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_consumeAttributeName',
        value: function _consumeAttributeName() {
            this._beginToken(TokenType$1.ATTR_NAME);
            var /** @type {?} */prefixAndName = this._consumePrefixAndName();
            this._endToken(prefixAndName);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_consumeAttributeValue',
        value: function _consumeAttributeValue() {
            this._beginToken(TokenType$1.ATTR_VALUE);
            var /** @type {?} */value = void 0;
            if (this._peek === $SQ || this._peek === $DQ) {
                var /** @type {?} */quoteChar = this._peek;
                this._advance();
                var /** @type {?} */parts = [];
                while (this._peek !== quoteChar) {
                    parts.push(this._readChar(true));
                }
                value = parts.join('');
                this._advance();
            } else {
                var /** @type {?} */valueStart = this._index;
                this._requireCharCodeUntilFn(isNameEnd, 1);
                value = this._input.substring(valueStart, this._index);
            }
            this._endToken([this._processCarriageReturns(value)]);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_consumeTagOpenEnd',
        value: function _consumeTagOpenEnd() {
            var /** @type {?} */tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
            this._beginToken(tokenType);
            this._requireCharCode($GT);
            this._endToken([]);
        }
        /**
         * @param {?} start
         * @return {?}
         */

    }, {
        key: '_consumeTagClose',
        value: function _consumeTagClose(start) {
            this._beginToken(TokenType$1.TAG_CLOSE, start);
            this._attemptCharCodeUntilFn(isNotWhitespace);
            var /** @type {?} */prefixAndName = this._consumePrefixAndName();
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._requireCharCode($GT);
            this._endToken(prefixAndName);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_consumeExpansionFormStart',
        value: function _consumeExpansionFormStart() {
            this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
            this._requireCharCode($LBRACE);
            this._endToken([]);
            this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
            this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
            var /** @type {?} */condition = this._readUntil($COMMA);
            this._endToken([condition], this._getLocation());
            this._requireCharCode($COMMA);
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
            var /** @type {?} */type = this._readUntil($COMMA);
            this._endToken([type], this._getLocation());
            this._requireCharCode($COMMA);
            this._attemptCharCodeUntilFn(isNotWhitespace);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_consumeExpansionCaseStart',
        value: function _consumeExpansionCaseStart() {
            this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
            var /** @type {?} */value = this._readUntil($LBRACE).trim();
            this._endToken([value], this._getLocation());
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
            this._requireCharCode($LBRACE);
            this._endToken([], this._getLocation());
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_consumeExpansionCaseEnd',
        value: function _consumeExpansionCaseEnd() {
            this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
            this._requireCharCode($RBRACE);
            this._endToken([], this._getLocation());
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._expansionCaseStack.pop();
        }
        /**
         * @return {?}
         */

    }, {
        key: '_consumeExpansionFormEnd',
        value: function _consumeExpansionFormEnd() {
            this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
            this._requireCharCode($RBRACE);
            this._endToken([]);
            this._expansionCaseStack.pop();
        }
        /**
         * @return {?}
         */

    }, {
        key: '_consumeText',
        value: function _consumeText() {
            var /** @type {?} */start = this._getLocation();
            this._beginToken(TokenType$1.TEXT, start);
            var /** @type {?} */parts = [];
            do {
                if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
                    parts.push(this._interpolationConfig.start);
                    this._inInterpolation = true;
                } else if (this._interpolationConfig && this._inInterpolation && this._attemptStr(this._interpolationConfig.end)) {
                    parts.push(this._interpolationConfig.end);
                    this._inInterpolation = false;
                } else {
                    parts.push(this._readChar(true));
                }
            } while (!this._isTextEnd());
            this._endToken([this._processCarriageReturns(parts.join(''))]);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_isTextEnd',
        value: function _isTextEnd() {
            if (this._peek === $LT || this._peek === $EOF) {
                return true;
            }
            if (this._tokenizeIcu && !this._inInterpolation) {
                if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
                    // start of an expansion form
                    return true;
                }
                if (this._peek === $RBRACE && this._isInExpansionCase()) {
                    // end of and expansion case
                    return true;
                }
            }
            return false;
        }
        /**
         * @return {?}
         */

    }, {
        key: '_savePosition',
        value: function _savePosition() {
            return [this._peek, this._index, this._column, this._line, this.tokens.length];
        }
        /**
         * @param {?} char
         * @return {?}
         */

    }, {
        key: '_readUntil',
        value: function _readUntil(char) {
            var /** @type {?} */start = this._index;
            this._attemptUntilChar(char);
            return this._input.substring(start, this._index);
        }
        /**
         * @param {?} position
         * @return {?}
         */

    }, {
        key: '_restorePosition',
        value: function _restorePosition(position) {
            this._peek = position[0];
            this._index = position[1];
            this._column = position[2];
            this._line = position[3];
            var /** @type {?} */nbTokens = position[4];
            if (nbTokens < this.tokens.length) {
                // remove any extra tokens
                this.tokens = this.tokens.slice(0, nbTokens);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: '_isInExpansionCase',
        value: function _isInExpansionCase() {
            return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START;
        }
        /**
         * @return {?}
         */

    }, {
        key: '_isInExpansionForm',
        value: function _isInExpansionForm() {
            return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START;
        }
    }]);

    return _Tokenizer;
}();
/**
 * @param {?} code
 * @return {?}
 */


function isNotWhitespace(code) {
    return !isWhitespace(code) || code === $EOF;
}
/**
 * @param {?} code
 * @return {?}
 */
function isNameEnd(code) {
    return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
}
/**
 * @param {?} code
 * @return {?}
 */
function isPrefixEnd(code) {
    return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
}
/**
 * @param {?} code
 * @return {?}
 */
function isDigitEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
}
/**
 * @param {?} code
 * @return {?}
 */
function isNamedEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
}
/**
 * @param {?} input
 * @param {?} offset
 * @param {?} interpolationConfig
 * @return {?}
 */
function isExpansionFormStart(input, offset, interpolationConfig) {
    var /** @type {?} */isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
    return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
}
/**
 * @param {?} peek
 * @return {?}
 */
function isExpansionCaseStart(peek) {
    return peek === $EQ || isAsciiLetter(peek);
}
/**
 * @param {?} code1
 * @param {?} code2
 * @return {?}
 */
function compareCharCodeCaseInsensitive(code1, code2) {
    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
}
/**
 * @param {?} code
 * @return {?}
 */
function toUpperCaseCharCode(code) {
    return code >= $a && code <= $z ? code - $a + $A : code;
}
/**
 * @param {?} srcTokens
 * @return {?}
 */
function mergeTextTokens(srcTokens) {
    var /** @type {?} */dstTokens = [];
    var /** @type {?} */lastDstToken = void 0;
    for (var /** @type {?} */i = 0; i < srcTokens.length; i++) {
        var /** @type {?} */token = srcTokens[i];
        if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
            lastDstToken.parts[0] += token.parts[0];
            lastDstToken.sourceSpan.end = token.sourceSpan.end;
        } else {
            lastDstToken = token;
            dstTokens.push(lastDstToken);
        }
    }
    return dstTokens;
}

var TreeError = function (_ParseError2) {
    _inherits(TreeError, _ParseError2);

    /**
     * @param {?} elementName
     * @param {?} span
     * @param {?} msg
     */
    function TreeError(elementName, span, msg) {
        _classCallCheck(this, TreeError);

        var _this39 = _possibleConstructorReturn(this, (TreeError.__proto__ || Object.getPrototypeOf(TreeError)).call(this, span, msg));

        _this39.elementName = elementName;
        return _this39;
    }
    /**
     * @param {?} elementName
     * @param {?} span
     * @param {?} msg
     * @return {?}
     */


    _createClass(TreeError, null, [{
        key: 'create',
        value: function create(elementName, span, msg) {
            return new TreeError(elementName, span, msg);
        }
    }]);

    return TreeError;
}(ParseError);

var ParseTreeResult =
/**
 * @param {?} rootNodes
 * @param {?} errors
 */
function ParseTreeResult(rootNodes, errors) {
    _classCallCheck(this, ParseTreeResult);

    this.rootNodes = rootNodes;
    this.errors = errors;
};

var Parser$1 = function () {
    /**
     * @param {?} getTagDefinition
     */
    function Parser$1(getTagDefinition) {
        _classCallCheck(this, Parser$1);

        this.getTagDefinition = getTagDefinition;
    }
    /**
     * @param {?} source
     * @param {?} url
     * @param {?=} parseExpansionForms
     * @param {?=} interpolationConfig
     * @return {?}
     */


    _createClass(Parser$1, [{
        key: 'parse',
        value: function parse(source, url) {
            var parseExpansionForms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;

            var /** @type {?} */tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
            var /** @type {?} */treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
            return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
        }
    }]);

    return Parser$1;
}();

var _TreeBuilder = function () {
    /**
     * @param {?} tokens
     * @param {?} getTagDefinition
     */
    function _TreeBuilder(tokens, getTagDefinition) {
        _classCallCheck(this, _TreeBuilder);

        this.tokens = tokens;
        this.getTagDefinition = getTagDefinition;
        this._index = -1;
        this._rootNodes = [];
        this._errors = [];
        this._elementStack = [];
        this._advance();
    }
    /**
     * @return {?}
     */


    _createClass(_TreeBuilder, [{
        key: 'build',
        value: function build() {
            while (this._peek.type !== TokenType$1.EOF) {
                if (this._peek.type === TokenType$1.TAG_OPEN_START) {
                    this._consumeStartTag(this._advance());
                } else if (this._peek.type === TokenType$1.TAG_CLOSE) {
                    this._consumeEndTag(this._advance());
                } else if (this._peek.type === TokenType$1.CDATA_START) {
                    this._closeVoidElement();
                    this._consumeCdata(this._advance());
                } else if (this._peek.type === TokenType$1.COMMENT_START) {
                    this._closeVoidElement();
                    this._consumeComment(this._advance());
                } else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
                    this._closeVoidElement();
                    this._consumeText(this._advance());
                } else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
                    this._consumeExpansion(this._advance());
                } else {
                    // Skip all other tokens...
                    this._advance();
                }
            }
            return new ParseTreeResult(this._rootNodes, this._errors);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_advance',
        value: function _advance() {
            var /** @type {?} */prev = this._peek;
            if (this._index < this.tokens.length - 1) {
                // Note: there is always an EOF token at the end
                this._index++;
            }
            this._peek = this.tokens[this._index];
            return prev;
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: '_advanceIf',
        value: function _advanceIf(type) {
            if (this._peek.type === type) {
                return this._advance();
            }
            return null;
        }
        /**
         * @param {?} startToken
         * @return {?}
         */

    }, {
        key: '_consumeCdata',
        value: function _consumeCdata(startToken) {
            this._consumeText(this._advance());
            this._advanceIf(TokenType$1.CDATA_END);
        }
        /**
         * @param {?} token
         * @return {?}
         */

    }, {
        key: '_consumeComment',
        value: function _consumeComment(token) {
            var /** @type {?} */text = this._advanceIf(TokenType$1.RAW_TEXT);
            this._advanceIf(TokenType$1.COMMENT_END);
            var /** @type {?} */value = isPresent(text) ? text.parts[0].trim() : null;
            this._addToParent(new Comment(value, token.sourceSpan));
        }
        /**
         * @param {?} token
         * @return {?}
         */

    }, {
        key: '_consumeExpansion',
        value: function _consumeExpansion(token) {
            var /** @type {?} */switchValue = this._advance();
            var /** @type {?} */type = this._advance();
            var /** @type {?} */cases = [];
            // read =
            while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
                var /** @type {?} */expCase = this._parseExpansionCase();
                if (!expCase) return; // error
                cases.push(expCase);
            }
            // read the final }
            if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
                this._errors.push(TreeError.create(null, this._peek.sourceSpan, 'Invalid ICU message. Missing \'}\'.'));
                return;
            }
            var /** @type {?} */sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
            this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
            this._advance();
        }
        /**
         * @return {?}
         */

    }, {
        key: '_parseExpansionCase',
        value: function _parseExpansionCase() {
            var /** @type {?} */value = this._advance();
            // read {
            if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
                this._errors.push(TreeError.create(null, this._peek.sourceSpan, 'Invalid ICU message. Missing \'{\'.'));
                return null;
            }
            // read until }
            var /** @type {?} */start = this._advance();
            var /** @type {?} */exp = this._collectExpansionExpTokens(start);
            if (!exp) return null;
            var /** @type {?} */end = this._advance();
            exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
            // parse everything in between { and }
            var /** @type {?} */parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
            if (parsedExp.errors.length > 0) {
                this._errors = this._errors.concat( /** @type {?} */parsedExp.errors);
                return null;
            }
            var /** @type {?} */sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
            var /** @type {?} */expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
            return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
        }
        /**
         * @param {?} start
         * @return {?}
         */

    }, {
        key: '_collectExpansionExpTokens',
        value: function _collectExpansionExpTokens(start) {
            var /** @type {?} */exp = [];
            var /** @type {?} */expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
            while (true) {
                if (this._peek.type === TokenType$1.EXPANSION_FORM_START || this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
                    expansionFormStack.push(this._peek.type);
                }
                if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
                    if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
                        expansionFormStack.pop();
                        if (expansionFormStack.length == 0) return exp;
                    } else {
                        this._errors.push(TreeError.create(null, start.sourceSpan, 'Invalid ICU message. Missing \'}\'.'));
                        return null;
                    }
                }
                if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
                    if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
                        expansionFormStack.pop();
                    } else {
                        this._errors.push(TreeError.create(null, start.sourceSpan, 'Invalid ICU message. Missing \'}\'.'));
                        return null;
                    }
                }
                if (this._peek.type === TokenType$1.EOF) {
                    this._errors.push(TreeError.create(null, start.sourceSpan, 'Invalid ICU message. Missing \'}\'.'));
                    return null;
                }
                exp.push(this._advance());
            }
        }
        /**
         * @param {?} token
         * @return {?}
         */

    }, {
        key: '_consumeText',
        value: function _consumeText(token) {
            var /** @type {?} */text = token.parts[0];
            if (text.length > 0 && text[0] == '\n') {
                var /** @type {?} */parent = this._getParentElement();
                if (isPresent(parent) && parent.children.length == 0 && this.getTagDefinition(parent.name).ignoreFirstLf) {
                    text = text.substring(1);
                }
            }
            if (text.length > 0) {
                this._addToParent(new Text(text, token.sourceSpan));
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: '_closeVoidElement',
        value: function _closeVoidElement() {
            if (this._elementStack.length > 0) {
                var /** @type {?} */el = this._elementStack[this._elementStack.length - 1];
                if (this.getTagDefinition(el.name).isVoid) {
                    this._elementStack.pop();
                }
            }
        }
        /**
         * @param {?} startTagToken
         * @return {?}
         */

    }, {
        key: '_consumeStartTag',
        value: function _consumeStartTag(startTagToken) {
            var /** @type {?} */prefix = startTagToken.parts[0];
            var /** @type {?} */name = startTagToken.parts[1];
            var /** @type {?} */attrs = [];
            while (this._peek.type === TokenType$1.ATTR_NAME) {
                attrs.push(this._consumeAttr(this._advance()));
            }
            var /** @type {?} */fullName = this._getElementFullName(prefix, name, this._getParentElement());
            var /** @type {?} */selfClosing = false;
            // Note: There could have been a tokenizer error
            // so that we don't get a token for the end tag...
            if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
                this._advance();
                selfClosing = true;
                var /** @type {?} */tagDef = this.getTagDefinition(fullName);
                if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
                    this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, 'Only void and foreign elements can be self closed "' + startTagToken.parts[1] + '"'));
                }
            } else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
                this._advance();
                selfClosing = false;
            }
            var /** @type {?} */end = this._peek.sourceSpan.start;
            var /** @type {?} */span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
            var /** @type {?} */el = new Element(fullName, attrs, [], span, span, null);
            this._pushElement(el);
            if (selfClosing) {
                this._popElement(fullName);
                el.endSourceSpan = span;
            }
        }
        /**
         * @param {?} el
         * @return {?}
         */

    }, {
        key: '_pushElement',
        value: function _pushElement(el) {
            if (this._elementStack.length > 0) {
                var /** @type {?} */parentEl = this._elementStack[this._elementStack.length - 1];
                if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
                    this._elementStack.pop();
                }
            }
            var /** @type {?} */tagDef = this.getTagDefinition(el.name);

            var _getParentElementSkip = this._getParentElementSkippingContainers(),
                parent = _getParentElementSkip.parent,
                container = _getParentElementSkip.container;

            if (parent && tagDef.requireExtraParent(parent.name)) {
                var /** @type {?} */newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
                this._insertBeforeContainer(parent, container, newParent);
            }
            this._addToParent(el);
            this._elementStack.push(el);
        }
        /**
         * @param {?} endTagToken
         * @return {?}
         */

    }, {
        key: '_consumeEndTag',
        value: function _consumeEndTag(endTagToken) {
            var /** @type {?} */fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
            if (this._getParentElement()) {
                this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
            }
            if (this.getTagDefinition(fullName).isVoid) {
                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Void elements do not have end tags "' + endTagToken.parts[1] + '"'));
            } else if (!this._popElement(fullName)) {
                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, 'Unexpected closing tag "' + endTagToken.parts[1] + '"'));
            }
        }
        /**
         * @param {?} fullName
         * @return {?}
         */

    }, {
        key: '_popElement',
        value: function _popElement(fullName) {
            for (var /** @type {?} */stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
                var /** @type {?} */el = this._elementStack[stackIndex];
                if (el.name == fullName) {
                    this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
                    return true;
                }
                if (!this.getTagDefinition(el.name).closedByParent) {
                    return false;
                }
            }
            return false;
        }
        /**
         * @param {?} attrName
         * @return {?}
         */

    }, {
        key: '_consumeAttr',
        value: function _consumeAttr(attrName) {
            var /** @type {?} */fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
            var /** @type {?} */end = attrName.sourceSpan.end;
            var /** @type {?} */value = '';
            var /** @type {?} */valueSpan = void 0;
            if (this._peek.type === TokenType$1.ATTR_VALUE) {
                var /** @type {?} */valueToken = this._advance();
                value = valueToken.parts[0];
                end = valueToken.sourceSpan.end;
                valueSpan = valueToken.sourceSpan;
            }
            return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_getParentElement',
        value: function _getParentElement() {
            return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
        }
        /**
         * Returns the parent in the DOM and the container.
         *
         * `<ng-container>` elements are skipped as they are not rendered as DOM element.
         * @return {?}
         */

    }, {
        key: '_getParentElementSkippingContainers',
        value: function _getParentElementSkippingContainers() {
            var /** @type {?} */container = null;
            for (var /** @type {?} */i = this._elementStack.length - 1; i >= 0; i--) {
                if (this._elementStack[i].name !== 'ng-container') {
                    return { parent: this._elementStack[i], container: container };
                }
                container = this._elementStack[i];
            }
            return { parent: this._elementStack[this._elementStack.length - 1], container: container };
        }
        /**
         * @param {?} node
         * @return {?}
         */

    }, {
        key: '_addToParent',
        value: function _addToParent(node) {
            var /** @type {?} */parent = this._getParentElement();
            if (isPresent(parent)) {
                parent.children.push(node);
            } else {
                this._rootNodes.push(node);
            }
        }
        /**
         * Insert a node between the parent and the container.
         * When no container is given, the node is appended as a child of the parent.
         * Also updates the element stack accordingly.
         *
         * \@internal
         * @param {?} parent
         * @param {?} container
         * @param {?} node
         * @return {?}
         */

    }, {
        key: '_insertBeforeContainer',
        value: function _insertBeforeContainer(parent, container, node) {
            if (!container) {
                this._addToParent(node);
                this._elementStack.push(node);
            } else {
                if (parent) {
                    // replace the container with the new node in the children
                    var /** @type {?} */index = parent.children.indexOf(container);
                    parent.children[index] = node;
                } else {
                    this._rootNodes.push(node);
                }
                node.children.push(container);
                this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
            }
        }
        /**
         * @param {?} prefix
         * @param {?} localName
         * @param {?} parentElement
         * @return {?}
         */

    }, {
        key: '_getElementFullName',
        value: function _getElementFullName(prefix, localName, parentElement) {
            if (isBlank(prefix)) {
                prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
                if (isBlank(prefix) && isPresent(parentElement)) {
                    prefix = getNsPrefix(parentElement.name);
                }
            }
            return mergeNsAndName(prefix, localName);
        }
    }]);

    return _TreeBuilder;
}();
/**
 * @param {?} stack
 * @param {?} element
 * @return {?}
 */


function lastOnStack(stack, element) {
    return stack.length > 0 && stack[stack.length - 1] === element;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var Message =
/**
 * @param {?} nodes message AST
 * @param {?} placeholders maps placeholder names to static content
 * @param {?} placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
 * @param {?} meaning
 * @param {?} description
 * @param {?} id
 */
function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {
    _classCallCheck(this, Message);

    this.nodes = nodes;
    this.placeholders = placeholders;
    this.placeholderToMessage = placeholderToMessage;
    this.meaning = meaning;
    this.description = description;
    this.id = id;
};

var Text$1 = function () {
    /**
     * @param {?} value
     * @param {?} sourceSpan
     */
    function Text$1(value, sourceSpan) {
        _classCallCheck(this, Text$1);

        this.value = value;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(Text$1, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitText(this, context);
        }
    }]);

    return Text$1;
}();

var Container = function () {
    /**
     * @param {?} children
     * @param {?} sourceSpan
     */
    function Container(children, sourceSpan) {
        _classCallCheck(this, Container);

        this.children = children;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(Container, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitContainer(this, context);
        }
    }]);

    return Container;
}();

var Icu = function () {
    /**
     * @param {?} expression
     * @param {?} type
     * @param {?} cases
     * @param {?} sourceSpan
     */
    function Icu(expression, type, cases, sourceSpan) {
        _classCallCheck(this, Icu);

        this.expression = expression;
        this.type = type;
        this.cases = cases;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(Icu, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitIcu(this, context);
        }
    }]);

    return Icu;
}();

var TagPlaceholder = function () {
    /**
     * @param {?} tag
     * @param {?} attrs
     * @param {?} startName
     * @param {?} closeName
     * @param {?} children
     * @param {?} isVoid
     * @param {?} sourceSpan
     */
    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
        _classCallCheck(this, TagPlaceholder);

        this.tag = tag;
        this.attrs = attrs;
        this.startName = startName;
        this.closeName = closeName;
        this.children = children;
        this.isVoid = isVoid;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(TagPlaceholder, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitTagPlaceholder(this, context);
        }
    }]);

    return TagPlaceholder;
}();

var Placeholder = function () {
    /**
     * @param {?} value
     * @param {?} name
     * @param {?} sourceSpan
     */
    function Placeholder(value, name, sourceSpan) {
        _classCallCheck(this, Placeholder);

        this.value = value;
        this.name = name;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(Placeholder, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitPlaceholder(this, context);
        }
    }]);

    return Placeholder;
}();

var IcuPlaceholder = function () {
    /**
     * @param {?} value
     * @param {?} name
     * @param {?} sourceSpan
     */
    function IcuPlaceholder(value, name, sourceSpan) {
        _classCallCheck(this, IcuPlaceholder);

        this.value = value;
        this.name = name;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @param {?} visitor
     * @param {?=} context
     * @return {?}
     */


    _createClass(IcuPlaceholder, [{
        key: 'visit',
        value: function visit(visitor, context) {
            return visitor.visitIcuPlaceholder(this, context);
        }
    }]);

    return IcuPlaceholder;
}();

var CloneVisitor = function () {
    function CloneVisitor() {
        _classCallCheck(this, CloneVisitor);
    }

    _createClass(CloneVisitor, [{
        key: 'visitText',

        /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
        value: function visitText(text, context) {
            return new Text$1(text.value, text.sourceSpan);
        }
        /**
         * @param {?} container
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitContainer',
        value: function visitContainer(container, context) {
            var _this40 = this;

            var /** @type {?} */children = container.children.map(function (n) {
                return n.visit(_this40, context);
            });
            return new Container(children, container.sourceSpan);
        }
        /**
         * @param {?} icu
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcu',
        value: function visitIcu(icu, context) {
            var _this41 = this;

            var /** @type {?} */cases = {};
            Object.keys(icu.cases).forEach(function (key) {
                return cases[key] = icu.cases[key].visit(_this41, context);
            });
            var /** @type {?} */msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);
            msg.expressionPlaceholder = icu.expressionPlaceholder;
            return msg;
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitTagPlaceholder',
        value: function visitTagPlaceholder(ph, context) {
            var _this42 = this;

            var /** @type {?} */children = ph.children.map(function (n) {
                return n.visit(_this42, context);
            });
            return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitPlaceholder',
        value: function visitPlaceholder(ph, context) {
            return new Placeholder(ph.value, ph.name, ph.sourceSpan);
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcuPlaceholder',
        value: function visitIcuPlaceholder(ph, context) {
            return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
        }
    }]);

    return CloneVisitor;
}();

var RecurseVisitor = function () {
    function RecurseVisitor() {
        _classCallCheck(this, RecurseVisitor);
    }

    _createClass(RecurseVisitor, [{
        key: 'visitText',

        /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
        value: function visitText(text, context) {}
    }, {
        key: 'visitContainer',

        /**
         * @param {?} container
         * @param {?=} context
         * @return {?}
         */
        value: function visitContainer(container, context) {
            var _this43 = this;

            container.children.forEach(function (child) {
                return child.visit(_this43);
            });
        }
        /**
         * @param {?} icu
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcu',
        value: function visitIcu(icu, context) {
            var _this44 = this;

            Object.keys(icu.cases).forEach(function (k) {
                icu.cases[k].visit(_this44);
            });
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitTagPlaceholder',
        value: function visitTagPlaceholder(ph, context) {
            var _this45 = this;

            ph.children.forEach(function (child) {
                return child.visit(_this45);
            });
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitPlaceholder',
        value: function visitPlaceholder(ph, context) {}
    }, {
        key: 'visitIcuPlaceholder',

        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        value: function visitIcuPlaceholder(ph, context) {}
    }]);

    return RecurseVisitor;
}();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var /** @type {?} */TAG_TO_PLACEHOLDER_NAMES = {
    'A': 'LINK',
    'B': 'BOLD_TEXT',
    'BR': 'LINE_BREAK',
    'EM': 'EMPHASISED_TEXT',
    'H1': 'HEADING_LEVEL1',
    'H2': 'HEADING_LEVEL2',
    'H3': 'HEADING_LEVEL3',
    'H4': 'HEADING_LEVEL4',
    'H5': 'HEADING_LEVEL5',
    'H6': 'HEADING_LEVEL6',
    'HR': 'HORIZONTAL_RULE',
    'I': 'ITALIC_TEXT',
    'LI': 'LIST_ITEM',
    'LINK': 'MEDIA_LINK',
    'OL': 'ORDERED_LIST',
    'P': 'PARAGRAPH',
    'Q': 'QUOTATION',
    'S': 'STRIKETHROUGH_TEXT',
    'SMALL': 'SMALL_TEXT',
    'SUB': 'SUBSTRIPT',
    'SUP': 'SUPERSCRIPT',
    'TBODY': 'TABLE_BODY',
    'TD': 'TABLE_CELL',
    'TFOOT': 'TABLE_FOOTER',
    'TH': 'TABLE_HEADER_CELL',
    'THEAD': 'TABLE_HEADER',
    'TR': 'TABLE_ROW',
    'TT': 'MONOSPACED_TEXT',
    'U': 'UNDERLINED_TEXT',
    'UL': 'UNORDERED_LIST'
};
/**
 * Creates unique names for placeholder with different content.
 *
 * Returns the same placeholder name when the content is identical.
 *
 * \@internal
 */

var PlaceholderRegistry = function () {
    function PlaceholderRegistry() {
        _classCallCheck(this, PlaceholderRegistry);

        this._placeHolderNameCounts = {};
        this._signatureToName = {};
    }
    /**
     * @param {?} tag
     * @param {?} attrs
     * @param {?} isVoid
     * @return {?}
     */


    _createClass(PlaceholderRegistry, [{
        key: 'getStartTagPlaceholderName',
        value: function getStartTagPlaceholderName(tag, attrs, isVoid) {
            var /** @type {?} */signature = this._hashTag(tag, attrs, isVoid);
            if (this._signatureToName[signature]) {
                return this._signatureToName[signature];
            }
            var /** @type {?} */upperTag = tag.toUpperCase();
            var /** @type {?} */baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || 'TAG_' + upperTag;
            var /** @type {?} */name = this._generateUniqueName(isVoid ? baseName : 'START_' + baseName);
            this._signatureToName[signature] = name;
            return name;
        }
        /**
         * @param {?} tag
         * @return {?}
         */

    }, {
        key: 'getCloseTagPlaceholderName',
        value: function getCloseTagPlaceholderName(tag) {
            var /** @type {?} */signature = this._hashClosingTag(tag);
            if (this._signatureToName[signature]) {
                return this._signatureToName[signature];
            }
            var /** @type {?} */upperTag = tag.toUpperCase();
            var /** @type {?} */baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || 'TAG_' + upperTag;
            var /** @type {?} */name = this._generateUniqueName('CLOSE_' + baseName);
            this._signatureToName[signature] = name;
            return name;
        }
        /**
         * @param {?} name
         * @param {?} content
         * @return {?}
         */

    }, {
        key: 'getPlaceholderName',
        value: function getPlaceholderName(name, content) {
            var /** @type {?} */upperName = name.toUpperCase();
            var /** @type {?} */signature = 'PH: ' + upperName + '=' + content;
            if (this._signatureToName[signature]) {
                return this._signatureToName[signature];
            }
            var /** @type {?} */uniqueName = this._generateUniqueName(upperName);
            this._signatureToName[signature] = uniqueName;
            return uniqueName;
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'getUniquePlaceholder',
        value: function getUniquePlaceholder(name) {
            return this._generateUniqueName(name.toUpperCase());
        }
        /**
         * @param {?} tag
         * @param {?} attrs
         * @param {?} isVoid
         * @return {?}
         */

    }, {
        key: '_hashTag',
        value: function _hashTag(tag, attrs, isVoid) {
            var /** @type {?} */start = '<' + tag;
            var /** @type {?} */strAttrs = Object.keys(attrs).sort().map(function (name) {
                return ' ' + name + '=' + attrs[name];
            }).join('');
            var /** @type {?} */end = isVoid ? '/>' : '></' + tag + '>';
            return start + strAttrs + end;
        }
        /**
         * @param {?} tag
         * @return {?}
         */

    }, {
        key: '_hashClosingTag',
        value: function _hashClosingTag(tag) {
            return this._hashTag('/' + tag, {}, false);
        }
        /**
         * @param {?} base
         * @return {?}
         */

    }, {
        key: '_generateUniqueName',
        value: function _generateUniqueName(base) {
            var /** @type {?} */seen = this._placeHolderNameCounts.hasOwnProperty(base);
            if (!seen) {
                this._placeHolderNameCounts[base] = 1;
                return base;
            }
            var /** @type {?} */id = this._placeHolderNameCounts[base];
            this._placeHolderNameCounts[base] = id + 1;
            return base + '_' + id;
        }
    }]);

    return PlaceholderRegistry;
}();

var /** @type {?} */_expParser = new Parser(new Lexer());
/**
 * Returns a function converting html nodes to an i18n Message given an interpolationConfig
 * @param {?} interpolationConfig
 * @return {?}
 */
function createI18nMessageFactory(interpolationConfig) {
    var /** @type {?} */visitor = new _I18nVisitor(_expParser, interpolationConfig);
    return function (nodes, meaning, description, id) {
        return visitor.toI18nMessage(nodes, meaning, description, id);
    };
}

var _I18nVisitor = function () {
    /**
     * @param {?} _expressionParser
     * @param {?} _interpolationConfig
     */
    function _I18nVisitor(_expressionParser, _interpolationConfig) {
        _classCallCheck(this, _I18nVisitor);

        this._expressionParser = _expressionParser;
        this._interpolationConfig = _interpolationConfig;
    }
    /**
     * @param {?} nodes
     * @param {?} meaning
     * @param {?} description
     * @param {?} id
     * @return {?}
     */


    _createClass(_I18nVisitor, [{
        key: 'toI18nMessage',
        value: function toI18nMessage(nodes, meaning, description, id) {
            this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
            this._icuDepth = 0;
            this._placeholderRegistry = new PlaceholderRegistry();
            this._placeholderToContent = {};
            this._placeholderToMessage = {};
            var /** @type {?} */i18nodes = visitAll(this, nodes, {});
            return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);
        }
        /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitElement',
        value: function visitElement(el, context) {
            var /** @type {?} */children = visitAll(this, el.children);
            var /** @type {?} */attrs = {};
            el.attrs.forEach(function (attr) {
                // Do not visit the attributes, translatable ones are top-level ASTs
                attrs[attr.name] = attr.value;
            });
            var /** @type {?} */isVoid = getHtmlTagDefinition(el.name).isVoid;
            var /** @type {?} */startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
            this._placeholderToContent[startPhName] = el.sourceSpan.toString();
            var /** @type {?} */closePhName = '';
            if (!isVoid) {
                closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
                this._placeholderToContent[closePhName] = '</' + el.name + '>';
            }
            return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
        }
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(attribute, context) {
            return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
        }
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, context) {
            return this._visitTextWithInterpolation(text.value, text.sourceSpan);
        }
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(comment, context) {
            return null;
        }
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansion',
        value: function visitExpansion(icu, context) {
            var _this46 = this;

            this._icuDepth++;
            var /** @type {?} */i18nIcuCases = {};
            var /** @type {?} */i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
            icu.cases.forEach(function (caze) {
                i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) {
                    return node.visit(_this46, {});
                }), caze.expSourceSpan);
            });
            this._icuDepth--;
            if (this._isIcu || this._icuDepth > 0) {
                // Returns an ICU node when:
                // - the message (vs a part of the message) is an ICU message, or
                // - the ICU message is nested.
                var /** @type {?} */expPh = this._placeholderRegistry.getUniquePlaceholder('VAR_' + icu.type);
                i18nIcu.expressionPlaceholder = expPh;
                this._placeholderToContent[expPh] = icu.switchValue;
                return i18nIcu;
            }
            // Else returns a placeholder
            // ICU placeholders should not be replaced with their original content but with the their
            // translations. We need to create a new visitor (they are not re-entrant) to compute the
            // message id.
            // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
            var /** @type {?} */phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
            var /** @type {?} */visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
            this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');
            return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
        }
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(icuCase, context) {
            throw new Error('Unreachable code');
        }
        /**
         * @param {?} text
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: '_visitTextWithInterpolation',
        value: function _visitTextWithInterpolation(text, sourceSpan) {
            var /** @type {?} */splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
            if (!splitInterpolation) {
                // No expression, return a single text
                return new Text$1(text, sourceSpan);
            }
            // Return a group of text + expressions
            var /** @type {?} */nodes = [];
            var /** @type {?} */container = new Container(nodes, sourceSpan);
            var _interpolationConfig2 = this._interpolationConfig,
                sDelimiter = _interpolationConfig2.start,
                eDelimiter = _interpolationConfig2.end;

            for (var /** @type {?} */i = 0; i < splitInterpolation.strings.length - 1; i++) {
                var /** @type {?} */expression = splitInterpolation.expressions[i];
                var /** @type {?} */baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
                var /** @type {?} */phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
                if (splitInterpolation.strings[i].length) {
                    // No need to add empty strings
                    nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
                }
                nodes.push(new Placeholder(expression, phName, sourceSpan));
                this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
            }
            // The last index contains no expression
            var /** @type {?} */lastStringIdx = splitInterpolation.strings.length - 1;
            if (splitInterpolation.strings[lastStringIdx].length) {
                nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
            }
            return container;
        }
    }]);

    return _I18nVisitor;
}();

var /** @type {?} */_CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
/**
 * @param {?} input
 * @return {?}
 */
function _extractPlaceholderName(input) {
    return input.split(_CUSTOM_PH_EXP)[1];
}

/**
 * An i18n error.
 */

var I18nError = function (_ParseError3) {
    _inherits(I18nError, _ParseError3);

    /**
     * @param {?} span
     * @param {?} msg
     */
    function I18nError(span, msg) {
        _classCallCheck(this, I18nError);

        return _possibleConstructorReturn(this, (I18nError.__proto__ || Object.getPrototypeOf(I18nError)).call(this, span, msg));
    }

    return I18nError;
}(ParseError);

var /** @type {?} */_I18N_ATTR = 'i18n';
var /** @type {?} */_I18N_ATTR_PREFIX = 'i18n-';
var /** @type {?} */_I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
var /** @type {?} */MEANING_SEPARATOR = '|';
var /** @type {?} */ID_SEPARATOR = '@@';
/**
 * Extract translatable messages from an html AST
 * @param {?} nodes
 * @param {?} interpolationConfig
 * @param {?} implicitTags
 * @param {?} implicitAttrs
 * @return {?}
 */
function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
    var /** @type {?} */visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.extract(nodes, interpolationConfig);
}
/**
 * @param {?} nodes
 * @param {?} translations
 * @param {?} interpolationConfig
 * @param {?} implicitTags
 * @param {?} implicitAttrs
 * @return {?}
 */
function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
    var /** @type {?} */visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.merge(nodes, translations, interpolationConfig);
}

var ExtractionResult =
/**
 * @param {?} messages
 * @param {?} errors
 */
function ExtractionResult(messages, errors) {
    _classCallCheck(this, ExtractionResult);

    this.messages = messages;
    this.errors = errors;
};

var _VisitorMode = {};
_VisitorMode.Extract = 0;
_VisitorMode.Merge = 1;
_VisitorMode[_VisitorMode.Extract] = "Extract";
_VisitorMode[_VisitorMode.Merge] = "Merge";
/**
 * This Visitor is used:
 * 1. to extract all the translatable strings from an html AST (see `extract()`),
 * 2. to replace the translatable strings with the actual translations (see `merge()`)
 *
 * \@internal
 */

var _Visitor = function () {
    /**
     * @param {?} _implicitTags
     * @param {?} _implicitAttrs
     */
    function _Visitor(_implicitTags, _implicitAttrs) {
        _classCallCheck(this, _Visitor);

        this._implicitTags = _implicitTags;
        this._implicitAttrs = _implicitAttrs;
    }
    /**
     * Extracts the messages from the tree
     * @param {?} nodes
     * @param {?} interpolationConfig
     * @return {?}
     */


    _createClass(_Visitor, [{
        key: 'extract',
        value: function extract(nodes, interpolationConfig) {
            var _this48 = this;

            this._init(_VisitorMode.Extract, interpolationConfig);
            nodes.forEach(function (node) {
                return node.visit(_this48, null);
            });
            if (this._inI18nBlock) {
                this._reportError(nodes[nodes.length - 1], 'Unclosed block');
            }
            return new ExtractionResult(this._messages, this._errors);
        }
        /**
         * Returns a tree where all translatable nodes are translated
         * @param {?} nodes
         * @param {?} translations
         * @param {?} interpolationConfig
         * @return {?}
         */

    }, {
        key: 'merge',
        value: function merge(nodes, translations, interpolationConfig) {
            this._init(_VisitorMode.Merge, interpolationConfig);
            this._translations = translations;
            // Construct a single fake root element
            var /** @type {?} */wrapper = new Element('wrapper', [], nodes, null, null, null);
            var /** @type {?} */translatedNode = wrapper.visit(this, null);
            if (this._inI18nBlock) {
                this._reportError(nodes[nodes.length - 1], 'Unclosed block');
            }
            return new ParseTreeResult(translatedNode.children, this._errors);
        }
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(icuCase, context) {
            // Parse cases for translatable html attributes
            var /** @type {?} */expression = visitAll(this, icuCase.expression, context);
            if (this._mode === _VisitorMode.Merge) {
                return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
            }
        }
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansion',
        value: function visitExpansion(icu, context) {
            this._mayBeAddBlockChildren(icu);
            var /** @type {?} */wasInIcu = this._inIcu;
            if (!this._inIcu) {
                // nested ICU messages should not be extracted but top-level translated as a whole
                if (this._isInTranslatableSection) {
                    this._addMessage([icu]);
                }
                this._inIcu = true;
            }
            var /** @type {?} */cases = visitAll(this, icu.cases, context);
            if (this._mode === _VisitorMode.Merge) {
                icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
            }
            this._inIcu = wasInIcu;
            return icu;
        }
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(comment, context) {
            var /** @type {?} */isOpening = _isOpeningComment(comment);
            if (isOpening && this._isInTranslatableSection) {
                this._reportError(comment, 'Could not start a block inside a translatable section');
                return;
            }
            var /** @type {?} */isClosing = _isClosingComment(comment);
            if (isClosing && !this._inI18nBlock) {
                this._reportError(comment, 'Trying to close an unopened block');
                return;
            }
            if (!this._inI18nNode && !this._inIcu) {
                if (!this._inI18nBlock) {
                    if (isOpening) {
                        this._inI18nBlock = true;
                        this._blockStartDepth = this._depth;
                        this._blockChildren = [];
                        this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
                        this._openTranslatableSection(comment);
                    }
                } else {
                    if (isClosing) {
                        if (this._depth == this._blockStartDepth) {
                            this._closeTranslatableSection(comment, this._blockChildren);
                            this._inI18nBlock = false;
                            var /** @type {?} */message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
                            // merge attributes in sections
                            var /** @type {?} */nodes = this._translateMessage(comment, message);
                            return visitAll(this, nodes);
                        } else {
                            this._reportError(comment, 'I18N blocks should not cross element boundaries');
                            return;
                        }
                    }
                }
            }
        }
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, context) {
            if (this._isInTranslatableSection) {
                this._mayBeAddBlockChildren(text);
            }
            return text;
        }
        /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitElement',
        value: function visitElement(el, context) {
            var _this49 = this;

            this._mayBeAddBlockChildren(el);
            this._depth++;
            var /** @type {?} */wasInI18nNode = this._inI18nNode;
            var /** @type {?} */wasInImplicitNode = this._inImplicitNode;
            var /** @type {?} */childNodes = [];
            var /** @type {?} */translatedChildNodes = void 0;
            // Extract:
            // - top level nodes with the (implicit) "i18n" attribute if not already in a section
            // - ICU messages
            var /** @type {?} */i18nAttr = _getI18nAttr(el);
            var /** @type {?} */i18nMeta = i18nAttr ? i18nAttr.value : '';
            var /** @type {?} */isImplicit = this._implicitTags.some(function (tag) {
                return el.name === tag;
            }) && !this._inIcu && !this._isInTranslatableSection;
            var /** @type {?} */isTopLevelImplicit = !wasInImplicitNode && isImplicit;
            this._inImplicitNode = wasInImplicitNode || isImplicit;
            if (!this._isInTranslatableSection && !this._inIcu) {
                if (i18nAttr || isTopLevelImplicit) {
                    this._inI18nNode = true;
                    var /** @type {?} */message = this._addMessage(el.children, i18nMeta);
                    translatedChildNodes = this._translateMessage(el, message);
                }
                if (this._mode == _VisitorMode.Extract) {
                    var /** @type {?} */isTranslatable = i18nAttr || isTopLevelImplicit;
                    if (isTranslatable) this._openTranslatableSection(el);
                    visitAll(this, el.children);
                    if (isTranslatable) this._closeTranslatableSection(el, el.children);
                }
            } else {
                if (i18nAttr || isTopLevelImplicit) {
                    this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
                }
                if (this._mode == _VisitorMode.Extract) {
                    // Descend into child nodes for extraction
                    visitAll(this, el.children);
                }
            }
            if (this._mode === _VisitorMode.Merge) {
                var /** @type {?} */visitNodes = translatedChildNodes || el.children;
                visitNodes.forEach(function (child) {
                    var /** @type {?} */visited = child.visit(_this49, context);
                    if (visited && !_this49._isInTranslatableSection) {
                        // Do not add the children from translatable sections (= i18n blocks here)
                        // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
                        childNodes = childNodes.concat(visited);
                    }
                });
            }
            this._visitAttributesOf(el);
            this._depth--;
            this._inI18nNode = wasInI18nNode;
            this._inImplicitNode = wasInImplicitNode;
            if (this._mode === _VisitorMode.Merge) {
                var /** @type {?} */translatedAttrs = this._translateAttributes(el);
                return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
            }
        }
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(attribute, context) {
            throw new Error('unreachable code');
        }
        /**
         * @param {?} mode
         * @param {?} interpolationConfig
         * @return {?}
         */

    }, {
        key: '_init',
        value: function _init(mode, interpolationConfig) {
            this._mode = mode;
            this._inI18nBlock = false;
            this._inI18nNode = false;
            this._depth = 0;
            this._inIcu = false;
            this._msgCountAtSectionStart = void 0;
            this._errors = [];
            this._messages = [];
            this._inImplicitNode = false;
            this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
        }
        /**
         * @param {?} el
         * @return {?}
         */

    }, {
        key: '_visitAttributesOf',
        value: function _visitAttributesOf(el) {
            var _this50 = this;

            var /** @type {?} */explicitAttrNameToValue = {};
            var /** @type {?} */implicitAttrNames = this._implicitAttrs[el.name] || [];
            el.attrs.filter(function (attr) {
                return attr.name.startsWith(_I18N_ATTR_PREFIX);
            }).forEach(function (attr) {
                return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
            });
            el.attrs.forEach(function (attr) {
                if (attr.name in explicitAttrNameToValue) {
                    _this50._addMessage([attr], explicitAttrNameToValue[attr.name]);
                } else if (implicitAttrNames.some(function (name) {
                    return attr.name === name;
                })) {
                    _this50._addMessage([attr]);
                }
            });
        }
        /**
         * @param {?} ast
         * @param {?=} msgMeta
         * @return {?}
         */

    }, {
        key: '_addMessage',
        value: function _addMessage(ast, msgMeta) {
            if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute$1 && !ast[0].value) {
                // Do not create empty messages
                return;
            }

            var _parseMessageMeta2 = _parseMessageMeta(msgMeta),
                meaning = _parseMessageMeta2.meaning,
                description = _parseMessageMeta2.description,
                id = _parseMessageMeta2.id;

            var /** @type {?} */message = this._createI18nMessage(ast, meaning, description, id);
            this._messages.push(message);
            return message;
        }
        /**
         * @param {?} el
         * @param {?} message
         * @return {?}
         */

    }, {
        key: '_translateMessage',
        value: function _translateMessage(el, message) {
            if (message && this._mode === _VisitorMode.Merge) {
                var /** @type {?} */nodes = this._translations.get(message);
                if (nodes) {
                    return nodes;
                }
                this._reportError(el, 'Translation unavailable for message id="' + this._translations.digest(message) + '"');
            }
            return [];
        }
        /**
         * @param {?} el
         * @return {?}
         */

    }, {
        key: '_translateAttributes',
        value: function _translateAttributes(el) {
            var _this51 = this;

            var /** @type {?} */attributes = el.attrs;
            var /** @type {?} */i18nAttributeMeanings = {};
            attributes.forEach(function (attr) {
                if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
                    i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _parseMessageMeta(attr.value).meaning;
                }
            });
            var /** @type {?} */translatedAttributes = [];
            attributes.forEach(function (attr) {
                if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
                    // strip i18n specific attributes
                    return;
                }
                if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
                    var /** @type {?} */meaning = i18nAttributeMeanings[attr.name];
                    var /** @type {?} */message = _this51._createI18nMessage([attr], meaning, '', '');
                    var /** @type {?} */nodes = _this51._translations.get(message);
                    if (nodes) {
                        if (nodes.length == 0) {
                            translatedAttributes.push(new Attribute$1(attr.name, '', attr.sourceSpan));
                        } else if (nodes[0] instanceof Text) {
                            var /** @type {?} */value = nodes[0].value;
                            translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
                        } else {
                            _this51._reportError(el, 'Unexpected translation for attribute "' + attr.name + '" (id="' + _this51._translations.digest(message) + '")');
                        }
                    } else {
                        _this51._reportError(el, 'Translation unavailable for attribute "' + attr.name + '" (id="' + _this51._translations.digest(message) + '")');
                    }
                } else {
                    translatedAttributes.push(attr);
                }
            });
            return translatedAttributes;
        }
        /**
         * Add the node as a child of the block when:
         * - we are in a block,
         * - we are not inside a ICU message (those are handled separately),
         * - the node is a "direct child" of the block
         * @param {?} node
         * @return {?}
         */

    }, {
        key: '_mayBeAddBlockChildren',
        value: function _mayBeAddBlockChildren(node) {
            if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
                this._blockChildren.push(node);
            }
        }
        /**
         * Marks the start of a section, see `_closeTranslatableSection`
         * @param {?} node
         * @return {?}
         */

    }, {
        key: '_openTranslatableSection',
        value: function _openTranslatableSection(node) {
            if (this._isInTranslatableSection) {
                this._reportError(node, 'Unexpected section start');
            } else {
                this._msgCountAtSectionStart = this._messages.length;
            }
        }
        /**
         * A translatable section could be:
         * - the content of translatable element,
         * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
         * @return {?}
         */

    }, {
        key: '_closeTranslatableSection',

        /**
         * Terminates a section.
         *
         * If a section has only one significant children (comments not significant) then we should not
         * keep the message from this children:
         *
         * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
         * - one for the <p> content with meaning and description,
         * - another one for the ICU message.
         *
         * In this case the last message is discarded as it contains less information (the AST is
         * otherwise identical).
         *
         * Note that we should still keep messages extracted from attributes inside the section (ie in the
         * ICU message here)
         * @param {?} node
         * @param {?} directChildren
         * @return {?}
         */
        value: function _closeTranslatableSection(node, directChildren) {
            if (!this._isInTranslatableSection) {
                this._reportError(node, 'Unexpected section end');
                return;
            }
            var /** @type {?} */startIndex = this._msgCountAtSectionStart;
            var /** @type {?} */significantChildren = directChildren.reduce(function (count, node) {
                return count + (node instanceof Comment ? 0 : 1);
            }, 0);
            if (significantChildren == 1) {
                for (var /** @type {?} */i = this._messages.length - 1; i >= startIndex; i--) {
                    var /** @type {?} */ast = this._messages[i].nodes;
                    if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
                        this._messages.splice(i, 1);
                        break;
                    }
                }
            }
            this._msgCountAtSectionStart = void 0;
        }
        /**
         * @param {?} node
         * @param {?} msg
         * @return {?}
         */

    }, {
        key: '_reportError',
        value: function _reportError(node, msg) {
            this._errors.push(new I18nError(node.sourceSpan, msg));
        }
    }, {
        key: '_isInTranslatableSection',
        get: function get() {
            return this._msgCountAtSectionStart !== void 0;
        }
    }]);

    return _Visitor;
}();
/**
 * @param {?} n
 * @return {?}
 */


function _isOpeningComment(n) {
    return n instanceof Comment && n.value && n.value.startsWith('i18n');
}
/**
 * @param {?} n
 * @return {?}
 */
function _isClosingComment(n) {
    return n instanceof Comment && n.value && n.value === '/i18n';
}
/**
 * @param {?} p
 * @return {?}
 */
function _getI18nAttr(p) {
    return p.attrs.find(function (attr) {
        return attr.name === _I18N_ATTR;
    }) || null;
}
/**
 * @param {?} i18n
 * @return {?}
 */
function _parseMessageMeta(i18n) {
    if (!i18n) return { meaning: '', description: '', id: '' };
    var /** @type {?} */idIndex = i18n.indexOf(ID_SEPARATOR);
    var /** @type {?} */descIndex = i18n.indexOf(MEANING_SEPARATOR);

    var _ref10 = idIndex > -1 ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''],
        _ref11 = _slicedToArray(_ref10, 2),
        meaningAndDesc = _ref11[0],
        id = _ref11[1];

    var _ref12 = descIndex > -1 ? [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] : ['', meaningAndDesc],
        _ref13 = _slicedToArray(_ref12, 2),
        meaning = _ref13[0],
        description = _ref13[1];

    return { meaning: meaning, description: description, id: id };
}

var XmlTagDefinition = function () {
    function XmlTagDefinition() {
        _classCallCheck(this, XmlTagDefinition);

        this.closedByParent = false;
        this.contentType = TagContentType.PARSABLE_DATA;
        this.isVoid = false;
        this.ignoreFirstLf = false;
        this.canSelfClose = true;
    }
    /**
     * @param {?} currentParent
     * @return {?}
     */


    _createClass(XmlTagDefinition, [{
        key: 'requireExtraParent',
        value: function requireExtraParent(currentParent) {
            return false;
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'isClosedByChild',
        value: function isClosedByChild(name) {
            return false;
        }
    }]);

    return XmlTagDefinition;
}();

var /** @type {?} */_TAG_DEFINITION = new XmlTagDefinition();
/**
 * @param {?} tagName
 * @return {?}
 */
function getXmlTagDefinition(tagName) {
    return _TAG_DEFINITION;
}

var XmlParser = function (_Parser$) {
    _inherits(XmlParser, _Parser$);

    function XmlParser() {
        _classCallCheck(this, XmlParser);

        return _possibleConstructorReturn(this, (XmlParser.__proto__ || Object.getPrototypeOf(XmlParser)).call(this, getXmlTagDefinition));
    }
    /**
     * @param {?} source
     * @param {?} url
     * @param {?=} parseExpansionForms
     * @return {?}
     */


    _createClass(XmlParser, [{
        key: 'parse',
        value: function parse(source, url) {
            var parseExpansionForms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            return _get(XmlParser.prototype.__proto__ || Object.getPrototypeOf(XmlParser.prototype), 'parse', this).call(this, source, url, parseExpansionForms, null);
        }
    }]);

    return XmlParser;
}(Parser$1);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} message
 * @return {?}
 */


function _digest2(message) {
    return message.id || sha1(serializeNodes(message.nodes).join('') + ('[' + message.meaning + ']'));
}
/**
 * @param {?} message
 * @return {?}
 */
function decimalDigest(message) {
    if (message.id) {
        return message.id;
    }
    var /** @type {?} */visitor = new _SerializerIgnoreIcuExpVisitor();
    var /** @type {?} */parts = message.nodes.map(function (a) {
        return a.visit(visitor, null);
    });
    return computeMsgId(parts.join(''), message.meaning);
}
/**
 * Serialize the i18n ast to something xml-like in order to generate an UID.
 *
 * The visitor is also used in the i18n parser tests
 *
 * \@internal
 */

var _SerializerVisitor = function () {
    function _SerializerVisitor() {
        _classCallCheck(this, _SerializerVisitor);
    }

    _createClass(_SerializerVisitor, [{
        key: 'visitText',

        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        value: function visitText(text, context) {
            return text.value;
        }
        /**
         * @param {?} container
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitContainer',
        value: function visitContainer(container, context) {
            var _this53 = this;

            return '[' + container.children.map(function (child) {
                return child.visit(_this53);
            }).join(', ') + ']';
        }
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitIcu',
        value: function visitIcu(icu, context) {
            var _this54 = this;

            var /** @type {?} */strCases = Object.keys(icu.cases).map(function (k) {
                return k + ' {' + icu.cases[k].visit(_this54) + '}';
            });
            return '{' + icu.expression + ', ' + icu.type + ', ' + strCases.join(', ') + '}';
        }
        /**
         * @param {?} ph
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitTagPlaceholder',
        value: function visitTagPlaceholder(ph, context) {
            var _this55 = this;

            return ph.isVoid ? '<ph tag name="' + ph.startName + '"/>' : '<ph tag name="' + ph.startName + '">' + ph.children.map(function (child) {
                return child.visit(_this55);
            }).join(', ') + '</ph name="' + ph.closeName + '">';
        }
        /**
         * @param {?} ph
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitPlaceholder',
        value: function visitPlaceholder(ph, context) {
            return ph.value ? '<ph name="' + ph.name + '">' + ph.value + '</ph>' : '<ph name="' + ph.name + '"/>';
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcuPlaceholder',
        value: function visitIcuPlaceholder(ph, context) {
            return '<ph icu name="' + ph.name + '">' + ph.value.visit(this) + '</ph>';
        }
    }]);

    return _SerializerVisitor;
}();

var /** @type {?} */serializerVisitor = new _SerializerVisitor();
/**
 * @param {?} nodes
 * @return {?}
 */
function serializeNodes(nodes) {
    return nodes.map(function (a) {
        return a.visit(serializerVisitor, null);
    });
}
/**
 * Serialize the i18n ast to something xml-like in order to generate an UID.
 *
 * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
 *
 * \@internal
 */

var _SerializerIgnoreIcuExpVisitor = function (_SerializerVisitor2) {
    _inherits(_SerializerIgnoreIcuExpVisitor, _SerializerVisitor2);

    function _SerializerIgnoreIcuExpVisitor() {
        _classCallCheck(this, _SerializerIgnoreIcuExpVisitor);

        return _possibleConstructorReturn(this, (_SerializerIgnoreIcuExpVisitor.__proto__ || Object.getPrototypeOf(_SerializerIgnoreIcuExpVisitor)).apply(this, arguments));
    }

    _createClass(_SerializerIgnoreIcuExpVisitor, [{
        key: 'visitIcu',

        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
        value: function visitIcu(icu, context) {
            var _this57 = this;

            var /** @type {?} */strCases = Object.keys(icu.cases).map(function (k) {
                return k + ' {' + icu.cases[k].visit(_this57) + '}';
            });
            // Do not take the expression into account
            return '{' + icu.type + ', ' + strCases.join(', ') + '}';
        }
    }]);

    return _SerializerIgnoreIcuExpVisitor;
}(_SerializerVisitor);
/**
 * Compute the SHA1 of the given string
 *
 * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
 *
 * WARNING: this function has not been designed not tested with security in mind.
 *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
 * @param {?} str
 * @return {?}
 */


function sha1(str) {
    var /** @type {?} */utf8 = utf8Encode(str);
    var /** @type {?} */words32 = stringToWords32(utf8, Endian.Big);
    var /** @type {?} */len = utf8.length * 8;
    var /** @type {?} */w = new Array(80);
    var a = 0x67452301,
        b = 0xefcdab89,
        c = 0x98badcfe,
        d = 0x10325476,
        e = 0xc3d2e1f0;

    words32[len >> 5] |= 0x80 << 24 - len % 32;
    words32[(len + 64 >> 9 << 4) + 15] = len;
    for (var /** @type {?} */i = 0; i < words32.length; i += 16) {
        var h0 = a,
            h1 = b,
            h2 = c,
            h3 = d,
            h4 = e;

        for (var /** @type {?} */j = 0; j < 80; j++) {
            if (j < 16) {
                w[j] = words32[i + j];
            } else {
                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
            }

            var _fk = fk(j, b, c, d),
                _fk2 = _slicedToArray(_fk, 2),
                f = _fk2[0],
                k = _fk2[1];

            var /** @type {?} */temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
            var _ref14 = [d, c, rol32(b, 30), a, temp];
            e = _ref14[0];
            d = _ref14[1];
            c = _ref14[2];
            b = _ref14[3];
            a = _ref14[4];
        }
        var _ref15 = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)];
        a = _ref15[0];
        b = _ref15[1];
        c = _ref15[2];
        d = _ref15[3];
        e = _ref15[4];
    }
    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
}
/**
 * @param {?} index
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */
function fk(index, b, c, d) {
    if (index < 20) {
        return [b & c | ~b & d, 0x5a827999];
    }
    if (index < 40) {
        return [b ^ c ^ d, 0x6ed9eba1];
    }
    if (index < 60) {
        return [b & c | b & d | c & d, 0x8f1bbcdc];
    }
    return [b ^ c ^ d, 0xca62c1d6];
}
/**
 * Compute the fingerprint of the given string
 *
 * The output is 64 bit number encoded as a decimal string
 *
 * based on:
 * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
 * @param {?} str
 * @return {?}
 */
function fingerprint(str) {
    var /** @type {?} */utf8 = utf8Encode(str);
    var _ref16 = [hash32(utf8, 0), hash32(utf8, 102072)],
        hi = _ref16[0],
        lo = _ref16[1];

    if (hi == 0 && (lo == 0 || lo == 1)) {
        hi = hi ^ 0x130f9bef;
        lo = lo ^ -0x6b5f56d8;
    }
    return [hi, lo];
}
/**
 * @param {?} msg
 * @param {?} meaning
 * @return {?}
 */
function computeMsgId(msg, meaning) {
    var _fingerprint = fingerprint(msg),
        _fingerprint2 = _slicedToArray(_fingerprint, 2),
        hi = _fingerprint2[0],
        lo = _fingerprint2[1];

    if (meaning) {
        var _fingerprint3 = fingerprint(meaning),
            _fingerprint4 = _slicedToArray(_fingerprint3, 2),
            him = _fingerprint4[0],
            lom = _fingerprint4[1];

        var _add = add64(rol64([hi, lo], 1), [him, lom]);

        var _add2 = _slicedToArray(_add, 2);

        hi = _add2[0];
        lo = _add2[1];
    }
    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
}
/**
 * @param {?} str
 * @param {?} c
 * @return {?}
 */
function hash32(str, c) {
    var a = 0x9e3779b9,
        b = 0x9e3779b9;

    var /** @type {?} */i = void 0;
    var /** @type {?} */len = str.length;
    for (i = 0; i + 12 <= len; i += 12) {
        a = add32(a, wordAt(str, i, Endian.Little));
        b = add32(b, wordAt(str, i + 4, Endian.Little));
        c = add32(c, wordAt(str, i + 8, Endian.Little));

        var _mix = mix([a, b, c]);

        var _mix2 = _slicedToArray(_mix, 3);

        a = _mix2[0];
        b = _mix2[1];
        c = _mix2[2];
    }
    a = add32(a, wordAt(str, i, Endian.Little));
    b = add32(b, wordAt(str, i + 4, Endian.Little));
    // the first byte of c is reserved for the length
    c = add32(c, len);
    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
    return mix([a, b, c])[2];
}
/**
 * @param {?} __0
 * @return {?}
 */
function mix(_ref17) {
    var _ref18 = _slicedToArray(_ref17, 3),
        a = _ref18[0],
        b = _ref18[1],
        c = _ref18[2];

    a = sub32(a, b);
    a = sub32(a, c);
    a ^= c >>> 13;
    b = sub32(b, c);
    b = sub32(b, a);
    b ^= a << 8;
    c = sub32(c, a);
    c = sub32(c, b);
    c ^= b >>> 13;
    a = sub32(a, b);
    a = sub32(a, c);
    a ^= c >>> 12;
    b = sub32(b, c);
    b = sub32(b, a);
    b ^= a << 16;
    c = sub32(c, a);
    c = sub32(c, b);
    c ^= b >>> 5;
    a = sub32(a, b);
    a = sub32(a, c);
    a ^= c >>> 3;
    b = sub32(b, c);
    b = sub32(b, a);
    b ^= a << 10;
    c = sub32(c, a);
    c = sub32(c, b);
    c ^= b >>> 15;
    return [a, b, c];
}
var Endian = {};
Endian.Little = 0;
Endian.Big = 1;
Endian[Endian.Little] = "Little";
Endian[Endian.Big] = "Big";
/**
 * @param {?} str
 * @return {?}
 */
function utf8Encode(str) {
    var /** @type {?} */encoded = '';
    for (var /** @type {?} */index = 0; index < str.length; index++) {
        var /** @type {?} */codePoint = decodeSurrogatePairs(str, index);
        if (codePoint <= 0x7f) {
            encoded += String.fromCharCode(codePoint);
        } else if (codePoint <= 0x7ff) {
            encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
        } else if (codePoint <= 0xffff) {
            encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
        } else if (codePoint <= 0x1fffff) {
            encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
        }
    }
    return encoded;
}
/**
 * @param {?} str
 * @param {?} index
 * @return {?}
 */
function decodeSurrogatePairs(str, index) {
    if (index < 0 || index >= str.length) {
        throw new Error('index=' + index + ' is out of range in "' + str + '"');
    }
    var /** @type {?} */high = str.charCodeAt(index);
    if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
        var /** @type {?} */low = byteAt(str, index + 1);
        if (low >= 0xdc00 && low <= 0xdfff) {
            return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
        }
    }
    return high;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function add32(a, b) {
    return add32to64(a, b)[1];
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function add32to64(a, b) {
    var /** @type {?} */low = (a & 0xffff) + (b & 0xffff);
    var /** @type {?} */high = (a >>> 16) + (b >>> 16) + (low >>> 16);
    return [high >>> 16, high << 16 | low & 0xffff];
}
/**
 * @param {?} __0
 * @param {?} __1
 * @return {?}
 */
function add64(_ref19, _ref20) {
    var _ref22 = _slicedToArray(_ref19, 2),
        ah = _ref22[0],
        al = _ref22[1];

    var _ref21 = _slicedToArray(_ref20, 2),
        bh = _ref21[0],
        bl = _ref21[1];

    var _add32to = add32to64(al, bl),
        _add32to2 = _slicedToArray(_add32to, 2),
        carry = _add32to2[0],
        l = _add32to2[1];

    var /** @type {?} */h = add32(add32(ah, bh), carry);
    return [h, l];
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function sub32(a, b) {
    var /** @type {?} */low = (a & 0xffff) - (b & 0xffff);
    var /** @type {?} */high = (a >> 16) - (b >> 16) + (low >> 16);
    return high << 16 | low & 0xffff;
}
/**
 * @param {?} a
 * @param {?} count
 * @return {?}
 */
function rol32(a, count) {
    return a << count | a >>> 32 - count;
}
/**
 * @param {?} __0
 * @param {?} count
 * @return {?}
 */
function rol64(_ref23, count) {
    var _ref24 = _slicedToArray(_ref23, 2),
        hi = _ref24[0],
        lo = _ref24[1];

    var /** @type {?} */h = hi << count | lo >>> 32 - count;
    var /** @type {?} */l = lo << count | hi >>> 32 - count;
    return [h, l];
}
/**
 * @param {?} str
 * @param {?} endian
 * @return {?}
 */
function stringToWords32(str, endian) {
    var /** @type {?} */words32 = Array(str.length + 3 >>> 2);
    for (var /** @type {?} */i = 0; i < words32.length; i++) {
        words32[i] = wordAt(str, i * 4, endian);
    }
    return words32;
}
/**
 * @param {?} str
 * @param {?} index
 * @return {?}
 */
function byteAt(str, index) {
    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
}
/**
 * @param {?} str
 * @param {?} index
 * @param {?} endian
 * @return {?}
 */
function wordAt(str, index, endian) {
    var /** @type {?} */word = 0;
    if (endian === Endian.Big) {
        for (var /** @type {?} */i = 0; i < 4; i++) {
            word += byteAt(str, index + i) << 24 - 8 * i;
        }
    } else {
        for (var /** @type {?} */_i4 = 0; _i4 < 4; _i4++) {
            word += byteAt(str, index + _i4) << 8 * _i4;
        }
    }
    return word;
}
/**
 * @param {?} words32
 * @return {?}
 */
function words32ToByteString(words32) {
    return words32.reduce(function (str, word) {
        return str + word32ToByteString(word);
    }, '');
}
/**
 * @param {?} word
 * @return {?}
 */
function word32ToByteString(word) {
    var /** @type {?} */str = '';
    for (var /** @type {?} */i = 0; i < 4; i++) {
        str += String.fromCharCode(word >>> 8 * (3 - i) & 0xff);
    }
    return str;
}
/**
 * @param {?} str
 * @return {?}
 */
function byteStringToHexString(str) {
    var /** @type {?} */hex = '';
    for (var /** @type {?} */i = 0; i < str.length; i++) {
        var /** @type {?} */b = byteAt(str, i);
        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
    }
    return hex.toLowerCase();
}
/**
 * @param {?} str
 * @return {?}
 */
function byteStringToDecString(str) {
    var /** @type {?} */decimal = '';
    var /** @type {?} */toThePower = '1';
    for (var /** @type {?} */i = str.length - 1; i >= 0; i--) {
        decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
        toThePower = numberTimesBigInt(256, toThePower);
    }
    return decimal.split('').reverse().join('');
}
/**
 * @param {?} x
 * @param {?} y
 * @return {?}
 */
function addBigInt(x, y) {
    var /** @type {?} */sum = '';
    var /** @type {?} */len = Math.max(x.length, y.length);
    for (var /** @type {?} */i = 0, /** @type {?} */carry = 0; i < len || carry; i++) {
        var /** @type {?} */tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
        if (tmpSum >= 10) {
            carry = 1;
            sum += tmpSum - 10;
        } else {
            carry = 0;
            sum += tmpSum;
        }
    }
    return sum;
}
/**
 * @param {?} num
 * @param {?} b
 * @return {?}
 */
function numberTimesBigInt(num, b) {
    var /** @type {?} */product = '';
    var /** @type {?} */bToThePower = b;
    for (; num !== 0; num = num >>> 1) {
        if (num & 1) product = addBigInt(product, bToThePower);
        bToThePower = addBigInt(bToThePower, bToThePower);
    }
    return product;
}

/**
 * @abstract
 */

var Serializer = function () {
    function Serializer() {
        _classCallCheck(this, Serializer);
    }

    _createClass(Serializer, [{
        key: 'write',

        /**
         * @abstract
         * @param {?} messages
         * @param {?} locale
         * @return {?}
         */
        value: function write(messages, locale) {}
        /**
         * @abstract
         * @param {?} content
         * @param {?} url
         * @return {?}
         */

    }, {
        key: 'load',
        value: function load(content, url) {}
        /**
         * @abstract
         * @param {?} message
         * @return {?}
         */

    }, {
        key: 'digest',
        value: function digest(message) {}
        /**
         * @param {?} message
         * @return {?}
         */

    }, {
        key: 'createNameMapper',
        value: function createNameMapper(message) {
            return null;
        }
    }]);

    return Serializer;
}();
/**
 * A simple mapper that take a function to transform an internal name to a public name
 */


var SimplePlaceholderMapper = function (_RecurseVisitor) {
    _inherits(SimplePlaceholderMapper, _RecurseVisitor);

    /**
     * @param {?} message
     * @param {?} mapName
     */
    function SimplePlaceholderMapper(message, mapName) {
        _classCallCheck(this, SimplePlaceholderMapper);

        var _this58 = _possibleConstructorReturn(this, (SimplePlaceholderMapper.__proto__ || Object.getPrototypeOf(SimplePlaceholderMapper)).call(this));

        _this58.mapName = mapName;
        _this58.internalToPublic = {};
        _this58.publicToNextId = {};
        _this58.publicToInternal = {};
        message.nodes.forEach(function (node) {
            return node.visit(_this58);
        });
        return _this58;
    }
    /**
     * @param {?} internalName
     * @return {?}
     */


    _createClass(SimplePlaceholderMapper, [{
        key: 'toPublicName',
        value: function toPublicName(internalName) {
            return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;
        }
        /**
         * @param {?} publicName
         * @return {?}
         */

    }, {
        key: 'toInternalName',
        value: function toInternalName(publicName) {
            return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;
        }
        /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, context) {
            return null;
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitTagPlaceholder',
        value: function visitTagPlaceholder(ph, context) {
            this.visitPlaceholderName(ph.startName);
            _get(SimplePlaceholderMapper.prototype.__proto__ || Object.getPrototypeOf(SimplePlaceholderMapper.prototype), 'visitTagPlaceholder', this).call(this, ph, context);
            this.visitPlaceholderName(ph.closeName);
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitPlaceholder',
        value: function visitPlaceholder(ph, context) {
            this.visitPlaceholderName(ph.name);
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcuPlaceholder',
        value: function visitIcuPlaceholder(ph, context) {
            this.visitPlaceholderName(ph.name);
        }
        /**
         * @param {?} internalName
         * @return {?}
         */

    }, {
        key: 'visitPlaceholderName',
        value: function visitPlaceholderName(internalName) {
            if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {
                return;
            }
            var /** @type {?} */publicName = this.mapName(internalName);
            if (this.publicToInternal.hasOwnProperty(publicName)) {
                // Create a new XMB when it has already been used
                var /** @type {?} */nextId = this.publicToNextId[publicName];
                this.publicToNextId[publicName] = nextId + 1;
                publicName = publicName + '_' + nextId;
            } else {
                this.publicToNextId[publicName] = 1;
            }
            this.internalToPublic[internalName] = publicName;
            this.publicToInternal[publicName] = internalName;
        }
    }]);

    return SimplePlaceholderMapper;
}(RecurseVisitor);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var _Visitor$1 = function () {
    function _Visitor$1() {
        _classCallCheck(this, _Visitor$1);
    }

    _createClass(_Visitor$1, [{
        key: 'visitTag',

        /**
         * @param {?} tag
         * @return {?}
         */
        value: function visitTag(tag) {
            var _this59 = this;

            var /** @type {?} */strAttrs = this._serializeAttributes(tag.attrs);
            if (tag.children.length == 0) {
                return '<' + tag.name + strAttrs + '/>';
            }
            var /** @type {?} */strChildren = tag.children.map(function (node) {
                return node.visit(_this59);
            });
            return '<' + tag.name + strAttrs + '>' + strChildren.join('') + '</' + tag.name + '>';
        }
        /**
         * @param {?} text
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text) {
            return text.value;
        }
        /**
         * @param {?} decl
         * @return {?}
         */

    }, {
        key: 'visitDeclaration',
        value: function visitDeclaration(decl) {
            return '<?xml' + this._serializeAttributes(decl.attrs) + ' ?>';
        }
        /**
         * @param {?} attrs
         * @return {?}
         */

    }, {
        key: '_serializeAttributes',
        value: function _serializeAttributes(attrs) {
            var /** @type {?} */strAttrs = Object.keys(attrs).map(function (name) {
                return name + '="' + attrs[name] + '"';
            }).join(' ');
            return strAttrs.length > 0 ? ' ' + strAttrs : '';
        }
        /**
         * @param {?} doctype
         * @return {?}
         */

    }, {
        key: 'visitDoctype',
        value: function visitDoctype(doctype) {
            return '<!DOCTYPE ' + doctype.rootTag + ' [\n' + doctype.dtd + '\n]>';
        }
    }]);

    return _Visitor$1;
}();

var /** @type {?} */_visitor = new _Visitor$1();
/**
 * @param {?} nodes
 * @return {?}
 */
function serialize(nodes) {
    return nodes.map(function (node) {
        return node.visit(_visitor);
    }).join('');
}

var Declaration = function () {
    /**
     * @param {?} unescapedAttrs
     */
    function Declaration(unescapedAttrs) {
        var _this60 = this;

        _classCallCheck(this, Declaration);

        this.attrs = {};
        Object.keys(unescapedAttrs).forEach(function (k) {
            _this60.attrs[k] = _escapeXml(unescapedAttrs[k]);
        });
    }
    /**
     * @param {?} visitor
     * @return {?}
     */


    _createClass(Declaration, [{
        key: 'visit',
        value: function visit(visitor) {
            return visitor.visitDeclaration(this);
        }
    }]);

    return Declaration;
}();

var Doctype = function () {
    /**
     * @param {?} rootTag
     * @param {?} dtd
     */
    function Doctype(rootTag, dtd) {
        _classCallCheck(this, Doctype);

        this.rootTag = rootTag;
        this.dtd = dtd;
    }

    _createClass(Doctype, [{
        key: 'visit',

        /**
         * @param {?} visitor
         * @return {?}
         */
        value: function visit(visitor) {
            return visitor.visitDoctype(this);
        }
    }]);

    return Doctype;
}();

var Tag = function () {
    /**
     * @param {?} name
     * @param {?=} unescapedAttrs
     * @param {?=} children
     */
    function Tag(name) {
        var _this61 = this;

        var unescapedAttrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

        _classCallCheck(this, Tag);

        this.name = name;
        this.children = children;
        this.attrs = {};
        Object.keys(unescapedAttrs).forEach(function (k) {
            _this61.attrs[k] = _escapeXml(unescapedAttrs[k]);
        });
    }
    /**
     * @param {?} visitor
     * @return {?}
     */


    _createClass(Tag, [{
        key: 'visit',
        value: function visit(visitor) {
            return visitor.visitTag(this);
        }
    }]);

    return Tag;
}();

var Text$2 = function () {
    /**
     * @param {?} unescapedValue
     */
    function Text$2(unescapedValue) {
        _classCallCheck(this, Text$2);

        this.value = _escapeXml(unescapedValue);
    }

    _createClass(Text$2, [{
        key: 'visit',

        /**
         * @param {?} visitor
         * @return {?}
         */
        value: function visit(visitor) {
            return visitor.visitText(this);
        }
    }]);

    return Text$2;
}();

var CR = function (_Text$) {
    _inherits(CR, _Text$);

    /**
     * @param {?=} ws
     */
    function CR() {
        var ws = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        _classCallCheck(this, CR);

        return _possibleConstructorReturn(this, (CR.__proto__ || Object.getPrototypeOf(CR)).call(this, '\n' + new Array(ws + 1).join(' ')));
    }

    return CR;
}(Text$2);

var /** @type {?} */_ESCAPED_CHARS = [[/&/g, '&amp;'], [/"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']];
/**
 * @param {?} text
 * @return {?}
 */
function _escapeXml(text) {
    return _ESCAPED_CHARS.reduce(function (text, entry) {
        return text.replace(entry[0], entry[1]);
    }, text);
}

var /** @type {?} */_VERSION = '1.2';
var /** @type {?} */_XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
// TODO(vicb): make this a param (s/_/-/)
var /** @type {?} */_DEFAULT_SOURCE_LANG = 'en';
var /** @type {?} */_PLACEHOLDER_TAG = 'x';
var /** @type {?} */_FILE_TAG = 'file';
var /** @type {?} */_SOURCE_TAG = 'source';
var /** @type {?} */_TARGET_TAG = 'target';
var /** @type {?} */_UNIT_TAG = 'trans-unit';

var Xliff = function (_Serializer) {
    _inherits(Xliff, _Serializer);

    function Xliff() {
        _classCallCheck(this, Xliff);

        return _possibleConstructorReturn(this, (Xliff.__proto__ || Object.getPrototypeOf(Xliff)).apply(this, arguments));
    }

    _createClass(Xliff, [{
        key: 'write',

        /**
         * @param {?} messages
         * @param {?} locale
         * @return {?}
         */
        value: function write(messages, locale) {
            var /** @type {?} */visitor = new _WriteVisitor();
            var /** @type {?} */transUnits = [];
            messages.forEach(function (message) {
                var /** @type {?} */transUnit = new Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });
                transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
                if (message.description) {
                    transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
                }
                if (message.meaning) {
                    transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
                }
                transUnit.children.push(new CR(6));
                transUnits.push(new CR(6), transUnit);
            });
            var /** @type {?} */body = new Tag('body', {}, [].concat(transUnits, [new CR(4)]));
            var /** @type {?} */file = new Tag('file', {
                'source-language': locale || _DEFAULT_SOURCE_LANG,
                datatype: 'plaintext',
                original: 'ng2.template'
            }, [new CR(4), body, new CR(2)]);
            var /** @type {?} */xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);
            return serialize([new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()]);
        }
        /**
         * @param {?} content
         * @param {?} url
         * @return {?}
         */

    }, {
        key: 'load',
        value: function load(content, url) {
            // xliff to xml nodes
            var /** @type {?} */xliffParser = new XliffParser();

            var _xliffParser$parse = xliffParser.parse(content, url),
                locale = _xliffParser$parse.locale,
                mlNodesByMsgId = _xliffParser$parse.mlNodesByMsgId,
                errors = _xliffParser$parse.errors;
            // xml nodes to i18n nodes


            var /** @type {?} */i18nNodesByMsgId = {};
            var /** @type {?} */converter = new XmlToI18n();
            Object.keys(mlNodesByMsgId).forEach(function (msgId) {
                var _converter$convert = converter.convert(mlNodesByMsgId[msgId]),
                    i18nNodes = _converter$convert.i18nNodes,
                    e = _converter$convert.errors;

                errors.push.apply(errors, _toConsumableArray(e));
                i18nNodesByMsgId[msgId] = i18nNodes;
            });
            if (errors.length) {
                throw new Error('xliff parse errors:\n' + errors.join('\n'));
            }
            return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
        }
        /**
         * @param {?} message
         * @return {?}
         */

    }, {
        key: 'digest',
        value: function digest(message) {
            return _digest2(message);
        }
    }]);

    return Xliff;
}(Serializer);

var _WriteVisitor = function () {
    function _WriteVisitor() {
        _classCallCheck(this, _WriteVisitor);
    }

    _createClass(_WriteVisitor, [{
        key: 'visitText',

        /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
        value: function visitText(text, context) {
            return [new Text$2(text.value)];
        }
        /**
         * @param {?} container
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitContainer',
        value: function visitContainer(container, context) {
            var _this64 = this;

            var /** @type {?} */nodes = [];
            container.children.forEach(function (node) {
                return nodes.push.apply(nodes, _toConsumableArray(node.visit(_this64)));
            });
            return nodes;
        }
        /**
         * @param {?} icu
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcu',
        value: function visitIcu(icu, context) {
            if (this._isInIcu) {
                // nested ICU is not supported
                throw new Error('xliff does not support nested ICU messages');
            }
            this._isInIcu = true;
            // TODO(vicb): support ICU messages
            // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html
            // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html
            var /** @type {?} */nodes = [];
            this._isInIcu = false;
            return nodes;
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitTagPlaceholder',
        value: function visitTagPlaceholder(ph, context) {
            var /** @type {?} */ctype = getCtypeForTag(ph.tag);
            var /** @type {?} */startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype });
            if (ph.isVoid) {
                // void tags have no children nor closing tags
                return [startTagPh];
            }
            var /** @type {?} */closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype });
            return [startTagPh].concat(_toConsumableArray(this.serialize(ph.children)), [closeTagPh]);
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitPlaceholder',
        value: function visitPlaceholder(ph, context) {
            return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcuPlaceholder',
        value: function visitIcuPlaceholder(ph, context) {
            return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
        }
        /**
         * @param {?} nodes
         * @return {?}
         */

    }, {
        key: 'serialize',
        value: function serialize(nodes) {
            var _ref25,
                _this65 = this;

            this._isInIcu = false;
            return (_ref25 = []).concat.apply(_ref25, _toConsumableArray(nodes.map(function (node) {
                return node.visit(_this65);
            })));
        }
    }]);

    return _WriteVisitor;
}();

var XliffParser = function () {
    function XliffParser() {
        _classCallCheck(this, XliffParser);

        this._locale = null;
    }
    /**
     * @param {?} xliff
     * @param {?} url
     * @return {?}
     */


    _createClass(XliffParser, [{
        key: 'parse',
        value: function parse(xliff, url) {
            this._unitMlNodes = [];
            this._mlNodesByMsgId = {};
            var /** @type {?} */xml = new XmlParser().parse(xliff, url, false);
            this._errors = xml.errors;
            visitAll(this, xml.rootNodes, null);
            return {
                mlNodesByMsgId: this._mlNodesByMsgId,
                errors: this._errors,
                locale: this._locale
            };
        }
        /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitElement',
        value: function visitElement(element, context) {
            switch (element.name) {
                case _UNIT_TAG:
                    this._unitMlNodes = null;
                    var /** @type {?} */idAttr = element.attrs.find(function (attr) {
                        return attr.name === 'id';
                    });
                    if (!idAttr) {
                        this._addError(element, '<' + _UNIT_TAG + '> misses the "id" attribute');
                    } else {
                        var /** @type {?} */id = idAttr.value;
                        if (this._mlNodesByMsgId.hasOwnProperty(id)) {
                            this._addError(element, 'Duplicated translations for msg ' + id);
                        } else {
                            visitAll(this, element.children, null);
                            if (this._unitMlNodes) {
                                this._mlNodesByMsgId[id] = this._unitMlNodes;
                            } else {
                                this._addError(element, 'Message ' + id + ' misses a translation');
                            }
                        }
                    }
                    break;
                case _SOURCE_TAG:
                    // ignore source message
                    break;
                case _TARGET_TAG:
                    this._unitMlNodes = element.children;
                    break;
                case _FILE_TAG:
                    var /** @type {?} */localeAttr = element.attrs.find(function (attr) {
                        return attr.name === 'target-language';
                    });
                    if (localeAttr) {
                        this._locale = localeAttr.value;
                    }
                    visitAll(this, element.children, null);
                    break;
                default:
                    // TODO(vicb): assert file structure, xliff version
                    // For now only recurse on unhandled nodes
                    visitAll(this, element.children, null);
            }
        }
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(attribute, context) {}
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, context) {}
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(comment, context) {}
        /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansion',
        value: function visitExpansion(expansion, context) {}
        /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(expansionCase, context) {}
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */

    }, {
        key: '_addError',
        value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
        }
    }]);

    return XliffParser;
}();

var XmlToI18n = function () {
    function XmlToI18n() {
        _classCallCheck(this, XmlToI18n);
    }

    _createClass(XmlToI18n, [{
        key: 'convert',

        /**
         * @param {?} nodes
         * @return {?}
         */
        value: function convert(nodes) {
            this._errors = [];
            return {
                i18nNodes: visitAll(this, nodes),
                errors: this._errors
            };
        }
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, context) {
            return new Text$1(text.value, text.sourceSpan);
        }
        /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitElement',
        value: function visitElement(el, context) {
            if (el.name === _PLACEHOLDER_TAG) {
                var /** @type {?} */nameAttr = el.attrs.find(function (attr) {
                    return attr.name === 'id';
                });
                if (nameAttr) {
                    return new Placeholder('', nameAttr.value, el.sourceSpan);
                }
                this._addError(el, '<' + _PLACEHOLDER_TAG + '> misses the "id" attribute');
            } else {
                this._addError(el, 'Unexpected tag');
            }
        }
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansion',
        value: function visitExpansion(icu, context) {}
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(icuCase, context) {}
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(comment, context) {}
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(attribute, context) {}
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */

    }, {
        key: '_addError',
        value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
        }
    }]);

    return XmlToI18n;
}();
/**
 * @param {?} tag
 * @return {?}
 */


function getCtypeForTag(tag) {
    switch (tag.toLowerCase()) {
        case 'br':
            return 'lb';
        case 'img':
            return 'image';
        default:
            return 'x-' + tag;
    }
}

var /** @type {?} */_MESSAGES_TAG = 'messagebundle';
var /** @type {?} */_MESSAGE_TAG = 'msg';
var /** @type {?} */_PLACEHOLDER_TAG$1 = 'ph';
var /** @type {?} */_EXEMPLE_TAG = 'ex';
var /** @type {?} */_DOCTYPE = '<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) "default">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>';

var Xmb = function (_Serializer2) {
    _inherits(Xmb, _Serializer2);

    function Xmb() {
        _classCallCheck(this, Xmb);

        return _possibleConstructorReturn(this, (Xmb.__proto__ || Object.getPrototypeOf(Xmb)).apply(this, arguments));
    }

    _createClass(Xmb, [{
        key: 'write',

        /**
         * @param {?} messages
         * @param {?} locale
         * @return {?}
         */
        value: function write(messages, locale) {
            var /** @type {?} */exampleVisitor = new ExampleVisitor();
            var /** @type {?} */visitor = new _Visitor$2();
            var /** @type {?} */rootNode = new Tag(_MESSAGES_TAG);
            messages.forEach(function (message) {
                var /** @type {?} */attrs = { id: message.id };
                if (message.description) {
                    attrs['desc'] = message.description;
                }
                if (message.meaning) {
                    attrs['meaning'] = message.meaning;
                }
                rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
            });
            rootNode.children.push(new CR());
            return serialize([new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), new Doctype(_MESSAGES_TAG, _DOCTYPE), new CR(), exampleVisitor.addDefaultExamples(rootNode), new CR()]);
        }
        /**
         * @param {?} content
         * @param {?} url
         * @return {?}
         */

    }, {
        key: 'load',
        value: function load(content, url) {
            throw new Error('Unsupported');
        }
        /**
         * @param {?} message
         * @return {?}
         */

    }, {
        key: 'digest',
        value: function digest(message) {
            return digest$1(message);
        }
        /**
         * @param {?} message
         * @return {?}
         */

    }, {
        key: 'createNameMapper',
        value: function createNameMapper(message) {
            return new SimplePlaceholderMapper(message, toPublicName);
        }
    }]);

    return Xmb;
}(Serializer);

var _Visitor$2 = function () {
    function _Visitor$2() {
        _classCallCheck(this, _Visitor$2);
    }

    _createClass(_Visitor$2, [{
        key: 'visitText',

        /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
        value: function visitText(text, context) {
            return [new Text$2(text.value)];
        }
        /**
         * @param {?} container
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitContainer',
        value: function visitContainer(container, context) {
            var _this67 = this;

            var /** @type {?} */nodes = [];
            container.children.forEach(function (node) {
                return nodes.push.apply(nodes, _toConsumableArray(node.visit(_this67)));
            });
            return nodes;
        }
        /**
         * @param {?} icu
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcu',
        value: function visitIcu(icu, context) {
            var _this68 = this;

            var /** @type {?} */nodes = [new Text$2('{' + icu.expressionPlaceholder + ', ' + icu.type + ', ')];
            Object.keys(icu.cases).forEach(function (c) {
                nodes.push.apply(nodes, [new Text$2(c + ' {')].concat(_toConsumableArray(icu.cases[c].visit(_this68)), [new Text$2('} ')]));
            });
            nodes.push(new Text$2('}'));
            return nodes;
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitTagPlaceholder',
        value: function visitTagPlaceholder(ph, context) {
            var /** @type {?} */startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2('<' + ph.tag + '>')]);
            var /** @type {?} */startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]);
            if (ph.isVoid) {
                // void tags have no children nor closing tags
                return [startTagPh];
            }
            var /** @type {?} */closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2('</' + ph.tag + '>')]);
            var /** @type {?} */closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]);
            return [startTagPh].concat(_toConsumableArray(this.serialize(ph.children)), [closeTagPh]);
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitPlaceholder',
        value: function visitPlaceholder(ph, context) {
            return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcuPlaceholder',
        value: function visitIcuPlaceholder(ph, context) {
            return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
        }
        /**
         * @param {?} nodes
         * @return {?}
         */

    }, {
        key: 'serialize',
        value: function serialize(nodes) {
            var _ref26,
                _this69 = this;

            return (_ref26 = []).concat.apply(_ref26, _toConsumableArray(nodes.map(function (node) {
                return node.visit(_this69);
            })));
        }
    }]);

    return _Visitor$2;
}();
/**
 * @param {?} message
 * @return {?}
 */


function digest$1(message) {
    return decimalDigest(message);
}

var ExampleVisitor = function () {
    function ExampleVisitor() {
        _classCallCheck(this, ExampleVisitor);
    }

    _createClass(ExampleVisitor, [{
        key: 'addDefaultExamples',

        /**
         * @param {?} node
         * @return {?}
         */
        value: function addDefaultExamples(node) {
            node.visit(this);
            return node;
        }
        /**
         * @param {?} tag
         * @return {?}
         */

    }, {
        key: 'visitTag',
        value: function visitTag(tag) {
            var _this70 = this;

            if (tag.name === _PLACEHOLDER_TAG$1) {
                if (!tag.children || tag.children.length == 0) {
                    var /** @type {?} */exText = new Text$2(tag.attrs['name'] || '...');
                    tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];
                }
            } else if (tag.children) {
                tag.children.forEach(function (node) {
                    return node.visit(_this70);
                });
            }
        }
        /**
         * @param {?} text
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text) {}
        /**
         * @param {?} decl
         * @return {?}
         */

    }, {
        key: 'visitDeclaration',
        value: function visitDeclaration(decl) {}
        /**
         * @param {?} doctype
         * @return {?}
         */

    }, {
        key: 'visitDoctype',
        value: function visitDoctype(doctype) {}
    }]);

    return ExampleVisitor;
}();
/**
 * @param {?} internalName
 * @return {?}
 */


function toPublicName(internalName) {
    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
}

var /** @type {?} */_TRANSLATIONS_TAG = 'translationbundle';
var /** @type {?} */_TRANSLATION_TAG = 'translation';
var /** @type {?} */_PLACEHOLDER_TAG$2 = 'ph';

var Xtb = function (_Serializer3) {
    _inherits(Xtb, _Serializer3);

    function Xtb() {
        _classCallCheck(this, Xtb);

        return _possibleConstructorReturn(this, (Xtb.__proto__ || Object.getPrototypeOf(Xtb)).apply(this, arguments));
    }

    _createClass(Xtb, [{
        key: 'write',

        /**
         * @param {?} messages
         * @param {?} locale
         * @return {?}
         */
        value: function write(messages, locale) {
            throw new Error('Unsupported');
        }
        /**
         * @param {?} content
         * @param {?} url
         * @return {?}
         */

    }, {
        key: 'load',
        value: function load(content, url) {
            // xtb to xml nodes
            var /** @type {?} */xtbParser = new XtbParser();

            var _xtbParser$parse = xtbParser.parse(content, url),
                locale = _xtbParser$parse.locale,
                msgIdToHtml = _xtbParser$parse.msgIdToHtml,
                errors = _xtbParser$parse.errors;
            // xml nodes to i18n nodes


            var /** @type {?} */i18nNodesByMsgId = {};
            var /** @type {?} */converter = new XmlToI18n$1();
            // Because we should be able to load xtb files that rely on features not supported by angular,
            // we need to delay the conversion of html to i18n nodes so that non angular messages are not
            // converted
            Object.keys(msgIdToHtml).forEach(function (msgId) {
                var /** @type {?} */valueFn = function valueFn() {
                    var _converter$convert2 = converter.convert(msgIdToHtml[msgId], url),
                        i18nNodes = _converter$convert2.i18nNodes,
                        errors = _converter$convert2.errors;

                    if (errors.length) {
                        throw new Error('xtb parse errors:\n' + errors.join('\n'));
                    }
                    return i18nNodes;
                };
                createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
            });
            if (errors.length) {
                throw new Error('xtb parse errors:\n' + errors.join('\n'));
            }
            return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
        }
        /**
         * @param {?} message
         * @return {?}
         */

    }, {
        key: 'digest',
        value: function digest(message) {
            return digest$1(message);
        }
        /**
         * @param {?} message
         * @return {?}
         */

    }, {
        key: 'createNameMapper',
        value: function createNameMapper(message) {
            return new SimplePlaceholderMapper(message, toPublicName);
        }
    }]);

    return Xtb;
}(Serializer);
/**
 * @param {?} messages
 * @param {?} id
 * @param {?} valueFn
 * @return {?}
 */


function createLazyProperty(messages, id, valueFn) {
    Object.defineProperty(messages, id, {
        configurable: true,
        enumerable: true,
        get: function get() {
            var /** @type {?} */value = valueFn();
            Object.defineProperty(messages, id, { enumerable: true, value: value });
            return value;
        },
        set: function set(_) {
            throw new Error('Could not overwrite an XTB translation');
        }
    });
}

var XtbParser = function () {
    function XtbParser() {
        _classCallCheck(this, XtbParser);

        this._locale = null;
    }
    /**
     * @param {?} xtb
     * @param {?} url
     * @return {?}
     */


    _createClass(XtbParser, [{
        key: 'parse',
        value: function parse(xtb, url) {
            this._bundleDepth = 0;
            this._msgIdToHtml = {};
            // We can not parse the ICU messages at this point as some messages might not originate
            // from Angular that could not be lex'd.
            var /** @type {?} */xml = new XmlParser().parse(xtb, url, false);
            this._errors = xml.errors;
            visitAll(this, xml.rootNodes);
            return {
                msgIdToHtml: this._msgIdToHtml,
                errors: this._errors,
                locale: this._locale
            };
        }
        /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitElement',
        value: function visitElement(element, context) {
            switch (element.name) {
                case _TRANSLATIONS_TAG:
                    this._bundleDepth++;
                    if (this._bundleDepth > 1) {
                        this._addError(element, '<' + _TRANSLATIONS_TAG + '> elements can not be nested');
                    }
                    var /** @type {?} */langAttr = element.attrs.find(function (attr) {
                        return attr.name === 'lang';
                    });
                    if (langAttr) {
                        this._locale = langAttr.value;
                    }
                    visitAll(this, element.children, null);
                    this._bundleDepth--;
                    break;
                case _TRANSLATION_TAG:
                    var /** @type {?} */idAttr = element.attrs.find(function (attr) {
                        return attr.name === 'id';
                    });
                    if (!idAttr) {
                        this._addError(element, '<' + _TRANSLATION_TAG + '> misses the "id" attribute');
                    } else {
                        var /** @type {?} */id = idAttr.value;
                        if (this._msgIdToHtml.hasOwnProperty(id)) {
                            this._addError(element, 'Duplicated translations for msg ' + id);
                        } else {
                            var /** @type {?} */innerTextStart = element.startSourceSpan.end.offset;
                            var /** @type {?} */innerTextEnd = element.endSourceSpan.start.offset;
                            var /** @type {?} */content = element.startSourceSpan.start.file.content;
                            var /** @type {?} */innerText = content.slice(innerTextStart, innerTextEnd);
                            this._msgIdToHtml[id] = innerText;
                        }
                    }
                    break;
                default:
                    this._addError(element, 'Unexpected tag');
            }
        }
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(attribute, context) {}
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, context) {}
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(comment, context) {}
        /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansion',
        value: function visitExpansion(expansion, context) {}
        /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(expansionCase, context) {}
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */

    }, {
        key: '_addError',
        value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
        }
    }]);

    return XtbParser;
}();

var XmlToI18n$1 = function () {
    function XmlToI18n$1() {
        _classCallCheck(this, XmlToI18n$1);
    }

    _createClass(XmlToI18n$1, [{
        key: 'convert',

        /**
         * @param {?} message
         * @param {?} url
         * @return {?}
         */
        value: function convert(message, url) {
            var /** @type {?} */xmlIcu = new XmlParser().parse(message, url, true);
            this._errors = xmlIcu.errors;
            var /** @type {?} */i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ? [] : visitAll(this, xmlIcu.rootNodes);
            return {
                i18nNodes: i18nNodes,
                errors: this._errors
            };
        }
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, context) {
            return new Text$1(text.value, text.sourceSpan);
        }
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansion',
        value: function visitExpansion(icu, context) {
            var /** @type {?} */caseMap = {};
            visitAll(this, icu.cases).forEach(function (c) {
                caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
            });
            return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
        }
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(icuCase, context) {
            return {
                value: icuCase.value,
                nodes: visitAll(this, icuCase.expression)
            };
        }
        /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitElement',
        value: function visitElement(el, context) {
            if (el.name === _PLACEHOLDER_TAG$2) {
                var /** @type {?} */nameAttr = el.attrs.find(function (attr) {
                    return attr.name === 'name';
                });
                if (nameAttr) {
                    return new Placeholder('', nameAttr.value, el.sourceSpan);
                }
                this._addError(el, '<' + _PLACEHOLDER_TAG$2 + '> misses the "name" attribute');
            } else {
                this._addError(el, 'Unexpected tag');
            }
        }
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(comment, context) {}
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(attribute, context) {}
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */

    }, {
        key: '_addError',
        value: function _addError(node, message) {
            this._errors.push(new I18nError(node.sourceSpan, message));
        }
    }]);

    return XmlToI18n$1;
}();

var HtmlParser = function (_Parser$2) {
    _inherits(HtmlParser, _Parser$2);

    function HtmlParser() {
        _classCallCheck(this, HtmlParser);

        return _possibleConstructorReturn(this, (HtmlParser.__proto__ || Object.getPrototypeOf(HtmlParser)).call(this, getHtmlTagDefinition));
    }
    /**
     * @param {?} source
     * @param {?} url
     * @param {?=} parseExpansionForms
     * @param {?=} interpolationConfig
     * @return {?}
     */


    _createClass(HtmlParser, [{
        key: 'parse',
        value: function parse(source, url) {
            var parseExpansionForms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;

            return _get(HtmlParser.prototype.__proto__ || Object.getPrototypeOf(HtmlParser.prototype), 'parse', this).call(this, source, url, parseExpansionForms, interpolationConfig);
        }
    }]);

    return HtmlParser;
}(Parser$1);

HtmlParser.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
HtmlParser.ctorParameters = function () {
    return [];
};

/**
 * A container for translated messages
 */

var TranslationBundle = function () {
    /**
     * @param {?=} _i18nNodesByMsgId
     * @param {?} locale
     * @param {?} digest
     * @param {?=} mapperFactory
     * @param {?=} missingTranslationStrategy
     * @param {?=} console
     */
    function TranslationBundle() {
        var _i18nNodesByMsgId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var locale = arguments[1];
        var digest = arguments[2];
        var mapperFactory = arguments[3];
        var missingTranslationStrategy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : __WEBPACK_IMPORTED_MODULE_0__angular_core__["MissingTranslationStrategy"].Warning;
        var console = arguments[5];

        _classCallCheck(this, TranslationBundle);

        this._i18nNodesByMsgId = _i18nNodesByMsgId;
        this.digest = digest;
        this.mapperFactory = mapperFactory;
        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);
    }
    /**
     * @param {?} content
     * @param {?} url
     * @param {?} serializer
     * @param {?} missingTranslationStrategy
     * @param {?=} console
     * @return {?}
     */


    _createClass(TranslationBundle, [{
        key: 'get',

        /**
         * @param {?} srcMsg
         * @return {?}
         */
        value: function get(srcMsg) {
            var /** @type {?} */html = this._i18nToHtml.convert(srcMsg);
            if (html.errors.length) {
                throw new Error(html.errors.join('\n'));
            }
            return html.nodes;
        }
        /**
         * @param {?} srcMsg
         * @return {?}
         */

    }, {
        key: 'has',
        value: function has(srcMsg) {
            return this.digest(srcMsg) in this._i18nNodesByMsgId;
        }
    }], [{
        key: 'load',
        value: function load(content, url, serializer, missingTranslationStrategy, console) {
            var _serializer$load = serializer.load(content, url),
                locale = _serializer$load.locale,
                i18nNodesByMsgId = _serializer$load.i18nNodesByMsgId;

            var /** @type {?} */digestFn = function digestFn(m) {
                return serializer.digest(m);
            };
            var /** @type {?} */mapperFactory = function mapperFactory(m) {
                return serializer.createNameMapper(m);
            };
            return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);
        }
    }]);

    return TranslationBundle;
}();

var I18nToHtmlVisitor = function () {
    /**
     * @param {?=} _i18nNodesByMsgId
     * @param {?} _locale
     * @param {?} _digest
     * @param {?} _mapperFactory
     * @param {?} _missingTranslationStrategy
     * @param {?=} _console
     */
    function I18nToHtmlVisitor() {
        var _i18nNodesByMsgId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _locale = arguments[1];
        var _digest = arguments[2];
        var _mapperFactory = arguments[3];
        var _missingTranslationStrategy = arguments[4];
        var _console = arguments[5];

        _classCallCheck(this, I18nToHtmlVisitor);

        this._i18nNodesByMsgId = _i18nNodesByMsgId;
        this._locale = _locale;
        this._digest = _digest;
        this._mapperFactory = _mapperFactory;
        this._missingTranslationStrategy = _missingTranslationStrategy;
        this._console = _console;
        this._contextStack = [];
        this._errors = [];
    }
    /**
     * @param {?} srcMsg
     * @return {?}
     */


    _createClass(I18nToHtmlVisitor, [{
        key: 'convert',
        value: function convert(srcMsg) {
            this._contextStack.length = 0;
            this._errors.length = 0;
            // i18n to text
            var /** @type {?} */text = this._convertToText(srcMsg);
            // text to html
            var /** @type {?} */url = srcMsg.nodes[0].sourceSpan.start.file.url;
            var /** @type {?} */html = new HtmlParser().parse(text, url, true);
            return {
                nodes: html.rootNodes,
                errors: [].concat(_toConsumableArray(this._errors), _toConsumableArray(html.errors))
            };
        }
        /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, context) {
            return text.value;
        }
        /**
         * @param {?} container
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitContainer',
        value: function visitContainer(container, context) {
            var _this73 = this;

            return container.children.map(function (n) {
                return n.visit(_this73);
            }).join('');
        }
        /**
         * @param {?} icu
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcu',
        value: function visitIcu(icu, context) {
            var _this74 = this;

            var /** @type {?} */cases = Object.keys(icu.cases).map(function (k) {
                return k + ' {' + icu.cases[k].visit(_this74) + '}';
            });
            // TODO(vicb): Once all format switch to using expression placeholders
            // we should throw when the placeholder is not in the source message
            var /** @type {?} */exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ? this._srcMsg.placeholders[icu.expression] : icu.expression;
            return '{' + exp + ', ' + icu.type + ', ' + cases.join(' ') + '}';
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitPlaceholder',
        value: function visitPlaceholder(ph, context) {
            var /** @type {?} */phName = this._mapper(ph.name);
            if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
                return this._srcMsg.placeholders[phName];
            }
            if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
                return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
            }
            this._addError(ph, 'Unknown placeholder "' + ph.name + '"');
            return '';
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitTagPlaceholder',
        value: function visitTagPlaceholder(ph, context) {
            var _this75 = this;

            var /** @type {?} */tag = '' + ph.tag;
            var /** @type {?} */attrs = Object.keys(ph.attrs).map(function (name) {
                return name + '="' + ph.attrs[name] + '"';
            }).join(' ');
            if (ph.isVoid) {
                return '<' + tag + ' ' + attrs + '/>';
            }
            var /** @type {?} */children = ph.children.map(function (c) {
                return c.visit(_this75);
            }).join('');
            return '<' + tag + ' ' + attrs + '>' + children + '</' + tag + '>';
        }
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitIcuPlaceholder',
        value: function visitIcuPlaceholder(ph, context) {
            // An ICU placeholder references the source message to be serialized
            return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);
        }
        /**
         * Convert a source message to a translated text string:
         * - text nodes are replaced with their translation,
         * - placeholders are replaced with their content,
         * - ICU nodes are converted to ICU expressions.
         * @param {?} srcMsg
         * @return {?}
         */

    }, {
        key: '_convertToText',
        value: function _convertToText(srcMsg) {
            var _this76 = this;

            var /** @type {?} */id = this._digest(srcMsg);
            var /** @type {?} */mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
            var /** @type {?} */nodes = void 0;
            this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });
            this._srcMsg = srcMsg;
            if (this._i18nNodesByMsgId.hasOwnProperty(id)) {
                // When there is a translation use its nodes as the source
                // And create a mapper to convert serialized placeholder names to internal names
                nodes = this._i18nNodesByMsgId[id];
                this._mapper = function (name) {
                    return mapper ? mapper.toInternalName(name) : name;
                };
            } else {
                // When no translation has been found
                // - report an error / a warning / nothing,
                // - use the nodes from the original message
                // - placeholders are already internal and need no mapper
                if (this._missingTranslationStrategy === __WEBPACK_IMPORTED_MODULE_0__angular_core__["MissingTranslationStrategy"].Error) {
                    var /** @type {?} */ctx = this._locale ? ' for locale "' + this._locale + '"' : '';
                    this._addError(srcMsg.nodes[0], 'Missing translation for message "' + id + '"' + ctx);
                } else if (this._console && this._missingTranslationStrategy === __WEBPACK_IMPORTED_MODULE_0__angular_core__["MissingTranslationStrategy"].Warning) {
                    var /** @type {?} */_ctx2 = this._locale ? ' for locale "' + this._locale + '"' : '';
                    this._console.warn('Missing translation for message "' + id + '"' + _ctx2);
                }
                nodes = srcMsg.nodes;
                this._mapper = function (name) {
                    return name;
                };
            }
            var /** @type {?} */text = nodes.map(function (node) {
                return node.visit(_this76);
            }).join('');
            var /** @type {?} */context = this._contextStack.pop();
            this._srcMsg = context.msg;
            this._mapper = context.mapper;
            return text;
        }
        /**
         * @param {?} el
         * @param {?} msg
         * @return {?}
         */

    }, {
        key: '_addError',
        value: function _addError(el, msg) {
            this._errors.push(new I18nError(el.sourceSpan, msg));
        }
    }]);

    return I18nToHtmlVisitor;
}();

var I18NHtmlParser = function () {
    /**
     * @param {?} _htmlParser
     * @param {?=} translations
     * @param {?=} translationsFormat
     * @param {?=} missingTranslation
     * @param {?=} console
     */
    function I18NHtmlParser(_htmlParser, translations, translationsFormat) {
        var missingTranslation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : __WEBPACK_IMPORTED_MODULE_0__angular_core__["MissingTranslationStrategy"].Warning;
        var console = arguments[4];

        _classCallCheck(this, I18NHtmlParser);

        this._htmlParser = _htmlParser;
        if (translations) {
            var serializer = createSerializer(translationsFormat);
            this._translationBundle = TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);
        }
    }
    /**
     * @param {?} source
     * @param {?} url
     * @param {?=} parseExpansionForms
     * @param {?=} interpolationConfig
     * @return {?}
     */


    _createClass(I18NHtmlParser, [{
        key: 'parse',
        value: function parse(source, url) {
            var parseExpansionForms = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var interpolationConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_INTERPOLATION_CONFIG;

            var /** @type {?} */parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
            if (!this._translationBundle) {
                // Do not enable i18n when no translation bundle is provided
                return parseResult;
            }
            if (parseResult.errors.length) {
                return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
            }
            return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
        }
    }]);

    return I18NHtmlParser;
}();
/**
 * @param {?=} format
 * @return {?}
 */


function createSerializer(format) {
    format = (format || 'xlf').toLowerCase();
    switch (format) {
        case 'xmb':
            return new Xmb();
        case 'xtb':
            return new Xtb();
        case 'xliff':
        case 'xlf':
        default:
            return new Xliff();
    }
}

var /** @type {?} */CORE = assetUrl('core');
var /** @type {?} */VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');

var Identifiers = function Identifiers() {
    _classCallCheck(this, Identifiers);
};

Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
    name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
    moduleUrl: CORE,
    runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ANALYZE_FOR_ENTRY_COMPONENTS"]
};
Identifiers.ElementRef = { name: 'ElementRef', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] };
Identifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] };
Identifiers.ChangeDetectorRef = { name: 'ChangeDetectorRef', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"] };
Identifiers.QueryList = { name: 'QueryList', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["QueryList"] };
Identifiers.TemplateRef = { name: 'TemplateRef', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TemplateRef"] };
Identifiers.CodegenComponentFactoryResolver = {
    name: 'ɵCodegenComponentFactoryResolver',
    moduleUrl: CORE,
    runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵCodegenComponentFactoryResolver"]
};
Identifiers.ComponentFactoryResolver = {
    name: 'ComponentFactoryResolver',
    moduleUrl: CORE,
    runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentFactoryResolver"]
};
Identifiers.ComponentFactory = { name: 'ComponentFactory', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentFactory"] };
Identifiers.ComponentRef = { name: 'ComponentRef', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ComponentRef"] };
Identifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModuleFactory"] };
Identifiers.NgModuleInjector = {
    name: 'ɵNgModuleInjector',
    moduleUrl: CORE,
    runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵNgModuleInjector"]
};
Identifiers.RegisterModuleFactoryFn = {
    name: 'ɵregisterModuleFactory',
    moduleUrl: CORE,
    runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵregisterModuleFactory"]
};
Identifiers.Injector = { name: 'Injector', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injector"] };
Identifiers.ViewEncapsulation = { name: 'ViewEncapsulation', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"] };
Identifiers.ChangeDetectionStrategy = {
    name: 'ChangeDetectionStrategy',
    moduleUrl: CORE,
    runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"]
};
Identifiers.SecurityContext = {
    name: 'SecurityContext',
    moduleUrl: CORE,
    runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"]
};
Identifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["LOCALE_ID"] };
Identifiers.TRANSLATIONS_FORMAT = { name: 'TRANSLATIONS_FORMAT', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["TRANSLATIONS_FORMAT"] };
Identifiers.inlineInterpolate = { name: 'ɵinlineInterpolate', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵinlineInterpolate"] };
Identifiers.interpolate = { name: 'ɵinterpolate', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵinterpolate"] };
Identifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵEMPTY_ARRAY"] };
Identifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵEMPTY_MAP"] };
Identifiers.Renderer = { name: 'Renderer', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"] };
Identifiers.viewDef = { name: 'ɵvid', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵvid"] };
Identifiers.elementDef = { name: 'ɵeld', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵeld"] };
Identifiers.anchorDef = { name: 'ɵand', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵand"] };
Identifiers.textDef = { name: 'ɵted', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵted"] };
Identifiers.directiveDef = { name: 'ɵdid', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵdid"] };
Identifiers.providerDef = { name: 'ɵprd', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵprd"] };
Identifiers.queryDef = { name: 'ɵqud', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵqud"] };
Identifiers.pureArrayDef = { name: 'ɵpad', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵpad"] };
Identifiers.pureObjectDef = { name: 'ɵpod', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵpod"] };
Identifiers.purePipeDef = { name: 'ɵppd', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵppd"] };
Identifiers.pipeDef = { name: 'ɵpid', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵpid"] };
Identifiers.nodeValue = { name: 'ɵnov', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵnov"] };
Identifiers.ngContentDef = { name: 'ɵncd', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵncd"] };
Identifiers.unwrapValue = { name: 'ɵunv', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵunv"] };
Identifiers.createRendererTypeV2 = { name: 'ɵcrt', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵcrt"] };
Identifiers.RendererTypeV2 = {
    name: 'RendererTypeV2',
    moduleUrl: CORE,
    // type only
    runtime: null
};
Identifiers.ViewDefinition = {
    name: 'ɵViewDefinition',
    moduleUrl: CORE,
    // type only
    runtime: null
};
Identifiers.createComponentFactory = { name: 'ɵccf', moduleUrl: CORE, runtime: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵccf"] };
/**
 * @param {?} pkg
 * @param {?=} path
 * @param {?=} type
 * @return {?}
 */
function assetUrl(pkg) {
    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'src';

    if (path == null) {
        return '@angular/' + pkg;
    } else {
        return '@angular/' + pkg + '/' + type + '/' + path;
    }
}
/**
 * @param {?} identifier
 * @return {?}
 */
function resolveIdentifier(identifier) {
    var /** @type {?} */name = identifier.name;
    return __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"].resolveIdentifier(name, identifier.moduleUrl, null, identifier.runtime);
}
/**
 * @param {?} identifier
 * @return {?}
 */
function createIdentifier(identifier) {
    return { reference: resolveIdentifier(identifier) };
}
/**
 * @param {?} identifier
 * @return {?}
 */
function identifierToken(identifier) {
    return { identifier: identifier };
}
/**
 * @param {?} identifier
 * @return {?}
 */
function createIdentifierToken(identifier) {
    return identifierToken(createIdentifier(identifier));
}

// http://cldr.unicode.org/index/cldr-spec/plural-rules
var /** @type {?} */PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
/**
 * Expands special forms into elements.
 *
 * For example,
 *
 * ```
 * { messages.length, plural,
 *   =0 {zero}
 *   =1 {one}
 *   other {more than one}
 * }
 * ```
 *
 * will be expanded into
 *
 * ```
 * <ng-container [ngPlural]="messages.length">
 *   <ng-template ngPluralCase="=0">zero</ng-template>
 *   <ng-template ngPluralCase="=1">one</ng-template>
 *   <ng-template ngPluralCase="other">more than one</ng-template>
 * </ng-container>
 * ```
 * @param {?} nodes
 * @return {?}
 */
function expandNodes(nodes) {
    var /** @type {?} */expander = new _Expander();
    return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
}

var ExpansionResult =
/**
 * @param {?} nodes
 * @param {?} expanded
 * @param {?} errors
 */
function ExpansionResult(nodes, expanded, errors) {
    _classCallCheck(this, ExpansionResult);

    this.nodes = nodes;
    this.expanded = expanded;
    this.errors = errors;
};

var ExpansionError = function (_ParseError4) {
    _inherits(ExpansionError, _ParseError4);

    /**
     * @param {?} span
     * @param {?} errorMsg
     */
    function ExpansionError(span, errorMsg) {
        _classCallCheck(this, ExpansionError);

        return _possibleConstructorReturn(this, (ExpansionError.__proto__ || Object.getPrototypeOf(ExpansionError)).call(this, span, errorMsg));
    }

    return ExpansionError;
}(ParseError);
/**
 * Expand expansion forms (plural, select) to directives
 *
 * \@internal
 */


var _Expander = function () {
    function _Expander() {
        _classCallCheck(this, _Expander);

        this.isExpanded = false;
        this.errors = [];
    }
    /**
     * @param {?} element
     * @param {?} context
     * @return {?}
     */


    _createClass(_Expander, [{
        key: 'visitElement',
        value: function visitElement(element, context) {
            return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
        }
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(attribute, context) {
            return attribute;
        }
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, context) {
            return text;
        }
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(comment, context) {
            return comment;
        }
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansion',
        value: function visitExpansion(icu, context) {
            this.isExpanded = true;
            return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
        }
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(icuCase, context) {
            throw new Error('Should not be reached');
        }
    }]);

    return _Expander;
}();
/**
 * @param {?} ast
 * @param {?} errors
 * @return {?}
 */


function _expandPluralForm(ast, errors) {
    var /** @type {?} */children = ast.cases.map(function (c) {
        if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
            errors.push(new ExpansionError(c.valueSourceSpan, 'Plural cases should be "=<number>" or one of ' + PLURAL_CASES.join(", ")));
        }
        var /** @type {?} */expansionResult = expandNodes(c.expression);
        errors.push.apply(errors, _toConsumableArray(expansionResult.errors));
        return new Element('ng-template', [new Attribute$1('ngPluralCase', '' + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var /** @type {?} */switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
}
/**
 * @param {?} ast
 * @param {?} errors
 * @return {?}
 */
function _expandDefaultForm(ast, errors) {
    var /** @type {?} */children = ast.cases.map(function (c) {
        var /** @type {?} */expansionResult = expandNodes(c.expression);
        errors.push.apply(errors, _toConsumableArray(expansionResult.errors));
        if (c.value === 'other') {
            // other is the default case when no values match
            return new Element('ng-template', [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
        }
        return new Element('ng-template', [new Attribute$1('ngSwitchCase', '' + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var /** @type {?} */switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
}

var ProviderError = function (_ParseError5) {
    _inherits(ProviderError, _ParseError5);

    /**
     * @param {?} message
     * @param {?} span
     */
    function ProviderError(message, span) {
        _classCallCheck(this, ProviderError);

        return _possibleConstructorReturn(this, (ProviderError.__proto__ || Object.getPrototypeOf(ProviderError)).call(this, span, message));
    }

    return ProviderError;
}(ParseError);

var ProviderViewContext =
/**
 * @param {?} component
 * @param {?} sourceSpan
 */
function ProviderViewContext(component, sourceSpan) {
    var _this79 = this;

    _classCallCheck(this, ProviderViewContext);

    this.component = component;
    this.sourceSpan = sourceSpan;
    this.errors = [];
    this.viewQueries = _getViewQueries(component);
    this.viewProviders = new Map();
    component.viewProviders.forEach(function (provider) {
        if (isBlank(_this79.viewProviders.get(tokenReference(provider.token)))) {
            _this79.viewProviders.set(tokenReference(provider.token), true);
        }
    });
};

var ProviderElementContext = function () {
    /**
     * @param {?} viewContext
     * @param {?} _parent
     * @param {?} _isViewRoot
     * @param {?} _directiveAsts
     * @param {?} attrs
     * @param {?} refs
     * @param {?} isTemplate
     * @param {?} contentQueryStartId
     * @param {?} _sourceSpan
     */
    function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {
        var _this80 = this;

        _classCallCheck(this, ProviderElementContext);

        this.viewContext = viewContext;
        this._parent = _parent;
        this._isViewRoot = _isViewRoot;
        this._directiveAsts = _directiveAsts;
        this._sourceSpan = _sourceSpan;
        this._transformedProviders = new Map();
        this._seenProviders = new Map();
        this._hasViewContainer = false;
        this._queriedTokens = new Map();
        this._attrs = {};
        attrs.forEach(function (attrAst) {
            return _this80._attrs[attrAst.name] = attrAst.value;
        });
        var directivesMeta = _directiveAsts.map(function (directiveAst) {
            return directiveAst.directive;
        });
        this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
        this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);
        Array.from(this._allProviders.values()).forEach(function (provider) {
            _this80._addQueryReadsTo(provider.token, provider.token, _this80._queriedTokens);
        });
        if (isTemplate) {
            var templateRefId = createIdentifierToken(Identifiers.TemplateRef);
            this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);
        }
        refs.forEach(function (refAst) {
            var defaultQueryValue = refAst.value || createIdentifierToken(Identifiers.ElementRef);
            _this80._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, _this80._queriedTokens);
        });
        if (this._queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef))) {
            this._hasViewContainer = true;
        }
        // create the providers that we know are eager first
        Array.from(this._allProviders.values()).forEach(function (provider) {
            var eager = provider.eager || _this80._queriedTokens.get(tokenReference(provider.token));
            if (eager) {
                _this80._getOrCreateLocalProvider(provider.providerType, provider.token, true);
            }
        });
    }
    /**
     * @return {?}
     */


    _createClass(ProviderElementContext, [{
        key: 'afterElement',
        value: function afterElement() {
            var _this81 = this;

            // collect lazy providers
            Array.from(this._allProviders.values()).forEach(function (provider) {
                _this81._getOrCreateLocalProvider(provider.providerType, provider.token, false);
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: '_addQueryReadsTo',

        /**
         * @param {?} token
         * @param {?} defaultValue
         * @param {?} queryReadTokens
         * @return {?}
         */
        value: function _addQueryReadsTo(token, defaultValue, queryReadTokens) {
            this._getQueriesFor(token).forEach(function (query) {
                var /** @type {?} */queryValue = query.meta.read || defaultValue;
                var /** @type {?} */tokenRef = tokenReference(queryValue);
                var /** @type {?} */queryMatches = queryReadTokens.get(tokenRef);
                if (!queryMatches) {
                    queryMatches = [];
                    queryReadTokens.set(tokenRef, queryMatches);
                }
                queryMatches.push({ queryId: query.queryId, value: queryValue });
            });
        }
        /**
         * @param {?} token
         * @return {?}
         */

    }, {
        key: '_getQueriesFor',
        value: function _getQueriesFor(token) {
            var /** @type {?} */result = [];
            var /** @type {?} */currentEl = this;
            var /** @type {?} */distance = 0;
            var /** @type {?} */queries = void 0;
            while (currentEl !== null) {
                queries = currentEl._contentQueries.get(tokenReference(token));
                if (queries) {
                    result.push.apply(result, _toConsumableArray(queries.filter(function (query) {
                        return query.meta.descendants || distance <= 1;
                    })));
                }
                if (currentEl._directiveAsts.length > 0) {
                    distance++;
                }
                currentEl = currentEl._parent;
            }
            queries = this.viewContext.viewQueries.get(tokenReference(token));
            if (queries) {
                result.push.apply(result, _toConsumableArray(queries));
            }
            return result;
        }
        /**
         * @param {?} requestingProviderType
         * @param {?} token
         * @param {?} eager
         * @return {?}
         */

    }, {
        key: '_getOrCreateLocalProvider',
        value: function _getOrCreateLocalProvider(requestingProviderType, token, eager) {
            var _this82 = this;

            var /** @type {?} */resolvedProvider = this._allProviders.get(tokenReference(token));
            if (!resolvedProvider || (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.PrivateService || (requestingProviderType === ProviderAstType.PrivateService || requestingProviderType === ProviderAstType.PublicService) && resolvedProvider.providerType === ProviderAstType.Builtin) {
                return null;
            }
            var /** @type {?} */transformedProviderAst = this._transformedProviders.get(tokenReference(token));
            if (transformedProviderAst) {
                return transformedProviderAst;
            }
            if (isPresent(this._seenProviders.get(tokenReference(token)))) {
                this.viewContext.errors.push(new ProviderError('Cannot instantiate cyclic dependency! ' + tokenName(token), this._sourceSpan));
                return null;
            }
            this._seenProviders.set(tokenReference(token), true);
            var /** @type {?} */transformedProviders = resolvedProvider.providers.map(function (provider) {
                var /** @type {?} */transformedUseValue = provider.useValue;
                var /** @type {?} */transformedUseExisting = provider.useExisting;
                var /** @type {?} */transformedDeps = void 0;
                if (isPresent(provider.useExisting)) {
                    var /** @type {?} */existingDiDep = _this82._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);
                    if (isPresent(existingDiDep.token)) {
                        transformedUseExisting = existingDiDep.token;
                    } else {
                        transformedUseExisting = null;
                        transformedUseValue = existingDiDep.value;
                    }
                } else if (provider.useFactory) {
                    var /** @type {?} */deps = provider.deps || provider.useFactory.diDeps;
                    transformedDeps = deps.map(function (dep) {
                        return _this82._getDependency(resolvedProvider.providerType, dep, eager);
                    });
                } else if (provider.useClass) {
                    var /** @type {?} */_deps = provider.deps || provider.useClass.diDeps;
                    transformedDeps = _deps.map(function (dep) {
                        return _this82._getDependency(resolvedProvider.providerType, dep, eager);
                    });
                }
                return _transformProvider(provider, {
                    useExisting: transformedUseExisting,
                    useValue: transformedUseValue,
                    deps: transformedDeps
                });
            });
            transformedProviderAst = _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
            this._transformedProviders.set(tokenReference(token), transformedProviderAst);
            return transformedProviderAst;
        }
        /**
         * @param {?} requestingProviderType
         * @param {?} dep
         * @param {?=} eager
         * @return {?}
         */

    }, {
        key: '_getLocalDependency',
        value: function _getLocalDependency(requestingProviderType, dep) {
            var eager = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            if (dep.isAttribute) {
                var /** @type {?} */attrValue = this._attrs[dep.token.value];
                return { isValue: true, value: attrValue == null ? null : attrValue };
            }
            if (isPresent(dep.token)) {
                // access builtints
                if (requestingProviderType === ProviderAstType.Directive || requestingProviderType === ProviderAstType.Component) {
                    if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) || tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {
                        return dep;
                    }
                    if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {
                        this._hasViewContainer = true;
                    }
                }
                // access the injector
                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
                    return dep;
                }
                // access providers
                if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
                    return dep;
                }
            }
            return null;
        }
        /**
         * @param {?} requestingProviderType
         * @param {?} dep
         * @param {?=} eager
         * @return {?}
         */

    }, {
        key: '_getDependency',
        value: function _getDependency(requestingProviderType, dep) {
            var eager = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var /** @type {?} */currElement = this;
            var /** @type {?} */currEager = eager;
            var /** @type {?} */result = null;
            if (!dep.isSkipSelf) {
                result = this._getLocalDependency(requestingProviderType, dep, eager);
            }
            if (dep.isSelf) {
                if (!result && dep.isOptional) {
                    result = { isValue: true, value: null };
                }
            } else {
                // check parent elements
                while (!result && currElement._parent) {
                    var /** @type {?} */prevElement = currElement;
                    currElement = currElement._parent;
                    if (prevElement._isViewRoot) {
                        currEager = false;
                    }
                    result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
                }
                // check @Host restriction
                if (!result) {
                    if (!dep.isHost || this.viewContext.component.isHost || this.viewContext.component.type.reference === tokenReference(dep.token) || isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token)))) {
                        result = dep;
                    } else {
                        result = dep.isOptional ? result = { isValue: true, value: null } : null;
                    }
                }
            }
            if (!result) {
                this.viewContext.errors.push(new ProviderError('No provider for ' + tokenName(dep.token), this._sourceSpan));
            }
            return result;
        }
    }, {
        key: 'transformProviders',
        get: function get() {
            return Array.from(this._transformedProviders.values());
        }
        /**
         * @return {?}
         */

    }, {
        key: 'transformedDirectiveAsts',
        get: function get() {
            var /** @type {?} */sortedProviderTypes = this.transformProviders.map(function (provider) {
                return provider.token.identifier;
            });
            var /** @type {?} */sortedDirectives = this._directiveAsts.slice();
            sortedDirectives.sort(function (dir1, dir2) {
                return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
            });
            return sortedDirectives;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'transformedHasViewContainer',
        get: function get() {
            return this._hasViewContainer;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'queryMatches',
        get: function get() {
            var /** @type {?} */allMatches = [];
            this._queriedTokens.forEach(function (matches) {
                allMatches.push.apply(allMatches, _toConsumableArray(matches));
            });
            return allMatches;
        }
    }]);

    return ProviderElementContext;
}();

var NgModuleProviderAnalyzer = function () {
    /**
     * @param {?} ngModule
     * @param {?} extraProviders
     * @param {?} sourceSpan
     */
    function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
        var _this83 = this;

        _classCallCheck(this, NgModuleProviderAnalyzer);

        this._transformedProviders = new Map();
        this._seenProviders = new Map();
        this._errors = [];
        this._allProviders = new Map();
        ngModule.transitiveModule.modules.forEach(function (ngModuleType) {
            var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };
            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this83._errors, _this83._allProviders);
        });
        _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) {
            return entry.provider;
        }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
    }
    /**
     * @return {?}
     */


    _createClass(NgModuleProviderAnalyzer, [{
        key: 'parse',
        value: function parse() {
            var _this84 = this;

            Array.from(this._allProviders.values()).forEach(function (provider) {
                _this84._getOrCreateLocalProvider(provider.token, provider.eager);
            });
            if (this._errors.length > 0) {
                var /** @type {?} */errorString = this._errors.join('\n');
                throw new Error('Provider parse errors:\n' + errorString);
            }
            return Array.from(this._transformedProviders.values());
        }
        /**
         * @param {?} token
         * @param {?} eager
         * @return {?}
         */

    }, {
        key: '_getOrCreateLocalProvider',
        value: function _getOrCreateLocalProvider(token, eager) {
            var _this85 = this;

            var /** @type {?} */resolvedProvider = this._allProviders.get(tokenReference(token));
            if (!resolvedProvider) {
                return null;
            }
            var /** @type {?} */transformedProviderAst = this._transformedProviders.get(tokenReference(token));
            if (transformedProviderAst) {
                return transformedProviderAst;
            }
            if (isPresent(this._seenProviders.get(tokenReference(token)))) {
                this._errors.push(new ProviderError('Cannot instantiate cyclic dependency! ' + tokenName(token), resolvedProvider.sourceSpan));
                return null;
            }
            this._seenProviders.set(tokenReference(token), true);
            var /** @type {?} */transformedProviders = resolvedProvider.providers.map(function (provider) {
                var /** @type {?} */transformedUseValue = provider.useValue;
                var /** @type {?} */transformedUseExisting = provider.useExisting;
                var /** @type {?} */transformedDeps = void 0;
                if (isPresent(provider.useExisting)) {
                    var /** @type {?} */existingDiDep = _this85._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);
                    if (isPresent(existingDiDep.token)) {
                        transformedUseExisting = existingDiDep.token;
                    } else {
                        transformedUseExisting = null;
                        transformedUseValue = existingDiDep.value;
                    }
                } else if (provider.useFactory) {
                    var /** @type {?} */deps = provider.deps || provider.useFactory.diDeps;
                    transformedDeps = deps.map(function (dep) {
                        return _this85._getDependency(dep, eager, resolvedProvider.sourceSpan);
                    });
                } else if (provider.useClass) {
                    var /** @type {?} */_deps2 = provider.deps || provider.useClass.diDeps;
                    transformedDeps = _deps2.map(function (dep) {
                        return _this85._getDependency(dep, eager, resolvedProvider.sourceSpan);
                    });
                }
                return _transformProvider(provider, {
                    useExisting: transformedUseExisting,
                    useValue: transformedUseValue,
                    deps: transformedDeps
                });
            });
            transformedProviderAst = _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
            this._transformedProviders.set(tokenReference(token), transformedProviderAst);
            return transformedProviderAst;
        }
        /**
         * @param {?} dep
         * @param {?=} eager
         * @param {?} requestorSourceSpan
         * @return {?}
         */

    }, {
        key: '_getDependency',
        value: function _getDependency(dep) {
            var eager = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var requestorSourceSpan = arguments[2];

            var /** @type {?} */foundLocal = false;
            if (!dep.isSkipSelf && isPresent(dep.token)) {
                // access the injector
                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
                    foundLocal = true;
                } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
                    foundLocal = true;
                }
            }
            var /** @type {?} */result = dep;
            if (dep.isSelf && !foundLocal) {
                if (dep.isOptional) {
                    result = { isValue: true, value: null };
                } else {
                    this._errors.push(new ProviderError('No provider for ' + tokenName(dep.token), requestorSourceSpan));
                }
            }
            return result;
        }
    }]);

    return NgModuleProviderAnalyzer;
}();
/**
 * @param {?} provider
 * @param {?} __1
 * @return {?}
 */


function _transformProvider(provider, _ref27) {
    var useExisting = _ref27.useExisting,
        useValue = _ref27.useValue,
        deps = _ref27.deps;

    return {
        token: provider.token,
        useClass: provider.useClass,
        useExisting: useExisting,
        useFactory: provider.useFactory,
        useValue: useValue,
        deps: deps,
        multi: provider.multi
    };
}
/**
 * @param {?} provider
 * @param {?} __1
 * @return {?}
 */
function _transformProviderAst(provider, _ref28) {
    var eager = _ref28.eager,
        providers = _ref28.providers;

    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
}
/**
 * @param {?} directives
 * @param {?} sourceSpan
 * @param {?} targetErrors
 * @return {?}
 */
function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
    var /** @type {?} */providersByToken = new Map();
    directives.forEach(function (directive) {
        var /** @type {?} */dirProvider = { token: { identifier: directive.type }, useClass: directive.type };
        _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
    });
    // Note: directives need to be able to overwrite providers of a component!
    var /** @type {?} */directivesWithComponentFirst = directives.filter(function (dir) {
        return dir.isComponent;
    }).concat(directives.filter(function (dir) {
        return !dir.isComponent;
    }));
    directivesWithComponentFirst.forEach(function (directive) {
        _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
        _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
    });
    return providersByToken;
}
/**
 * @param {?} providers
 * @param {?} providerType
 * @param {?} eager
 * @param {?} sourceSpan
 * @param {?} targetErrors
 * @param {?} targetProvidersByToken
 * @return {?}
 */
function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
    providers.forEach(function (provider) {
        var /** @type {?} */resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
        if (isPresent(resolvedProvider) && !!resolvedProvider.multiProvider !== !!provider.multi) {
            targetErrors.push(new ProviderError('Mixing multi and non multi provider is not possible for token ' + tokenName(resolvedProvider.token), sourceSpan));
        }
        if (!resolvedProvider) {
            var /** @type {?} */lifecycleHooks = provider.token.identifier && provider.token.identifier.lifecycleHooks ? provider.token.identifier.lifecycleHooks : [];
            resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
            targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
        } else {
            if (!provider.multi) {
                resolvedProvider.providers.length = 0;
            }
            resolvedProvider.providers.push(provider);
        }
    });
}
/**
 * @param {?} component
 * @return {?}
 */
function _getViewQueries(component) {
    // Note: queries start with id 1 so we can use the number in a Bloom filter!
    var /** @type {?} */viewQueryId = 1;
    var /** @type {?} */viewQueries = new Map();
    if (component.viewQueries) {
        component.viewQueries.forEach(function (query) {
            return _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ });
        });
    }
    return viewQueries;
}
/**
 * @param {?} contentQueryStartId
 * @param {?} directives
 * @return {?}
 */
function _getContentQueries(contentQueryStartId, directives) {
    var /** @type {?} */contentQueryId = contentQueryStartId;
    var /** @type {?} */contentQueries = new Map();
    directives.forEach(function (directive, directiveIndex) {
        if (directive.queries) {
            directive.queries.forEach(function (query) {
                return _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ });
            });
        }
    });
    return contentQueries;
}
/**
 * @param {?} map
 * @param {?} query
 * @return {?}
 */
function _addQueryToTokenMap(map, query) {
    query.meta.selectors.forEach(function (token) {
        var /** @type {?} */entry = map.get(tokenReference(token));
        if (!entry) {
            entry = [];
            map.set(tokenReference(token), entry);
        }
        entry.push(query);
    });
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @abstract
 */

var ElementSchemaRegistry = function () {
    function ElementSchemaRegistry() {
        _classCallCheck(this, ElementSchemaRegistry);
    }

    _createClass(ElementSchemaRegistry, [{
        key: 'hasProperty',

        /**
         * @abstract
         * @param {?} tagName
         * @param {?} propName
         * @param {?} schemaMetas
         * @return {?}
         */
        value: function hasProperty(tagName, propName, schemaMetas) {}
        /**
         * @abstract
         * @param {?} tagName
         * @param {?} schemaMetas
         * @return {?}
         */

    }, {
        key: 'hasElement',
        value: function hasElement(tagName, schemaMetas) {}
        /**
         * @abstract
         * @param {?} elementName
         * @param {?} propName
         * @param {?} isAttribute
         * @return {?}
         */

    }, {
        key: 'securityContext',
        value: function securityContext(elementName, propName, isAttribute) {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'allKnownElementNames',
        value: function allKnownElementNames() {}
        /**
         * @abstract
         * @param {?} propName
         * @return {?}
         */

    }, {
        key: 'getMappedPropName',
        value: function getMappedPropName(propName) {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'getDefaultComponentElementName',
        value: function getDefaultComponentElementName() {}
        /**
         * @abstract
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'validateProperty',
        value: function validateProperty(name) {}
        /**
         * @abstract
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'validateAttribute',
        value: function validateAttribute(name) {}
        /**
         * @abstract
         * @param {?} propName
         * @return {?}
         */

    }, {
        key: 'normalizeAnimationStyleProperty',
        value: function normalizeAnimationStyleProperty(propName) {}
        /**
         * @abstract
         * @param {?} camelCaseProp
         * @param {?} userProvidedProp
         * @param {?} val
         * @return {?}
         */

    }, {
        key: 'normalizeAnimationStyleValue',
        value: function normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {}
    }]);

    return ElementSchemaRegistry;
}();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var StyleWithImports =
/**
 * @param {?} style
 * @param {?} styleUrls
 */
function StyleWithImports(style, styleUrls) {
    _classCallCheck(this, StyleWithImports);

    this.style = style;
    this.styleUrls = styleUrls;
};
/**
 * @param {?} url
 * @return {?}
 */


function isStyleUrlResolvable(url) {
    if (url == null || url.length === 0 || url[0] == '/') return false;
    var /** @type {?} */schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
}
/**
 * Rewrites stylesheets by resolving and removing the \@import urls that
 * are either relative or don't have a `package:` scheme
 * @param {?} resolver
 * @param {?} baseUrl
 * @param {?} cssText
 * @return {?}
 */
function extractStyleUrls(resolver, baseUrl, cssText) {
    var /** @type {?} */foundUrls = [];
    var /** @type {?} */modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, function () {
        var /** @type {?} */url = (arguments.length <= 1 ? undefined : arguments[1]) || (arguments.length <= 2 ? undefined : arguments[2]);
        if (!isStyleUrlResolvable(url)) {
            // Do not attempt to resolve non-package absolute URLs with URI scheme
            return arguments.length <= 0 ? undefined : arguments[0];
        }
        foundUrls.push(resolver.resolve(baseUrl, url));
        return '';
    });
    return new StyleWithImports(modifiedCssText, foundUrls);
}
var /** @type {?} */CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
var /** @type {?} */CSS_COMMENT_REGEXP = /\/\*.+?\*\//g;
var /** @type {?} */URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;

var /** @type {?} */PROPERTY_PARTS_SEPARATOR = '.';
var /** @type {?} */ATTRIBUTE_PREFIX = 'attr';
var /** @type {?} */CLASS_PREFIX = 'class';
var /** @type {?} */STYLE_PREFIX = 'style';
var /** @type {?} */ANIMATE_PROP_PREFIX = 'animate-';
var BoundPropertyType = {};
BoundPropertyType.DEFAULT = 0;
BoundPropertyType.LITERAL_ATTR = 1;
BoundPropertyType.ANIMATION = 2;
BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT";
BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR";
BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION";
/**
 * Represents a parsed property.
 */

var BoundProperty = function () {
    /**
     * @param {?} name
     * @param {?} expression
     * @param {?} type
     * @param {?} sourceSpan
     */
    function BoundProperty(name, expression, type, sourceSpan) {
        _classCallCheck(this, BoundProperty);

        this.name = name;
        this.expression = expression;
        this.type = type;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @return {?}
     */


    _createClass(BoundProperty, [{
        key: 'isLiteral',
        get: function get() {
            return this.type === BoundPropertyType.LITERAL_ATTR;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'isAnimation',
        get: function get() {
            return this.type === BoundPropertyType.ANIMATION;
        }
    }]);

    return BoundProperty;
}();
/**
 * Parses bindings in templates and in the directive host area.
 */


var BindingParser = function () {
    /**
     * @param {?} _exprParser
     * @param {?} _interpolationConfig
     * @param {?} _schemaRegistry
     * @param {?} pipes
     * @param {?} _targetErrors
     */
    function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
        var _this86 = this;

        _classCallCheck(this, BindingParser);

        this._exprParser = _exprParser;
        this._interpolationConfig = _interpolationConfig;
        this._schemaRegistry = _schemaRegistry;
        this._targetErrors = _targetErrors;
        this.pipesByName = new Map();
        this._usedPipes = new Map();
        pipes.forEach(function (pipe) {
            return _this86.pipesByName.set(pipe.name, pipe);
        });
    }
    /**
     * @return {?}
     */


    _createClass(BindingParser, [{
        key: 'getUsedPipes',
        value: function getUsedPipes() {
            return Array.from(this._usedPipes.values());
        }
        /**
         * @param {?} dirMeta
         * @param {?} elementSelector
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: 'createDirectiveHostPropertyAsts',
        value: function createDirectiveHostPropertyAsts(dirMeta, elementSelector, sourceSpan) {
            var _this87 = this;

            if (dirMeta.hostProperties) {
                var /** @type {?} */boundProps = [];
                Object.keys(dirMeta.hostProperties).forEach(function (propName) {
                    var /** @type {?} */expression = dirMeta.hostProperties[propName];
                    if (typeof expression === 'string') {
                        _this87.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps);
                    } else {
                        _this87._reportError('Value of the host property binding "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + (typeof expression === 'undefined' ? 'undefined' : _typeof(expression)) + ')', sourceSpan);
                    }
                });
                return boundProps.map(function (prop) {
                    return _this87.createElementPropertyAst(elementSelector, prop);
                });
            }
        }
        /**
         * @param {?} dirMeta
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: 'createDirectiveHostEventAsts',
        value: function createDirectiveHostEventAsts(dirMeta, sourceSpan) {
            var _this88 = this;

            if (dirMeta.hostListeners) {
                var /** @type {?} */targetEventAsts = [];
                Object.keys(dirMeta.hostListeners).forEach(function (propName) {
                    var /** @type {?} */expression = dirMeta.hostListeners[propName];
                    if (typeof expression === 'string') {
                        _this88.parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
                    } else {
                        _this88._reportError('Value of the host listener "' + propName + '" needs to be a string representing an expression but got "' + expression + '" (' + (typeof expression === 'undefined' ? 'undefined' : _typeof(expression)) + ')', sourceSpan);
                    }
                });
                return targetEventAsts;
            }
        }
        /**
         * @param {?} value
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: 'parseInterpolation',
        value: function parseInterpolation(value, sourceSpan) {
            var /** @type {?} */sourceInfo = sourceSpan.start.toString();
            try {
                var /** @type {?} */ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
                if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
                this._checkPipes(ast, sourceSpan);
                return ast;
            } catch (e) {
                this._reportError('' + e, sourceSpan);
                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
            }
        }
        /**
         * @param {?} prefixToken
         * @param {?} value
         * @param {?} sourceSpan
         * @param {?} targetMatchableAttrs
         * @param {?} targetProps
         * @param {?} targetVars
         * @return {?}
         */

    }, {
        key: 'parseInlineTemplateBinding',
        value: function parseInlineTemplateBinding(prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
            var /** @type {?} */bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
            for (var /** @type {?} */i = 0; i < bindings.length; i++) {
                var /** @type {?} */binding = bindings[i];
                if (binding.keyIsVar) {
                    targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
                } else if (binding.expression) {
                    this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
                } else {
                    targetMatchableAttrs.push([binding.key, '']);
                    this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
                }
            }
        }
        /**
         * @param {?} prefixToken
         * @param {?} value
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: '_parseTemplateBindings',
        value: function _parseTemplateBindings(prefixToken, value, sourceSpan) {
            var _this89 = this;

            var /** @type {?} */sourceInfo = sourceSpan.start.toString();
            try {
                var /** @type {?} */bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
                this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
                bindingsResult.templateBindings.forEach(function (binding) {
                    if (binding.expression) {
                        _this89._checkPipes(binding.expression, sourceSpan);
                    }
                });
                bindingsResult.warnings.forEach(function (warning) {
                    _this89._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
                });
                return bindingsResult.templateBindings;
            } catch (e) {
                this._reportError('' + e, sourceSpan);
                return [];
            }
        }
        /**
         * @param {?} name
         * @param {?} value
         * @param {?} sourceSpan
         * @param {?} targetMatchableAttrs
         * @param {?} targetProps
         * @return {?}
         */

    }, {
        key: 'parseLiteralAttr',
        value: function parseLiteralAttr(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
            if (_isAnimationLabel(name)) {
                name = name.substring(1);
                if (value) {
                    this._reportError('Assigning animation triggers via @prop="exp" attributes with an expression is invalid.' + ' Use property bindings (e.g. [@prop]="exp") or use an attribute without a value (e.g. @prop) instead.', sourceSpan, ParseErrorLevel.FATAL);
                }
                this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
            } else {
                targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
            }
        }
        /**
         * @param {?} name
         * @param {?} expression
         * @param {?} isHost
         * @param {?} sourceSpan
         * @param {?} targetMatchableAttrs
         * @param {?} targetProps
         * @return {?}
         */

    }, {
        key: 'parsePropertyBinding',
        value: function parsePropertyBinding(name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
            var /** @type {?} */isAnimationProp = false;
            if (name.startsWith(ANIMATE_PROP_PREFIX)) {
                isAnimationProp = true;
                name = name.substring(ANIMATE_PROP_PREFIX.length);
            } else if (_isAnimationLabel(name)) {
                isAnimationProp = true;
                name = name.substring(1);
            }
            if (isAnimationProp) {
                this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
            } else {
                this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
            }
        }
        /**
         * @param {?} name
         * @param {?} value
         * @param {?} sourceSpan
         * @param {?} targetMatchableAttrs
         * @param {?} targetProps
         * @return {?}
         */

    }, {
        key: 'parsePropertyInterpolation',
        value: function parsePropertyInterpolation(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
            var /** @type {?} */expr = this.parseInterpolation(value, sourceSpan);
            if (expr) {
                this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
                return true;
            }
            return false;
        }
        /**
         * @param {?} name
         * @param {?} ast
         * @param {?} sourceSpan
         * @param {?} targetMatchableAttrs
         * @param {?} targetProps
         * @return {?}
         */

    }, {
        key: '_parsePropertyAst',
        value: function _parsePropertyAst(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
            targetMatchableAttrs.push([name, ast.source]);
            targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
        }
        /**
         * @param {?} name
         * @param {?} expression
         * @param {?} sourceSpan
         * @param {?} targetMatchableAttrs
         * @param {?} targetProps
         * @return {?}
         */

    }, {
        key: '_parseAnimation',
        value: function _parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
            // This will occur when a @trigger is not paired with an expression.
            // For animations it is valid to not have an expression since */void
            // states will be applied by angular when the element is attached/detached
            var /** @type {?} */ast = this._parseBinding(expression || 'null', false, sourceSpan);
            targetMatchableAttrs.push([name, ast.source]);
            targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
        }
        /**
         * @param {?} value
         * @param {?} isHostBinding
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: '_parseBinding',
        value: function _parseBinding(value, isHostBinding, sourceSpan) {
            var /** @type {?} */sourceInfo = sourceSpan.start.toString();
            try {
                var /** @type {?} */ast = isHostBinding ? this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) : this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
                if (ast) this._reportExpressionParserErrors(ast.errors, sourceSpan);
                this._checkPipes(ast, sourceSpan);
                return ast;
            } catch (e) {
                this._reportError('' + e, sourceSpan);
                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
            }
        }
        /**
         * @param {?} elementSelector
         * @param {?} boundProp
         * @return {?}
         */

    }, {
        key: 'createElementPropertyAst',
        value: function createElementPropertyAst(elementSelector, boundProp) {
            if (boundProp.isAnimation) {
                return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, __WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"].NONE, boundProp.expression, null, boundProp.sourceSpan);
            }
            var /** @type {?} */unit = null;
            var /** @type {?} */bindingType = void 0;
            var /** @type {?} */boundPropertyName = null;
            var /** @type {?} */parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
            var /** @type {?} */securityContexts = void 0;
            // Check check for special cases (prefix style, attr, class)
            if (parts.length > 1) {
                if (parts[0] == ATTRIBUTE_PREFIX) {
                    boundPropertyName = parts[1];
                    this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
                    securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
                    var /** @type {?} */nsSeparatorIdx = boundPropertyName.indexOf(':');
                    if (nsSeparatorIdx > -1) {
                        var /** @type {?} */ns = boundPropertyName.substring(0, nsSeparatorIdx);
                        var /** @type {?} */name = boundPropertyName.substring(nsSeparatorIdx + 1);
                        boundPropertyName = mergeNsAndName(ns, name);
                    }
                    bindingType = PropertyBindingType.Attribute;
                } else if (parts[0] == CLASS_PREFIX) {
                    boundPropertyName = parts[1];
                    bindingType = PropertyBindingType.Class;
                    securityContexts = [__WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"].NONE];
                } else if (parts[0] == STYLE_PREFIX) {
                    unit = parts.length > 2 ? parts[2] : null;
                    boundPropertyName = parts[1];
                    bindingType = PropertyBindingType.Style;
                    securityContexts = [__WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"].STYLE];
                }
            }
            // If not a special case, use the full property name
            if (boundPropertyName === null) {
                boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);
                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
                bindingType = PropertyBindingType.Property;
                this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
            }
            return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan);
        }
        /**
         * @param {?} name
         * @param {?} expression
         * @param {?} sourceSpan
         * @param {?} targetMatchableAttrs
         * @param {?} targetEvents
         * @return {?}
         */

    }, {
        key: 'parseEvent',
        value: function parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
            if (_isAnimationLabel(name)) {
                name = name.substr(1);
                this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
            } else {
                this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
            }
        }
        /**
         * @param {?} name
         * @param {?} expression
         * @param {?} sourceSpan
         * @param {?} targetEvents
         * @return {?}
         */

    }, {
        key: '_parseAnimationEvent',
        value: function _parseAnimationEvent(name, expression, sourceSpan, targetEvents) {
            var /** @type {?} */matches = splitAtPeriod(name, [name, '']);
            var /** @type {?} */eventName = matches[0];
            var /** @type {?} */phase = matches[1].toLowerCase();
            if (phase) {
                switch (phase) {
                    case 'start':
                    case 'done':
                        var /** @type {?} */ast = this._parseAction(expression, sourceSpan);
                        targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
                        break;
                    default:
                        this._reportError('The provided animation output phase value "' + phase + '" for "@' + eventName + '" is not supported (use start or done)', sourceSpan);
                        break;
                }
            } else {
                this._reportError('The animation trigger output event (@' + eventName + ') is missing its phase value name (start or done are currently supported)', sourceSpan);
            }
        }
        /**
         * @param {?} name
         * @param {?} expression
         * @param {?} sourceSpan
         * @param {?} targetMatchableAttrs
         * @param {?} targetEvents
         * @return {?}
         */

    }, {
        key: '_parseEvent',
        value: function _parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
            // long format: 'target: eventName'
            var _splitAtColon = splitAtColon(name, [null, name]),
                _splitAtColon2 = _slicedToArray(_splitAtColon, 2),
                target = _splitAtColon2[0],
                eventName = _splitAtColon2[1];

            var /** @type {?} */ast = this._parseAction(expression, sourceSpan);
            targetMatchableAttrs.push([name, ast.source]);
            targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
            // Don't detect directives for event names for now,
            // so don't add the event name to the matchableAttrs
        }
        /**
         * @param {?} value
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: '_parseAction',
        value: function _parseAction(value, sourceSpan) {
            var /** @type {?} */sourceInfo = sourceSpan.start.toString();
            try {
                var /** @type {?} */ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
                if (ast) {
                    this._reportExpressionParserErrors(ast.errors, sourceSpan);
                }
                if (!ast || ast.ast instanceof EmptyExpr) {
                    this._reportError('Empty expressions are not allowed', sourceSpan);
                    return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
                }
                this._checkPipes(ast, sourceSpan);
                return ast;
            } catch (e) {
                this._reportError('' + e, sourceSpan);
                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
            }
        }
        /**
         * @param {?} message
         * @param {?} sourceSpan
         * @param {?=} level
         * @return {?}
         */

    }, {
        key: '_reportError',
        value: function _reportError(message, sourceSpan) {
            var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.FATAL;

            this._targetErrors.push(new ParseError(sourceSpan, message, level));
        }
        /**
         * @param {?} errors
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: '_reportExpressionParserErrors',
        value: function _reportExpressionParserErrors(errors, sourceSpan) {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = errors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var error = _step3.value;

                    this._reportError(error.message, sourceSpan);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
        /**
         * @param {?} ast
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: '_checkPipes',
        value: function _checkPipes(ast, sourceSpan) {
            var _this90 = this;

            if (ast) {
                var /** @type {?} */collector = new PipeCollector();
                ast.visit(collector);
                collector.pipes.forEach(function (ast, pipeName) {
                    var /** @type {?} */pipeMeta = _this90.pipesByName.get(pipeName);
                    if (!pipeMeta) {
                        _this90._reportError('The pipe \'' + pipeName + '\' could not be found', new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
                    } else {
                        _this90._usedPipes.set(pipeName, pipeMeta);
                    }
                });
            }
        }
        /**
         * @param {?} propName the name of the property / attribute
         * @param {?} sourceSpan
         * @param {?} isAttr true when binding to an attribute
         * @return {?}
         */

    }, {
        key: '_validatePropertyOrAttributeName',
        value: function _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {
            var /** @type {?} */report = isAttr ? this._schemaRegistry.validateAttribute(propName) : this._schemaRegistry.validateProperty(propName);
            if (report.error) {
                this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);
            }
        }
    }]);

    return BindingParser;
}();

var PipeCollector = function (_RecursiveAstVisitor) {
    _inherits(PipeCollector, _RecursiveAstVisitor);

    function PipeCollector() {
        _classCallCheck(this, PipeCollector);

        var _this91 = _possibleConstructorReturn(this, (PipeCollector.__proto__ || Object.getPrototypeOf(PipeCollector)).apply(this, arguments));

        _this91.pipes = new Map();
        return _this91;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */


    _createClass(PipeCollector, [{
        key: 'visitPipe',
        value: function visitPipe(ast, context) {
            this.pipes.set(ast.name, ast);
            ast.exp.visit(this);
            this.visitAll(ast.args, context);
            return null;
        }
    }]);

    return PipeCollector;
}(RecursiveAstVisitor);
/**
 * @param {?} name
 * @return {?}
 */


function _isAnimationLabel(name) {
    return name[0] == '@';
}
/**
 * @param {?} registry
 * @param {?} selector
 * @param {?} propName
 * @param {?} isAttribute
 * @return {?}
 */
function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
    var /** @type {?} */ctxs = [];
    CssSelector.parse(selector).forEach(function (selector) {
        var /** @type {?} */elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
        var /** @type {?} */notElementNames = new Set(selector.notSelectors.filter(function (selector) {
            return selector.isElementSelector();
        }).map(function (selector) {
            return selector.element;
        }));
        var /** @type {?} */possibleElementNames = elementNames.filter(function (elementName) {
            return !notElementNames.has(elementName);
        });
        ctxs.push.apply(ctxs, _toConsumableArray(possibleElementNames.map(function (elementName) {
            return registry.securityContext(elementName, propName, isAttribute);
        })));
    });
    return ctxs.length === 0 ? [__WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"].NONE] : Array.from(new Set(ctxs)).sort();
}

var /** @type {?} */NG_CONTENT_SELECT_ATTR = 'select';
var /** @type {?} */NG_CONTENT_ELEMENT = 'ng-content';
var /** @type {?} */LINK_ELEMENT = 'link';
var /** @type {?} */LINK_STYLE_REL_ATTR = 'rel';
var /** @type {?} */LINK_STYLE_HREF_ATTR = 'href';
var /** @type {?} */LINK_STYLE_REL_VALUE = 'stylesheet';
var /** @type {?} */STYLE_ELEMENT = 'style';
var /** @type {?} */SCRIPT_ELEMENT = 'script';
var /** @type {?} */NG_NON_BINDABLE_ATTR = 'ngNonBindable';
var /** @type {?} */NG_PROJECT_AS = 'ngProjectAs';
/**
 * @param {?} ast
 * @return {?}
 */
function preparseElement(ast) {
    var /** @type {?} */selectAttr = null;
    var /** @type {?} */hrefAttr = null;
    var /** @type {?} */relAttr = null;
    var /** @type {?} */nonBindable = false;
    var /** @type {?} */projectAs = null;
    ast.attrs.forEach(function (attr) {
        var /** @type {?} */lcAttrName = attr.name.toLowerCase();
        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
            selectAttr = attr.value;
        } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
            hrefAttr = attr.value;
        } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
            relAttr = attr.value;
        } else if (attr.name == NG_NON_BINDABLE_ATTR) {
            nonBindable = true;
        } else if (attr.name == NG_PROJECT_AS) {
            if (attr.value.length > 0) {
                projectAs = attr.value;
            }
        }
    });
    selectAttr = normalizeNgContentSelect(selectAttr);
    var /** @type {?} */nodeName = ast.name.toLowerCase();
    var /** @type {?} */type = PreparsedElementType.OTHER;
    if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
        type = PreparsedElementType.NG_CONTENT;
    } else if (nodeName == STYLE_ELEMENT) {
        type = PreparsedElementType.STYLE;
    } else if (nodeName == SCRIPT_ELEMENT) {
        type = PreparsedElementType.SCRIPT;
    } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
        type = PreparsedElementType.STYLESHEET;
    }
    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
}
var PreparsedElementType = {};
PreparsedElementType.NG_CONTENT = 0;
PreparsedElementType.STYLE = 1;
PreparsedElementType.STYLESHEET = 2;
PreparsedElementType.SCRIPT = 3;
PreparsedElementType.OTHER = 4;
PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT";
PreparsedElementType[PreparsedElementType.STYLE] = "STYLE";
PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET";
PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT";
PreparsedElementType[PreparsedElementType.OTHER] = "OTHER";

var PreparsedElement =
/**
 * @param {?} type
 * @param {?} selectAttr
 * @param {?} hrefAttr
 * @param {?} nonBindable
 * @param {?} projectAs
 */
function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
    _classCallCheck(this, PreparsedElement);

    this.type = type;
    this.selectAttr = selectAttr;
    this.hrefAttr = hrefAttr;
    this.nonBindable = nonBindable;
    this.projectAs = projectAs;
};
/**
 * @param {?} selectAttr
 * @return {?}
 */


function normalizeNgContentSelect(selectAttr) {
    if (selectAttr === null || selectAttr.length === 0) {
        return '*';
    }
    return selectAttr;
}

var /** @type {?} */BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
// Group 1 = "bind-"
var /** @type {?} */KW_BIND_IDX = 1;
// Group 2 = "let-"
var /** @type {?} */KW_LET_IDX = 2;
// Group 3 = "ref-/#"
var /** @type {?} */KW_REF_IDX = 3;
// Group 4 = "on-"
var /** @type {?} */KW_ON_IDX = 4;
// Group 5 = "bindon-"
var /** @type {?} */KW_BINDON_IDX = 5;
// Group 6 = "@"
var /** @type {?} */KW_AT_IDX = 6;
// Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
var /** @type {?} */IDENT_KW_IDX = 7;
// Group 8 = identifier inside [()]
var /** @type {?} */IDENT_BANANA_BOX_IDX = 8;
// Group 9 = identifier inside []
var /** @type {?} */IDENT_PROPERTY_IDX = 9;
// Group 10 = identifier inside ()
var /** @type {?} */IDENT_EVENT_IDX = 10;
var /** @type {?} */NG_TEMPLATE_ELEMENT = 'ng-template';
// deprecated in 4.x
var /** @type {?} */TEMPLATE_ELEMENT = 'template';
// deprecated in 4.x
var /** @type {?} */TEMPLATE_ATTR = 'template';
var /** @type {?} */TEMPLATE_ATTR_PREFIX = '*';
var /** @type {?} */CLASS_ATTR = 'class';
var /** @type {?} */TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
/**
 * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
 * parsed templates before compilation is invoked, allowing custom expression syntax
 * and other advanced transformations.
 *
 * This is currently an internal-only feature and not meant for general use.
 */
var /** @type {?} */TEMPLATE_TRANSFORMS = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('TemplateTransforms');

var TemplateParseError = function (_ParseError6) {
    _inherits(TemplateParseError, _ParseError6);

    /**
     * @param {?} message
     * @param {?} span
     * @param {?} level
     */
    function TemplateParseError(message, span, level) {
        _classCallCheck(this, TemplateParseError);

        return _possibleConstructorReturn(this, (TemplateParseError.__proto__ || Object.getPrototypeOf(TemplateParseError)).call(this, span, message, level));
    }

    return TemplateParseError;
}(ParseError);

var TemplateParseResult =
/**
 * @param {?=} templateAst
 * @param {?=} usedPipes
 * @param {?=} errors
 */
function TemplateParseResult(templateAst, usedPipes, errors) {
    _classCallCheck(this, TemplateParseResult);

    this.templateAst = templateAst;
    this.usedPipes = usedPipes;
    this.errors = errors;
};

var TemplateParser = function () {
    /**
     * @param {?} _config
     * @param {?} _exprParser
     * @param {?} _schemaRegistry
     * @param {?} _htmlParser
     * @param {?} _console
     * @param {?} transforms
     */
    function TemplateParser(_config, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
        _classCallCheck(this, TemplateParser);

        this._config = _config;
        this._exprParser = _exprParser;
        this._schemaRegistry = _schemaRegistry;
        this._htmlParser = _htmlParser;
        this._console = _console;
        this.transforms = transforms;
    }
    /**
     * @param {?} component
     * @param {?} template
     * @param {?} directives
     * @param {?} pipes
     * @param {?} schemas
     * @param {?} templateUrl
     * @return {?}
     */


    _createClass(TemplateParser, [{
        key: 'parse',
        value: function parse(component, template, directives, pipes, schemas, templateUrl) {
            var /** @type {?} */result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
            var /** @type {?} */warnings = result.errors.filter(function (error) {
                return error.level === ParseErrorLevel.WARNING;
            });
            var /** @type {?} */errors = result.errors.filter(function (error) {
                return error.level === ParseErrorLevel.FATAL;
            });
            if (warnings.length > 0) {
                this._console.warn('Template parse warnings:\n' + warnings.join('\n'));
            }
            if (errors.length > 0) {
                var /** @type {?} */errorString = errors.join('\n');
                throw syntaxError('Template parse errors:\n' + errorString);
            }
            return { template: result.templateAst, pipes: result.usedPipes };
        }
        /**
         * @param {?} component
         * @param {?} template
         * @param {?} directives
         * @param {?} pipes
         * @param {?} schemas
         * @param {?} templateUrl
         * @return {?}
         */

    }, {
        key: 'tryParse',
        value: function tryParse(component, template, directives, pipes, schemas, templateUrl) {
            return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
        }
        /**
         * @param {?} htmlAstWithErrors
         * @param {?} component
         * @param {?} template
         * @param {?} directives
         * @param {?} pipes
         * @param {?} schemas
         * @param {?} templateUrl
         * @return {?}
         */

    }, {
        key: 'tryParseHtml',
        value: function tryParseHtml(htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
            var /** @type {?} */result = void 0;
            var /** @type {?} */errors = htmlAstWithErrors.errors;
            var /** @type {?} */usedPipes = [];
            if (htmlAstWithErrors.rootNodes.length > 0) {
                var /** @type {?} */uniqDirectives = removeSummaryDuplicates(directives);
                var /** @type {?} */uniqPipes = removeSummaryDuplicates(pipes);
                var /** @type {?} */providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
                var /** @type {?} */interpolationConfig = void 0;
                if (component.template && component.template.interpolation) {
                    interpolationConfig = {
                        start: component.template.interpolation[0],
                        end: component.template.interpolation[1]
                    };
                }
                var /** @type {?} */bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
                var /** @type {?} */parseVisitor = new TemplateParseVisitor(this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
                result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
                errors.push.apply(errors, _toConsumableArray(providerViewContext.errors));
                usedPipes.push.apply(usedPipes, _toConsumableArray(bindingParser.getUsedPipes()));
            } else {
                result = [];
            }
            this._assertNoReferenceDuplicationOnTemplate(result, errors);
            if (errors.length > 0) {
                return new TemplateParseResult(result, usedPipes, errors);
            }
            if (this.transforms) {
                this.transforms.forEach(function (transform) {
                    result = templateVisitAll(transform, result);
                });
            }
            return new TemplateParseResult(result, usedPipes, errors);
        }
        /**
         * @param {?} htmlAstWithErrors
         * @param {?=} forced
         * @return {?}
         */

    }, {
        key: 'expandHtml',
        value: function expandHtml(htmlAstWithErrors) {
            var forced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var /** @type {?} */errors = htmlAstWithErrors.errors;
            if (errors.length == 0 || forced) {
                // Transform ICU messages to angular directives
                var /** @type {?} */expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
                errors.push.apply(errors, _toConsumableArray(expandedHtmlAst.errors));
                htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
            }
            return htmlAstWithErrors;
        }
        /**
         * @param {?} component
         * @return {?}
         */

    }, {
        key: 'getInterpolationConfig',
        value: function getInterpolationConfig(component) {
            if (component.template) {
                return InterpolationConfig.fromArray(component.template.interpolation);
            }
        }
        /**
         * \@internal
         * @param {?} result
         * @param {?} errors
         * @return {?}
         */

    }, {
        key: '_assertNoReferenceDuplicationOnTemplate',
        value: function _assertNoReferenceDuplicationOnTemplate(result, errors) {
            var /** @type {?} */existingReferences = [];
            result.filter(function (element) {
                return !!element.references;
            }).forEach(function (element) {
                return element.references.forEach(function (reference) {
                    var /** @type {?} */name = reference.name;
                    if (existingReferences.indexOf(name) < 0) {
                        existingReferences.push(name);
                    } else {
                        var /** @type {?} */error = new TemplateParseError('Reference "#' + name + '" is defined several times', reference.sourceSpan, ParseErrorLevel.FATAL);
                        errors.push(error);
                    }
                });
            });
        }
    }]);

    return TemplateParser;
}();

TemplateParser.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
TemplateParser.ctorParameters = function () {
    return [{ type: CompilerConfig }, { type: Parser }, { type: ElementSchemaRegistry }, { type: I18NHtmlParser }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵConsole"] }, { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [TEMPLATE_TRANSFORMS] }] }];
};

var TemplateParseVisitor = function () {
    /**
     * @param {?} config
     * @param {?} providerViewContext
     * @param {?} directives
     * @param {?} _bindingParser
     * @param {?} _schemaRegistry
     * @param {?} _schemas
     * @param {?} _targetErrors
     */
    function TemplateParseVisitor(config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
        var _this93 = this;

        _classCallCheck(this, TemplateParseVisitor);

        this.config = config;
        this.providerViewContext = providerViewContext;
        this._bindingParser = _bindingParser;
        this._schemaRegistry = _schemaRegistry;
        this._schemas = _schemas;
        this._targetErrors = _targetErrors;
        this.selectorMatcher = new SelectorMatcher();
        this.directivesIndex = new Map();
        this.ngContentCount = 0;
        // Note: queries start with id 1 so we can use the number in a Bloom filter!
        this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;
        directives.forEach(function (directive, index) {
            var selector = CssSelector.parse(directive.selector);
            _this93.selectorMatcher.addSelectables(selector, directive);
            _this93.directivesIndex.set(directive, index);
        });
    }
    /**
     * @param {?} expansion
     * @param {?} context
     * @return {?}
     */


    _createClass(TemplateParseVisitor, [{
        key: 'visitExpansion',
        value: function visitExpansion(expansion, context) {
            return null;
        }
        /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(expansionCase, context) {
            return null;
        }
        /**
         * @param {?} text
         * @param {?} parent
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, parent) {
            var /** @type {?} */ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
            var /** @type {?} */expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
            return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) : new TextAst(text.value, ngContentIndex, text.sourceSpan);
        }
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(attribute, context) {
            return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
        }
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(comment, context) {
            return null;
        }
        /**
         * @param {?} element
         * @param {?} parent
         * @return {?}
         */

    }, {
        key: 'visitElement',
        value: function visitElement(element, parent) {
            var _this94 = this;

            var /** @type {?} */queryStartIndex = this.contentQueryStartId;
            var /** @type {?} */nodeName = element.name;
            var /** @type {?} */preparsedElement = preparseElement(element);
            if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {
                // Skipping <script> for security reasons
                // Skipping <style> as we already processed them
                // in the StyleCompiler
                return null;
            }
            if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
                // Skipping stylesheets with either relative urls or package scheme as we already processed
                // them in the StyleCompiler
                return null;
            }
            var /** @type {?} */matchableAttrs = [];
            var /** @type {?} */elementOrDirectiveProps = [];
            var /** @type {?} */elementOrDirectiveRefs = [];
            var /** @type {?} */elementVars = [];
            var /** @type {?} */events = [];
            var /** @type {?} */templateElementOrDirectiveProps = [];
            var /** @type {?} */templateMatchableAttrs = [];
            var /** @type {?} */templateElementVars = [];
            var /** @type {?} */hasInlineTemplates = false;
            var /** @type {?} */attrs = [];
            var /** @type {?} */isTemplateElement = isTemplate(element, this.config.enableLegacyTemplate, function (m, span) {
                return _this94._reportError(m, span, ParseErrorLevel.WARNING);
            });
            element.attrs.forEach(function (attr) {
                var /** @type {?} */hasBinding = _this94._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
                var /** @type {?} */templateBindingsSource = void 0;
                var /** @type {?} */prefixToken = void 0;
                var /** @type {?} */normalizedName = _this94._normalizeAttributeName(attr.name);
                if (_this94.config.enableLegacyTemplate && normalizedName == TEMPLATE_ATTR) {
                    _this94._reportError('The template attribute is deprecated. Use an ng-template element instead.', attr.sourceSpan, ParseErrorLevel.WARNING);
                    templateBindingsSource = attr.value;
                } else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
                    templateBindingsSource = attr.value;
                    prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';
                }
                var /** @type {?} */hasTemplateBinding = isPresent(templateBindingsSource);
                if (hasTemplateBinding) {
                    if (hasInlineTemplates) {
                        _this94._reportError('Can\'t have multiple template bindings on one element. Use only one attribute named \'template\' or prefixed with *', attr.sourceSpan);
                    }
                    hasInlineTemplates = true;
                    _this94._bindingParser.parseInlineTemplateBinding(prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
                }
                if (!hasBinding && !hasTemplateBinding) {
                    // don't include the bindings as attributes as well in the AST
                    attrs.push(_this94.visitAttribute(attr, null));
                    matchableAttrs.push([attr.name, attr.value]);
                }
            });
            var /** @type {?} */elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);

            var _parseDirectives2 = this._parseDirectives(this.selectorMatcher, elementCssSelector),
                directiveMetas = _parseDirectives2.directives,
                matchElement = _parseDirectives2.matchElement;

            var /** @type {?} */references = [];
            var /** @type {?} */boundDirectivePropNames = new Set();
            var /** @type {?} */directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);
            var /** @type {?} */elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);
            var /** @type {?} */isViewRoot = parent.isTemplateElement || hasInlineTemplates;
            var /** @type {?} */providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan);
            var /** @type {?} */children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
            providerContext.afterElement();
            // Override the actual selector when the `ngProjectAs` attribute is provided
            var /** @type {?} */projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
            var /** @type {?} */ngContentIndex = parent.findNgContentIndex(projectionSelector);
            var /** @type {?} */parsedElement = void 0;
            if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
                if (element.children && !element.children.every(_isEmptyTextNode)) {
                    this._reportError('<ng-content> element cannot have content.', element.sourceSpan);
                }
                parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
            } else if (isTemplateElement) {
                this._assertAllEventsPublishedByDirectives(directiveAsts, events);
                this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
                parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
            } else {
                this._assertElementExists(matchElement, element);
                this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
                var /** @type {?} */_ngContentIndex = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
                parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : _ngContentIndex, element.sourceSpan, element.endSourceSpan);
            }
            if (hasInlineTemplates) {
                var /** @type {?} */templateQueryStartIndex = this.contentQueryStartId;
                var /** @type {?} */templateSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);

                var _parseDirectives3 = this._parseDirectives(this.selectorMatcher, templateSelector),
                    templateDirectiveMetas = _parseDirectives3.directives;

                var /** @type {?} */templateBoundDirectivePropNames = new Set();
                var /** @type {?} */templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames);
                var /** @type {?} */templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);
                this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
                var /** @type {?} */templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);
                templateProviderContext.afterElement();
                parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, element.sourceSpan);
            }
            return parsedElement;
        }
        /**
         * @param {?} isTemplateElement
         * @param {?} attr
         * @param {?} targetMatchableAttrs
         * @param {?} targetProps
         * @param {?} targetEvents
         * @param {?} targetRefs
         * @param {?} targetVars
         * @return {?}
         */

    }, {
        key: '_parseAttr',
        value: function _parseAttr(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
            var /** @type {?} */name = this._normalizeAttributeName(attr.name);
            var /** @type {?} */value = attr.value;
            var /** @type {?} */srcSpan = attr.sourceSpan;
            var /** @type {?} */bindParts = name.match(BIND_NAME_REGEXP);
            var /** @type {?} */hasBinding = false;
            if (bindParts !== null) {
                hasBinding = true;
                if (isPresent(bindParts[KW_BIND_IDX])) {
                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
                } else if (bindParts[KW_LET_IDX]) {
                    if (isTemplateElement) {
                        var /** @type {?} */identifier = bindParts[IDENT_KW_IDX];
                        this._parseVariable(identifier, value, srcSpan, targetVars);
                    } else {
                        this._reportError('"let-" is only supported on template elements.', srcSpan);
                    }
                } else if (bindParts[KW_REF_IDX]) {
                    var /** @type {?} */_identifier = bindParts[IDENT_KW_IDX];
                    this._parseReference(_identifier, value, srcSpan, targetRefs);
                } else if (bindParts[KW_ON_IDX]) {
                    this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
                } else if (bindParts[KW_BINDON_IDX]) {
                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
                    this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
                } else if (bindParts[KW_AT_IDX]) {
                    this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
                } else if (bindParts[IDENT_BANANA_BOX_IDX]) {
                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
                    this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
                } else if (bindParts[IDENT_PROPERTY_IDX]) {
                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
                } else if (bindParts[IDENT_EVENT_IDX]) {
                    this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
                }
            } else {
                hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
            }
            if (!hasBinding) {
                this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
            }
            return hasBinding;
        }
        /**
         * @param {?} attrName
         * @return {?}
         */

    }, {
        key: '_normalizeAttributeName',
        value: function _normalizeAttributeName(attrName) {
            return (/^data-/i.test(attrName) ? attrName.substring(5) : attrName
            );
        }
        /**
         * @param {?} identifier
         * @param {?} value
         * @param {?} sourceSpan
         * @param {?} targetVars
         * @return {?}
         */

    }, {
        key: '_parseVariable',
        value: function _parseVariable(identifier, value, sourceSpan, targetVars) {
            if (identifier.indexOf('-') > -1) {
                this._reportError('"-" is not allowed in variable names', sourceSpan);
            }
            targetVars.push(new VariableAst(identifier, value, sourceSpan));
        }
        /**
         * @param {?} identifier
         * @param {?} value
         * @param {?} sourceSpan
         * @param {?} targetRefs
         * @return {?}
         */

    }, {
        key: '_parseReference',
        value: function _parseReference(identifier, value, sourceSpan, targetRefs) {
            if (identifier.indexOf('-') > -1) {
                this._reportError('"-" is not allowed in reference names', sourceSpan);
            }
            targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
        }
        /**
         * @param {?} name
         * @param {?} expression
         * @param {?} sourceSpan
         * @param {?} targetMatchableAttrs
         * @param {?} targetEvents
         * @return {?}
         */

    }, {
        key: '_parseAssignmentEvent',
        value: function _parseAssignmentEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
            this._bindingParser.parseEvent(name + 'Change', expression + '=$event', sourceSpan, targetMatchableAttrs, targetEvents);
        }
        /**
         * @param {?} selectorMatcher
         * @param {?} elementCssSelector
         * @return {?}
         */

    }, {
        key: '_parseDirectives',
        value: function _parseDirectives(selectorMatcher, elementCssSelector) {
            var _this95 = this;

            // Need to sort the directives so that we get consistent results throughout,
            // as selectorMatcher uses Maps inside.
            // Also deduplicate directives as they might match more than one time!
            var /** @type {?} */directives = new Array(this.directivesIndex.size);
            // Whether any directive selector matches on the element name
            var /** @type {?} */matchElement = false;
            selectorMatcher.match(elementCssSelector, function (selector, directive) {
                directives[_this95.directivesIndex.get(directive)] = directive;
                matchElement = matchElement || selector.hasElementSelector();
            });
            return {
                directives: directives.filter(function (dir) {
                    return !!dir;
                }),
                matchElement: matchElement
            };
        }
        /**
         * @param {?} isTemplateElement
         * @param {?} elementName
         * @param {?} directives
         * @param {?} props
         * @param {?} elementOrDirectiveRefs
         * @param {?} elementSourceSpan
         * @param {?} targetReferences
         * @param {?} targetBoundDirectivePropNames
         * @return {?}
         */

    }, {
        key: '_createDirectiveAsts',
        value: function _createDirectiveAsts(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {
            var _this96 = this;

            var /** @type {?} */matchedReferences = new Set();
            var /** @type {?} */component = null;
            var /** @type {?} */directiveAsts = directives.map(function (directive) {
                var /** @type {?} */sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, 'Directive ' + identifierName(directive.type));
                if (directive.isComponent) {
                    component = directive;
                }
                var /** @type {?} */directiveProperties = [];
                var /** @type {?} */hostProperties = _this96._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan);
                // Note: We need to check the host properties here as well,
                // as we don't know the element name in the DirectiveWrapperCompiler yet.
                hostProperties = _this96._checkPropertiesInSchema(elementName, hostProperties);
                var /** @type {?} */hostEvents = _this96._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
                _this96._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);
                elementOrDirectiveRefs.forEach(function (elOrDirRef) {
                    if (elOrDirRef.value.length === 0 && directive.isComponent || directive.exportAs == elOrDirRef.value) {
                        targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
                        matchedReferences.add(elOrDirRef.name);
                    }
                });
                var /** @type {?} */contentQueryStartId = _this96.contentQueryStartId;
                _this96.contentQueryStartId += directive.queries.length;
                return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);
            });
            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
                if (elOrDirRef.value.length > 0) {
                    if (!matchedReferences.has(elOrDirRef.name)) {
                        _this96._reportError('There is no directive with "exportAs" set to "' + elOrDirRef.value + '"', elOrDirRef.sourceSpan);
                    }
                } else if (!component) {
                    var /** @type {?} */refToken = null;
                    if (isTemplateElement) {
                        refToken = createIdentifierToken(Identifiers.TemplateRef);
                    }
                    targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
                }
            });
            return directiveAsts;
        }
        /**
         * @param {?} directiveProperties
         * @param {?} boundProps
         * @param {?} targetBoundDirectiveProps
         * @param {?} targetBoundDirectivePropNames
         * @return {?}
         */

    }, {
        key: '_createDirectivePropertyAsts',
        value: function _createDirectivePropertyAsts(directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {
            if (directiveProperties) {
                var /** @type {?} */boundPropsByName = new Map();
                boundProps.forEach(function (boundProp) {
                    var /** @type {?} */prevValue = boundPropsByName.get(boundProp.name);
                    if (!prevValue || prevValue.isLiteral) {
                        // give [a]="b" a higher precedence than a="b" on the same element
                        boundPropsByName.set(boundProp.name, boundProp);
                    }
                });
                Object.keys(directiveProperties).forEach(function (dirProp) {
                    var /** @type {?} */elProp = directiveProperties[dirProp];
                    var /** @type {?} */boundProp = boundPropsByName.get(elProp);
                    // Bindings are optional, so this binding only needs to be set up if an expression is given.
                    if (boundProp) {
                        targetBoundDirectivePropNames.add(boundProp.name);
                        if (!isEmptyExpression(boundProp.expression)) {
                            targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
                        }
                    }
                });
            }
        }
        /**
         * @param {?} elementName
         * @param {?} props
         * @param {?} boundDirectivePropNames
         * @return {?}
         */

    }, {
        key: '_createElementPropertyAsts',
        value: function _createElementPropertyAsts(elementName, props, boundDirectivePropNames) {
            var _this97 = this;

            var /** @type {?} */boundElementProps = [];
            props.forEach(function (prop) {
                if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {
                    boundElementProps.push(_this97._bindingParser.createElementPropertyAst(elementName, prop));
                }
            });
            return this._checkPropertiesInSchema(elementName, boundElementProps);
        }
        /**
         * @param {?} directives
         * @return {?}
         */

    }, {
        key: '_findComponentDirectives',
        value: function _findComponentDirectives(directives) {
            return directives.filter(function (directive) {
                return directive.directive.isComponent;
            });
        }
        /**
         * @param {?} directives
         * @return {?}
         */

    }, {
        key: '_findComponentDirectiveNames',
        value: function _findComponentDirectiveNames(directives) {
            return this._findComponentDirectives(directives).map(function (directive) {
                return identifierName(directive.directive.type);
            });
        }
        /**
         * @param {?} directives
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: '_assertOnlyOneComponent',
        value: function _assertOnlyOneComponent(directives, sourceSpan) {
            var /** @type {?} */componentTypeNames = this._findComponentDirectiveNames(directives);
            if (componentTypeNames.length > 1) {
                this._reportError('More than one component matched on this element.\n' + 'Make sure that only one component\'s selector can match a given element.\n' + ('Conflicting components: ' + componentTypeNames.join(',')), sourceSpan);
            }
        }
        /**
         * Make sure that non-angular tags conform to the schemas.
         *
         * Note: An element is considered an angular tag when at least one directive selector matches the
         * tag name.
         *
         * @param {?} matchElement Whether any directive has matched on the tag name
         * @param {?} element the html element
         * @return {?}
         */

    }, {
        key: '_assertElementExists',
        value: function _assertElementExists(matchElement, element) {
            var /** @type {?} */elName = element.name.replace(/^:xhtml:/, '');
            if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
                var /** @type {?} */errorMsg = '\'' + elName + '\' is not a known element:\n';
                errorMsg += '1. If \'' + elName + '\' is an Angular component, then verify that it is part of this module.\n';
                if (elName.indexOf('-') > -1) {
                    errorMsg += '2. If \'' + elName + '\' is a Web Component then add \'CUSTOM_ELEMENTS_SCHEMA\' to the \'@NgModule.schemas\' of this component to suppress this message.';
                } else {
                    errorMsg += '2. To allow any element add \'NO_ERRORS_SCHEMA\' to the \'@NgModule.schemas\' of this component.';
                }
                this._reportError(errorMsg, element.sourceSpan);
            }
        }
        /**
         * @param {?} directives
         * @param {?} elementProps
         * @param {?} sourceSpan
         * @return {?}
         */

    }, {
        key: '_assertNoComponentsNorElementBindingsOnTemplate',
        value: function _assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, sourceSpan) {
            var _this98 = this;

            var /** @type {?} */componentTypeNames = this._findComponentDirectiveNames(directives);
            if (componentTypeNames.length > 0) {
                this._reportError('Components on an embedded template: ' + componentTypeNames.join(','), sourceSpan);
            }
            elementProps.forEach(function (prop) {
                _this98._reportError('Property binding ' + prop.name + ' not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the "@NgModule.declarations".', sourceSpan);
            });
        }
        /**
         * @param {?} directives
         * @param {?} events
         * @return {?}
         */

    }, {
        key: '_assertAllEventsPublishedByDirectives',
        value: function _assertAllEventsPublishedByDirectives(directives, events) {
            var _this99 = this;

            var /** @type {?} */allDirectiveEvents = new Set();
            directives.forEach(function (directive) {
                Object.keys(directive.directive.outputs).forEach(function (k) {
                    var /** @type {?} */eventName = directive.directive.outputs[k];
                    allDirectiveEvents.add(eventName);
                });
            });
            events.forEach(function (event) {
                if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
                    _this99._reportError('Event binding ' + event.fullName + ' not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the "@NgModule.declarations".', event.sourceSpan);
                }
            });
        }
        /**
         * @param {?} elementName
         * @param {?} boundProps
         * @return {?}
         */

    }, {
        key: '_checkPropertiesInSchema',
        value: function _checkPropertiesInSchema(elementName, boundProps) {
            var _this100 = this;

            // Note: We can't filter out empty expressions before this method,
            // as we still want to validate them!
            return boundProps.filter(function (boundProp) {
                if (boundProp.type === PropertyBindingType.Property && !_this100._schemaRegistry.hasProperty(elementName, boundProp.name, _this100._schemas)) {
                    var /** @type {?} */errorMsg = 'Can\'t bind to \'' + boundProp.name + '\' since it isn\'t a known property of \'' + elementName + '\'.';
                    if (elementName.startsWith('ng-')) {
                        errorMsg += '\n1. If \'' + boundProp.name + '\' is an Angular directive, then add \'CommonModule\' to the \'@NgModule.imports\' of this component.' + '\n2. To allow any property add \'NO_ERRORS_SCHEMA\' to the \'@NgModule.schemas\' of this component.';
                    } else if (elementName.indexOf('-') > -1) {
                        errorMsg += '\n1. If \'' + elementName + '\' is an Angular component and it has \'' + boundProp.name + '\' input, then verify that it is part of this module.' + ('\n2. If \'' + elementName + '\' is a Web Component then add \'CUSTOM_ELEMENTS_SCHEMA\' to the \'@NgModule.schemas\' of this component to suppress this message.') + '\n3. To allow any property add \'NO_ERRORS_SCHEMA\' to the \'@NgModule.schemas\' of this component.';
                    }
                    _this100._reportError(errorMsg, boundProp.sourceSpan);
                }
                return !isEmptyExpression(boundProp.value);
            });
        }
        /**
         * @param {?} message
         * @param {?} sourceSpan
         * @param {?=} level
         * @return {?}
         */

    }, {
        key: '_reportError',
        value: function _reportError(message, sourceSpan) {
            var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ParseErrorLevel.FATAL;

            this._targetErrors.push(new ParseError(sourceSpan, message, level));
        }
    }]);

    return TemplateParseVisitor;
}();

var NonBindableVisitor = function () {
    function NonBindableVisitor() {
        _classCallCheck(this, NonBindableVisitor);
    }

    _createClass(NonBindableVisitor, [{
        key: 'visitElement',

        /**
         * @param {?} ast
         * @param {?} parent
         * @return {?}
         */
        value: function visitElement(ast, parent) {
            var /** @type {?} */preparsedElement = preparseElement(ast);
            if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
                // Skipping <script> for security reasons
                // Skipping <style> and stylesheets as we already processed them
                // in the StyleCompiler
                return null;
            }
            var /** @type {?} */attrNameAndValues = ast.attrs.map(function (attr) {
                return [attr.name, attr.value];
            });
            var /** @type {?} */selector = createElementCssSelector(ast.name, attrNameAndValues);
            var /** @type {?} */ngContentIndex = parent.findNgContentIndex(selector);
            var /** @type {?} */children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
            return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
        }
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(comment, context) {
            return null;
        }
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(attribute, context) {
            return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
        }
        /**
         * @param {?} text
         * @param {?} parent
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(text, parent) {
            var /** @type {?} */ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
            return new TextAst(text.value, ngContentIndex, text.sourceSpan);
        }
        /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansion',
        value: function visitExpansion(expansion, context) {
            return expansion;
        }
        /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(expansionCase, context) {
            return expansionCase;
        }
    }]);

    return NonBindableVisitor;
}();

var ElementOrDirectiveRef =
/**
 * @param {?} name
 * @param {?} value
 * @param {?} sourceSpan
 */
function ElementOrDirectiveRef(name, value, sourceSpan) {
    _classCallCheck(this, ElementOrDirectiveRef);

    this.name = name;
    this.value = value;
    this.sourceSpan = sourceSpan;
};
/**
 * @param {?} classAttrValue
 * @return {?}
 */


function splitClasses(classAttrValue) {
    return classAttrValue.trim().split(/\s+/g);
}

var ElementContext = function () {
    /**
     * @param {?} isTemplateElement
     * @param {?} _ngContentIndexMatcher
     * @param {?} _wildcardNgContentIndex
     * @param {?} providerContext
     */
    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
        _classCallCheck(this, ElementContext);

        this.isTemplateElement = isTemplateElement;
        this._ngContentIndexMatcher = _ngContentIndexMatcher;
        this._wildcardNgContentIndex = _wildcardNgContentIndex;
        this.providerContext = providerContext;
    }
    /**
     * @param {?} isTemplateElement
     * @param {?} directives
     * @param {?} providerContext
     * @return {?}
     */


    _createClass(ElementContext, [{
        key: 'findNgContentIndex',

        /**
         * @param {?} selector
         * @return {?}
         */
        value: function findNgContentIndex(selector) {
            var /** @type {?} */ngContentIndices = [];
            this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) {
                ngContentIndices.push(ngContentIndex);
            });
            ngContentIndices.sort();
            if (isPresent(this._wildcardNgContentIndex)) {
                ngContentIndices.push(this._wildcardNgContentIndex);
            }
            return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
        }
    }], [{
        key: 'create',
        value: function create(isTemplateElement, directives, providerContext) {
            var /** @type {?} */matcher = new SelectorMatcher();
            var /** @type {?} */wildcardNgContentIndex = null;
            var /** @type {?} */component = directives.find(function (directive) {
                return directive.directive.isComponent;
            });
            if (component) {
                var /** @type {?} */ngContentSelectors = component.directive.template.ngContentSelectors;
                for (var /** @type {?} */i = 0; i < ngContentSelectors.length; i++) {
                    var /** @type {?} */selector = ngContentSelectors[i];
                    if (selector === '*') {
                        wildcardNgContentIndex = i;
                    } else {
                        matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
                    }
                }
            }
            return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
        }
    }]);

    return ElementContext;
}();
/**
 * @param {?} elementName
 * @param {?} attributes
 * @return {?}
 */


function createElementCssSelector(elementName, attributes) {
    var /** @type {?} */cssSelector = new CssSelector();
    var /** @type {?} */elNameNoNs = splitNsName(elementName)[1];
    cssSelector.setElement(elNameNoNs);
    for (var /** @type {?} */i = 0; i < attributes.length; i++) {
        var /** @type {?} */attrName = attributes[i][0];
        var /** @type {?} */attrNameNoNs = splitNsName(attrName)[1];
        var /** @type {?} */attrValue = attributes[i][1];
        cssSelector.addAttribute(attrNameNoNs, attrValue);
        if (attrName.toLowerCase() == CLASS_ATTR) {
            var /** @type {?} */classes = splitClasses(attrValue);
            classes.forEach(function (className) {
                return cssSelector.addClassName(className);
            });
        }
    }
    return cssSelector;
}
var /** @type {?} */EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
var /** @type {?} */NON_BINDABLE_VISITOR = new NonBindableVisitor();
/**
 * @param {?} node
 * @return {?}
 */
function _isEmptyTextNode(node) {
    return node instanceof Text && node.value.trim().length == 0;
}
/**
 * @param {?} items
 * @return {?}
 */
function removeSummaryDuplicates(items) {
    var /** @type {?} */map = new Map();
    items.forEach(function (item) {
        if (!map.get(item.type.reference)) {
            map.set(item.type.reference, item);
        }
    });
    return Array.from(map.values());
}
/**
 * @param {?} ast
 * @return {?}
 */
function isEmptyExpression(ast) {
    if (ast instanceof ASTWithSource) {
        ast = ast.ast;
    }
    return ast instanceof EmptyExpr;
}
/**
 * @param {?} el
 * @param {?} enableLegacyTemplate
 * @param {?} reportDeprecation
 * @return {?}
 */
function isTemplate(el, enableLegacyTemplate, reportDeprecation) {
    var /** @type {?} */tagNoNs = splitNsName(el.name)[1];
    // `<ng-template>` is an angular construct and is lower case
    if (tagNoNs === NG_TEMPLATE_ELEMENT) return true;
    // `<template>` is HTML and case insensitive
    if (tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
        if (enableLegacyTemplate && tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {
            reportDeprecation('The <template> element is deprecated. Use <ng-template> instead', el.sourceSpan);
            return true;
        }
        return false;
    }
}

/**
 * An interface for retrieving documents by URL that the compiler uses
 * to load templates.
 */

var ResourceLoader = function () {
    function ResourceLoader() {
        _classCallCheck(this, ResourceLoader);
    }

    _createClass(ResourceLoader, [{
        key: 'get',

        /**
         * @param {?} url
         * @return {?}
         */
        value: function get(url) {
            return null;
        }
    }]);

    return ResourceLoader;
}();

/**
 * Create a {\@link UrlResolver} with no package prefix.
 * @return {?}
 */


function createUrlResolverWithoutPackagePrefix() {
    return new UrlResolver();
}
/**
 * @return {?}
 */
function createOfflineCompileUrlResolver() {
    return new UrlResolver('.');
}
/**
 * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
 */
var /** @type {?} */DEFAULT_PACKAGE_URL_PROVIDER = {
    provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["PACKAGE_ROOT_URL"],
    useValue: '/'
};
/**
 * Used by the {\@link Compiler} when resolving HTML and CSS template URLs.
 *
 * This class can be overridden by the application developer to create custom behavior.
 *
 * See {\@link Compiler}
 *
 * ## Example
 *
 * {\@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
 *
 * \@security When compiling templates at runtime, you must
 * ensure that the entire template comes from a trusted source.
 * Attacker-controlled data introduced by a template could expose your
 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
 */

var UrlResolver = function () {
    /**
     * @param {?=} _packagePrefix
     */
    function UrlResolver() {
        var _packagePrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, UrlResolver);

        this._packagePrefix = _packagePrefix;
    }
    /**
     * Resolves the `url` given the `baseUrl`:
     * - when the `url` is null, the `baseUrl` is returned,
     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
     * `baseUrl` and `url`,
     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
     * returned as is (ignoring the `baseUrl`)
     * @param {?} baseUrl
     * @param {?} url
     * @return {?}
     */


    _createClass(UrlResolver, [{
        key: 'resolve',
        value: function resolve(baseUrl, url) {
            var /** @type {?} */resolvedUrl = url;
            if (isPresent(baseUrl) && baseUrl.length > 0) {
                resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
            }
            var /** @type {?} */resolvedParts = _split(resolvedUrl);
            var /** @type {?} */prefix = this._packagePrefix;
            if (isPresent(prefix) && isPresent(resolvedParts) && resolvedParts[_ComponentIndex.Scheme] == 'package') {
                var /** @type {?} */path = resolvedParts[_ComponentIndex.Path];
                prefix = prefix.replace(/\/+$/, '');
                path = path.replace(/^\/+/, '');
                return prefix + '/' + path;
            }
            return resolvedUrl;
        }
    }]);

    return UrlResolver;
}();

UrlResolver.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
UrlResolver.ctorParameters = function () {
    return [{ type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["PACKAGE_ROOT_URL"]] }] }];
};
/**
 * Extract the scheme of a URL.
 * @param {?} url
 * @return {?}
 */
function getUrlScheme(url) {
    var /** @type {?} */match = _split(url);
    return match && match[_ComponentIndex.Scheme] || '';
}
/**
 * Builds a URI string from already-encoded parts.
 *
 * No encoding is performed.  Any component may be omitted as either null or
 * undefined.
 *
 * @param {?=} opt_scheme The scheme such as 'http'.
 * @param {?=} opt_userInfo The user name before the '\@'.
 * @param {?=} opt_domain The domain such as 'www.google.com', already
 *     URI-encoded.
 * @param {?=} opt_port The port number.
 * @param {?=} opt_path The path, already URI-encoded.  If it is not
 *     empty, it must begin with a slash.
 * @param {?=} opt_queryData The URI-encoded query data.
 * @param {?=} opt_fragment The URI-encoded fragment identifier.
 * @return {?} The fully combined URI.
 */
function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var /** @type {?} */out = [];
    if (isPresent(opt_scheme)) {
        out.push(opt_scheme + ':');
    }
    if (isPresent(opt_domain)) {
        out.push('//');
        if (isPresent(opt_userInfo)) {
            out.push(opt_userInfo + '@');
        }
        out.push(opt_domain);
        if (isPresent(opt_port)) {
            out.push(':' + opt_port);
        }
    }
    if (isPresent(opt_path)) {
        out.push(opt_path);
    }
    if (isPresent(opt_queryData)) {
        out.push('?' + opt_queryData);
    }
    if (isPresent(opt_fragment)) {
        out.push('#' + opt_fragment);
    }
    return out.join('');
}
/**
 * A regular expression for breaking a URI into its component parts.
 *
 * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
 * As the "first-match-wins" algorithm is identical to the "greedy"
 * disambiguation method used by POSIX regular expressions, it is natural and
 * commonplace to use a regular expression for parsing the potential five
 * components of a URI reference.
 *
 * The following line is the regular expression for breaking-down a
 * well-formed URI reference into its components.
 *
 * <pre>
 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
 *  12            3  4          5       6  7        8 9
 * </pre>
 *
 * The numbers in the second line above are only to assist readability; they
 * indicate the reference points for each subexpression (i.e., each paired
 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
 * For example, matching the above expression to
 * <pre>
 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
 * </pre>
 * results in the following subexpression matches:
 * <pre>
 *    $1 = http:
 *    $2 = http
 *    $3 = //www.ics.uci.edu
 *    $4 = www.ics.uci.edu
 *    $5 = /pub/ietf/uri/
 *    $6 = <undefined>
 *    $7 = <undefined>
 *    $8 = #Related
 *    $9 = Related
 * </pre>
 * where <undefined> indicates that the component is not present, as is the
 * case for the query component in the above example. Therefore, we can
 * determine the value of the five components as
 * <pre>
 *    scheme    = $2
 *    authority = $4
 *    path      = $5
 *    query     = $7
 *    fragment  = $9
 * </pre>
 *
 * The regular expression has been modified slightly to expose the
 * userInfo, domain, and port separately from the authority.
 * The modified version yields
 * <pre>
 *    $1 = http              scheme
 *    $2 = <undefined>       userInfo -\
 *    $3 = www.ics.uci.edu   domain     | authority
 *    $4 = <undefined>       port     -/
 *    $5 = /pub/ietf/uri/    path
 *    $6 = <undefined>       query without ?
 *    $7 = Related           fragment without #
 * </pre>
 * @type {!RegExp}
 * @internal
 */
var /** @type {?} */_splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' +
// used by other URL parts such as :,
// ?, /, #, and .
':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
// digits, dashes, dots, percent
// escapes, and unicode characters.
'(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
var _ComponentIndex = {};
_ComponentIndex.Scheme = 1;
_ComponentIndex.UserInfo = 2;
_ComponentIndex.Domain = 3;
_ComponentIndex.Port = 4;
_ComponentIndex.Path = 5;
_ComponentIndex.QueryData = 6;
_ComponentIndex.Fragment = 7;
_ComponentIndex[_ComponentIndex.Scheme] = "Scheme";
_ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo";
_ComponentIndex[_ComponentIndex.Domain] = "Domain";
_ComponentIndex[_ComponentIndex.Port] = "Port";
_ComponentIndex[_ComponentIndex.Path] = "Path";
_ComponentIndex[_ComponentIndex.QueryData] = "QueryData";
_ComponentIndex[_ComponentIndex.Fragment] = "Fragment";
/**
 * Splits a URI into its component parts.
 *
 * Each component can be accessed via the component indices; for example:
 * <pre>
 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
 * </pre>
 *
 * @param {?} uri The URI string to examine.
 * @return {?} Each component still URI-encoded.
 *     Each component that is present will contain the encoded value, whereas
 *     components that are not present will be undefined or empty, depending
 *     on the browser's regular expression implementation.  Never null, since
 *     arbitrary strings may still look like path names.
 */
function _split(uri) {
    return uri.match(_splitRe);
}
/**
 * Removes dot segments in given path component, as described in
 * RFC 3986, section 5.2.4.
 *
 * @param {?} path A non-empty path component.
 * @return {?} Path component with removed dot segments.
 */
function _removeDotSegments(path) {
    if (path == '/') return '/';
    var /** @type {?} */leadingSlash = path[0] == '/' ? '/' : '';
    var /** @type {?} */trailingSlash = path[path.length - 1] === '/' ? '/' : '';
    var /** @type {?} */segments = path.split('/');
    var /** @type {?} */out = [];
    var /** @type {?} */up = 0;
    for (var /** @type {?} */pos = 0; pos < segments.length; pos++) {
        var /** @type {?} */segment = segments[pos];
        switch (segment) {
            case '':
            case '.':
                break;
            case '..':
                if (out.length > 0) {
                    out.pop();
                } else {
                    up++;
                }
                break;
            default:
                out.push(segment);
        }
    }
    if (leadingSlash == '') {
        while (up-- > 0) {
            out.unshift('..');
        }
        if (out.length === 0) out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
}
/**
 * Takes an array of the parts from split and canonicalizes the path part
 * and then joins all the parts.
 * @param {?} parts
 * @return {?}
 */
function _joinAndCanonicalizePath(parts) {
    var /** @type {?} */path = parts[_ComponentIndex.Path];
    path = isBlank(path) ? '' : _removeDotSegments(path);
    parts[_ComponentIndex.Path] = path;
    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
}
/**
 * Resolves a URL.
 * @param {?} base The URL acting as the base URL.
 * @param {?} url
 * @return {?}
 */
function _resolveUrl(base, url) {
    var /** @type {?} */parts = _split(encodeURI(url));
    var /** @type {?} */baseParts = _split(base);
    if (isPresent(parts[_ComponentIndex.Scheme])) {
        return _joinAndCanonicalizePath(parts);
    } else {
        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
    }
    for (var /** @type {?} */i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
        if (isBlank(parts[i])) {
            parts[i] = baseParts[i];
        }
    }
    if (parts[_ComponentIndex.Path][0] == '/') {
        return _joinAndCanonicalizePath(parts);
    }
    var /** @type {?} */path = baseParts[_ComponentIndex.Path];
    if (isBlank(path)) path = '/';
    var /** @type {?} */index = path.lastIndexOf('/');
    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
    parts[_ComponentIndex.Path] = path;
    return _joinAndCanonicalizePath(parts);
}

var DirectiveNormalizer = function () {
    /**
     * @param {?} _resourceLoader
     * @param {?} _urlResolver
     * @param {?} _htmlParser
     * @param {?} _config
     */
    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
        _classCallCheck(this, DirectiveNormalizer);

        this._resourceLoader = _resourceLoader;
        this._urlResolver = _urlResolver;
        this._htmlParser = _htmlParser;
        this._config = _config;
        this._resourceLoaderCache = new Map();
    }
    /**
     * @return {?}
     */


    _createClass(DirectiveNormalizer, [{
        key: 'clearCache',
        value: function clearCache() {
            this._resourceLoaderCache.clear();
        }
        /**
         * @param {?} normalizedDirective
         * @return {?}
         */

    }, {
        key: 'clearCacheFor',
        value: function clearCacheFor(normalizedDirective) {
            var _this101 = this;

            if (!normalizedDirective.isComponent) {
                return;
            }
            this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
            normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) {
                _this101._resourceLoaderCache.delete(stylesheet.moduleUrl);
            });
        }
        /**
         * @param {?} url
         * @return {?}
         */

    }, {
        key: '_fetch',
        value: function _fetch(url) {
            var /** @type {?} */result = this._resourceLoaderCache.get(url);
            if (!result) {
                result = this._resourceLoader.get(url);
                this._resourceLoaderCache.set(url, result);
            }
            return result;
        }
        /**
         * @param {?} prenormData
         * @return {?}
         */

    }, {
        key: 'normalizeTemplate',
        value: function normalizeTemplate(prenormData) {
            var _this102 = this;

            var /** @type {?} */normalizedTemplateSync = null;
            var /** @type {?} */normalizedTemplateAsync = void 0;
            if (prenormData.template != null) {
                if (typeof prenormData.template !== 'string') {
                    throw syntaxError('The template specified for component ' + stringify(prenormData.componentType) + ' is not a string');
                }
                normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
                normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
            } else if (prenormData.templateUrl) {
                if (typeof prenormData.templateUrl !== 'string') {
                    throw syntaxError('The templateUrl specified for component ' + stringify(prenormData.componentType) + ' is not a string');
                }
                normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
            } else {
                throw syntaxError('No template specified for component ' + stringify(prenormData.componentType));
            }
            if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
                // sync case
                return new SyncAsyncResult(normalizedTemplateSync);
            } else {
                // async case
                return new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) {
                    return _this102.normalizeExternalStylesheets(normalizedTemplate);
                }));
            }
        }
        /**
         * @param {?} prenomData
         * @return {?}
         */

    }, {
        key: 'normalizeTemplateSync',
        value: function normalizeTemplateSync(prenomData) {
            return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
        }
        /**
         * @param {?} prenomData
         * @return {?}
         */

    }, {
        key: 'normalizeTemplateAsync',
        value: function normalizeTemplateAsync(prenomData) {
            var _this103 = this;

            var /** @type {?} */templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
            return this._fetch(templateUrl).then(function (value) {
                return _this103.normalizeLoadedTemplate(prenomData, value, templateUrl);
            });
        }
        /**
         * @param {?} prenomData
         * @param {?} template
         * @param {?} templateAbsUrl
         * @return {?}
         */

    }, {
        key: 'normalizeLoadedTemplate',
        value: function normalizeLoadedTemplate(prenomData, template, templateAbsUrl) {
            var /** @type {?} */interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
            var /** @type {?} */rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), true, interpolationConfig);
            if (rootNodesAndErrors.errors.length > 0) {
                var /** @type {?} */errorString = rootNodesAndErrors.errors.join('\n');
                throw syntaxError('Template parse errors:\n' + errorString);
            }
            var /** @type {?} */templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
                styles: prenomData.styles,
                styleUrls: prenomData.styleUrls,
                moduleUrl: prenomData.moduleUrl
            }));
            var /** @type {?} */visitor = new TemplatePreparseVisitor();
            visitAll(visitor, rootNodesAndErrors.rootNodes);
            var /** @type {?} */templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
            var /** @type {?} */encapsulation = prenomData.encapsulation;
            if (encapsulation == null) {
                encapsulation = this._config.defaultEncapsulation;
            }
            var /** @type {?} */styles = templateMetadataStyles.styles.concat(templateStyles.styles);
            var /** @type {?} */styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
            if (encapsulation === __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].Emulated && styles.length === 0 && styleUrls.length === 0) {
                encapsulation = __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].None;
            }
            return new CompileTemplateMetadata({
                encapsulation: encapsulation,
                template: template,
                templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls,
                ngContentSelectors: visitor.ngContentSelectors,
                animations: prenomData.animations,
                interpolation: prenomData.interpolation
            });
        }
        /**
         * @param {?} templateMeta
         * @return {?}
         */

    }, {
        key: 'normalizeExternalStylesheets',
        value: function normalizeExternalStylesheets(templateMeta) {
            return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function (externalStylesheets) {
                return new CompileTemplateMetadata({
                    encapsulation: templateMeta.encapsulation,
                    template: templateMeta.template,
                    templateUrl: templateMeta.templateUrl,
                    styles: templateMeta.styles,
                    styleUrls: templateMeta.styleUrls,
                    externalStylesheets: externalStylesheets,
                    ngContentSelectors: templateMeta.ngContentSelectors,
                    animations: templateMeta.animations,
                    interpolation: templateMeta.interpolation
                });
            });
        }
        /**
         * @param {?} styleUrls
         * @param {?=} loadedStylesheets
         * @return {?}
         */

    }, {
        key: '_loadMissingExternalStylesheets',
        value: function _loadMissingExternalStylesheets(styleUrls) {
            var _this104 = this;

            var loadedStylesheets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();

            return Promise.all(styleUrls.filter(function (styleUrl) {
                return !loadedStylesheets.has(styleUrl);
            }).map(function (styleUrl) {
                return _this104._fetch(styleUrl).then(function (loadedStyle) {
                    var /** @type {?} */stylesheet = _this104.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
                    loadedStylesheets.set(styleUrl, stylesheet);
                    return _this104._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
                });
            })).then(function (_) {
                return Array.from(loadedStylesheets.values());
            });
        }
        /**
         * @param {?} stylesheet
         * @return {?}
         */

    }, {
        key: 'normalizeStylesheet',
        value: function normalizeStylesheet(stylesheet) {
            var _this105 = this;

            var /** @type {?} */allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function (url) {
                return _this105._urlResolver.resolve(stylesheet.moduleUrl, url);
            });
            var /** @type {?} */allStyles = stylesheet.styles.map(function (style) {
                var /** @type {?} */styleWithImports = extractStyleUrls(_this105._urlResolver, stylesheet.moduleUrl, style);
                allStyleUrls.push.apply(allStyleUrls, _toConsumableArray(styleWithImports.styleUrls));
                return styleWithImports.style;
            });
            return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });
        }
    }]);

    return DirectiveNormalizer;
}();

DirectiveNormalizer.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
DirectiveNormalizer.ctorParameters = function () {
    return [{ type: ResourceLoader }, { type: UrlResolver }, { type: HtmlParser }, { type: CompilerConfig }];
};

var TemplatePreparseVisitor = function () {
    function TemplatePreparseVisitor() {
        _classCallCheck(this, TemplatePreparseVisitor);

        this.ngContentSelectors = [];
        this.styles = [];
        this.styleUrls = [];
        this.ngNonBindableStackCount = 0;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */


    _createClass(TemplatePreparseVisitor, [{
        key: 'visitElement',
        value: function visitElement(ast, context) {
            var /** @type {?} */preparsedElement = preparseElement(ast);
            switch (preparsedElement.type) {
                case PreparsedElementType.NG_CONTENT:
                    if (this.ngNonBindableStackCount === 0) {
                        this.ngContentSelectors.push(preparsedElement.selectAttr);
                    }
                    break;
                case PreparsedElementType.STYLE:
                    var /** @type {?} */textContent = '';
                    ast.children.forEach(function (child) {
                        if (child instanceof Text) {
                            textContent += child.value;
                        }
                    });
                    this.styles.push(textContent);
                    break;
                case PreparsedElementType.STYLESHEET:
                    this.styleUrls.push(preparsedElement.hrefAttr);
                    break;
                default:
                    break;
            }
            if (preparsedElement.nonBindable) {
                this.ngNonBindableStackCount++;
            }
            visitAll(this, ast.children);
            if (preparsedElement.nonBindable) {
                this.ngNonBindableStackCount--;
            }
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansion',
        value: function visitExpansion(ast, context) {
            visitAll(this, ast.cases);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitExpansionCase',
        value: function visitExpansionCase(ast, context) {
            visitAll(this, ast.expression);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitComment',
        value: function visitComment(ast, context) {
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttribute',
        value: function visitAttribute(ast, context) {
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(ast, context) {
            return null;
        }
    }]);

    return TemplatePreparseVisitor;
}();

var DirectiveResolver = function () {
    /**
     * @param {?=} _reflector
     */
    function DirectiveResolver() {
        var _reflector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"];

        _classCallCheck(this, DirectiveResolver);

        this._reflector = _reflector;
    }
    /**
     * @param {?} type
     * @return {?}
     */


    _createClass(DirectiveResolver, [{
        key: 'isDirective',
        value: function isDirective(type) {
            var /** @type {?} */typeMetadata = this._reflector.annotations(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(type));
            return typeMetadata && typeMetadata.some(isDirectiveMetadata);
        }
        /**
         * Return {\@link Directive} for a given `Type`.
         * @param {?} type
         * @param {?=} throwIfNotFound
         * @return {?}
         */

    }, {
        key: 'resolve',
        value: function resolve(type) {
            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var /** @type {?} */typeMetadata = this._reflector.annotations(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(type));
            if (typeMetadata) {
                var /** @type {?} */metadata = ListWrapper.findLast(typeMetadata, isDirectiveMetadata);
                if (metadata) {
                    var /** @type {?} */propertyMetadata = this._reflector.propMetadata(type);
                    return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
                }
            }
            if (throwIfNotFound) {
                throw new Error('No Directive annotation found on ' + stringify(type));
            }
            return null;
        }
        /**
         * @param {?} dm
         * @param {?} propertyMetadata
         * @param {?} directiveType
         * @return {?}
         */

    }, {
        key: '_mergeWithPropertyMetadata',
        value: function _mergeWithPropertyMetadata(dm, propertyMetadata, directiveType) {
            var /** @type {?} */inputs = [];
            var /** @type {?} */outputs = [];
            var /** @type {?} */host = {};
            var /** @type {?} */queries = {};
            Object.keys(propertyMetadata).forEach(function (propName) {
                var /** @type {?} */input = ListWrapper.findLast(propertyMetadata[propName], function (a) {
                    return a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"];
                });
                if (input) {
                    if (input.bindingPropertyName) {
                        inputs.push(propName + ': ' + input.bindingPropertyName);
                    } else {
                        inputs.push(propName);
                    }
                }
                var /** @type {?} */output = ListWrapper.findLast(propertyMetadata[propName], function (a) {
                    return a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"];
                });
                if (output) {
                    if (output.bindingPropertyName) {
                        outputs.push(propName + ': ' + output.bindingPropertyName);
                    } else {
                        outputs.push(propName);
                    }
                }
                var /** @type {?} */hostBindings = propertyMetadata[propName].filter(function (a) {
                    return a && a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["HostBinding"];
                });
                hostBindings.forEach(function (hostBinding) {
                    if (hostBinding.hostPropertyName) {
                        var /** @type {?} */startWith = hostBinding.hostPropertyName[0];
                        if (startWith === '(') {
                            throw new Error('@HostBinding can not bind to events. Use @HostListener instead.');
                        } else if (startWith === '[') {
                            throw new Error('@HostBinding parameter should be a property name, \'class.<name>\', or \'attr.<name>\'.');
                        }
                        host['[' + hostBinding.hostPropertyName + ']'] = propName;
                    } else {
                        host['[' + propName + ']'] = propName;
                    }
                });
                var /** @type {?} */hostListeners = propertyMetadata[propName].filter(function (a) {
                    return a && a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"];
                });
                hostListeners.forEach(function (hostListener) {
                    var /** @type {?} */args = hostListener.args || [];
                    host['(' + hostListener.eventName + ')'] = propName + '(' + args.join(',') + ')';
                });
                var /** @type {?} */query = ListWrapper.findLast(propertyMetadata[propName], function (a) {
                    return a instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Query"];
                });
                if (query) {
                    queries[propName] = query;
                }
            });
            return this._merge(dm, inputs, outputs, host, queries, directiveType);
        }
        /**
         * @param {?} def
         * @return {?}
         */

    }, {
        key: '_extractPublicName',
        value: function _extractPublicName(def) {
            return splitAtColon(def, [null, def])[1].trim();
        }
        /**
         * @param {?} bindings
         * @return {?}
         */

    }, {
        key: '_dedupeBindings',
        value: function _dedupeBindings(bindings) {
            var /** @type {?} */names = new Set();
            var /** @type {?} */reversedResult = [];
            // go last to first to allow later entries to overwrite previous entries
            for (var /** @type {?} */i = bindings.length - 1; i >= 0; i--) {
                var /** @type {?} */binding = bindings[i];
                var /** @type {?} */name = this._extractPublicName(binding);
                if (!names.has(name)) {
                    names.add(name);
                    reversedResult.push(binding);
                }
            }
            return reversedResult.reverse();
        }
        /**
         * @param {?} directive
         * @param {?} inputs
         * @param {?} outputs
         * @param {?} host
         * @param {?} queries
         * @param {?} directiveType
         * @return {?}
         */

    }, {
        key: '_merge',
        value: function _merge(directive, inputs, outputs, host, queries, directiveType) {
            var /** @type {?} */mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
            var /** @type {?} */mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
            var /** @type {?} */mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
            var /** @type {?} */mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
            if (directive instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"]) {
                return new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"]({
                    selector: directive.selector,
                    inputs: mergedInputs,
                    outputs: mergedOutputs,
                    host: mergedHost,
                    exportAs: directive.exportAs,
                    moduleId: directive.moduleId,
                    queries: mergedQueries,
                    changeDetection: directive.changeDetection,
                    providers: directive.providers,
                    viewProviders: directive.viewProviders,
                    entryComponents: directive.entryComponents,
                    template: directive.template,
                    templateUrl: directive.templateUrl,
                    styles: directive.styles,
                    styleUrls: directive.styleUrls,
                    encapsulation: directive.encapsulation,
                    animations: directive.animations,
                    interpolation: directive.interpolation
                });
            } else {
                return new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"]({
                    selector: directive.selector,
                    inputs: mergedInputs,
                    outputs: mergedOutputs,
                    host: mergedHost,
                    exportAs: directive.exportAs,
                    queries: mergedQueries,
                    providers: directive.providers
                });
            }
        }
    }]);

    return DirectiveResolver;
}();

DirectiveResolver.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
DirectiveResolver.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵReflectorReader"] }];
};
/**
 * @param {?} type
 * @return {?}
 */
function isDirectiveMetadata(type) {
    return type instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"];
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var /** @type {?} */STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
var /** @type {?} */NG_FACTORY = /\.ngfactory\./;
/**
 * @param {?} filePath
 * @return {?}
 */
function ngfactoryFilePath(filePath) {
    var /** @type {?} */urlWithSuffix = splitTypescriptSuffix(filePath);
    return urlWithSuffix[0] + '.ngfactory' + urlWithSuffix[1];
}
/**
 * @param {?} filePath
 * @return {?}
 */
function stripNgFactory(filePath) {
    return filePath.replace(NG_FACTORY, '.');
}
/**
 * @param {?} filePath
 * @return {?}
 */
function isNgFactoryFile(filePath) {
    return NG_FACTORY.test(filePath);
}
/**
 * @param {?} path
 * @return {?}
 */
function splitTypescriptSuffix(path) {
    if (path.endsWith('.d.ts')) {
        return [path.slice(0, -5), '.ts'];
    }
    var /** @type {?} */lastDot = path.lastIndexOf('.');
    if (lastDot !== -1) {
        return [path.substring(0, lastDot), path.substring(lastDot)];
    }
    return [path, ''];
}
/**
 * @param {?} fileName
 * @return {?}
 */
function summaryFileName(fileName) {
    var /** @type {?} */fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');
    return fileNameWithoutSuffix + '.ngsummary.json';
}

/**
 * @param {?} hook
 * @param {?} token
 * @return {?}
 */
function hasLifecycleHook(hook, token) {
    return __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"].hasLifecycleHook(token, getHookName(hook));
}
/**
 * @param {?} hook
 * @return {?}
 */
function getHookName(hook) {
    switch (hook) {
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].OnInit:
            return 'ngOnInit';
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].OnDestroy:
            return 'ngOnDestroy';
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].DoCheck:
            return 'ngDoCheck';
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].OnChanges:
            return 'ngOnChanges';
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].AfterContentInit:
            return 'ngAfterContentInit';
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].AfterContentChecked:
            return 'ngAfterContentChecked';
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].AfterViewInit:
            return 'ngAfterViewInit';
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].AfterViewChecked:
            return 'ngAfterViewChecked';
    }
}

/**
 * @param {?} obj
 * @return {?}
 */
function _isNgModuleMetadata(obj) {
    return obj instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"];
}
/**
 * Resolves types to {\@link NgModule}.
 */

var NgModuleResolver = function () {
    /**
     * @param {?=} _reflector
     */
    function NgModuleResolver() {
        var _reflector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"];

        _classCallCheck(this, NgModuleResolver);

        this._reflector = _reflector;
    }
    /**
     * @param {?} type
     * @return {?}
     */


    _createClass(NgModuleResolver, [{
        key: 'isNgModule',
        value: function isNgModule(type) {
            return this._reflector.annotations(type).some(_isNgModuleMetadata);
        }
        /**
         * @param {?} type
         * @param {?=} throwIfNotFound
         * @return {?}
         */

    }, {
        key: 'resolve',
        value: function resolve(type) {
            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var /** @type {?} */ngModuleMeta = ListWrapper.findLast(this._reflector.annotations(type), _isNgModuleMetadata);
            if (ngModuleMeta) {
                return ngModuleMeta;
            } else {
                if (throwIfNotFound) {
                    throw new Error('No NgModule metadata found for \'' + stringify(type) + '\'.');
                }
                return null;
            }
        }
    }]);

    return NgModuleResolver;
}();

NgModuleResolver.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
NgModuleResolver.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵReflectorReader"] }];
};

/**
 * @param {?} type
 * @return {?}
 */
function _isPipeMetadata(type) {
    return type instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"];
}
/**
 * Resolve a `Type` for {\@link Pipe}.
 *
 * This interface can be overridden by the application developer to create custom behavior.
 *
 * See {\@link Compiler}
 */

var PipeResolver = function () {
    /**
     * @param {?=} _reflector
     */
    function PipeResolver() {
        var _reflector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"];

        _classCallCheck(this, PipeResolver);

        this._reflector = _reflector;
    }
    /**
     * @param {?} type
     * @return {?}
     */


    _createClass(PipeResolver, [{
        key: 'isPipe',
        value: function isPipe(type) {
            var /** @type {?} */typeMetadata = this._reflector.annotations(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(type));
            return typeMetadata && typeMetadata.some(_isPipeMetadata);
        }
        /**
         * Return {\@link Pipe} for a given `Type`.
         * @param {?} type
         * @param {?=} throwIfNotFound
         * @return {?}
         */

    }, {
        key: 'resolve',
        value: function resolve(type) {
            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var /** @type {?} */metas = this._reflector.annotations(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(type));
            if (metas) {
                var /** @type {?} */annotation = ListWrapper.findLast(metas, _isPipeMetadata);
                if (annotation) {
                    return annotation;
                }
            }
            if (throwIfNotFound) {
                throw new Error('No Pipe decorator found on ' + stringify(type));
            }
            return null;
        }
    }]);

    return PipeResolver;
}();

PipeResolver.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
PipeResolver.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵReflectorReader"] }];
};

var SummaryResolver = function () {
    function SummaryResolver() {
        _classCallCheck(this, SummaryResolver);
    }

    _createClass(SummaryResolver, [{
        key: 'isLibraryFile',

        /**
         * @param {?} fileName
         * @return {?}
         */
        value: function isLibraryFile(fileName) {
            return false;
        }
    }, {
        key: 'getLibraryFileName',

        /**
         * @param {?} fileName
         * @return {?}
         */
        value: function getLibraryFileName(fileName) {
            return null;
        }
        /**
         * @param {?} reference
         * @return {?}
         */

    }, {
        key: 'resolveSummary',
        value: function resolveSummary(reference) {
            return null;
        }
    }, {
        key: 'getSymbolsOf',

        /**
         * @param {?} filePath
         * @return {?}
         */
        value: function getSymbolsOf(filePath) {
            return [];
        }
        /**
         * @param {?} reference
         * @return {?}
         */

    }, {
        key: 'getImportAs',
        value: function getImportAs(reference) {
            return reference;
        }
    }]);

    return SummaryResolver;
}();

SummaryResolver.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
SummaryResolver.ctorParameters = function () {
    return [];
};

var /** @type {?} */ERROR_COLLECTOR_TOKEN = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('ErrorCollector');

var CompileMetadataResolver = function () {
    /**
     * @param {?} _config
     * @param {?} _ngModuleResolver
     * @param {?} _directiveResolver
     * @param {?} _pipeResolver
     * @param {?} _summaryResolver
     * @param {?} _schemaRegistry
     * @param {?} _directiveNormalizer
     * @param {?} _staticSymbolCache
     * @param {?=} _reflector
     * @param {?=} _errorCollector
     */
    function CompileMetadataResolver(_config, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _staticSymbolCache) {
        var _reflector = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"];

        var _errorCollector = arguments[9];

        _classCallCheck(this, CompileMetadataResolver);

        this._config = _config;
        this._ngModuleResolver = _ngModuleResolver;
        this._directiveResolver = _directiveResolver;
        this._pipeResolver = _pipeResolver;
        this._summaryResolver = _summaryResolver;
        this._schemaRegistry = _schemaRegistry;
        this._directiveNormalizer = _directiveNormalizer;
        this._staticSymbolCache = _staticSymbolCache;
        this._reflector = _reflector;
        this._errorCollector = _errorCollector;
        this._nonNormalizedDirectiveCache = new Map();
        this._directiveCache = new Map();
        this._summaryCache = new Map();
        this._pipeCache = new Map();
        this._ngModuleCache = new Map();
        this._ngModuleOfTypes = new Map();
    }
    /**
     * @param {?} type
     * @return {?}
     */


    _createClass(CompileMetadataResolver, [{
        key: 'clearCacheFor',
        value: function clearCacheFor(type) {
            var /** @type {?} */dirMeta = this._directiveCache.get(type);
            this._directiveCache.delete(type);
            this._nonNormalizedDirectiveCache.delete(type);
            this._summaryCache.delete(type);
            this._pipeCache.delete(type);
            this._ngModuleOfTypes.delete(type);
            // Clear all of the NgModule as they contain transitive information!
            this._ngModuleCache.clear();
            if (dirMeta) {
                this._directiveNormalizer.clearCacheFor(dirMeta);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'clearCache',
        value: function clearCache() {
            this._directiveCache.clear();
            this._nonNormalizedDirectiveCache.clear();
            this._summaryCache.clear();
            this._pipeCache.clear();
            this._ngModuleCache.clear();
            this._ngModuleOfTypes.clear();
            this._directiveNormalizer.clearCache();
        }
        /**
         * @param {?} baseType
         * @param {?} name
         * @return {?}
         */

    }, {
        key: '_createProxyClass',
        value: function _createProxyClass(baseType, name) {
            var /** @type {?} */delegate = null;
            var /** @type {?} */proxyClass = function proxyClass() {
                if (!delegate) {
                    throw new Error('Illegal state: Class ' + name + ' for type ' + stringify(baseType) + ' is not compiled yet!');
                }
                return delegate.apply(this, arguments);
            };
            proxyClass.setDelegate = function (d) {
                delegate = d;
                proxyClass.prototype = d.prototype;
            };
            // Make stringify work correctly
            proxyClass.overriddenName = name;
            return proxyClass;
        }
        /**
         * @param {?} dirType
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'getGeneratedClass',
        value: function getGeneratedClass(dirType, name) {
            if (dirType instanceof StaticSymbol) {
                return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);
            } else {
                return this._createProxyClass(dirType, name);
            }
        }
        /**
         * @param {?} dirType
         * @return {?}
         */

    }, {
        key: 'getComponentViewClass',
        value: function getComponentViewClass(dirType) {
            return this.getGeneratedClass(dirType, viewClassName(dirType, 0));
        }
        /**
         * @param {?} dirType
         * @return {?}
         */

    }, {
        key: 'getHostComponentViewClass',
        value: function getHostComponentViewClass(dirType) {
            return this.getGeneratedClass(dirType, hostViewClassName(dirType));
        }
        /**
         * @param {?} dirType
         * @return {?}
         */

    }, {
        key: 'getHostComponentType',
        value: function getHostComponentType(dirType) {
            var /** @type {?} */name = identifierName({ reference: dirType }) + '_Host';
            if (dirType instanceof StaticSymbol) {
                return this._staticSymbolCache.get(dirType.filePath, name);
            } else {
                var /** @type {?} */HostClass = function HostClass() {};
                HostClass.overriddenName = name;
                return HostClass;
            }
        }
        /**
         * @param {?} dirType
         * @return {?}
         */

    }, {
        key: 'getRendererType',
        value: function getRendererType(dirType) {
            if (dirType instanceof StaticSymbol) {
                return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));
            } else {
                // returning an object as proxy,
                // that we fill later during runtime compilation.
                return {};
            }
        }
        /**
         * @param {?} selector
         * @param {?} dirType
         * @return {?}
         */

    }, {
        key: 'getComponentFactory',
        value: function getComponentFactory(selector, dirType) {
            if (dirType instanceof StaticSymbol) {
                return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));
            } else {
                var /** @type {?} */hostView = this.getHostComponentViewClass(dirType);
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵccf"])(selector, dirType, /** @type {?} */hostView);
            }
        }
        /**
         * @param {?} type
         * @param {?} kind
         * @return {?}
         */

    }, {
        key: '_loadSummary',
        value: function _loadSummary(type, kind) {
            var /** @type {?} */typeSummary = this._summaryCache.get(type);
            if (!typeSummary) {
                var /** @type {?} */summary = this._summaryResolver.resolveSummary(type);
                typeSummary = summary ? summary.type : null;
                this._summaryCache.set(type, typeSummary);
            }
            return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
        }
        /**
         * @param {?} directiveType
         * @param {?} isSync
         * @return {?}
         */

    }, {
        key: '_loadDirectiveMetadata',
        value: function _loadDirectiveMetadata(directiveType, isSync) {
            var _this106 = this;

            if (this._directiveCache.has(directiveType)) {
                return;
            }
            directiveType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(directiveType);

            var _getNonNormalizedDire = this.getNonNormalizedDirectiveMetadata(directiveType),
                annotation = _getNonNormalizedDire.annotation,
                metadata = _getNonNormalizedDire.metadata;

            var /** @type {?} */createDirectiveMetadata = function createDirectiveMetadata(templateMetadata) {
                var /** @type {?} */normalizedDirMeta = new CompileDirectiveMetadata({
                    type: metadata.type,
                    isComponent: metadata.isComponent,
                    selector: metadata.selector,
                    exportAs: metadata.exportAs,
                    changeDetection: metadata.changeDetection,
                    inputs: metadata.inputs,
                    outputs: metadata.outputs,
                    hostListeners: metadata.hostListeners,
                    hostProperties: metadata.hostProperties,
                    hostAttributes: metadata.hostAttributes,
                    providers: metadata.providers,
                    viewProviders: metadata.viewProviders,
                    queries: metadata.queries,
                    viewQueries: metadata.viewQueries,
                    entryComponents: metadata.entryComponents,
                    componentViewType: metadata.componentViewType,
                    rendererType: metadata.rendererType,
                    componentFactory: metadata.componentFactory,
                    template: templateMetadata
                });
                _this106._directiveCache.set(directiveType, normalizedDirMeta);
                _this106._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
                return normalizedDirMeta;
            };
            if (metadata.isComponent) {
                var /** @type {?} */templateMeta = this._directiveNormalizer.normalizeTemplate({
                    componentType: directiveType,
                    moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),
                    encapsulation: metadata.template.encapsulation,
                    template: metadata.template.template,
                    templateUrl: metadata.template.templateUrl,
                    styles: metadata.template.styles,
                    styleUrls: metadata.template.styleUrls,
                    animations: metadata.template.animations,
                    interpolation: metadata.template.interpolation
                });
                if (templateMeta.syncResult) {
                    createDirectiveMetadata(templateMeta.syncResult);
                    return null;
                } else {
                    if (isSync) {
                        this._reportError(componentStillLoadingError(directiveType), directiveType);
                        return null;
                    }
                    return templateMeta.asyncResult.then(createDirectiveMetadata);
                }
            } else {
                // directive
                createDirectiveMetadata(null);
                return null;
            }
        }
        /**
         * @param {?} directiveType
         * @return {?}
         */

    }, {
        key: 'getNonNormalizedDirectiveMetadata',
        value: function getNonNormalizedDirectiveMetadata(directiveType) {
            var _this107 = this;

            directiveType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(directiveType);
            if (!directiveType) {
                return null;
            }
            var /** @type {?} */cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);
            if (cacheEntry) {
                return cacheEntry;
            }
            var /** @type {?} */dirMeta = this._directiveResolver.resolve(directiveType, false);
            if (!dirMeta) {
                return null;
            }
            var /** @type {?} */nonNormalizedTemplateMetadata = void 0;
            if (dirMeta instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"]) {
                // component
                assertArrayOfStrings('styles', dirMeta.styles);
                assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
                assertInterpolationSymbols('interpolation', dirMeta.interpolation);
                var /** @type {?} */animations = dirMeta.animations;
                nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
                    encapsulation: dirMeta.encapsulation,
                    template: dirMeta.template,
                    templateUrl: dirMeta.templateUrl,
                    styles: dirMeta.styles,
                    styleUrls: dirMeta.styleUrls,
                    animations: animations,
                    interpolation: dirMeta.interpolation
                });
            }
            var /** @type {?} */changeDetectionStrategy = null;
            var /** @type {?} */viewProviders = [];
            var /** @type {?} */entryComponentMetadata = [];
            var /** @type {?} */selector = dirMeta.selector;
            if (dirMeta instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"]) {
                // Component
                changeDetectionStrategy = dirMeta.changeDetection;
                if (dirMeta.viewProviders) {
                    viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, 'viewProviders for "' + stringifyType(directiveType) + '"', [], directiveType);
                }
                if (dirMeta.entryComponents) {
                    entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents).map(function (type) {
                        return _this107._getEntryComponentMetadata(type);
                    }).concat(entryComponentMetadata);
                }
                if (!selector) {
                    selector = this._schemaRegistry.getDefaultComponentElementName();
                }
            } else {
                // Directive
                if (!selector) {
                    this._reportError(syntaxError('Directive ' + stringifyType(directiveType) + ' has no selector, please add it!'), directiveType);
                    selector = 'error';
                }
            }
            var /** @type {?} */providers = [];
            if (dirMeta.providers != null) {
                providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, 'providers for "' + stringifyType(directiveType) + '"', [], directiveType);
            }
            var /** @type {?} */queries = [];
            var /** @type {?} */viewQueries = [];
            if (dirMeta.queries != null) {
                queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
                viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
            }
            var /** @type {?} */metadata = CompileDirectiveMetadata.create({
                selector: selector,
                exportAs: dirMeta.exportAs,
                isComponent: !!nonNormalizedTemplateMetadata,
                type: this._getTypeMetadata(directiveType),
                template: nonNormalizedTemplateMetadata,
                changeDetection: changeDetectionStrategy,
                inputs: dirMeta.inputs,
                outputs: dirMeta.outputs,
                host: dirMeta.host,
                providers: providers,
                viewProviders: viewProviders,
                queries: queries,
                viewQueries: viewQueries,
                entryComponents: entryComponentMetadata,
                componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) : undefined,
                rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : undefined,
                componentFactory: nonNormalizedTemplateMetadata ? this.getComponentFactory(selector, directiveType) : undefined
            });
            cacheEntry = { metadata: metadata, annotation: dirMeta };
            this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);
            return cacheEntry;
        }
        /**
         * Gets the metadata for the given directive.
         * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
         * @param {?} directiveType
         * @return {?}
         */

    }, {
        key: 'getDirectiveMetadata',
        value: function getDirectiveMetadata(directiveType) {
            var /** @type {?} */dirMeta = this._directiveCache.get(directiveType);
            if (!dirMeta) {
                this._reportError(syntaxError('Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive ' + stringifyType(directiveType) + '.'), directiveType);
            }
            return dirMeta;
        }
        /**
         * @param {?} dirType
         * @return {?}
         */

    }, {
        key: 'getDirectiveSummary',
        value: function getDirectiveSummary(dirType) {
            var /** @type {?} */dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);
            if (!dirSummary) {
                this._reportError(syntaxError('Illegal state: Could not load the summary for directive ' + stringifyType(dirType) + '.'), dirType);
            }
            return dirSummary;
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'isDirective',
        value: function isDirective(type) {
            return this._directiveResolver.isDirective(type);
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'isPipe',
        value: function isPipe(type) {
            return this._pipeResolver.isPipe(type);
        }
        /**
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'getNgModuleSummary',
        value: function getNgModuleSummary(moduleType) {
            var /** @type {?} */moduleSummary = this._loadSummary(moduleType, CompileSummaryKind.NgModule);
            if (!moduleSummary) {
                var /** @type {?} */moduleMeta = this.getNgModuleMetadata(moduleType, false);
                moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
                if (moduleSummary) {
                    this._summaryCache.set(moduleType, moduleSummary);
                }
            }
            return moduleSummary;
        }
        /**
         * Loads the declared directives and pipes of an NgModule.
         * @param {?} moduleType
         * @param {?} isSync
         * @param {?=} throwIfNotFound
         * @return {?}
         */

    }, {
        key: 'loadNgModuleDirectiveAndPipeMetadata',
        value: function loadNgModuleDirectiveAndPipeMetadata(moduleType, isSync) {
            var _this108 = this;

            var throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var /** @type {?} */ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
            var /** @type {?} */loading = [];
            if (ngModule) {
                ngModule.declaredDirectives.forEach(function (id) {
                    var /** @type {?} */promise = _this108._loadDirectiveMetadata(id.reference, isSync);
                    if (promise) {
                        loading.push(promise);
                    }
                });
                ngModule.declaredPipes.forEach(function (id) {
                    return _this108._loadPipeMetadata(id.reference);
                });
            }
            return Promise.all(loading);
        }
        /**
         * @param {?} moduleType
         * @param {?=} throwIfNotFound
         * @return {?}
         */

    }, {
        key: 'getNgModuleMetadata',
        value: function getNgModuleMetadata(moduleType) {
            var _this109 = this;

            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            moduleType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(moduleType);
            var /** @type {?} */compileMeta = this._ngModuleCache.get(moduleType);
            if (compileMeta) {
                return compileMeta;
            }
            var /** @type {?} */meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
            if (!meta) {
                return null;
            }
            var /** @type {?} */declaredDirectives = [];
            var /** @type {?} */exportedNonModuleIdentifiers = [];
            var /** @type {?} */declaredPipes = [];
            var /** @type {?} */importedModules = [];
            var /** @type {?} */exportedModules = [];
            var /** @type {?} */providers = [];
            var /** @type {?} */entryComponents = [];
            var /** @type {?} */bootstrapComponents = [];
            var /** @type {?} */schemas = [];
            if (meta.imports) {
                flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
                    var /** @type {?} */importedModuleType = void 0;
                    if (isValidType(importedType)) {
                        importedModuleType = importedType;
                    } else if (importedType && importedType.ngModule) {
                        var /** @type {?} */moduleWithProviders = importedType;
                        importedModuleType = moduleWithProviders.ngModule;
                        if (moduleWithProviders.providers) {
                            providers.push.apply(providers, _toConsumableArray(_this109._getProvidersMetadata(moduleWithProviders.providers, entryComponents, 'provider for the NgModule \'' + stringifyType(importedModuleType) + '\'', [], importedType)));
                        }
                    }
                    if (importedModuleType) {
                        var /** @type {?} */importedModuleSummary = _this109.getNgModuleSummary(importedModuleType);
                        if (!importedModuleSummary) {
                            _this109._reportError(syntaxError('Unexpected ' + _this109._getTypeDescriptor(importedType) + ' \'' + stringifyType(importedType) + '\' imported by the module \'' + stringifyType(moduleType) + '\''), moduleType);
                            return;
                        }
                        importedModules.push(importedModuleSummary);
                    } else {
                        _this109._reportError(syntaxError('Unexpected value \'' + stringifyType(importedType) + '\' imported by the module \'' + stringifyType(moduleType) + '\''), moduleType);
                        return;
                    }
                });
            }
            if (meta.exports) {
                flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
                    if (!isValidType(exportedType)) {
                        _this109._reportError(syntaxError('Unexpected value \'' + stringifyType(exportedType) + '\' exported by the module \'' + stringifyType(moduleType) + '\''), moduleType);
                        return;
                    }
                    var /** @type {?} */exportedModuleSummary = _this109.getNgModuleSummary(exportedType);
                    if (exportedModuleSummary) {
                        exportedModules.push(exportedModuleSummary);
                    } else {
                        exportedNonModuleIdentifiers.push(_this109._getIdentifierMetadata(exportedType));
                    }
                });
            }
            // Note: This will be modified later, so we rely on
            // getting a new instance every time!
            var /** @type {?} */transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
            if (meta.declarations) {
                flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
                    if (!isValidType(declaredType)) {
                        _this109._reportError(syntaxError('Unexpected value \'' + stringifyType(declaredType) + '\' declared by the module \'' + stringifyType(moduleType) + '\''), moduleType);
                        return;
                    }
                    var /** @type {?} */declaredIdentifier = _this109._getIdentifierMetadata(declaredType);
                    if (_this109._directiveResolver.isDirective(declaredType)) {
                        transitiveModule.addDirective(declaredIdentifier);
                        declaredDirectives.push(declaredIdentifier);
                        _this109._addTypeToModule(declaredType, moduleType);
                    } else if (_this109._pipeResolver.isPipe(declaredType)) {
                        transitiveModule.addPipe(declaredIdentifier);
                        transitiveModule.pipes.push(declaredIdentifier);
                        declaredPipes.push(declaredIdentifier);
                        _this109._addTypeToModule(declaredType, moduleType);
                    } else {
                        _this109._reportError(syntaxError('Unexpected ' + _this109._getTypeDescriptor(declaredType) + ' \'' + stringifyType(declaredType) + '\' declared by the module \'' + stringifyType(moduleType) + '\''), moduleType);
                        return;
                    }
                });
            }
            var /** @type {?} */exportedDirectives = [];
            var /** @type {?} */exportedPipes = [];
            exportedNonModuleIdentifiers.forEach(function (exportedId) {
                if (transitiveModule.directivesSet.has(exportedId.reference)) {
                    exportedDirectives.push(exportedId);
                    transitiveModule.addExportedDirective(exportedId);
                } else if (transitiveModule.pipesSet.has(exportedId.reference)) {
                    exportedPipes.push(exportedId);
                    transitiveModule.addExportedPipe(exportedId);
                } else {
                    _this109._reportError(syntaxError('Can\'t export ' + _this109._getTypeDescriptor(exportedId.reference) + ' ' + stringifyType(exportedId.reference) + ' from ' + stringifyType(moduleType) + ' as it was neither declared nor imported!'), moduleType);
                }
            });
            // The providers of the module have to go last
            // so that they overwrite any other provider we already added.
            if (meta.providers) {
                providers.push.apply(providers, _toConsumableArray(this._getProvidersMetadata(meta.providers, entryComponents, 'provider for the NgModule \'' + stringifyType(moduleType) + '\'', [], moduleType)));
            }
            if (meta.entryComponents) {
                entryComponents.push.apply(entryComponents, _toConsumableArray(flattenAndDedupeArray(meta.entryComponents).map(function (type) {
                    return _this109._getEntryComponentMetadata(type);
                })));
            }
            if (meta.bootstrap) {
                flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {
                    if (!isValidType(type)) {
                        _this109._reportError(syntaxError('Unexpected value \'' + stringifyType(type) + '\' used in the bootstrap property of module \'' + stringifyType(moduleType) + '\''), moduleType);
                        return;
                    }
                    bootstrapComponents.push(_this109._getIdentifierMetadata(type));
                });
            }
            entryComponents.push.apply(entryComponents, _toConsumableArray(bootstrapComponents.map(function (type) {
                return _this109._getEntryComponentMetadata(type.reference);
            })));
            if (meta.schemas) {
                schemas.push.apply(schemas, _toConsumableArray(flattenAndDedupeArray(meta.schemas)));
            }
            compileMeta = new CompileNgModuleMetadata({
                type: this._getTypeMetadata(moduleType),
                providers: providers,
                entryComponents: entryComponents,
                bootstrapComponents: bootstrapComponents,
                schemas: schemas,
                declaredDirectives: declaredDirectives,
                exportedDirectives: exportedDirectives,
                declaredPipes: declaredPipes,
                exportedPipes: exportedPipes,
                importedModules: importedModules,
                exportedModules: exportedModules,
                transitiveModule: transitiveModule,
                id: meta.id
            });
            entryComponents.forEach(function (id) {
                return transitiveModule.addEntryComponent(id);
            });
            providers.forEach(function (provider) {
                return transitiveModule.addProvider(provider, compileMeta.type);
            });
            transitiveModule.addModule(compileMeta.type);
            this._ngModuleCache.set(moduleType, compileMeta);
            return compileMeta;
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: '_getTypeDescriptor',
        value: function _getTypeDescriptor(type) {
            if (this._directiveResolver.isDirective(type)) {
                return 'directive';
            }
            if (this._pipeResolver.isPipe(type)) {
                return 'pipe';
            }
            if (this._ngModuleResolver.isNgModule(type)) {
                return 'module';
            }
            if (type.provide) {
                return 'provider';
            }
            return 'value';
        }
        /**
         * @param {?} type
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: '_addTypeToModule',
        value: function _addTypeToModule(type, moduleType) {
            var /** @type {?} */oldModule = this._ngModuleOfTypes.get(type);
            if (oldModule && oldModule !== moduleType) {
                this._reportError(syntaxError('Type ' + stringifyType(type) + ' is part of the declarations of 2 modules: ' + stringifyType(oldModule) + ' and ' + stringifyType(moduleType) + '! ' + ('Please consider moving ' + stringifyType(type) + ' to a higher module that imports ' + stringifyType(oldModule) + ' and ' + stringifyType(moduleType) + '. ') + ('You can also create a new NgModule that exports and includes ' + stringifyType(type) + ' then import that NgModule in ' + stringifyType(oldModule) + ' and ' + stringifyType(moduleType) + '.')), moduleType);
            }
            this._ngModuleOfTypes.set(type, moduleType);
        }
        /**
         * @param {?} importedModules
         * @param {?} exportedModules
         * @return {?}
         */

    }, {
        key: '_getTransitiveNgModuleMetadata',
        value: function _getTransitiveNgModuleMetadata(importedModules, exportedModules) {
            // collect `providers` / `entryComponents` from all imported and all exported modules
            var /** @type {?} */result = new TransitiveCompileNgModuleMetadata();
            var /** @type {?} */modulesByToken = new Map();
            importedModules.concat(exportedModules).forEach(function (modSummary) {
                modSummary.modules.forEach(function (mod) {
                    return result.addModule(mod);
                });
                modSummary.entryComponents.forEach(function (comp) {
                    return result.addEntryComponent(comp);
                });
                var /** @type {?} */addedTokens = new Set();
                modSummary.providers.forEach(function (entry) {
                    var /** @type {?} */tokenRef = tokenReference(entry.provider.token);
                    var /** @type {?} */prevModules = modulesByToken.get(tokenRef);
                    if (!prevModules) {
                        prevModules = new Set();
                        modulesByToken.set(tokenRef, prevModules);
                    }
                    var /** @type {?} */moduleRef = entry.module.reference;
                    // Note: the providers of one module may still contain multiple providers
                    // per token (e.g. for multi providers), and we need to preserve these.
                    if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
                        prevModules.add(moduleRef);
                        addedTokens.add(tokenRef);
                        result.addProvider(entry.provider, entry.module);
                    }
                });
            });
            exportedModules.forEach(function (modSummary) {
                modSummary.exportedDirectives.forEach(function (id) {
                    return result.addExportedDirective(id);
                });
                modSummary.exportedPipes.forEach(function (id) {
                    return result.addExportedPipe(id);
                });
            });
            importedModules.forEach(function (modSummary) {
                modSummary.exportedDirectives.forEach(function (id) {
                    return result.addDirective(id);
                });
                modSummary.exportedPipes.forEach(function (id) {
                    return result.addPipe(id);
                });
            });
            return result;
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: '_getIdentifierMetadata',
        value: function _getIdentifierMetadata(type) {
            type = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(type);
            return { reference: type };
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'isInjectable',
        value: function isInjectable(type) {
            var /** @type {?} */annotations = this._reflector.annotations(type);
            // Note: We need an exact check here as @Component / @Directive / ... inherit
            // from @CompilerInjectable!
            return annotations.some(function (ann) {
                return ann.constructor === __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"];
            });
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'getInjectableSummary',
        value: function getInjectableSummary(type) {
            return { summaryKind: CompileSummaryKind.Injectable, type: this._getTypeMetadata(type) };
        }
        /**
         * @param {?} type
         * @param {?=} dependencies
         * @return {?}
         */

    }, {
        key: '_getInjectableMetadata',
        value: function _getInjectableMetadata(type) {
            var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var /** @type {?} */typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
            if (typeSummary) {
                return typeSummary.type;
            }
            return this._getTypeMetadata(type, dependencies);
        }
        /**
         * @param {?} type
         * @param {?=} dependencies
         * @return {?}
         */

    }, {
        key: '_getTypeMetadata',
        value: function _getTypeMetadata(type) {
            var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            var /** @type {?} */identifier = this._getIdentifierMetadata(type);
            return {
                reference: identifier.reference,
                diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
                lifecycleHooks: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLIFECYCLE_HOOKS_VALUES"].filter(function (hook) {
                    return hasLifecycleHook(hook, identifier.reference);
                })
            };
        }
        /**
         * @param {?} factory
         * @param {?=} dependencies
         * @return {?}
         */

    }, {
        key: '_getFactoryMetadata',
        value: function _getFactoryMetadata(factory) {
            var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            factory = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(factory);
            return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };
        }
        /**
         * Gets the metadata for the given pipe.
         * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
         * @param {?} pipeType
         * @return {?}
         */

    }, {
        key: 'getPipeMetadata',
        value: function getPipeMetadata(pipeType) {
            var /** @type {?} */pipeMeta = this._pipeCache.get(pipeType);
            if (!pipeMeta) {
                this._reportError(syntaxError('Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe ' + stringifyType(pipeType) + '.'), pipeType);
            }
            return pipeMeta;
        }
        /**
         * @param {?} pipeType
         * @return {?}
         */

    }, {
        key: 'getPipeSummary',
        value: function getPipeSummary(pipeType) {
            var /** @type {?} */pipeSummary = this._loadSummary(pipeType, CompileSummaryKind.Pipe);
            if (!pipeSummary) {
                this._reportError(syntaxError('Illegal state: Could not load the summary for pipe ' + stringifyType(pipeType) + '.'), pipeType);
            }
            return pipeSummary;
        }
        /**
         * @param {?} pipeType
         * @return {?}
         */

    }, {
        key: 'getOrLoadPipeMetadata',
        value: function getOrLoadPipeMetadata(pipeType) {
            var /** @type {?} */pipeMeta = this._pipeCache.get(pipeType);
            if (!pipeMeta) {
                pipeMeta = this._loadPipeMetadata(pipeType);
            }
            return pipeMeta;
        }
        /**
         * @param {?} pipeType
         * @return {?}
         */

    }, {
        key: '_loadPipeMetadata',
        value: function _loadPipeMetadata(pipeType) {
            pipeType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(pipeType);
            var /** @type {?} */pipeAnnotation = this._pipeResolver.resolve(pipeType);
            var /** @type {?} */pipeMeta = new CompilePipeMetadata({
                type: this._getTypeMetadata(pipeType),
                name: pipeAnnotation.name,
                pure: pipeAnnotation.pure
            });
            this._pipeCache.set(pipeType, pipeMeta);
            this._summaryCache.set(pipeType, pipeMeta.toSummary());
            return pipeMeta;
        }
        /**
         * @param {?} typeOrFunc
         * @param {?} dependencies
         * @return {?}
         */

    }, {
        key: '_getDependenciesMetadata',
        value: function _getDependenciesMetadata(typeOrFunc, dependencies) {
            var _this110 = this;

            var /** @type {?} */hasUnknownDeps = false;
            var /** @type {?} */params = dependencies || this._reflector.parameters(typeOrFunc) || [];
            var /** @type {?} */dependenciesMetadata = params.map(function (param) {
                var /** @type {?} */isAttribute = false;
                var /** @type {?} */isHost = false;
                var /** @type {?} */isSelf = false;
                var /** @type {?} */isSkipSelf = false;
                var /** @type {?} */isOptional = false;
                var /** @type {?} */token = null;
                if (Array.isArray(param)) {
                    param.forEach(function (paramEntry) {
                        if (paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"]) {
                            isHost = true;
                        } else if (paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Self"]) {
                            isSelf = true;
                        } else if (paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["SkipSelf"]) {
                            isSkipSelf = true;
                        } else if (paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"]) {
                            isOptional = true;
                        } else if (paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"]) {
                            isAttribute = true;
                            token = paramEntry.attributeName;
                        } else if (paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"]) {
                            token = paramEntry.token;
                        } else if (paramEntry instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]) {
                            token = paramEntry;
                        } else if (isValidType(paramEntry) && token == null) {
                            token = paramEntry;
                        }
                    });
                } else {
                    token = param;
                }
                if (token == null) {
                    hasUnknownDeps = true;
                    return null;
                }
                return {
                    isAttribute: isAttribute,
                    isHost: isHost,
                    isSelf: isSelf,
                    isSkipSelf: isSkipSelf,
                    isOptional: isOptional,
                    token: _this110._getTokenMetadata(token)
                };
            });
            if (hasUnknownDeps) {
                var /** @type {?} */depsTokens = dependenciesMetadata.map(function (dep) {
                    return dep ? stringifyType(dep.token) : '?';
                }).join(', ');
                this._reportError(syntaxError('Can\'t resolve all parameters for ' + stringifyType(typeOrFunc) + ': (' + depsTokens + ').'), typeOrFunc);
            }
            return dependenciesMetadata;
        }
        /**
         * @param {?} token
         * @return {?}
         */

    }, {
        key: '_getTokenMetadata',
        value: function _getTokenMetadata(token) {
            token = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(token);
            var /** @type {?} */compileToken = void 0;
            if (typeof token === 'string') {
                compileToken = { value: token };
            } else {
                compileToken = { identifier: { reference: token } };
            }
            return compileToken;
        }
        /**
         * @param {?} providers
         * @param {?} targetEntryComponents
         * @param {?=} debugInfo
         * @param {?=} compileProviders
         * @param {?=} type
         * @return {?}
         */

    }, {
        key: '_getProvidersMetadata',
        value: function _getProvidersMetadata(providers, targetEntryComponents, debugInfo) {
            var _this111 = this;

            var compileProviders = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
            var type = arguments[4];

            providers.forEach(function (provider, providerIdx) {
                if (Array.isArray(provider)) {
                    _this111._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
                } else {
                    provider = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(provider);
                    var /** @type {?} */providerMeta = void 0;
                    if (provider && (typeof provider === 'undefined' ? 'undefined' : _typeof(provider)) === 'object' && provider.hasOwnProperty('provide')) {
                        _this111._validateProvider(provider);
                        providerMeta = new ProviderMeta(provider.provide, provider);
                    } else if (isValidType(provider)) {
                        providerMeta = new ProviderMeta(provider, { useClass: provider });
                    } else if (provider === void 0) {
                        _this111._reportError(syntaxError('Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using \'barrel\' index.ts files.'));
                    } else {
                        var /** @type {?} */providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
                            if (seenProviderIdx < providerIdx) {
                                soFar.push('' + stringifyType(seenProvider));
                            } else if (seenProviderIdx == providerIdx) {
                                soFar.push('?' + stringifyType(seenProvider) + '?');
                            } else if (seenProviderIdx == providerIdx + 1) {
                                soFar.push('...');
                            }
                            return soFar;
                        }, []).join(', ');
                        _this111._reportError(syntaxError('Invalid ' + (debugInfo ? debugInfo : 'provider') + ' - only instances of Provider and Type are allowed, got: [' + providersInfo + ']'), type);
                    }
                    if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
                        targetEntryComponents.push.apply(targetEntryComponents, _toConsumableArray(_this111._getEntryComponentsFromProvider(providerMeta, type)));
                    } else {
                        compileProviders.push(_this111.getProviderMetadata(providerMeta));
                    }
                }
            });
            return compileProviders;
        }
        /**
         * @param {?} provider
         * @return {?}
         */

    }, {
        key: '_validateProvider',
        value: function _validateProvider(provider) {
            if (provider.hasOwnProperty('useClass') && provider.useClass == null) {
                this._reportError(syntaxError('Invalid provider for ' + stringifyType(provider.provide) + '. useClass cannot be ' + provider.useClass + '.\n           Usually it happens when:\n           1. There\'s a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case.'));
            }
        }
        /**
         * @param {?} provider
         * @param {?=} type
         * @return {?}
         */

    }, {
        key: '_getEntryComponentsFromProvider',
        value: function _getEntryComponentsFromProvider(provider, type) {
            var _this112 = this;

            var /** @type {?} */components = [];
            var /** @type {?} */collectedIdentifiers = [];
            if (provider.useFactory || provider.useExisting || provider.useClass) {
                this._reportError(syntaxError('The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!'), type);
                return [];
            }
            if (!provider.multi) {
                this._reportError(syntaxError('The ANALYZE_FOR_ENTRY_COMPONENTS token only supports \'multi = true\'!'), type);
                return [];
            }
            extractIdentifiers(provider.useValue, collectedIdentifiers);
            collectedIdentifiers.forEach(function (identifier) {
                var /** @type {?} */entry = _this112._getEntryComponentMetadata(identifier.reference, false);
                if (entry) {
                    components.push(entry);
                }
            });
            return components;
        }
        /**
         * @param {?} dirType
         * @param {?=} throwIfNotFound
         * @return {?}
         */

    }, {
        key: '_getEntryComponentMetadata',
        value: function _getEntryComponentMetadata(dirType) {
            var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var /** @type {?} */dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);
            if (dirMeta && dirMeta.metadata.isComponent) {
                return { componentType: dirType, componentFactory: dirMeta.metadata.componentFactory };
            } else {
                var /** @type {?} */dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);
                if (dirSummary && dirSummary.isComponent) {
                    return { componentType: dirType, componentFactory: dirSummary.componentFactory };
                }
            }
            if (throwIfNotFound) {
                throw syntaxError(dirType.name + ' cannot be used as an entry component.');
            }
        }
        /**
         * @param {?} provider
         * @return {?}
         */

    }, {
        key: 'getProviderMetadata',
        value: function getProviderMetadata(provider) {
            var /** @type {?} */compileDeps = void 0;
            var /** @type {?} */compileTypeMetadata = null;
            var /** @type {?} */compileFactoryMetadata = null;
            var /** @type {?} */token = this._getTokenMetadata(provider.token);
            if (provider.useClass) {
                compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);
                compileDeps = compileTypeMetadata.diDeps;
                if (provider.token === provider.useClass) {
                    // use the compileTypeMetadata as it contains information about lifecycleHooks...
                    token = { identifier: compileTypeMetadata };
                }
            } else if (provider.useFactory) {
                compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
                compileDeps = compileFactoryMetadata.diDeps;
            }
            return {
                token: token,
                useClass: compileTypeMetadata,
                useValue: provider.useValue,
                useFactory: compileFactoryMetadata,
                useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
                deps: compileDeps,
                multi: provider.multi
            };
        }
        /**
         * @param {?} queries
         * @param {?} isViewQuery
         * @param {?} directiveType
         * @return {?}
         */

    }, {
        key: '_getQueriesMetadata',
        value: function _getQueriesMetadata(queries, isViewQuery, directiveType) {
            var _this113 = this;

            var /** @type {?} */res = [];
            Object.keys(queries).forEach(function (propertyName) {
                var /** @type {?} */query = queries[propertyName];
                if (query.isViewQuery === isViewQuery) {
                    res.push(_this113._getQueryMetadata(query, propertyName, directiveType));
                }
            });
            return res;
        }
        /**
         * @param {?} selector
         * @return {?}
         */

    }, {
        key: '_queryVarBindings',
        value: function _queryVarBindings(selector) {
            return selector.split(/\s*,\s*/);
        }
        /**
         * @param {?} q
         * @param {?} propertyName
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: '_getQueryMetadata',
        value: function _getQueryMetadata(q, propertyName, typeOrFunc) {
            var _this114 = this;

            var /** @type {?} */selectors = void 0;
            if (typeof q.selector === 'string') {
                selectors = this._queryVarBindings(q.selector).map(function (varName) {
                    return _this114._getTokenMetadata(varName);
                });
            } else {
                if (!q.selector) {
                    this._reportError(syntaxError('Can\'t construct a query for the property "' + propertyName + '" of "' + stringifyType(typeOrFunc) + '" since the query selector wasn\'t defined.'), typeOrFunc);
                }
                selectors = [this._getTokenMetadata(q.selector)];
            }
            return {
                selectors: selectors,
                first: q.first,
                descendants: q.descendants, propertyName: propertyName,
                read: q.read ? this._getTokenMetadata(q.read) : null
            };
        }
        /**
         * @param {?} error
         * @param {?=} type
         * @param {?=} otherType
         * @return {?}
         */

    }, {
        key: '_reportError',
        value: function _reportError(error, type, otherType) {
            if (this._errorCollector) {
                this._errorCollector(error, type);
                if (otherType) {
                    this._errorCollector(error, otherType);
                }
            } else {
                throw error;
            }
        }
    }]);

    return CompileMetadataResolver;
}();

CompileMetadataResolver.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
CompileMetadataResolver.ctorParameters = function () {
    return [{ type: CompilerConfig }, { type: NgModuleResolver }, { type: DirectiveResolver }, { type: PipeResolver }, { type: SummaryResolver }, { type: ElementSchemaRegistry }, { type: DirectiveNormalizer }, { type: StaticSymbolCache, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] }] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵReflectorReader"] }, { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"] }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [ERROR_COLLECTOR_TOKEN] }] }];
};
/**
 * @param {?} tree
 * @param {?=} out
 * @return {?}
 */
function flattenArray(tree) {
    var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (tree) {
        for (var /** @type {?} */i = 0; i < tree.length; i++) {
            var /** @type {?} */item = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["resolveForwardRef"])(tree[i]);
            if (Array.isArray(item)) {
                flattenArray(item, out);
            } else {
                out.push(item);
            }
        }
    }
    return out;
}
/**
 * @param {?} array
 * @return {?}
 */
function dedupeArray(array) {
    if (array) {
        return Array.from(new Set(array));
    }
    return [];
}
/**
 * @param {?} tree
 * @return {?}
 */
function flattenAndDedupeArray(tree) {
    return dedupeArray(flattenArray(tree));
}
/**
 * @param {?} value
 * @return {?}
 */
function isValidType(value) {
    return value instanceof StaticSymbol || value instanceof __WEBPACK_IMPORTED_MODULE_0__angular_core__["Type"];
}
/**
 * @param {?} reflector
 * @param {?} type
 * @param {?} cmpMetadata
 * @return {?}
 */
function componentModuleUrl(reflector, type, cmpMetadata) {
    if (type instanceof StaticSymbol) {
        return type.filePath;
    }
    var /** @type {?} */moduleId = cmpMetadata.moduleId;
    if (typeof moduleId === 'string') {
        var /** @type {?} */scheme = getUrlScheme(moduleId);
        return scheme ? moduleId : 'package:' + moduleId + MODULE_SUFFIX;
    } else if (moduleId !== null && moduleId !== void 0) {
        throw syntaxError('moduleId should be a string in "' + stringifyType(type) + '". See https://goo.gl/wIDDiL for more information.\n' + 'If you\'re using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.');
    }
    return reflector.importUri(type);
}
/**
 * @param {?} value
 * @param {?} targetIdentifiers
 * @return {?}
 */
function extractIdentifiers(value, targetIdentifiers) {
    visitValue(value, new _CompileValueConverter(), targetIdentifiers);
}

var _CompileValueConverter = function (_ValueTransformer) {
    _inherits(_CompileValueConverter, _ValueTransformer);

    function _CompileValueConverter() {
        _classCallCheck(this, _CompileValueConverter);

        return _possibleConstructorReturn(this, (_CompileValueConverter.__proto__ || Object.getPrototypeOf(_CompileValueConverter)).apply(this, arguments));
    }

    _createClass(_CompileValueConverter, [{
        key: 'visitOther',

        /**
         * @param {?} value
         * @param {?} targetIdentifiers
         * @return {?}
         */
        value: function visitOther(value, targetIdentifiers) {
            targetIdentifiers.push({ reference: value });
        }
    }]);

    return _CompileValueConverter;
}(ValueTransformer);
/**
 * @param {?} type
 * @return {?}
 */


function stringifyType(type) {
    if (type instanceof StaticSymbol) {
        return type.name + ' in ' + type.filePath;
    } else {
        return stringify(type);
    }
}
/**
 * Indicates that a component is still being loaded in a synchronous compile.
 * @param {?} compType
 * @return {?}
 */
function componentStillLoadingError(compType) {
    debugger;
    var /** @type {?} */error = Error('Can\'t compile synchronously as ' + stringify(compType) + ' is still being loaded!');
    error[__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵERROR_COMPONENT_TYPE"]] = compType;
    return error;
}

var TypeModifier = {};
TypeModifier.Const = 0;
TypeModifier[TypeModifier.Const] = "Const";
/**
 * @abstract
 */

var Type$1 = function () {
    /**
     * @param {?=} modifiers
     */
    function Type$1() {
        var modifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, Type$1);

        this.modifiers = modifiers;
        if (!modifiers) {
            this.modifiers = [];
        }
    }
    /**
     * @abstract
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(Type$1, [{
        key: 'visitType',
        value: function visitType(visitor, context) {}
        /**
         * @param {?} modifier
         * @return {?}
         */

    }, {
        key: 'hasModifier',
        value: function hasModifier(modifier) {
            return this.modifiers.indexOf(modifier) !== -1;
        }
    }]);

    return Type$1;
}();

var BuiltinTypeName = {};
BuiltinTypeName.Dynamic = 0;
BuiltinTypeName.Bool = 1;
BuiltinTypeName.String = 2;
BuiltinTypeName.Int = 3;
BuiltinTypeName.Number = 4;
BuiltinTypeName.Function = 5;
BuiltinTypeName.Inferred = 6;
BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic";
BuiltinTypeName[BuiltinTypeName.Bool] = "Bool";
BuiltinTypeName[BuiltinTypeName.String] = "String";
BuiltinTypeName[BuiltinTypeName.Int] = "Int";
BuiltinTypeName[BuiltinTypeName.Number] = "Number";
BuiltinTypeName[BuiltinTypeName.Function] = "Function";
BuiltinTypeName[BuiltinTypeName.Inferred] = "Inferred";

var BuiltinType = function (_Type$) {
    _inherits(BuiltinType, _Type$);

    /**
     * @param {?} name
     * @param {?=} modifiers
     */
    function BuiltinType(name) {
        var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, BuiltinType);

        var _this116 = _possibleConstructorReturn(this, (BuiltinType.__proto__ || Object.getPrototypeOf(BuiltinType)).call(this, modifiers));

        _this116.name = name;
        return _this116;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(BuiltinType, [{
        key: 'visitType',
        value: function visitType(visitor, context) {
            return visitor.visitBuiltintType(this, context);
        }
    }]);

    return BuiltinType;
}(Type$1);

var ExpressionType = function (_Type$2) {
    _inherits(ExpressionType, _Type$2);

    /**
     * @param {?} value
     * @param {?=} modifiers
     */
    function ExpressionType(value) {
        var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, ExpressionType);

        var _this117 = _possibleConstructorReturn(this, (ExpressionType.__proto__ || Object.getPrototypeOf(ExpressionType)).call(this, modifiers));

        _this117.value = value;
        return _this117;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ExpressionType, [{
        key: 'visitType',
        value: function visitType(visitor, context) {
            return visitor.visitExpressionType(this, context);
        }
    }]);

    return ExpressionType;
}(Type$1);

var ArrayType = function (_Type$3) {
    _inherits(ArrayType, _Type$3);

    /**
     * @param {?} of
     * @param {?=} modifiers
     */
    function ArrayType(of) {
        var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, ArrayType);

        var _this118 = _possibleConstructorReturn(this, (ArrayType.__proto__ || Object.getPrototypeOf(ArrayType)).call(this, modifiers));

        _this118.of = of;
        return _this118;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ArrayType, [{
        key: 'visitType',
        value: function visitType(visitor, context) {
            return visitor.visitArrayType(this, context);
        }
    }]);

    return ArrayType;
}(Type$1);

var /** @type {?} */DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
var /** @type {?} */INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
var /** @type {?} */BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
var /** @type {?} */INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
var /** @type {?} */NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
var /** @type {?} */STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
var /** @type {?} */FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
var BinaryOperator = {};
BinaryOperator.Equals = 0;
BinaryOperator.NotEquals = 1;
BinaryOperator.Identical = 2;
BinaryOperator.NotIdentical = 3;
BinaryOperator.Minus = 4;
BinaryOperator.Plus = 5;
BinaryOperator.Divide = 6;
BinaryOperator.Multiply = 7;
BinaryOperator.Modulo = 8;
BinaryOperator.And = 9;
BinaryOperator.Or = 10;
BinaryOperator.Lower = 11;
BinaryOperator.LowerEquals = 12;
BinaryOperator.Bigger = 13;
BinaryOperator.BiggerEquals = 14;
BinaryOperator[BinaryOperator.Equals] = "Equals";
BinaryOperator[BinaryOperator.NotEquals] = "NotEquals";
BinaryOperator[BinaryOperator.Identical] = "Identical";
BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical";
BinaryOperator[BinaryOperator.Minus] = "Minus";
BinaryOperator[BinaryOperator.Plus] = "Plus";
BinaryOperator[BinaryOperator.Divide] = "Divide";
BinaryOperator[BinaryOperator.Multiply] = "Multiply";
BinaryOperator[BinaryOperator.Modulo] = "Modulo";
BinaryOperator[BinaryOperator.And] = "And";
BinaryOperator[BinaryOperator.Or] = "Or";
BinaryOperator[BinaryOperator.Lower] = "Lower";
BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals";
BinaryOperator[BinaryOperator.Bigger] = "Bigger";
BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals";
/**
 * @abstract
 */

var Expression = function () {
    /**
     * @param {?} type
     * @param {?=} sourceSpan
     */
    function Expression(type, sourceSpan) {
        _classCallCheck(this, Expression);

        this.type = type;
        this.sourceSpan = sourceSpan;
    }
    /**
     * @abstract
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(Expression, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {}
        /**
         * @param {?} name
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'prop',
        value: function prop(name, sourceSpan) {
            return new ReadPropExpr(this, name, null, sourceSpan);
        }
        /**
         * @param {?} index
         * @param {?=} type
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'key',
        value: function key(index) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var sourceSpan = arguments[2];

            return new ReadKeyExpr(this, index, type, sourceSpan);
        }
        /**
         * @param {?} name
         * @param {?} params
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'callMethod',
        value: function callMethod(name, params, sourceSpan) {
            return new InvokeMethodExpr(this, name, params, null, sourceSpan);
        }
        /**
         * @param {?} params
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'callFn',
        value: function callFn(params, sourceSpan) {
            return new InvokeFunctionExpr(this, params, null, sourceSpan);
        }
        /**
         * @param {?} params
         * @param {?=} type
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'instantiate',
        value: function instantiate(params) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var sourceSpan = arguments[2];

            return new InstantiateExpr(this, params, type, sourceSpan);
        }
        /**
         * @param {?} trueCase
         * @param {?=} falseCase
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'conditional',
        value: function conditional(trueCase) {
            var falseCase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var sourceSpan = arguments[2];

            return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'equals',
        value: function equals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'notEquals',
        value: function notEquals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'identical',
        value: function identical(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'notIdentical',
        value: function notIdentical(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'minus',
        value: function minus(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'plus',
        value: function plus(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'divide',
        value: function divide(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'multiply',
        value: function multiply(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'modulo',
        value: function modulo(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'and',
        value: function and(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'or',
        value: function or(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'lower',
        value: function lower(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'lowerEquals',
        value: function lowerEquals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'bigger',
        value: function bigger(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?} rhs
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'biggerEquals',
        value: function biggerEquals(rhs, sourceSpan) {
            return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
        }
        /**
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'isBlank',
        value: function isBlank(sourceSpan) {
            // Note: We use equals by purpose here to compare to null and undefined in JS.
            // We use the typed null to allow strictNullChecks to narrow types.
            return this.equals(TYPED_NULL_EXPR, sourceSpan);
        }
        /**
         * @param {?} type
         * @param {?=} sourceSpan
         * @return {?}
         */

    }, {
        key: 'cast',
        value: function cast(type, sourceSpan) {
            return new CastExpr(this, type, sourceSpan);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toStmt',
        value: function toStmt() {
            return new ExpressionStatement(this);
        }
    }]);

    return Expression;
}();

var BuiltinVar = {};
BuiltinVar.This = 0;
BuiltinVar.Super = 1;
BuiltinVar.CatchError = 2;
BuiltinVar.CatchStack = 3;
BuiltinVar[BuiltinVar.This] = "This";
BuiltinVar[BuiltinVar.Super] = "Super";
BuiltinVar[BuiltinVar.CatchError] = "CatchError";
BuiltinVar[BuiltinVar.CatchStack] = "CatchStack";

var ReadVarExpr = function (_Expression) {
    _inherits(ReadVarExpr, _Expression);

    /**
     * @param {?} name
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function ReadVarExpr(name) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var sourceSpan = arguments[2];

        _classCallCheck(this, ReadVarExpr);

        var _this119 = _possibleConstructorReturn(this, (ReadVarExpr.__proto__ || Object.getPrototypeOf(ReadVarExpr)).call(this, type, sourceSpan));

        if (typeof name === 'string') {
            _this119.name = name;
            _this119.builtin = null;
        } else {
            _this119.name = null;
            _this119.builtin = name;
        }
        return _this119;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ReadVarExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitReadVarExpr(this, context);
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'set',
        value: function set(value) {
            return new WriteVarExpr(this.name, value, null, this.sourceSpan);
        }
    }]);

    return ReadVarExpr;
}(Expression);

var WriteVarExpr = function (_Expression2) {
    _inherits(WriteVarExpr, _Expression2);

    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function WriteVarExpr(name, value) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var sourceSpan = arguments[3];

        _classCallCheck(this, WriteVarExpr);

        var _this120 = _possibleConstructorReturn(this, (WriteVarExpr.__proto__ || Object.getPrototypeOf(WriteVarExpr)).call(this, type || value.type, sourceSpan));

        _this120.name = name;
        _this120.value = value;
        return _this120;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(WriteVarExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitWriteVarExpr(this, context);
        }
        /**
         * @param {?=} type
         * @param {?=} modifiers
         * @return {?}
         */

    }, {
        key: 'toDeclStmt',
        value: function toDeclStmt() {
            var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
        }
    }]);

    return WriteVarExpr;
}(Expression);

var WriteKeyExpr = function (_Expression3) {
    _inherits(WriteKeyExpr, _Expression3);

    /**
     * @param {?} receiver
     * @param {?} index
     * @param {?} value
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function WriteKeyExpr(receiver, index, value) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var sourceSpan = arguments[4];

        _classCallCheck(this, WriteKeyExpr);

        var _this121 = _possibleConstructorReturn(this, (WriteKeyExpr.__proto__ || Object.getPrototypeOf(WriteKeyExpr)).call(this, type || value.type, sourceSpan));

        _this121.receiver = receiver;
        _this121.index = index;
        _this121.value = value;
        return _this121;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(WriteKeyExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitWriteKeyExpr(this, context);
        }
    }]);

    return WriteKeyExpr;
}(Expression);

var WritePropExpr = function (_Expression4) {
    _inherits(WritePropExpr, _Expression4);

    /**
     * @param {?} receiver
     * @param {?} name
     * @param {?} value
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function WritePropExpr(receiver, name, value) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var sourceSpan = arguments[4];

        _classCallCheck(this, WritePropExpr);

        var _this122 = _possibleConstructorReturn(this, (WritePropExpr.__proto__ || Object.getPrototypeOf(WritePropExpr)).call(this, type || value.type, sourceSpan));

        _this122.receiver = receiver;
        _this122.name = name;
        _this122.value = value;
        return _this122;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(WritePropExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitWritePropExpr(this, context);
        }
    }]);

    return WritePropExpr;
}(Expression);

var BuiltinMethod = {};
BuiltinMethod.ConcatArray = 0;
BuiltinMethod.SubscribeObservable = 1;
BuiltinMethod.Bind = 2;
BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray";
BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable";
BuiltinMethod[BuiltinMethod.Bind] = "Bind";

var InvokeMethodExpr = function (_Expression5) {
    _inherits(InvokeMethodExpr, _Expression5);

    /**
     * @param {?} receiver
     * @param {?} method
     * @param {?} args
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function InvokeMethodExpr(receiver, method, args) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var sourceSpan = arguments[4];

        _classCallCheck(this, InvokeMethodExpr);

        var _this123 = _possibleConstructorReturn(this, (InvokeMethodExpr.__proto__ || Object.getPrototypeOf(InvokeMethodExpr)).call(this, type, sourceSpan));

        _this123.receiver = receiver;
        _this123.args = args;
        if (typeof method === 'string') {
            _this123.name = method;
            _this123.builtin = null;
        } else {
            _this123.name = null;
            _this123.builtin = method;
        }
        return _this123;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(InvokeMethodExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitInvokeMethodExpr(this, context);
        }
    }]);

    return InvokeMethodExpr;
}(Expression);

var InvokeFunctionExpr = function (_Expression6) {
    _inherits(InvokeFunctionExpr, _Expression6);

    /**
     * @param {?} fn
     * @param {?} args
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function InvokeFunctionExpr(fn, args) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var sourceSpan = arguments[3];

        _classCallCheck(this, InvokeFunctionExpr);

        var _this124 = _possibleConstructorReturn(this, (InvokeFunctionExpr.__proto__ || Object.getPrototypeOf(InvokeFunctionExpr)).call(this, type, sourceSpan));

        _this124.fn = fn;
        _this124.args = args;
        return _this124;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(InvokeFunctionExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitInvokeFunctionExpr(this, context);
        }
    }]);

    return InvokeFunctionExpr;
}(Expression);

var InstantiateExpr = function (_Expression7) {
    _inherits(InstantiateExpr, _Expression7);

    /**
     * @param {?} classExpr
     * @param {?} args
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function InstantiateExpr(classExpr, args, type, sourceSpan) {
        _classCallCheck(this, InstantiateExpr);

        var _this125 = _possibleConstructorReturn(this, (InstantiateExpr.__proto__ || Object.getPrototypeOf(InstantiateExpr)).call(this, type, sourceSpan));

        _this125.classExpr = classExpr;
        _this125.args = args;
        return _this125;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(InstantiateExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitInstantiateExpr(this, context);
        }
    }]);

    return InstantiateExpr;
}(Expression);

var LiteralExpr = function (_Expression8) {
    _inherits(LiteralExpr, _Expression8);

    /**
     * @param {?} value
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function LiteralExpr(value) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var sourceSpan = arguments[2];

        _classCallCheck(this, LiteralExpr);

        var _this126 = _possibleConstructorReturn(this, (LiteralExpr.__proto__ || Object.getPrototypeOf(LiteralExpr)).call(this, type, sourceSpan));

        _this126.value = value;
        return _this126;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(LiteralExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitLiteralExpr(this, context);
        }
    }]);

    return LiteralExpr;
}(Expression);

var ExternalExpr = function (_Expression9) {
    _inherits(ExternalExpr, _Expression9);

    /**
     * @param {?} value
     * @param {?=} type
     * @param {?=} typeParams
     * @param {?=} sourceSpan
     */
    function ExternalExpr(value) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var typeParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var sourceSpan = arguments[3];

        _classCallCheck(this, ExternalExpr);

        var _this127 = _possibleConstructorReturn(this, (ExternalExpr.__proto__ || Object.getPrototypeOf(ExternalExpr)).call(this, type, sourceSpan));

        _this127.value = value;
        _this127.typeParams = typeParams;
        return _this127;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ExternalExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitExternalExpr(this, context);
        }
    }]);

    return ExternalExpr;
}(Expression);

var ConditionalExpr = function (_Expression10) {
    _inherits(ConditionalExpr, _Expression10);

    /**
     * @param {?} condition
     * @param {?} trueCase
     * @param {?=} falseCase
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function ConditionalExpr(condition, trueCase) {
        var falseCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var sourceSpan = arguments[4];

        _classCallCheck(this, ConditionalExpr);

        var _this128 = _possibleConstructorReturn(this, (ConditionalExpr.__proto__ || Object.getPrototypeOf(ConditionalExpr)).call(this, type || trueCase.type, sourceSpan));

        _this128.condition = condition;
        _this128.falseCase = falseCase;
        _this128.trueCase = trueCase;
        return _this128;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ConditionalExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitConditionalExpr(this, context);
        }
    }]);

    return ConditionalExpr;
}(Expression);

var NotExpr = function (_Expression11) {
    _inherits(NotExpr, _Expression11);

    /**
     * @param {?} condition
     * @param {?=} sourceSpan
     */
    function NotExpr(condition, sourceSpan) {
        _classCallCheck(this, NotExpr);

        var _this129 = _possibleConstructorReturn(this, (NotExpr.__proto__ || Object.getPrototypeOf(NotExpr)).call(this, BOOL_TYPE, sourceSpan));

        _this129.condition = condition;
        return _this129;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(NotExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitNotExpr(this, context);
        }
    }]);

    return NotExpr;
}(Expression);

var CastExpr = function (_Expression12) {
    _inherits(CastExpr, _Expression12);

    /**
     * @param {?} value
     * @param {?} type
     * @param {?=} sourceSpan
     */
    function CastExpr(value, type, sourceSpan) {
        _classCallCheck(this, CastExpr);

        var _this130 = _possibleConstructorReturn(this, (CastExpr.__proto__ || Object.getPrototypeOf(CastExpr)).call(this, type, sourceSpan));

        _this130.value = value;
        return _this130;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(CastExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitCastExpr(this, context);
        }
    }]);

    return CastExpr;
}(Expression);

var FnParam =
/**
 * @param {?} name
 * @param {?=} type
 */
function FnParam(name) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, FnParam);

    this.name = name;
    this.type = type;
};

var FunctionExpr = function (_Expression13) {
    _inherits(FunctionExpr, _Expression13);

    /**
     * @param {?} params
     * @param {?} statements
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function FunctionExpr(params, statements) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var sourceSpan = arguments[3];

        _classCallCheck(this, FunctionExpr);

        var _this131 = _possibleConstructorReturn(this, (FunctionExpr.__proto__ || Object.getPrototypeOf(FunctionExpr)).call(this, type, sourceSpan));

        _this131.params = params;
        _this131.statements = statements;
        return _this131;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(FunctionExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitFunctionExpr(this, context);
        }
        /**
         * @param {?} name
         * @param {?=} modifiers
         * @return {?}
         */

    }, {
        key: 'toDeclStmt',
        value: function toDeclStmt(name) {
            var modifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
        }
    }]);

    return FunctionExpr;
}(Expression);

var BinaryOperatorExpr = function (_Expression14) {
    _inherits(BinaryOperatorExpr, _Expression14);

    /**
     * @param {?} operator
     * @param {?} lhs
     * @param {?} rhs
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function BinaryOperatorExpr(operator, lhs, rhs) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var sourceSpan = arguments[4];

        _classCallCheck(this, BinaryOperatorExpr);

        var _this132 = _possibleConstructorReturn(this, (BinaryOperatorExpr.__proto__ || Object.getPrototypeOf(BinaryOperatorExpr)).call(this, type || lhs.type, sourceSpan));

        _this132.operator = operator;
        _this132.rhs = rhs;
        _this132.lhs = lhs;
        return _this132;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(BinaryOperatorExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitBinaryOperatorExpr(this, context);
        }
    }]);

    return BinaryOperatorExpr;
}(Expression);

var ReadPropExpr = function (_Expression15) {
    _inherits(ReadPropExpr, _Expression15);

    /**
     * @param {?} receiver
     * @param {?} name
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function ReadPropExpr(receiver, name) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var sourceSpan = arguments[3];

        _classCallCheck(this, ReadPropExpr);

        var _this133 = _possibleConstructorReturn(this, (ReadPropExpr.__proto__ || Object.getPrototypeOf(ReadPropExpr)).call(this, type, sourceSpan));

        _this133.receiver = receiver;
        _this133.name = name;
        return _this133;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ReadPropExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitReadPropExpr(this, context);
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'set',
        value: function set(value) {
            return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
        }
    }]);

    return ReadPropExpr;
}(Expression);

var ReadKeyExpr = function (_Expression16) {
    _inherits(ReadKeyExpr, _Expression16);

    /**
     * @param {?} receiver
     * @param {?} index
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function ReadKeyExpr(receiver, index) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var sourceSpan = arguments[3];

        _classCallCheck(this, ReadKeyExpr);

        var _this134 = _possibleConstructorReturn(this, (ReadKeyExpr.__proto__ || Object.getPrototypeOf(ReadKeyExpr)).call(this, type, sourceSpan));

        _this134.receiver = receiver;
        _this134.index = index;
        return _this134;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ReadKeyExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitReadKeyExpr(this, context);
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'set',
        value: function set(value) {
            return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
        }
    }]);

    return ReadKeyExpr;
}(Expression);

var LiteralArrayExpr = function (_Expression17) {
    _inherits(LiteralArrayExpr, _Expression17);

    /**
     * @param {?} entries
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function LiteralArrayExpr(entries) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var sourceSpan = arguments[2];

        _classCallCheck(this, LiteralArrayExpr);

        var _this135 = _possibleConstructorReturn(this, (LiteralArrayExpr.__proto__ || Object.getPrototypeOf(LiteralArrayExpr)).call(this, type, sourceSpan));

        _this135.entries = entries;
        return _this135;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(LiteralArrayExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitLiteralArrayExpr(this, context);
        }
    }]);

    return LiteralArrayExpr;
}(Expression);

var LiteralMapEntry =
/**
 * @param {?} key
 * @param {?} value
 * @param {?=} quoted
 */
function LiteralMapEntry(key, value) {
    var quoted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, LiteralMapEntry);

    this.key = key;
    this.value = value;
    this.quoted = quoted;
};

var LiteralMapExpr = function (_Expression18) {
    _inherits(LiteralMapExpr, _Expression18);

    /**
     * @param {?} entries
     * @param {?=} type
     * @param {?=} sourceSpan
     */
    function LiteralMapExpr(entries) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var sourceSpan = arguments[2];

        _classCallCheck(this, LiteralMapExpr);

        var _this136 = _possibleConstructorReturn(this, (LiteralMapExpr.__proto__ || Object.getPrototypeOf(LiteralMapExpr)).call(this, type, sourceSpan));

        _this136.entries = entries;
        _this136.valueType = null;
        if (type) {
            _this136.valueType = type.valueType;
        }
        return _this136;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(LiteralMapExpr, [{
        key: 'visitExpression',
        value: function visitExpression(visitor, context) {
            return visitor.visitLiteralMapExpr(this, context);
        }
    }]);

    return LiteralMapExpr;
}(Expression);

var /** @type {?} */THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
var /** @type {?} */SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
var /** @type {?} */CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
var /** @type {?} */CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
var /** @type {?} */NULL_EXPR = new LiteralExpr(null, null);
var /** @type {?} */TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE);
var StmtModifier = {};
StmtModifier.Final = 0;
StmtModifier.Private = 1;
StmtModifier[StmtModifier.Final] = "Final";
StmtModifier[StmtModifier.Private] = "Private";
/**
 * @abstract
 */

var Statement = function () {
    /**
     * @param {?=} modifiers
     * @param {?=} sourceSpan
     */
    function Statement() {
        var modifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var sourceSpan = arguments[1];

        _classCallCheck(this, Statement);

        this.modifiers = modifiers;
        this.sourceSpan = sourceSpan;
        if (!modifiers) {
            this.modifiers = [];
        }
    }
    /**
     * @abstract
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(Statement, [{
        key: 'visitStatement',
        value: function visitStatement(visitor, context) {}
        /**
         * @param {?} modifier
         * @return {?}
         */

    }, {
        key: 'hasModifier',
        value: function hasModifier(modifier) {
            return this.modifiers.indexOf(modifier) !== -1;
        }
    }]);

    return Statement;
}();

var DeclareVarStmt = function (_Statement) {
    _inherits(DeclareVarStmt, _Statement);

    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} type
     * @param {?=} modifiers
     * @param {?=} sourceSpan
     */
    function DeclareVarStmt(name, value) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var modifiers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var sourceSpan = arguments[4];

        _classCallCheck(this, DeclareVarStmt);

        var _this137 = _possibleConstructorReturn(this, (DeclareVarStmt.__proto__ || Object.getPrototypeOf(DeclareVarStmt)).call(this, modifiers, sourceSpan));

        _this137.name = name;
        _this137.value = value;
        _this137.type = type || value.type;
        return _this137;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(DeclareVarStmt, [{
        key: 'visitStatement',
        value: function visitStatement(visitor, context) {
            return visitor.visitDeclareVarStmt(this, context);
        }
    }]);

    return DeclareVarStmt;
}(Statement);

var DeclareFunctionStmt = function (_Statement2) {
    _inherits(DeclareFunctionStmt, _Statement2);

    /**
     * @param {?} name
     * @param {?} params
     * @param {?} statements
     * @param {?=} type
     * @param {?=} modifiers
     * @param {?=} sourceSpan
     */
    function DeclareFunctionStmt(name, params, statements) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var modifiers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
        var sourceSpan = arguments[5];

        _classCallCheck(this, DeclareFunctionStmt);

        var _this138 = _possibleConstructorReturn(this, (DeclareFunctionStmt.__proto__ || Object.getPrototypeOf(DeclareFunctionStmt)).call(this, modifiers, sourceSpan));

        _this138.name = name;
        _this138.params = params;
        _this138.statements = statements;
        _this138.type = type;
        return _this138;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(DeclareFunctionStmt, [{
        key: 'visitStatement',
        value: function visitStatement(visitor, context) {
            return visitor.visitDeclareFunctionStmt(this, context);
        }
    }]);

    return DeclareFunctionStmt;
}(Statement);

var ExpressionStatement = function (_Statement3) {
    _inherits(ExpressionStatement, _Statement3);

    /**
     * @param {?} expr
     * @param {?=} sourceSpan
     */
    function ExpressionStatement(expr, sourceSpan) {
        _classCallCheck(this, ExpressionStatement);

        var _this139 = _possibleConstructorReturn(this, (ExpressionStatement.__proto__ || Object.getPrototypeOf(ExpressionStatement)).call(this, null, sourceSpan));

        _this139.expr = expr;
        return _this139;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ExpressionStatement, [{
        key: 'visitStatement',
        value: function visitStatement(visitor, context) {
            return visitor.visitExpressionStmt(this, context);
        }
    }]);

    return ExpressionStatement;
}(Statement);

var ReturnStatement = function (_Statement4) {
    _inherits(ReturnStatement, _Statement4);

    /**
     * @param {?} value
     * @param {?=} sourceSpan
     */
    function ReturnStatement(value, sourceSpan) {
        _classCallCheck(this, ReturnStatement);

        var _this140 = _possibleConstructorReturn(this, (ReturnStatement.__proto__ || Object.getPrototypeOf(ReturnStatement)).call(this, null, sourceSpan));

        _this140.value = value;
        return _this140;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ReturnStatement, [{
        key: 'visitStatement',
        value: function visitStatement(visitor, context) {
            return visitor.visitReturnStmt(this, context);
        }
    }]);

    return ReturnStatement;
}(Statement);

var AbstractClassPart = function () {
    /**
     * @param {?=} type
     * @param {?} modifiers
     */
    function AbstractClassPart() {
        var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var modifiers = arguments[1];

        _classCallCheck(this, AbstractClassPart);

        this.type = type;
        this.modifiers = modifiers;
        if (!modifiers) {
            this.modifiers = [];
        }
    }
    /**
     * @param {?} modifier
     * @return {?}
     */


    _createClass(AbstractClassPart, [{
        key: 'hasModifier',
        value: function hasModifier(modifier) {
            return this.modifiers.indexOf(modifier) !== -1;
        }
    }]);

    return AbstractClassPart;
}();

var ClassField = function (_AbstractClassPart) {
    _inherits(ClassField, _AbstractClassPart);

    /**
     * @param {?} name
     * @param {?=} type
     * @param {?=} modifiers
     */
    function ClassField(name) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var modifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, ClassField);

        var _this141 = _possibleConstructorReturn(this, (ClassField.__proto__ || Object.getPrototypeOf(ClassField)).call(this, type, modifiers));

        _this141.name = name;
        return _this141;
    }

    return ClassField;
}(AbstractClassPart);

var ClassMethod = function (_AbstractClassPart2) {
    _inherits(ClassMethod, _AbstractClassPart2);

    /**
     * @param {?} name
     * @param {?} params
     * @param {?} body
     * @param {?=} type
     * @param {?=} modifiers
     */
    function ClassMethod(name, params, body) {
        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var modifiers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

        _classCallCheck(this, ClassMethod);

        var _this142 = _possibleConstructorReturn(this, (ClassMethod.__proto__ || Object.getPrototypeOf(ClassMethod)).call(this, type, modifiers));

        _this142.name = name;
        _this142.params = params;
        _this142.body = body;
        return _this142;
    }

    return ClassMethod;
}(AbstractClassPart);

var ClassGetter = function (_AbstractClassPart3) {
    _inherits(ClassGetter, _AbstractClassPart3);

    /**
     * @param {?} name
     * @param {?} body
     * @param {?=} type
     * @param {?=} modifiers
     */
    function ClassGetter(name, body) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var modifiers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        _classCallCheck(this, ClassGetter);

        var _this143 = _possibleConstructorReturn(this, (ClassGetter.__proto__ || Object.getPrototypeOf(ClassGetter)).call(this, type, modifiers));

        _this143.name = name;
        _this143.body = body;
        return _this143;
    }

    return ClassGetter;
}(AbstractClassPart);

var ClassStmt = function (_Statement5) {
    _inherits(ClassStmt, _Statement5);

    /**
     * @param {?} name
     * @param {?} parent
     * @param {?} fields
     * @param {?} getters
     * @param {?} constructorMethod
     * @param {?} methods
     * @param {?=} modifiers
     * @param {?=} sourceSpan
     */
    function ClassStmt(name, parent, fields, getters, constructorMethod, methods) {
        var modifiers = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
        var sourceSpan = arguments[7];

        _classCallCheck(this, ClassStmt);

        var _this144 = _possibleConstructorReturn(this, (ClassStmt.__proto__ || Object.getPrototypeOf(ClassStmt)).call(this, modifiers, sourceSpan));

        _this144.name = name;
        _this144.parent = parent;
        _this144.fields = fields;
        _this144.getters = getters;
        _this144.constructorMethod = constructorMethod;
        _this144.methods = methods;
        return _this144;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(ClassStmt, [{
        key: 'visitStatement',
        value: function visitStatement(visitor, context) {
            return visitor.visitDeclareClassStmt(this, context);
        }
    }]);

    return ClassStmt;
}(Statement);

var IfStmt = function (_Statement6) {
    _inherits(IfStmt, _Statement6);

    /**
     * @param {?} condition
     * @param {?} trueCase
     * @param {?=} falseCase
     * @param {?=} sourceSpan
     */
    function IfStmt(condition, trueCase) {
        var falseCase = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var sourceSpan = arguments[3];

        _classCallCheck(this, IfStmt);

        var _this145 = _possibleConstructorReturn(this, (IfStmt.__proto__ || Object.getPrototypeOf(IfStmt)).call(this, null, sourceSpan));

        _this145.condition = condition;
        _this145.trueCase = trueCase;
        _this145.falseCase = falseCase;
        return _this145;
    }
    /**
     * @param {?} visitor
     * @param {?} context
     * @return {?}
     */


    _createClass(IfStmt, [{
        key: 'visitStatement',
        value: function visitStatement(visitor, context) {
            return visitor.visitIfStmt(this, context);
        }
    }]);

    return IfStmt;
}(Statement);
/**
 * @param {?} name
 * @param {?=} type
 * @param {?=} sourceSpan
 * @return {?}
 */


function variable(name) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var sourceSpan = arguments[2];

    return new ReadVarExpr(name, type, sourceSpan);
}
/**
 * @param {?} id
 * @param {?=} typeParams
 * @param {?=} sourceSpan
 * @return {?}
 */
function importExpr(id) {
    var typeParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var sourceSpan = arguments[2];

    return new ExternalExpr(id, null, typeParams, sourceSpan);
}
/**
 * @param {?} id
 * @param {?=} typeParams
 * @param {?=} typeModifiers
 * @return {?}
 */
function importType(id) {
    var typeParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var typeModifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    return isPresent(id) ? expressionType(importExpr(id, typeParams), typeModifiers) : null;
}
/**
 * @param {?} expr
 * @param {?=} typeModifiers
 * @return {?}
 */
function expressionType(expr) {
    var typeModifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    return isPresent(expr) ? new ExpressionType(expr, typeModifiers) : null;
}
/**
 * @param {?} values
 * @param {?=} type
 * @param {?=} sourceSpan
 * @return {?}
 */
function literalArr(values) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var sourceSpan = arguments[2];

    return new LiteralArrayExpr(values, type, sourceSpan);
}
/**
 * @param {?} values
 * @param {?=} type
 * @param {?=} quoted
 * @return {?}
 */
function literalMap(values) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var quoted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    return new LiteralMapExpr(values.map(function (entry) {
        return new LiteralMapEntry(entry[0], entry[1], quoted);
    }), type);
}
/**
 * @param {?} expr
 * @param {?=} sourceSpan
 * @return {?}
 */
function not(expr, sourceSpan) {
    return new NotExpr(expr, sourceSpan);
}
/**
 * @param {?} params
 * @param {?} body
 * @param {?=} type
 * @param {?=} sourceSpan
 * @return {?}
 */
function fn(params, body) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var sourceSpan = arguments[3];

    return new FunctionExpr(params, body, type, sourceSpan);
}
/**
 * @param {?} value
 * @param {?=} type
 * @param {?=} sourceSpan
 * @return {?}
 */
function literal(value) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var sourceSpan = arguments[2];

    return new LiteralExpr(value, type, sourceSpan);
}

/**
 * Create a new class stmts based on the given data.
 * @param {?} config
 * @return {?}
 */
function createClassStmt(config) {
    var /** @type {?} */parentArgs = config.parentArgs || [];
    var /** @type {?} */superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
    var /** @type {?} */builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
    var /** @type {?} */ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
    return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || [], config.sourceSpan);
}
/**
 * @param {?} builders
 * @return {?}
 */
function concatClassBuilderParts(builders) {
    var _ref29, _ref30, _ref31, _ref32;

    return {
        fields: (_ref29 = []).concat.apply(_ref29, _toConsumableArray(builders.map(function (builder) {
            return builder.fields || [];
        }))),
        methods: (_ref30 = []).concat.apply(_ref30, _toConsumableArray(builders.map(function (builder) {
            return builder.methods || [];
        }))),
        getters: (_ref31 = []).concat.apply(_ref31, _toConsumableArray(builders.map(function (builder) {
            return builder.getters || [];
        }))),
        ctorStmts: (_ref32 = []).concat.apply(_ref32, _toConsumableArray(builders.map(function (builder) {
            return builder.ctorStmts || [];
        })))
    };
}

var /** @type {?} */QUOTED_KEYS = '$quoted$';
/**
 * @param {?} value
 * @param {?=} type
 * @return {?}
 */
function convertValueToOutputAst(value) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    return visitValue(value, new _ValueOutputAstTransformer(), type);
}

var _ValueOutputAstTransformer = function () {
    function _ValueOutputAstTransformer() {
        _classCallCheck(this, _ValueOutputAstTransformer);
    }

    _createClass(_ValueOutputAstTransformer, [{
        key: 'visitArray',

        /**
         * @param {?} arr
         * @param {?} type
         * @return {?}
         */
        value: function visitArray(arr, type) {
            var _this146 = this;

            return literalArr(arr.map(function (value) {
                return visitValue(value, _this146, null);
            }), type);
        }
        /**
         * @param {?} map
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'visitStringMap',
        value: function visitStringMap(map, type) {
            var _this147 = this;

            var /** @type {?} */entries = [];
            var /** @type {?} */quotedSet = new Set(map && map[QUOTED_KEYS]);
            Object.keys(map).forEach(function (key) {
                entries.push(new LiteralMapEntry(key, visitValue(map[key], _this147, null), quotedSet.has(key)));
            });
            return new LiteralMapExpr(entries, type);
        }
        /**
         * @param {?} value
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'visitPrimitive',
        value: function visitPrimitive(value, type) {
            return literal(value, type);
        }
        /**
         * @param {?} value
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'visitOther',
        value: function visitOther(value, type) {
            if (value instanceof Expression) {
                return value;
            } else {
                return importExpr({ reference: value });
            }
        }
    }]);

    return _ValueOutputAstTransformer;
}();

/**
 * This is currently not read, but will probably be used in the future.
 * We keep it as we already pass it through all the rigth places...
 */


var ComponentFactoryDependency =
/**
 * @param {?} compType
 */
function ComponentFactoryDependency(compType) {
    _classCallCheck(this, ComponentFactoryDependency);

    this.compType = compType;
};

var NgModuleCompileResult =
/**
 * @param {?} statements
 * @param {?} ngModuleFactoryVar
 * @param {?} dependencies
 */
function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
    _classCallCheck(this, NgModuleCompileResult);

    this.statements = statements;
    this.ngModuleFactoryVar = ngModuleFactoryVar;
    this.dependencies = dependencies;
};

var NgModuleCompiler = function () {
    function NgModuleCompiler() {
        _classCallCheck(this, NgModuleCompiler);
    }

    _createClass(NgModuleCompiler, [{
        key: 'compile',

        /**
         * @param {?} ngModuleMeta
         * @param {?} extraProviders
         * @return {?}
         */
        value: function compile(ngModuleMeta, extraProviders) {
            var /** @type {?} */moduleUrl = identifierModuleUrl(ngModuleMeta.type);
            var /** @type {?} */sourceFileName = isPresent(moduleUrl) ? 'in NgModule ' + identifierName(ngModuleMeta.type) + ' in ' + moduleUrl : 'in NgModule ' + identifierName(ngModuleMeta.type);
            var /** @type {?} */sourceFile = new ParseSourceFile('', sourceFileName);
            var /** @type {?} */sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
            var /** @type {?} */deps = [];
            var /** @type {?} */bootstrapComponentFactories = [];
            var /** @type {?} */entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
                if (ngModuleMeta.bootstrapComponents.some(function (id) {
                    return id.reference === entryComponent.componentType;
                })) {
                    bootstrapComponentFactories.push({ reference: entryComponent.componentFactory });
                }
                deps.push(new ComponentFactoryDependency(entryComponent.componentType));
                return { reference: entryComponent.componentFactory };
            });
            var /** @type {?} */builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
            var /** @type {?} */providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
            providerParser.parse().forEach(function (provider) {
                return builder.addProvider(provider);
            });
            var /** @type {?} */injectorClass = builder.build();
            var /** @type {?} */ngModuleFactoryVar = identifierName(ngModuleMeta.type) + 'NgFactory';
            var /** @type {?} */ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(createIdentifier(Identifiers.NgModuleFactory)).instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
            var /** @type {?} */stmts = [injectorClass, ngModuleFactoryStmt];
            if (ngModuleMeta.id) {
                var /** @type {?} */registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn)).callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)]).toStmt();
                stmts.push(registerFactoryStmt);
            }
            return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
        }
    }]);

    return NgModuleCompiler;
}();

NgModuleCompiler.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
NgModuleCompiler.ctorParameters = function () {
    return [];
};

var _InjectorBuilder = function () {
    /**
     * @param {?} _ngModuleMeta
     * @param {?} _entryComponentFactories
     * @param {?} _bootstrapComponentFactories
     * @param {?} _sourceSpan
     */
    function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
        _classCallCheck(this, _InjectorBuilder);

        this._ngModuleMeta = _ngModuleMeta;
        this._entryComponentFactories = _entryComponentFactories;
        this._bootstrapComponentFactories = _bootstrapComponentFactories;
        this._sourceSpan = _sourceSpan;
        this.fields = [];
        this.getters = [];
        this.methods = [];
        this.ctorStmts = [];
        this._tokens = [];
        this._instances = new Map();
        this._createStmts = [];
        this._destroyStmts = [];
    }
    /**
     * @param {?} resolvedProvider
     * @return {?}
     */


    _createClass(_InjectorBuilder, [{
        key: 'addProvider',
        value: function addProvider(resolvedProvider) {
            var _this148 = this;

            var /** @type {?} */providerValueExpressions = resolvedProvider.providers.map(function (provider) {
                return _this148._getProviderValue(provider);
            });
            var /** @type {?} */propName = '_' + tokenName(resolvedProvider.token) + '_' + this._instances.size;
            var /** @type {?} */instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
            if (resolvedProvider.lifecycleHooks.indexOf(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].OnDestroy) !== -1) {
                this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
            }
            this._tokens.push(resolvedProvider.token);
            this._instances.set(tokenReference(resolvedProvider.token), instance);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'build',
        value: function build() {
            var _this149 = this;

            var /** @type {?} */getMethodStmts = this._tokens.map(function (token) {
                var /** @type {?} */providerExpr = _this149._instances.get(tokenReference(token));
                return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
            });
            var /** @type {?} */methods = [new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)), new ClassMethod('getInternal', [new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE), new ClassMethod('destroyInternal', [], this._destroyStmts)];
            var /** @type {?} */parentArgs = [variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function (componentFactory) {
                return importExpr(componentFactory);
            })), literalArr(this._bootstrapComponentFactories.map(function (componentFactory) {
                return importExpr(componentFactory);
            }))];
            var /** @type {?} */injClassName = identifierName(this._ngModuleMeta.type) + 'Injector';
            return createClassStmt({
                name: injClassName,
                ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))],
                parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
                parentArgs: parentArgs,
                builders: [{ methods: methods }, this]
            });
        }
        /**
         * @param {?} provider
         * @return {?}
         */

    }, {
        key: '_getProviderValue',
        value: function _getProviderValue(provider) {
            var _this150 = this;

            var /** @type {?} */result = void 0;
            if (isPresent(provider.useExisting)) {
                result = this._getDependency({ token: provider.useExisting });
            } else if (isPresent(provider.useFactory)) {
                var /** @type {?} */deps = provider.deps || provider.useFactory.diDeps;
                var /** @type {?} */depsExpr = deps.map(function (dep) {
                    return _this150._getDependency(dep);
                });
                result = importExpr(provider.useFactory).callFn(depsExpr);
            } else if (isPresent(provider.useClass)) {
                var /** @type {?} */_deps3 = provider.deps || provider.useClass.diDeps;
                var /** @type {?} */_depsExpr = _deps3.map(function (dep) {
                    return _this150._getDependency(dep);
                });
                result = importExpr(provider.useClass).instantiate(_depsExpr, importType(provider.useClass));
            } else {
                result = convertValueToOutputAst(provider.useValue);
            }
            return result;
        }
        /**
         * @param {?} propName
         * @param {?} provider
         * @param {?} providerValueExpressions
         * @param {?} isMulti
         * @param {?} isEager
         * @return {?}
         */

    }, {
        key: '_createProviderProperty',
        value: function _createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager) {
            var /** @type {?} */resolvedProviderValueExpr = void 0;
            var /** @type {?} */type = void 0;
            if (isMulti) {
                resolvedProviderValueExpr = literalArr(providerValueExpressions);
                type = new ArrayType(DYNAMIC_TYPE);
            } else {
                resolvedProviderValueExpr = providerValueExpressions[0];
                type = providerValueExpressions[0].type;
            }
            if (!type) {
                type = DYNAMIC_TYPE;
            }
            if (isEager) {
                this.fields.push(new ClassField(propName, type));
                this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
            } else {
                var /** @type {?} */internalField = '_' + propName;
                this.fields.push(new ClassField(internalField, type));
                // Note: Equals is important for JS so that it also checks the undefined case!
                var /** @type {?} */getterStmts = [new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]), new ReturnStatement(THIS_EXPR.prop(internalField))];
                this.getters.push(new ClassGetter(propName, getterStmts, type));
            }
            return THIS_EXPR.prop(propName);
        }
        /**
         * @param {?} dep
         * @return {?}
         */

    }, {
        key: '_getDependency',
        value: function _getDependency(dep) {
            var /** @type {?} */result = null;
            if (dep.isValue) {
                result = literal(dep.value);
            }
            if (!dep.isSkipSelf) {
                if (dep.token && (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) || tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver))) {
                    result = THIS_EXPR;
                }
                if (!result) {
                    result = this._instances.get(tokenReference(dep.token));
                }
            }
            if (!result) {
                var /** @type {?} */args = [createDiTokenExpression(dep.token)];
                if (dep.isOptional) {
                    args.push(NULL_EXPR);
                }
                result = InjectorProps.parent.callMethod('get', args);
            }
            return result;
        }
    }]);

    return _InjectorBuilder;
}();
/**
 * @param {?} token
 * @return {?}
 */


function createDiTokenExpression(token) {
    if (isPresent(token.value)) {
        return literal(token.value);
    } else {
        return importExpr(token.identifier);
    }
}

var InjectorProps = function InjectorProps() {
    _classCallCheck(this, InjectorProps);
};

InjectorProps.parent = THIS_EXPR.prop('parent');

var InjectMethodVars = function InjectMethodVars() {
    _classCallCheck(this, InjectMethodVars);
};

InjectMethodVars.token = variable('token');
InjectMethodVars.notFoundResult = variable('notFoundResult');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit
var /** @type {?} */VERSION$1 = 3;
var /** @type {?} */JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';

var SourceMapGenerator = function () {
    /**
     * @param {?=} file
     */
    function SourceMapGenerator() {
        var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, SourceMapGenerator);

        this.file = file;
        this.sourcesContent = new Map();
        this.lines = [];
        this.lastCol0 = 0;
        this.hasMappings = false;
    }
    /**
     * @param {?} url
     * @param {?=} content
     * @return {?}
     */


    _createClass(SourceMapGenerator, [{
        key: 'addSource',
        value: function addSource(url) {
            var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (!this.sourcesContent.has(url)) {
                this.sourcesContent.set(url, content);
            }
            return this;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'addLine',
        value: function addLine() {
            this.lines.push([]);
            this.lastCol0 = 0;
            return this;
        }
        /**
         * @param {?} col0
         * @param {?=} sourceUrl
         * @param {?=} sourceLine0
         * @param {?=} sourceCol0
         * @return {?}
         */

    }, {
        key: 'addMapping',
        value: function addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {
            if (!this.currentLine) {
                throw new Error('A line must be added before mappings can be added');
            }
            if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
                throw new Error('Unknown source file "' + sourceUrl + '"');
            }
            if (col0 == null) {
                throw new Error('The column in the generated code must be provided');
            }
            if (col0 < this.lastCol0) {
                throw new Error('Mapping should be added in output order');
            }
            if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
                throw new Error('The source location must be provided when a source url is provided');
            }
            this.hasMappings = true;
            this.lastCol0 = col0;
            this.currentLine.push({ col0: col0, sourceUrl: sourceUrl, sourceLine0: sourceLine0, sourceCol0: sourceCol0 });
            return this;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toJSON',

        /**
         * @return {?}
         */
        value: function toJSON() {
            var _this151 = this;

            if (!this.hasMappings) {
                return null;
            }
            var /** @type {?} */sourcesIndex = new Map();
            var /** @type {?} */sources = [];
            var /** @type {?} */sourcesContent = [];
            Array.from(this.sourcesContent.keys()).forEach(function (url, i) {
                sourcesIndex.set(url, i);
                sources.push(url);
                sourcesContent.push(_this151.sourcesContent.get(url) || null);
            });
            var /** @type {?} */mappings = '';
            var /** @type {?} */lastCol0 = 0;
            var /** @type {?} */lastSourceIndex = 0;
            var /** @type {?} */lastSourceLine0 = 0;
            var /** @type {?} */lastSourceCol0 = 0;
            this.lines.forEach(function (segments) {
                lastCol0 = 0;
                mappings += segments.map(function (segment) {
                    // zero-based starting column of the line in the generated code
                    var /** @type {?} */segAsStr = toBase64VLQ(segment.col0 - lastCol0);
                    lastCol0 = segment.col0;
                    if (segment.sourceUrl != null) {
                        // zero-based index into the “sources” list
                        segAsStr += toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
                        lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
                        // the zero-based starting line in the original source
                        segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
                        lastSourceLine0 = segment.sourceLine0;
                        // the zero-based starting column in the original source
                        segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
                        lastSourceCol0 = segment.sourceCol0;
                    }
                    return segAsStr;
                }).join(',');
                mappings += ';';
            });
            mappings = mappings.slice(0, -1);
            return {
                'file': this.file || '',
                'version': VERSION$1,
                'sourceRoot': '',
                'sources': sources,
                'sourcesContent': sourcesContent,
                'mappings': mappings
            };
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toJsComment',
        value: function toJsComment() {
            return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) : '';
        }
    }, {
        key: 'currentLine',
        get: function get() {
            return this.lines.slice(-1)[0];
        }
    }]);

    return SourceMapGenerator;
}();
/**
 * @param {?} value
 * @return {?}
 */


function toBase64String(value) {
    var /** @type {?} */b64 = '';
    for (var /** @type {?} */i = 0; i < value.length;) {
        var /** @type {?} */i1 = value.charCodeAt(i++);
        var /** @type {?} */i2 = value.charCodeAt(i++);
        var /** @type {?} */i3 = value.charCodeAt(i++);
        b64 += toBase64Digit(i1 >> 2);
        b64 += toBase64Digit((i1 & 3) << 4 | (isNaN(i2) ? 0 : i2 >> 4));
        b64 += isNaN(i2) ? '=' : toBase64Digit((i2 & 15) << 2 | i3 >> 6);
        b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);
    }
    return b64;
}
/**
 * @param {?} value
 * @return {?}
 */
function toBase64VLQ(value) {
    value = value < 0 ? (-value << 1) + 1 : value << 1;
    var /** @type {?} */out = '';
    do {
        var /** @type {?} */digit = value & 31;
        value = value >> 5;
        if (value > 0) {
            digit = digit | 32;
        }
        out += toBase64Digit(digit);
    } while (value > 0);
    return out;
}
var /** @type {?} */B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
/**
 * @param {?} value
 * @return {?}
 */
function toBase64Digit(value) {
    if (value < 0 || value >= 64) {
        throw new Error('Can only encode value in the range [0, 63]');
    }
    return B64_DIGITS[value];
}

var /** @type {?} */_SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
var /** @type {?} */_LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
var /** @type {?} */_INDENT_WITH = '  ';
var /** @type {?} */CATCH_ERROR_VAR$1 = variable('error');
var /** @type {?} */CATCH_STACK_VAR$1 = variable('stack');

var _EmittedLine =
/**
 * @param {?} indent
 */
function _EmittedLine(indent) {
    _classCallCheck(this, _EmittedLine);

    this.indent = indent;
    this.parts = [];
    this.srcSpans = [];
};

var EmitterVisitorContext = function () {
    /**
     * @param {?} _exportedVars
     * @param {?} _indent
     */
    function EmitterVisitorContext(_exportedVars, _indent) {
        _classCallCheck(this, EmitterVisitorContext);

        this._exportedVars = _exportedVars;
        this._indent = _indent;
        this._classes = [];
        this._lines = [new _EmittedLine(_indent)];
    }
    /**
     * @param {?} exportedVars
     * @return {?}
     */


    _createClass(EmitterVisitorContext, [{
        key: 'isExportedVar',

        /**
         * @param {?} varName
         * @return {?}
         */
        value: function isExportedVar(varName) {
            return this._exportedVars.indexOf(varName) !== -1;
        }
        /**
         * @param {?=} from
         * @param {?=} lastPart
         * @return {?}
         */

    }, {
        key: 'println',
        value: function println(from) {
            var lastPart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            this.print(from, lastPart, true);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'lineIsEmpty',
        value: function lineIsEmpty() {
            return this._currentLine.parts.length === 0;
        }
        /**
         * @param {?} from
         * @param {?} part
         * @param {?=} newLine
         * @return {?}
         */

    }, {
        key: 'print',
        value: function print(from, part) {
            var newLine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (part.length > 0) {
                this._currentLine.parts.push(part);
                this._currentLine.srcSpans.push(from && from.sourceSpan || null);
            }
            if (newLine) {
                this._lines.push(new _EmittedLine(this._indent));
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'removeEmptyLastLine',
        value: function removeEmptyLastLine() {
            if (this.lineIsEmpty()) {
                this._lines.pop();
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'incIndent',
        value: function incIndent() {
            this._indent++;
            this._currentLine.indent = this._indent;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'decIndent',
        value: function decIndent() {
            this._indent--;
            this._currentLine.indent = this._indent;
        }
        /**
         * @param {?} clazz
         * @return {?}
         */

    }, {
        key: 'pushClass',
        value: function pushClass(clazz) {
            this._classes.push(clazz);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'popClass',
        value: function popClass() {
            return this._classes.pop();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'toSource',

        /**
         * @return {?}
         */
        value: function toSource() {
            return this.sourceLines.map(function (l) {
                return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '';
            }).join('\n');
        }
        /**
         * @param {?=} file
         * @param {?=} startsAtLine
         * @return {?}
         */

    }, {
        key: 'toSourceMapGenerator',
        value: function toSourceMapGenerator() {
            var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var startsAtLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            var /** @type {?} */map = new SourceMapGenerator(file);
            for (var /** @type {?} */i = 0; i < startsAtLine; i++) {
                map.addLine();
            }
            this.sourceLines.forEach(function (line) {
                map.addLine();
                var /** @type {?} */spans = line.srcSpans;
                var /** @type {?} */parts = line.parts;
                var /** @type {?} */col0 = line.indent * _INDENT_WITH.length;
                var /** @type {?} */spanIdx = 0;
                // skip leading parts without source spans
                while (spanIdx < spans.length && !spans[spanIdx]) {
                    col0 += parts[spanIdx].length;
                    spanIdx++;
                }
                while (spanIdx < spans.length) {
                    var /** @type {?} */span = spans[spanIdx];
                    var /** @type {?} */source = span.start.file;
                    var /** @type {?} */sourceLine = span.start.line;
                    var /** @type {?} */sourceCol = span.start.col;
                    map.addSource(source.url, source.content).addMapping(col0, source.url, sourceLine, sourceCol);
                    col0 += parts[spanIdx].length;
                    spanIdx++;
                    // assign parts without span or the same span to the previous segment
                    while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
                        col0 += parts[spanIdx].length;
                        spanIdx++;
                    }
                }
            });
            return map;
        }
        /**
         * @return {?}
         */

    }, {
        key: '_currentLine',

        /**
         * @return {?}
         */
        get: function get() {
            return this._lines[this._lines.length - 1];
        }
    }, {
        key: 'currentClass',
        get: function get() {
            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
        }
    }, {
        key: 'sourceLines',
        get: function get() {
            if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
                return this._lines.slice(0, -1);
            }
            return this._lines;
        }
    }], [{
        key: 'createRoot',
        value: function createRoot(exportedVars) {
            return new EmitterVisitorContext(exportedVars, 0);
        }
    }]);

    return EmitterVisitorContext;
}();
/**
 * @abstract
 */


var AbstractEmitterVisitor = function () {
    /**
     * @param {?} _escapeDollarInStrings
     */
    function AbstractEmitterVisitor(_escapeDollarInStrings) {
        _classCallCheck(this, AbstractEmitterVisitor);

        this._escapeDollarInStrings = _escapeDollarInStrings;
    }
    /**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */


    _createClass(AbstractEmitterVisitor, [{
        key: 'visitExpressionStmt',
        value: function visitExpressionStmt(stmt, ctx) {
            stmt.expr.visitExpression(this, ctx);
            ctx.println(stmt, ';');
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitReturnStmt',
        value: function visitReturnStmt(stmt, ctx) {
            ctx.print(stmt, 'return ');
            stmt.value.visitExpression(this, ctx);
            ctx.println(stmt, ';');
            return null;
        }
        /**
         * @abstract
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitCastExpr',
        value: function visitCastExpr(ast, context) {}
        /**
         * @abstract
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareClassStmt',
        value: function visitDeclareClassStmt(stmt, ctx) {}
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitIfStmt',
        value: function visitIfStmt(stmt, ctx) {
            ctx.print(stmt, 'if (');
            stmt.condition.visitExpression(this, ctx);
            ctx.print(stmt, ') {');
            var /** @type {?} */hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
            if (stmt.trueCase.length <= 1 && !hasElseCase) {
                ctx.print(stmt, ' ');
                this.visitAllStatements(stmt.trueCase, ctx);
                ctx.removeEmptyLastLine();
                ctx.print(stmt, ' ');
            } else {
                ctx.println();
                ctx.incIndent();
                this.visitAllStatements(stmt.trueCase, ctx);
                ctx.decIndent();
                if (hasElseCase) {
                    ctx.println(stmt, '} else {');
                    ctx.incIndent();
                    this.visitAllStatements(stmt.falseCase, ctx);
                    ctx.decIndent();
                }
            }
            ctx.println(stmt, '}');
            return null;
        }
        /**
         * @abstract
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitTryCatchStmt',
        value: function visitTryCatchStmt(stmt, ctx) {}
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitThrowStmt',
        value: function visitThrowStmt(stmt, ctx) {
            ctx.print(stmt, 'throw ');
            stmt.error.visitExpression(this, ctx);
            ctx.println(stmt, ';');
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitCommentStmt',
        value: function visitCommentStmt(stmt, ctx) {
            var /** @type {?} */lines = stmt.comment.split('\n');
            lines.forEach(function (line) {
                ctx.println(stmt, '// ' + line);
            });
            return null;
        }
        /**
         * @abstract
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareVarStmt',
        value: function visitDeclareVarStmt(stmt, ctx) {}
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitWriteVarExpr',
        value: function visitWriteVarExpr(expr, ctx) {
            var /** @type {?} */lineWasEmpty = ctx.lineIsEmpty();
            if (!lineWasEmpty) {
                ctx.print(expr, '(');
            }
            ctx.print(expr, expr.name + ' = ');
            expr.value.visitExpression(this, ctx);
            if (!lineWasEmpty) {
                ctx.print(expr, ')');
            }
            return null;
        }
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitWriteKeyExpr',
        value: function visitWriteKeyExpr(expr, ctx) {
            var /** @type {?} */lineWasEmpty = ctx.lineIsEmpty();
            if (!lineWasEmpty) {
                ctx.print(expr, '(');
            }
            expr.receiver.visitExpression(this, ctx);
            ctx.print(expr, '[');
            expr.index.visitExpression(this, ctx);
            ctx.print(expr, '] = ');
            expr.value.visitExpression(this, ctx);
            if (!lineWasEmpty) {
                ctx.print(expr, ')');
            }
            return null;
        }
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitWritePropExpr',
        value: function visitWritePropExpr(expr, ctx) {
            var /** @type {?} */lineWasEmpty = ctx.lineIsEmpty();
            if (!lineWasEmpty) {
                ctx.print(expr, '(');
            }
            expr.receiver.visitExpression(this, ctx);
            ctx.print(expr, '.' + expr.name + ' = ');
            expr.value.visitExpression(this, ctx);
            if (!lineWasEmpty) {
                ctx.print(expr, ')');
            }
            return null;
        }
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitInvokeMethodExpr',
        value: function visitInvokeMethodExpr(expr, ctx) {
            expr.receiver.visitExpression(this, ctx);
            var /** @type {?} */name = expr.name;
            if (isPresent(expr.builtin)) {
                name = this.getBuiltinMethodName(expr.builtin);
                if (isBlank(name)) {
                    // some builtins just mean to skip the call.
                    return null;
                }
            }
            ctx.print(expr, '.' + name + '(');
            this.visitAllExpressions(expr.args, ctx, ',');
            ctx.print(expr, ')');
            return null;
        }
        /**
         * @abstract
         * @param {?} method
         * @return {?}
         */

    }, {
        key: 'getBuiltinMethodName',
        value: function getBuiltinMethodName(method) {}
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitInvokeFunctionExpr',
        value: function visitInvokeFunctionExpr(expr, ctx) {
            expr.fn.visitExpression(this, ctx);
            ctx.print(expr, '(');
            this.visitAllExpressions(expr.args, ctx, ',');
            ctx.print(expr, ')');
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitReadVarExpr',
        value: function visitReadVarExpr(ast, ctx) {
            var /** @type {?} */varName = ast.name;
            if (isPresent(ast.builtin)) {
                switch (ast.builtin) {
                    case BuiltinVar.Super:
                        varName = 'super';
                        break;
                    case BuiltinVar.This:
                        varName = 'this';
                        break;
                    case BuiltinVar.CatchError:
                        varName = CATCH_ERROR_VAR$1.name;
                        break;
                    case BuiltinVar.CatchStack:
                        varName = CATCH_STACK_VAR$1.name;
                        break;
                    default:
                        throw new Error('Unknown builtin variable ' + ast.builtin);
                }
            }
            ctx.print(ast, varName);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitInstantiateExpr',
        value: function visitInstantiateExpr(ast, ctx) {
            ctx.print(ast, 'new ');
            ast.classExpr.visitExpression(this, ctx);
            ctx.print(ast, '(');
            this.visitAllExpressions(ast.args, ctx, ',');
            ctx.print(ast, ')');
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitLiteralExpr',
        value: function visitLiteralExpr(ast, ctx) {
            var /** @type {?} */value = ast.value;
            if (typeof value === 'string') {
                ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
            } else {
                ctx.print(ast, '' + value);
            }
            return null;
        }
        /**
         * @abstract
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitExternalExpr',
        value: function visitExternalExpr(ast, ctx) {}
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitConditionalExpr',
        value: function visitConditionalExpr(ast, ctx) {
            ctx.print(ast, '(');
            ast.condition.visitExpression(this, ctx);
            ctx.print(ast, '? ');
            ast.trueCase.visitExpression(this, ctx);
            ctx.print(ast, ': ');
            ast.falseCase.visitExpression(this, ctx);
            ctx.print(ast, ')');
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitNotExpr',
        value: function visitNotExpr(ast, ctx) {
            ctx.print(ast, '!');
            ast.condition.visitExpression(this, ctx);
            return null;
        }
        /**
         * @abstract
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitFunctionExpr',
        value: function visitFunctionExpr(ast, ctx) {}
        /**
         * @abstract
         * @param {?} stmt
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitDeclareFunctionStmt',
        value: function visitDeclareFunctionStmt(stmt, context) {}
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitBinaryOperatorExpr',
        value: function visitBinaryOperatorExpr(ast, ctx) {
            var /** @type {?} */opStr = void 0;
            switch (ast.operator) {
                case BinaryOperator.Equals:
                    opStr = '==';
                    break;
                case BinaryOperator.Identical:
                    opStr = '===';
                    break;
                case BinaryOperator.NotEquals:
                    opStr = '!=';
                    break;
                case BinaryOperator.NotIdentical:
                    opStr = '!==';
                    break;
                case BinaryOperator.And:
                    opStr = '&&';
                    break;
                case BinaryOperator.Or:
                    opStr = '||';
                    break;
                case BinaryOperator.Plus:
                    opStr = '+';
                    break;
                case BinaryOperator.Minus:
                    opStr = '-';
                    break;
                case BinaryOperator.Divide:
                    opStr = '/';
                    break;
                case BinaryOperator.Multiply:
                    opStr = '*';
                    break;
                case BinaryOperator.Modulo:
                    opStr = '%';
                    break;
                case BinaryOperator.Lower:
                    opStr = '<';
                    break;
                case BinaryOperator.LowerEquals:
                    opStr = '<=';
                    break;
                case BinaryOperator.Bigger:
                    opStr = '>';
                    break;
                case BinaryOperator.BiggerEquals:
                    opStr = '>=';
                    break;
                default:
                    throw new Error('Unknown operator ' + ast.operator);
            }
            ctx.print(ast, '(');
            ast.lhs.visitExpression(this, ctx);
            ctx.print(ast, ' ' + opStr + ' ');
            ast.rhs.visitExpression(this, ctx);
            ctx.print(ast, ')');
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitReadPropExpr',
        value: function visitReadPropExpr(ast, ctx) {
            ast.receiver.visitExpression(this, ctx);
            ctx.print(ast, '.');
            ctx.print(ast, ast.name);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitReadKeyExpr',
        value: function visitReadKeyExpr(ast, ctx) {
            ast.receiver.visitExpression(this, ctx);
            ctx.print(ast, '[');
            ast.index.visitExpression(this, ctx);
            ctx.print(ast, ']');
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitLiteralArrayExpr',
        value: function visitLiteralArrayExpr(ast, ctx) {
            var /** @type {?} */useNewLine = ast.entries.length > 1;
            ctx.print(ast, '[', useNewLine);
            ctx.incIndent();
            this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
            ctx.decIndent();
            ctx.print(ast, ']', useNewLine);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitLiteralMapExpr',
        value: function visitLiteralMapExpr(ast, ctx) {
            var _this152 = this;

            var /** @type {?} */useNewLine = ast.entries.length > 1;
            ctx.print(ast, '{', useNewLine);
            ctx.incIndent();
            this.visitAllObjects(function (entry) {
                ctx.print(ast, escapeIdentifier(entry.key, _this152._escapeDollarInStrings, entry.quoted) + ': ');
                entry.value.visitExpression(_this152, ctx);
            }, ast.entries, ctx, ',', useNewLine);
            ctx.decIndent();
            ctx.print(ast, '}', useNewLine);
            return null;
        }
        /**
         * @param {?} expressions
         * @param {?} ctx
         * @param {?} separator
         * @param {?=} newLine
         * @return {?}
         */

    }, {
        key: 'visitAllExpressions',
        value: function visitAllExpressions(expressions, ctx, separator) {
            var _this153 = this;

            var newLine = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            this.visitAllObjects(function (expr) {
                return expr.visitExpression(_this153, ctx);
            }, expressions, ctx, separator, newLine);
        }
        /**
         * @param {?} handler
         * @param {?} expressions
         * @param {?} ctx
         * @param {?} separator
         * @param {?=} newLine
         * @return {?}
         */

    }, {
        key: 'visitAllObjects',
        value: function visitAllObjects(handler, expressions, ctx, separator) {
            var newLine = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            for (var /** @type {?} */i = 0; i < expressions.length; i++) {
                if (i > 0) {
                    ctx.print(null, separator, newLine);
                }
                handler(expressions[i]);
            }
            if (newLine) {
                ctx.println();
            }
        }
        /**
         * @param {?} statements
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitAllStatements',
        value: function visitAllStatements(statements, ctx) {
            var _this154 = this;

            statements.forEach(function (stmt) {
                return stmt.visitStatement(_this154, ctx);
            });
        }
    }]);

    return AbstractEmitterVisitor;
}();
/**
 * @param {?} input
 * @param {?} escapeDollar
 * @param {?=} alwaysQuote
 * @return {?}
 */


function escapeIdentifier(input, escapeDollar) {
    var alwaysQuote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    if (isBlank(input)) {
        return null;
    }
    var /** @type {?} */body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
        if ((arguments.length <= 0 ? undefined : arguments[0]) == '$') {
            return escapeDollar ? '\\$' : '$';
        } else if ((arguments.length <= 0 ? undefined : arguments[0]) == '\n') {
            return '\\n';
        } else if ((arguments.length <= 0 ? undefined : arguments[0]) == '\r') {
            return '\\r';
        } else {
            return '\\' + (arguments.length <= 0 ? undefined : arguments[0]);
        }
    });
    var /** @type {?} */requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
    return requiresQuotes ? '\'' + body + '\'' : body;
}
/**
 * @param {?} count
 * @return {?}
 */
function _createIndent(count) {
    var /** @type {?} */res = '';
    for (var /** @type {?} */i = 0; i < count; i++) {
        res += _INDENT_WITH;
    }
    return res;
}

var /** @type {?} */_debugFilePath = '/debug/lib';
/**
 * @param {?} ast
 * @return {?}
 */
function debugOutputAstAsTypeScript(ast) {
    var /** @type {?} */converter = new _TsEmitterVisitor(_debugFilePath, {
        /**
         * @param {?} filePath
         * @param {?} containingFilePath
         * @return {?}
         */
        fileNameToModuleName: function fileNameToModuleName(filePath, containingFilePath) {
            return filePath;
        },

        /**
         * @param {?} symbol
         * @return {?}
         */
        getImportAs: function getImportAs(symbol) {
            return null;
        },

        getTypeArity: function getTypeArity(symbol) {
            return null;
        }
    });
    var /** @type {?} */ctx = EmitterVisitorContext.createRoot([]);
    var /** @type {?} */asts = Array.isArray(ast) ? ast : [ast];
    asts.forEach(function (ast) {
        if (ast instanceof Statement) {
            ast.visitStatement(converter, ctx);
        } else if (ast instanceof Expression) {
            ast.visitExpression(converter, ctx);
        } else if (ast instanceof Type$1) {
            ast.visitType(converter, ctx);
        } else {
            throw new Error('Don\'t know how to print debug info for ' + ast);
        }
    });
    return ctx.toSource();
}

var TypeScriptEmitter = function () {
    /**
     * @param {?} _importResolver
     */
    function TypeScriptEmitter(_importResolver) {
        _classCallCheck(this, TypeScriptEmitter);

        this._importResolver = _importResolver;
    }
    /**
     * @param {?} genFilePath
     * @param {?} stmts
     * @param {?} exportedVars
     * @return {?}
     */


    _createClass(TypeScriptEmitter, [{
        key: 'emitStatements',
        value: function emitStatements(genFilePath, stmts, exportedVars) {
            var _this155 = this;

            var /** @type {?} */converter = new _TsEmitterVisitor(genFilePath, this._importResolver);
            var /** @type {?} */ctx = EmitterVisitorContext.createRoot(exportedVars);
            converter.visitAllStatements(stmts, ctx);
            var /** @type {?} */srcParts = [];
            converter.reexports.forEach(function (reexports, exportedFilePath) {
                var /** @type {?} */reexportsCode = reexports.map(function (reexport) {
                    return reexport.name + ' as ' + reexport.as;
                }).join(',');
                srcParts.push('export {' + reexportsCode + '} from \'' + _this155._importResolver.fileNameToModuleName(exportedFilePath, genFilePath) + '\';');
            });
            converter.importsWithPrefixes.forEach(function (prefix, importedFilePath) {
                // Note: can't write the real word for import as it screws up system.js auto detection...
                srcParts.push('imp' + ('ort * as ' + prefix + ' from \'' + _this155._importResolver.fileNameToModuleName(importedFilePath, genFilePath) + '\';'));
            });
            srcParts.push(ctx.toSource());
            var /** @type {?} */prefixLines = converter.reexports.size + converter.importsWithPrefixes.size;
            var /** @type {?} */sm = ctx.toSourceMapGenerator(null, prefixLines).toJsComment();
            if (sm) {
                srcParts.push(sm);
            }
            return srcParts.join('\n');
        }
    }]);

    return TypeScriptEmitter;
}();

var _TsEmitterVisitor = function (_AbstractEmitterVisit) {
    _inherits(_TsEmitterVisitor, _AbstractEmitterVisit);

    /**
     * @param {?} _genFilePath
     * @param {?} _importResolver
     */
    function _TsEmitterVisitor(_genFilePath, _importResolver) {
        _classCallCheck(this, _TsEmitterVisitor);

        var _this156 = _possibleConstructorReturn(this, (_TsEmitterVisitor.__proto__ || Object.getPrototypeOf(_TsEmitterVisitor)).call(this, false));

        _this156._genFilePath = _genFilePath;
        _this156._importResolver = _importResolver;
        _this156.typeExpression = 0;
        _this156.importsWithPrefixes = new Map();
        _this156.reexports = new Map();
        return _this156;
    }
    /**
     * @param {?} t
     * @param {?} ctx
     * @param {?=} defaultType
     * @return {?}
     */


    _createClass(_TsEmitterVisitor, [{
        key: 'visitType',
        value: function visitType(t, ctx) {
            var defaultType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'any';

            if (isPresent(t)) {
                this.typeExpression++;
                t.visitType(this, ctx);
                this.typeExpression--;
            } else {
                ctx.print(null, defaultType);
            }
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitLiteralExpr',
        value: function visitLiteralExpr(ast, ctx) {
            var /** @type {?} */value = ast.value;
            if (isBlank(value) && ast.type != INFERRED_TYPE) {
                ctx.print(ast, '(' + value + ' as any)');
                return null;
            }
            return _get(_TsEmitterVisitor.prototype.__proto__ || Object.getPrototypeOf(_TsEmitterVisitor.prototype), 'visitLiteralExpr', this).call(this, ast, ctx);
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitLiteralArrayExpr',
        value: function visitLiteralArrayExpr(ast, ctx) {
            if (ast.entries.length === 0) {
                ctx.print(ast, '(');
            }
            var /** @type {?} */result = _get(_TsEmitterVisitor.prototype.__proto__ || Object.getPrototypeOf(_TsEmitterVisitor.prototype), 'visitLiteralArrayExpr', this).call(this, ast, ctx);
            if (ast.entries.length === 0) {
                ctx.print(ast, ' as any[])');
            }
            return result;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitExternalExpr',
        value: function visitExternalExpr(ast, ctx) {
            this._visitIdentifier(ast.value, ast.typeParams, ctx);
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareVarStmt',
        value: function visitDeclareVarStmt(stmt, ctx) {
            if (ctx.isExportedVar(stmt.name) && stmt.value instanceof ExternalExpr && !stmt.type) {
                // check for a reexport
                var _resolveStaticSymbol2 = this._resolveStaticSymbol(stmt.value.value),
                    name = _resolveStaticSymbol2.name,
                    filePath = _resolveStaticSymbol2.filePath,
                    members = _resolveStaticSymbol2.members;

                if (members.length === 0 && filePath !== this._genFilePath) {
                    var /** @type {?} */reexports = this.reexports.get(filePath);
                    if (!reexports) {
                        reexports = [];
                        this.reexports.set(filePath, reexports);
                    }
                    reexports.push({ name: name, as: stmt.name });
                    return null;
                }
            }
            if (ctx.isExportedVar(stmt.name)) {
                ctx.print(stmt, 'export ');
            }
            if (stmt.hasModifier(StmtModifier.Final)) {
                ctx.print(stmt, 'const');
            } else {
                ctx.print(stmt, 'var');
            }
            ctx.print(stmt, ' ' + stmt.name);
            this._printColonType(stmt.type, ctx);
            ctx.print(stmt, ' = ');
            stmt.value.visitExpression(this, ctx);
            ctx.println(stmt, ';');
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitCastExpr',
        value: function visitCastExpr(ast, ctx) {
            ctx.print(ast, '(<');
            ast.type.visitType(this, ctx);
            ctx.print(ast, '>');
            ast.value.visitExpression(this, ctx);
            ctx.print(ast, ')');
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitInstantiateExpr',
        value: function visitInstantiateExpr(ast, ctx) {
            ctx.print(ast, 'new ');
            this.typeExpression++;
            ast.classExpr.visitExpression(this, ctx);
            this.typeExpression--;
            ctx.print(ast, '(');
            this.visitAllExpressions(ast.args, ctx, ',');
            ctx.print(ast, ')');
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareClassStmt',
        value: function visitDeclareClassStmt(stmt, ctx) {
            var _this157 = this;

            ctx.pushClass(stmt);
            if (ctx.isExportedVar(stmt.name)) {
                ctx.print(stmt, 'export ');
            }
            ctx.print(stmt, 'class ' + stmt.name);
            if (isPresent(stmt.parent)) {
                ctx.print(stmt, ' extends ');
                this.typeExpression++;
                stmt.parent.visitExpression(this, ctx);
                this.typeExpression--;
            }
            ctx.println(stmt, ' {');
            ctx.incIndent();
            stmt.fields.forEach(function (field) {
                return _this157._visitClassField(field, ctx);
            });
            if (isPresent(stmt.constructorMethod)) {
                this._visitClassConstructor(stmt, ctx);
            }
            stmt.getters.forEach(function (getter) {
                return _this157._visitClassGetter(getter, ctx);
            });
            stmt.methods.forEach(function (method) {
                return _this157._visitClassMethod(method, ctx);
            });
            ctx.decIndent();
            ctx.println(stmt, '}');
            ctx.popClass();
            return null;
        }
        /**
         * @param {?} field
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitClassField',
        value: function _visitClassField(field, ctx) {
            if (field.hasModifier(StmtModifier.Private)) {
                // comment out as a workaround for #10967
                ctx.print(null, '/*private*/ ');
            }
            ctx.print(null, field.name);
            this._printColonType(field.type, ctx);
            ctx.println(null, ';');
        }
        /**
         * @param {?} getter
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitClassGetter',
        value: function _visitClassGetter(getter, ctx) {
            if (getter.hasModifier(StmtModifier.Private)) {
                ctx.print(null, 'private ');
            }
            ctx.print(null, 'get ' + getter.name + '()');
            this._printColonType(getter.type, ctx);
            ctx.println(null, ' {');
            ctx.incIndent();
            this.visitAllStatements(getter.body, ctx);
            ctx.decIndent();
            ctx.println(null, '}');
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitClassConstructor',
        value: function _visitClassConstructor(stmt, ctx) {
            ctx.print(stmt, 'constructor(');
            this._visitParams(stmt.constructorMethod.params, ctx);
            ctx.println(stmt, ') {');
            ctx.incIndent();
            this.visitAllStatements(stmt.constructorMethod.body, ctx);
            ctx.decIndent();
            ctx.println(stmt, '}');
        }
        /**
         * @param {?} method
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitClassMethod',
        value: function _visitClassMethod(method, ctx) {
            if (method.hasModifier(StmtModifier.Private)) {
                ctx.print(null, 'private ');
            }
            ctx.print(null, method.name + '(');
            this._visitParams(method.params, ctx);
            ctx.print(null, ')');
            this._printColonType(method.type, ctx, 'void');
            ctx.println(null, ' {');
            ctx.incIndent();
            this.visitAllStatements(method.body, ctx);
            ctx.decIndent();
            ctx.println(null, '}');
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitFunctionExpr',
        value: function visitFunctionExpr(ast, ctx) {
            ctx.print(ast, '(');
            this._visitParams(ast.params, ctx);
            ctx.print(ast, ')');
            this._printColonType(ast.type, ctx, 'void');
            ctx.println(ast, ' => {');
            ctx.incIndent();
            this.visitAllStatements(ast.statements, ctx);
            ctx.decIndent();
            ctx.print(ast, '}');
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareFunctionStmt',
        value: function visitDeclareFunctionStmt(stmt, ctx) {
            if (ctx.isExportedVar(stmt.name)) {
                ctx.print(stmt, 'export ');
            }
            ctx.print(stmt, 'function ' + stmt.name + '(');
            this._visitParams(stmt.params, ctx);
            ctx.print(stmt, ')');
            this._printColonType(stmt.type, ctx, 'void');
            ctx.println(stmt, ' {');
            ctx.incIndent();
            this.visitAllStatements(stmt.statements, ctx);
            ctx.decIndent();
            ctx.println(stmt, '}');
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitTryCatchStmt',
        value: function visitTryCatchStmt(stmt, ctx) {
            ctx.println(stmt, 'try {');
            ctx.incIndent();
            this.visitAllStatements(stmt.bodyStmts, ctx);
            ctx.decIndent();
            ctx.println(stmt, '} catch (' + CATCH_ERROR_VAR$1.name + ') {');
            ctx.incIndent();
            var /** @type {?} */catchStmts = [/** @type {?} */CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
            this.visitAllStatements(catchStmts, ctx);
            ctx.decIndent();
            ctx.println(stmt, '}');
            return null;
        }
        /**
         * @param {?} type
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitBuiltintType',
        value: function visitBuiltintType(type, ctx) {
            var /** @type {?} */typeStr = void 0;
            switch (type.name) {
                case BuiltinTypeName.Bool:
                    typeStr = 'boolean';
                    break;
                case BuiltinTypeName.Dynamic:
                    typeStr = 'any';
                    break;
                case BuiltinTypeName.Function:
                    typeStr = 'Function';
                    break;
                case BuiltinTypeName.Number:
                    typeStr = 'number';
                    break;
                case BuiltinTypeName.Int:
                    typeStr = 'number';
                    break;
                case BuiltinTypeName.String:
                    typeStr = 'string';
                    break;
                default:
                    throw new Error('Unsupported builtin type ' + type.name);
            }
            ctx.print(null, typeStr);
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitExpressionType',
        value: function visitExpressionType(ast, ctx) {
            ast.value.visitExpression(this, ctx);
            return null;
        }
        /**
         * @param {?} type
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitArrayType',
        value: function visitArrayType(type, ctx) {
            this.visitType(type.of, ctx);
            ctx.print(null, '[]');
            return null;
        }
        /**
         * @param {?} type
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitMapType',
        value: function visitMapType(type, ctx) {
            ctx.print(null, '{[key: string]:');
            this.visitType(type.valueType, ctx);
            ctx.print(null, '}');
            return null;
        }
        /**
         * @param {?} method
         * @return {?}
         */

    }, {
        key: 'getBuiltinMethodName',
        value: function getBuiltinMethodName(method) {
            var /** @type {?} */name = void 0;
            switch (method) {
                case BuiltinMethod.ConcatArray:
                    name = 'concat';
                    break;
                case BuiltinMethod.SubscribeObservable:
                    name = 'subscribe';
                    break;
                case BuiltinMethod.Bind:
                    name = 'bind';
                    break;
                default:
                    throw new Error('Unknown builtin method: ' + method);
            }
            return name;
        }
        /**
         * @param {?} params
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitParams',
        value: function _visitParams(params, ctx) {
            var _this158 = this;

            this.visitAllObjects(function (param) {
                ctx.print(null, param.name);
                _this158._printColonType(param.type, ctx);
            }, params, ctx, ',');
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: '_resolveStaticSymbol',
        value: function _resolveStaticSymbol(value) {
            var /** @type {?} */reference = value.reference;
            if (!(reference instanceof StaticSymbol)) {
                throw new Error('Internal error: unknown identifier ' + JSON.stringify(value));
            }
            var /** @type {?} */arity = this._importResolver.getTypeArity(reference) || undefined;
            var /** @type {?} */importReference = this._importResolver.getImportAs(reference) || reference;
            return {
                name: importReference.name,
                filePath: importReference.filePath,
                members: importReference.members, arity: arity
            };
        }
        /**
         * @param {?} value
         * @param {?} typeParams
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitIdentifier',
        value: function _visitIdentifier(value, typeParams, ctx) {
            var _this159 = this;

            var _resolveStaticSymbol3 = this._resolveStaticSymbol(value),
                name = _resolveStaticSymbol3.name,
                filePath = _resolveStaticSymbol3.filePath,
                members = _resolveStaticSymbol3.members,
                arity = _resolveStaticSymbol3.arity;

            if (filePath != this._genFilePath) {
                var /** @type {?} */prefix = this.importsWithPrefixes.get(filePath);
                if (isBlank(prefix)) {
                    prefix = 'import' + this.importsWithPrefixes.size;
                    this.importsWithPrefixes.set(filePath, prefix);
                }
                ctx.print(null, prefix + '.');
            }
            if (members.length) {
                ctx.print(null, name);
                ctx.print(null, '.');
                ctx.print(null, members.join('.'));
            } else {
                ctx.print(null, name);
            }
            if (this.typeExpression > 0) {
                // If we are in a type expression that refers to a generic type then supply
                // the required type parameters. If there were not enough type parameters
                // supplied, supply any as the type. Outside a type expression the reference
                // should not supply type parameters and be treated as a simple value reference
                // to the constructor function itself.
                var /** @type {?} */suppliedParameters = typeParams && typeParams.length || 0;
                var /** @type {?} */additionalParameters = (arity || 0) - suppliedParameters;
                if (suppliedParameters > 0 || additionalParameters > 0) {
                    ctx.print(null, '<');
                    if (suppliedParameters > 0) {
                        this.visitAllObjects(function (type) {
                            return type.visitType(_this159, ctx);
                        }, typeParams, ctx, ',');
                    }
                    if (additionalParameters > 0) {
                        for (var /** @type {?} */i = 0; i < additionalParameters; i++) {
                            if (i > 0 || suppliedParameters > 0) ctx.print(null, ',');
                            ctx.print(null, 'any');
                        }
                    }
                    ctx.print(null, '>');
                }
            }
        }
        /**
         * @param {?} type
         * @param {?} ctx
         * @param {?=} defaultType
         * @return {?}
         */

    }, {
        key: '_printColonType',
        value: function _printColonType(type, ctx, defaultType) {
            if (type !== INFERRED_TYPE) {
                ctx.print(null, ':');
                this.visitType(type, ctx, defaultType);
            }
        }
    }]);

    return _TsEmitterVisitor;
}(AbstractEmitterVisitor);

// =================================================================================================
// =================================================================================================
// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
// =================================================================================================
// =================================================================================================
//
//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
//                               Reach out to mprobst for details.
//
// =================================================================================================
/** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */


var /** @type {?} */SECURITY_SCHEMA = {};
/**
 * @param {?} ctx
 * @param {?} specs
 * @return {?}
 */
function registerContext(ctx, specs) {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
        for (var _iterator4 = specs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var spec = _step4.value;

            SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
        }
    } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
            }
        } finally {
            if (_didIteratorError4) {
                throw _iteratorError4;
            }
        }
    }
}
// Case is insignificant below, all element and attribute names are lower-cased for lookup.
registerContext(__WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"].HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);
registerContext(__WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"].STYLE, ['*|style']);
// NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
registerContext(__WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"].URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);
registerContext(__WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"].RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);

var /** @type {?} */BOOLEAN = 'boolean';
var /** @type {?} */NUMBER = 'number';
var /** @type {?} */STRING = 'string';
var /** @type {?} */OBJECT = 'object';
/**
 * This array represents the DOM schema. It encodes inheritance, properties, and events.
 *
 * ## Overview
 *
 * Each line represents one kind of element. The `element_inheritance` and properties are joined
 * using `element_inheritance|properties` syntax.
 *
 * ## Element Inheritance
 *
 * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
 * Here the individual elements are separated by `,` (commas). Every element in the list
 * has identical properties.
 *
 * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
 * specified then `""` (blank) element is assumed.
 *
 * NOTE: The blank element inherits from root `[Element]` element, the super element of all
 * elements.
 *
 * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
 *
 * ## Properties
 *
 * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
 * by a special character designating its type:
 *
 * - (no prefix): property is a string.
 * - `*`: property represents an event.
 * - `!`: property is a boolean.
 * - `#`: property is a number.
 * - `%`: property is an object.
 *
 * ## Query
 *
 * The class creates an internal squas representation which allows to easily answer the query of
 * if a given property exist on a given element.
 *
 * NOTE: We don't yet support querying for types or events.
 * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
 *       see dom_element_schema_registry_spec.ts
 */
// =================================================================================================
// =================================================================================================
// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
// =================================================================================================
// =================================================================================================
//
//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
//
// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
// dom_security_schema.ts. Reach out to mprobst & rjamet for details.
//
// =================================================================================================
var /** @type {?} */SCHEMA = ['[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop', '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume', ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username', 'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username', 'audio^media|', 'br^[HTMLElement]|clear', 'base^[HTMLElement]|href,target', 'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^[HTMLElement]|#height,#width', 'content^[HTMLElement]|select', 'dl^[HTMLElement]|!compact', 'datalist^[HTMLElement]|', 'details^[HTMLElement]|!open', 'dialog^[HTMLElement]|!open,returnValue', 'dir^[HTMLElement]|!compact', 'div^[HTMLElement]|align', 'embed^[HTMLElement]|align,height,name,src,type,width', 'fieldset^[HTMLElement]|!disabled,name', 'font^[HTMLElement]|color,face,size', 'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^[HTMLElement]|align,color,!noShade,size,width', 'head^[HTMLElement]|', 'h1,h2,h3,h4,h5,h6^[HTMLElement]|align', 'html^[HTMLElement]|version', 'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name', 'li^[HTMLElement]|type,#value', 'label^[HTMLElement]|htmlFor', 'legend^[HTMLElement]|align', 'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type', 'map^[HTMLElement]|name', 'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^[HTMLElement]|!compact', 'meta^[HTMLElement]|content,httpEquiv,name,scheme', 'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value', 'ins,del^[HTMLElement]|cite,dateTime', 'ol^[HTMLElement]|!compact,!reversed,#start,type', 'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^[HTMLElement]|!disabled,label', 'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value', 'output^[HTMLElement]|defaultValue,%htmlFor,name,value', 'p^[HTMLElement]|align', 'param^[HTMLElement]|name,type,value,valueType', 'picture^[HTMLElement]|', 'pre^[HTMLElement]|#width', 'progress^[HTMLElement]|#max,#value', 'q,blockquote,cite^[HTMLElement]|', 'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow^[HTMLElement]|', 'source^[HTMLElement]|media,sizes,src,srcset,type', 'span^[HTMLElement]|', 'style^[HTMLElement]|!disabled,media,type', 'caption^[HTMLElement]|align', 'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width', 'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign', 'template^[HTMLElement]|', 'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title^[HTMLElement]|text', 'track^[HTMLElement]|!default,kind,label,src,srclang', 'ul^[HTMLElement]|!compact,type', 'unknown^[HTMLElement]|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:cursor^:svg:|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan', 'data^[HTMLElement]|value', 'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default', 'summary^[HTMLElement]|', 'time^[HTMLElement]|dateTime'];
var /** @type {?} */_ATTR_TO_PROP = {
    'class': 'className',
    'for': 'htmlFor',
    'formaction': 'formAction',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
};

var DomElementSchemaRegistry = function (_ElementSchemaRegistr) {
    _inherits(DomElementSchemaRegistry, _ElementSchemaRegistr);

    function DomElementSchemaRegistry() {
        _classCallCheck(this, DomElementSchemaRegistry);

        var _this160 = _possibleConstructorReturn(this, (DomElementSchemaRegistry.__proto__ || Object.getPrototypeOf(DomElementSchemaRegistry)).call(this));

        _this160._schema = {};
        SCHEMA.forEach(function (encodedType) {
            var type = {};

            var _encodedType$split = encodedType.split('|'),
                _encodedType$split2 = _slicedToArray(_encodedType$split, 2),
                strType = _encodedType$split2[0],
                strProperties = _encodedType$split2[1];

            var properties = strProperties.split(',');

            var _strType$split = strType.split('^'),
                _strType$split2 = _slicedToArray(_strType$split, 2),
                typeNames = _strType$split2[0],
                superName = _strType$split2[1];

            typeNames.split(',').forEach(function (tag) {
                return _this160._schema[tag.toLowerCase()] = type;
            });
            var superType = superName && _this160._schema[superName.toLowerCase()];
            if (superType) {
                Object.keys(superType).forEach(function (prop) {
                    type[prop] = superType[prop];
                });
            }
            properties.forEach(function (property) {
                if (property.length > 0) {
                    switch (property[0]) {
                        case '*':
                            // We don't yet support events.
                            // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
                            // will
                            // almost certainly introduce bad XSS vulnerabilities.
                            // type[property.substring(1)] = EVENT;
                            break;
                        case '!':
                            type[property.substring(1)] = BOOLEAN;
                            break;
                        case '#':
                            type[property.substring(1)] = NUMBER;
                            break;
                        case '%':
                            type[property.substring(1)] = OBJECT;
                            break;
                        default:
                            type[property] = STRING;
                    }
                }
            });
        });
        return _this160;
    }
    /**
     * @param {?} tagName
     * @param {?} propName
     * @param {?} schemaMetas
     * @return {?}
     */


    _createClass(DomElementSchemaRegistry, [{
        key: 'hasProperty',
        value: function hasProperty(tagName, propName, schemaMetas) {
            if (schemaMetas.some(function (schema) {
                return schema.name === __WEBPACK_IMPORTED_MODULE_0__angular_core__["NO_ERRORS_SCHEMA"].name;
            })) {
                return true;
            }
            if (tagName.indexOf('-') > -1) {
                if (tagName === 'ng-container' || tagName === 'ng-content') {
                    return false;
                }
                if (schemaMetas.some(function (schema) {
                    return schema.name === __WEBPACK_IMPORTED_MODULE_0__angular_core__["CUSTOM_ELEMENTS_SCHEMA"].name;
                })) {
                    // Can't tell now as we don't know which properties a custom element will get
                    // once it is instantiated
                    return true;
                }
            }
            var /** @type {?} */elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
            return !!elementProperties[propName];
        }
        /**
         * @param {?} tagName
         * @param {?} schemaMetas
         * @return {?}
         */

    }, {
        key: 'hasElement',
        value: function hasElement(tagName, schemaMetas) {
            if (schemaMetas.some(function (schema) {
                return schema.name === __WEBPACK_IMPORTED_MODULE_0__angular_core__["NO_ERRORS_SCHEMA"].name;
            })) {
                return true;
            }
            if (tagName.indexOf('-') > -1) {
                if (tagName === 'ng-container' || tagName === 'ng-content') {
                    return true;
                }
                if (schemaMetas.some(function (schema) {
                    return schema.name === __WEBPACK_IMPORTED_MODULE_0__angular_core__["CUSTOM_ELEMENTS_SCHEMA"].name;
                })) {
                    // Allow any custom elements
                    return true;
                }
            }
            return !!this._schema[tagName.toLowerCase()];
        }
        /**
         * securityContext returns the security context for the given property on the given DOM tag.
         *
         * Tag and property name are statically known and cannot change at runtime, i.e. it is not
         * possible to bind a value into a changing attribute or tag name.
         *
         * The filtering is white list based. All attributes in the schema above are assumed to have the
         * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
         * attack vectors are assigned their appropriate context.
         * @param {?} tagName
         * @param {?} propName
         * @param {?} isAttribute
         * @return {?}
         */

    }, {
        key: 'securityContext',
        value: function securityContext(tagName, propName, isAttribute) {
            if (isAttribute) {
                // NB: For security purposes, use the mapped property name, not the attribute name.
                propName = this.getMappedPropName(propName);
            }
            // Make sure comparisons are case insensitive, so that case differences between attribute and
            // property names do not have a security impact.
            tagName = tagName.toLowerCase();
            propName = propName.toLowerCase();
            var /** @type {?} */ctx = SECURITY_SCHEMA[tagName + '|' + propName];
            if (ctx) {
                return ctx;
            }
            ctx = SECURITY_SCHEMA['*|' + propName];
            return ctx ? ctx : __WEBPACK_IMPORTED_MODULE_0__angular_core__["SecurityContext"].NONE;
        }
        /**
         * @param {?} propName
         * @return {?}
         */

    }, {
        key: 'getMappedPropName',
        value: function getMappedPropName(propName) {
            return _ATTR_TO_PROP[propName] || propName;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'getDefaultComponentElementName',
        value: function getDefaultComponentElementName() {
            return 'ng-component';
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'validateProperty',
        value: function validateProperty(name) {
            if (name.toLowerCase().startsWith('on')) {
                var /** @type {?} */msg = 'Binding to event property \'' + name + '\' is disallowed for security reasons, ' + ('please use (' + name.slice(2) + ')=...') + ('\nIf \'' + name + '\' is a directive input, make sure the directive is imported by the') + ' current module.';
                return { error: true, msg: msg };
            } else {
                return { error: false };
            }
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'validateAttribute',
        value: function validateAttribute(name) {
            if (name.toLowerCase().startsWith('on')) {
                var /** @type {?} */msg = 'Binding to event attribute \'' + name + '\' is disallowed for security reasons, ' + ('please use (' + name.slice(2) + ')=...');
                return { error: true, msg: msg };
            } else {
                return { error: false };
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'allKnownElementNames',
        value: function allKnownElementNames() {
            return Object.keys(this._schema);
        }
        /**
         * @param {?} propName
         * @return {?}
         */

    }, {
        key: 'normalizeAnimationStyleProperty',
        value: function normalizeAnimationStyleProperty(propName) {
            return dashCaseToCamelCase(propName);
        }
        /**
         * @param {?} camelCaseProp
         * @param {?} userProvidedProp
         * @param {?} val
         * @return {?}
         */

    }, {
        key: 'normalizeAnimationStyleValue',
        value: function normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {
            var /** @type {?} */unit = '';
            var /** @type {?} */strVal = val.toString().trim();
            var /** @type {?} */errorMsg = null;
            if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
                if (typeof val === 'number') {
                    unit = 'px';
                } else {
                    var /** @type {?} */valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
                    if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                        errorMsg = 'Please provide a CSS unit value for ' + userProvidedProp + ':' + val;
                    }
                }
            }
            return { error: errorMsg, value: strVal + unit };
        }
    }]);

    return DomElementSchemaRegistry;
}(ElementSchemaRegistry);

DomElementSchemaRegistry.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
DomElementSchemaRegistry.ctorParameters = function () {
    return [];
};
/**
 * @param {?} prop
 * @return {?}
 */
function _isPixelDimensionStyle(prop) {
    switch (prop) {
        case 'width':
        case 'height':
        case 'minWidth':
        case 'minHeight':
        case 'maxWidth':
        case 'maxHeight':
        case 'left':
        case 'top':
        case 'bottom':
        case 'right':
        case 'fontSize':
        case 'outlineWidth':
        case 'outlineOffset':
        case 'paddingTop':
        case 'paddingLeft':
        case 'paddingBottom':
        case 'paddingRight':
        case 'marginTop':
        case 'marginLeft':
        case 'marginBottom':
        case 'marginRight':
        case 'borderRadius':
        case 'borderWidth':
        case 'borderTopWidth':
        case 'borderLeftWidth':
        case 'borderRightWidth':
        case 'borderBottomWidth':
        case 'textIndent':
            return true;
        default:
            return false;
    }
}

var ShadowCss = function () {
    function ShadowCss() {
        _classCallCheck(this, ShadowCss);

        this.strictStyling = true;
    }
    /**
     * @param {?} cssText
     * @param {?} selector
     * @param {?=} hostSelector
     * @return {?}
     */


    _createClass(ShadowCss, [{
        key: 'shimCssText',
        value: function shimCssText(cssText, selector) {
            var hostSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

            var /** @type {?} */sourceMappingUrl = extractSourceMappingUrl(cssText);
            cssText = stripComments(cssText);
            cssText = this._insertDirectives(cssText);
            return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
        }
        /**
         * @param {?} cssText
         * @return {?}
         */

    }, {
        key: '_insertDirectives',
        value: function _insertDirectives(cssText) {
            cssText = this._insertPolyfillDirectivesInCssText(cssText);
            return this._insertPolyfillRulesInCssText(cssText);
        }
        /**
         * @param {?} cssText
         * @return {?}
         */

    }, {
        key: '_insertPolyfillDirectivesInCssText',
        value: function _insertPolyfillDirectivesInCssText(cssText) {
            // Difference with webcomponents.js: does not handle comments
            return cssText.replace(_cssContentNextSelectorRe, function () {
                return (arguments.length <= 2 ? undefined : arguments[2]) + '{';
            });
        }
        /**
         * @param {?} cssText
         * @return {?}
         */

    }, {
        key: '_insertPolyfillRulesInCssText',
        value: function _insertPolyfillRulesInCssText(cssText) {
            // Difference with webcomponents.js: does not handle comments
            return cssText.replace(_cssContentRuleRe, function () {
                for (var _len2 = arguments.length, m = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    m[_key2] = arguments[_key2];
                }

                var /** @type {?} */rule = m[0].replace(m[1], '').replace(m[2], '');
                return m[4] + rule;
            });
        }
        /**
         * @param {?} cssText
         * @param {?} scopeSelector
         * @param {?} hostSelector
         * @return {?}
         */

    }, {
        key: '_scopeCssText',
        value: function _scopeCssText(cssText, scopeSelector, hostSelector) {
            var /** @type {?} */unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
            // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
            cssText = this._insertPolyfillHostInCssText(cssText);
            cssText = this._convertColonHost(cssText);
            cssText = this._convertColonHostContext(cssText);
            cssText = this._convertShadowDOMSelectors(cssText);
            if (scopeSelector) {
                cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
            }
            cssText = cssText + '\n' + unscopedRules;
            return cssText.trim();
        }
        /**
         * @param {?} cssText
         * @return {?}
         */

    }, {
        key: '_extractUnscopedRulesFromCssText',
        value: function _extractUnscopedRulesFromCssText(cssText) {
            // Difference with webcomponents.js: does not handle comments
            var /** @type {?} */r = '';
            var /** @type {?} */m = void 0;
            _cssContentUnscopedRuleRe.lastIndex = 0;
            while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
                var /** @type {?} */rule = m[0].replace(m[2], '').replace(m[1], m[4]);
                r += rule + '\n\n';
            }
            return r;
        }
        /**
         * @param {?} cssText
         * @return {?}
         */

    }, {
        key: '_convertColonHost',
        value: function _convertColonHost(cssText) {
            return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
        }
        /**
         * @param {?} cssText
         * @return {?}
         */

    }, {
        key: '_convertColonHostContext',
        value: function _convertColonHostContext(cssText) {
            return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
        }
        /**
         * @param {?} cssText
         * @param {?} regExp
         * @param {?} partReplacer
         * @return {?}
         */

    }, {
        key: '_convertColonRule',
        value: function _convertColonRule(cssText, regExp, partReplacer) {
            // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
            return cssText.replace(regExp, function () {
                for (var _len3 = arguments.length, m = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    m[_key3] = arguments[_key3];
                }

                if (m[2]) {
                    var /** @type {?} */parts = m[2].split(',');
                    var /** @type {?} */r = [];
                    for (var /** @type {?} */i = 0; i < parts.length; i++) {
                        var /** @type {?} */p = parts[i].trim();
                        if (!p) break;
                        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
                    }
                    return r.join(',');
                } else {
                    return _polyfillHostNoCombinator + m[3];
                }
            });
        }
        /**
         * @param {?} host
         * @param {?} part
         * @param {?} suffix
         * @return {?}
         */

    }, {
        key: '_colonHostContextPartReplacer',
        value: function _colonHostContextPartReplacer(host, part, suffix) {
            if (part.indexOf(_polyfillHost) > -1) {
                return this._colonHostPartReplacer(host, part, suffix);
            } else {
                return host + part + suffix + ', ' + part + ' ' + host + suffix;
            }
        }
        /**
         * @param {?} host
         * @param {?} part
         * @param {?} suffix
         * @return {?}
         */

    }, {
        key: '_colonHostPartReplacer',
        value: function _colonHostPartReplacer(host, part, suffix) {
            return host + part.replace(_polyfillHost, '') + suffix;
        }
        /**
         * @param {?} cssText
         * @return {?}
         */

    }, {
        key: '_convertShadowDOMSelectors',
        value: function _convertShadowDOMSelectors(cssText) {
            return _shadowDOMSelectorsRe.reduce(function (result, pattern) {
                return result.replace(pattern, ' ');
            }, cssText);
        }
        /**
         * @param {?} cssText
         * @param {?} scopeSelector
         * @param {?} hostSelector
         * @return {?}
         */

    }, {
        key: '_scopeSelectors',
        value: function _scopeSelectors(cssText, scopeSelector, hostSelector) {
            var _this161 = this;

            return processRules(cssText, function (rule) {
                var /** @type {?} */selector = rule.selector;
                var /** @type {?} */content = rule.content;
                if (rule.selector[0] != '@') {
                    selector = _this161._scopeSelector(rule.selector, scopeSelector, hostSelector, _this161.strictStyling);
                } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
                    content = _this161._scopeSelectors(rule.content, scopeSelector, hostSelector);
                }
                return new CssRule(selector, content);
            });
        }
        /**
         * @param {?} selector
         * @param {?} scopeSelector
         * @param {?} hostSelector
         * @param {?} strict
         * @return {?}
         */

    }, {
        key: '_scopeSelector',
        value: function _scopeSelector(selector, scopeSelector, hostSelector, strict) {
            var _this162 = this;

            return selector.split(',').map(function (part) {
                return part.trim().split(_shadowDeepSelectors);
            }).map(function (deepParts) {
                var _deepParts = _toArray(deepParts),
                    shallowPart = _deepParts[0],
                    otherParts = _deepParts.slice(1);

                var /** @type {?} */applyScope = function applyScope(shallowPart) {
                    if (_this162._selectorNeedsScoping(shallowPart, scopeSelector)) {
                        return strict ? _this162._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this162._applySelectorScope(shallowPart, scopeSelector, hostSelector);
                    } else {
                        return shallowPart;
                    }
                };
                return [applyScope(shallowPart)].concat(_toConsumableArray(otherParts)).join(' ');
            }).join(', ');
        }
        /**
         * @param {?} selector
         * @param {?} scopeSelector
         * @return {?}
         */

    }, {
        key: '_selectorNeedsScoping',
        value: function _selectorNeedsScoping(selector, scopeSelector) {
            var /** @type {?} */re = this._makeScopeMatcher(scopeSelector);
            return !re.test(selector);
        }
        /**
         * @param {?} scopeSelector
         * @return {?}
         */

    }, {
        key: '_makeScopeMatcher',
        value: function _makeScopeMatcher(scopeSelector) {
            var /** @type {?} */lre = /\[/g;
            var /** @type {?} */rre = /\]/g;
            scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
            return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
        }
        /**
         * @param {?} selector
         * @param {?} scopeSelector
         * @param {?} hostSelector
         * @return {?}
         */

    }, {
        key: '_applySelectorScope',
        value: function _applySelectorScope(selector, scopeSelector, hostSelector) {
            // Difference from webcomponents.js: scopeSelector could not be an array
            return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
        }
        /**
         * @param {?} selector
         * @param {?} scopeSelector
         * @param {?} hostSelector
         * @return {?}
         */

    }, {
        key: '_applySimpleSelectorScope',
        value: function _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
            // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
            _polyfillHostRe.lastIndex = 0;
            if (_polyfillHostRe.test(selector)) {
                var /** @type {?} */replaceBy = this.strictStyling ? '[' + hostSelector + ']' : scopeSelector;
                return selector.replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
                    return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
                        return before + replaceBy + colon + after;
                    });
                }).replace(_polyfillHostRe, replaceBy + ' ');
            }
            return scopeSelector + ' ' + selector;
        }
        /**
         * @param {?} selector
         * @param {?} scopeSelector
         * @param {?} hostSelector
         * @return {?}
         */

    }, {
        key: '_applyStrictSelectorScope',
        value: function _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {
            var _this163 = this;

            var /** @type {?} */isRe = /\[is=([^\]]*)\]/g;
            scopeSelector = scopeSelector.replace(isRe, function (_) {
                return arguments.length <= 1 ? undefined : arguments[1];
            });
            var /** @type {?} */attrName = '[' + scopeSelector + ']';
            var /** @type {?} */_scopeSelectorPart = function _scopeSelectorPart(p) {
                var /** @type {?} */scopedP = p.trim();
                if (!scopedP) {
                    return '';
                }
                if (p.indexOf(_polyfillHostNoCombinator) > -1) {
                    scopedP = _this163._applySimpleSelectorScope(p, scopeSelector, hostSelector);
                } else {
                    // remove :host since it should be unnecessary
                    var /** @type {?} */t = p.replace(_polyfillHostRe, '');
                    if (t.length > 0) {
                        var /** @type {?} */matches = t.match(/([^:]*)(:*)(.*)/);
                        if (matches) {
                            scopedP = matches[1] + attrName + matches[2] + matches[3];
                        }
                    }
                }
                return scopedP;
            };
            var /** @type {?} */safeContent = new SafeSelector(selector);
            selector = safeContent.content();
            var /** @type {?} */scopedSelector = '';
            var /** @type {?} */startIndex = 0;
            var /** @type {?} */res = void 0;
            var /** @type {?} */sep = /( |>|\+|~(?!=))\s*/g;
            var /** @type {?} */scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
            while ((res = sep.exec(selector)) !== null) {
                var /** @type {?} */separator = res[1];
                var /** @type {?} */part = selector.slice(startIndex, res.index).trim();
                // if a selector appears before :host-context it should not be shimmed as it
                // matches on ancestor elements and not on elements in the host's shadow
                var /** @type {?} */scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
                scopedSelector += scopedPart + ' ' + separator + ' ';
                startIndex = sep.lastIndex;
            }
            scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
            // replace the placeholders with their original values
            return safeContent.restore(scopedSelector);
        }
        /**
         * @param {?} selector
         * @return {?}
         */

    }, {
        key: '_insertPolyfillHostInCssText',
        value: function _insertPolyfillHostInCssText(selector) {
            return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
        }
    }]);

    return ShadowCss;
}();

var SafeSelector = function () {
    /**
     * @param {?} selector
     */
    function SafeSelector(selector) {
        var _this164 = this;

        _classCallCheck(this, SafeSelector);

        this.placeholders = [];
        this.index = 0;
        // Replaces attribute selectors with placeholders.
        // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
        selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
            var replaceBy = '__ph-' + _this164.index + '__';
            _this164.placeholders.push(keep);
            _this164.index++;
            return replaceBy;
        });
        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
        // WS and "+" would otherwise be interpreted as selector separators.
        this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
            var replaceBy = '__ph-' + _this164.index + '__';
            _this164.placeholders.push(exp);
            _this164.index++;
            return pseudo + replaceBy;
        });
    }

    _createClass(SafeSelector, [{
        key: 'restore',

        /**
         * @param {?} content
         * @return {?}
         */
        value: function restore(content) {
            var _this165 = this;

            return content.replace(/__ph-(\d+)__/g, function (ph, index) {
                return _this165.placeholders[+index];
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: 'content',
        value: function content() {
            return this._content;
        }
    }]);

    return SafeSelector;
}();

var /** @type {?} */_cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
var /** @type {?} */_cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var /** @type {?} */_cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
var /** @type {?} */_polyfillHost = '-shadowcsshost';
// note: :host-context pre-processed to -shadowcsshostcontext.
var /** @type {?} */_polyfillHostContext = '-shadowcsscontext';
var /** @type {?} */_parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
var /** @type {?} */_cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
var /** @type {?} */_cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
var /** @type {?} */_polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
var /** @type {?} */_polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
var /** @type {?} */_shadowDOMSelectorsRe = [/::shadow/g, /::content/g,
// Deprecated selectors
/\/shadow-deep\//g, /\/shadow\//g];
var /** @type {?} */_shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
var /** @type {?} */_selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
var /** @type {?} */_polyfillHostRe = /-shadowcsshost/gim;
var /** @type {?} */_colonHostRe = /:host/gim;
var /** @type {?} */_colonHostContextRe = /:host-context/gim;
var /** @type {?} */_commentRe = /\/\*\s*[\s\S]*?\*\//g;
/**
 * @param {?} input
 * @return {?}
 */
function stripComments(input) {
    return input.replace(_commentRe, '');
}
// all comments except inline source mapping
var /** @type {?} */_sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
/**
 * @param {?} input
 * @return {?}
 */
function extractSourceMappingUrl(input) {
    var /** @type {?} */matcher = input.match(_sourceMappingUrlRe);
    return matcher ? matcher[0] : '';
}
var /** @type {?} */_ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
var /** @type {?} */_curlyRe = /([{}])/g;
var /** @type {?} */OPEN_CURLY = '{';
var /** @type {?} */CLOSE_CURLY = '}';
var /** @type {?} */BLOCK_PLACEHOLDER = '%BLOCK%';

var CssRule =
/**
 * @param {?} selector
 * @param {?} content
 */
function CssRule(selector, content) {
    _classCallCheck(this, CssRule);

    this.selector = selector;
    this.content = content;
};
/**
 * @param {?} input
 * @param {?} ruleCallback
 * @return {?}
 */


function processRules(input, ruleCallback) {
    var /** @type {?} */inputWithEscapedBlocks = escapeBlocks(input);
    var /** @type {?} */nextBlockIndex = 0;
    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
        var /** @type {?} */selector = arguments.length <= 2 ? undefined : arguments[2];
        var /** @type {?} */content = '';
        var /** @type {?} */suffix = arguments.length <= 4 ? undefined : arguments[4];
        var /** @type {?} */contentPrefix = '';
        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
            contentPrefix = '{';
        }
        var /** @type {?} */rule = ruleCallback(new CssRule(selector, content));
        return '' + (arguments.length <= 1 ? undefined : arguments[1]) + rule.selector + (arguments.length <= 3 ? undefined : arguments[3]) + contentPrefix + rule.content + suffix;
    });
}

var StringWithEscapedBlocks =
/**
 * @param {?} escapedString
 * @param {?} blocks
 */
function StringWithEscapedBlocks(escapedString, blocks) {
    _classCallCheck(this, StringWithEscapedBlocks);

    this.escapedString = escapedString;
    this.blocks = blocks;
};
/**
 * @param {?} input
 * @return {?}
 */


function escapeBlocks(input) {
    var /** @type {?} */inputParts = input.split(_curlyRe);
    var /** @type {?} */resultParts = [];
    var /** @type {?} */escapedBlocks = [];
    var /** @type {?} */bracketCount = 0;
    var /** @type {?} */currentBlockParts = [];
    for (var /** @type {?} */partIndex = 0; partIndex < inputParts.length; partIndex++) {
        var /** @type {?} */part = inputParts[partIndex];
        if (part == CLOSE_CURLY) {
            bracketCount--;
        }
        if (bracketCount > 0) {
            currentBlockParts.push(part);
        } else {
            if (currentBlockParts.length > 0) {
                escapedBlocks.push(currentBlockParts.join(''));
                resultParts.push(BLOCK_PLACEHOLDER);
                currentBlockParts = [];
            }
            resultParts.push(part);
        }
        if (part == OPEN_CURLY) {
            bracketCount++;
        }
    }
    if (currentBlockParts.length > 0) {
        escapedBlocks.push(currentBlockParts.join(''));
        resultParts.push(BLOCK_PLACEHOLDER);
    }
    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
}

var /** @type {?} */COMPONENT_VARIABLE = '%COMP%';
var /** @type {?} */HOST_ATTR = '_nghost-' + COMPONENT_VARIABLE;
var /** @type {?} */CONTENT_ATTR = '_ngcontent-' + COMPONENT_VARIABLE;

var StylesCompileDependency =
/**
 * @param {?} name
 * @param {?} moduleUrl
 * @param {?} isShimmed
 * @param {?} valuePlaceholder
 */
function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {
    _classCallCheck(this, StylesCompileDependency);

    this.name = name;
    this.moduleUrl = moduleUrl;
    this.isShimmed = isShimmed;
    this.valuePlaceholder = valuePlaceholder;
};

var StylesCompileResult =
/**
 * @param {?} componentStylesheet
 * @param {?} externalStylesheets
 */
function StylesCompileResult(componentStylesheet, externalStylesheets) {
    _classCallCheck(this, StylesCompileResult);

    this.componentStylesheet = componentStylesheet;
    this.externalStylesheets = externalStylesheets;
};

var CompiledStylesheet =
/**
 * @param {?} statements
 * @param {?} stylesVar
 * @param {?} dependencies
 * @param {?} isShimmed
 * @param {?} meta
 */
function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
    _classCallCheck(this, CompiledStylesheet);

    this.statements = statements;
    this.stylesVar = stylesVar;
    this.dependencies = dependencies;
    this.isShimmed = isShimmed;
    this.meta = meta;
};

var StyleCompiler = function () {
    /**
     * @param {?} _urlResolver
     */
    function StyleCompiler(_urlResolver) {
        _classCallCheck(this, StyleCompiler);

        this._urlResolver = _urlResolver;
        this._shadowCss = new ShadowCss();
    }
    /**
     * @param {?} comp
     * @return {?}
     */


    _createClass(StyleCompiler, [{
        key: 'compileComponent',
        value: function compileComponent(comp) {
            var _this166 = this;

            var /** @type {?} */externalStylesheets = [];
            var /** @type {?} */componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
                styles: comp.template.styles,
                styleUrls: comp.template.styleUrls,
                moduleUrl: identifierModuleUrl(comp.type)
            }), true);
            comp.template.externalStylesheets.forEach(function (stylesheetMeta) {
                var /** @type {?} */compiledStylesheet = _this166._compileStyles(comp, stylesheetMeta, false);
                externalStylesheets.push(compiledStylesheet);
            });
            return new StylesCompileResult(componentStylesheet, externalStylesheets);
        }
        /**
         * @param {?} comp
         * @param {?} stylesheet
         * @param {?} isComponentStylesheet
         * @return {?}
         */

    }, {
        key: '_compileStyles',
        value: function _compileStyles(comp, stylesheet, isComponentStylesheet) {
            var _this167 = this;

            var /** @type {?} */shim = comp.template.encapsulation === __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].Emulated;
            var /** @type {?} */styleExpressions = stylesheet.styles.map(function (plainStyle) {
                return literal(_this167._shimIfNeeded(plainStyle, shim));
            });
            var /** @type {?} */dependencies = [];
            for (var /** @type {?} */i = 0; i < stylesheet.styleUrls.length; i++) {
                var /** @type {?} */identifier = { reference: null };
                dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));
                styleExpressions.push(new ExternalExpr(identifier));
            }
            // styles variable contains plain strings and arrays of other styles arrays (recursive),
            // so we set its type to dynamic.
            var /** @type {?} */stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
            var /** @type {?} */stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
            return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
        }
        /**
         * @param {?} style
         * @param {?} shim
         * @return {?}
         */

    }, {
        key: '_shimIfNeeded',
        value: function _shimIfNeeded(style, shim) {
            return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
        }
    }]);

    return StyleCompiler;
}();

StyleCompiler.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
StyleCompiler.ctorParameters = function () {
    return [{ type: UrlResolver }];
};
/**
 * @param {?} component
 * @return {?}
 */
function getStylesVarName(component) {
    var /** @type {?} */result = 'styles';
    if (component) {
        result += '_' + identifierName(component.type);
    }
    return result;
}

var EventHandlerVars = function EventHandlerVars() {
    _classCallCheck(this, EventHandlerVars);
};

EventHandlerVars.event = variable('$event');

var ConvertActionBindingResult =
/**
 * @param {?} stmts
 * @param {?} allowDefault
 */
function ConvertActionBindingResult(stmts, allowDefault) {
    _classCallCheck(this, ConvertActionBindingResult);

    this.stmts = stmts;
    this.allowDefault = allowDefault;
};
/**
 * Converts the given expression AST into an executable output AST, assuming the expression is
 * used in an action binding (e.g. an event handler).
 * @param {?} localResolver
 * @param {?} implicitReceiver
 * @param {?} action
 * @param {?} bindingId
 * @return {?}
 */


function convertActionBinding(localResolver, implicitReceiver, action, bindingId) {
    if (!localResolver) {
        localResolver = new DefaultLocalResolver();
    }
    var /** @type {?} */actionWithoutBuiltins = convertPropertyBindingBuiltins({
        createLiteralArrayConverter: function createLiteralArrayConverter(argCount) {
            // Note: no caching for literal arrays in actions.
            return function (args) {
                return literalArr(args);
            };
        },
        createLiteralMapConverter: function createLiteralMapConverter(keys) {
            // Note: no caching for literal maps in actions.
            return function (args) {
                return literalMap( /** @type {?} */keys.map(function (key, i) {
                    return [key, args[i]];
                }));
            };
        },
        createPipeConverter: function createPipeConverter(name) {
            throw new Error('Illegal State: Actions are not allowed to contain pipes. Pipe: ' + name);
        }
    }, action);
    var /** @type {?} */visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
    var /** @type {?} */actionStmts = [];
    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);
    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
    var /** @type {?} */lastIndex = actionStmts.length - 1;
    var /** @type {?} */preventDefaultVar = null;
    if (lastIndex >= 0) {
        var /** @type {?} */lastStatement = actionStmts[lastIndex];
        var /** @type {?} */returnExpr = convertStmtIntoExpression(lastStatement);
        if (returnExpr) {
            // Note: We need to cast the result of the method call to dynamic,
            // as it might be a void method!
            preventDefaultVar = createPreventDefaultVar(bindingId);
            actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [StmtModifier.Final]);
        }
    }
    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
}
/**
 * @param {?} converterFactory
 * @param {?} ast
 * @return {?}
 */
function convertPropertyBindingBuiltins(converterFactory, ast) {
    return convertBuiltins(converterFactory, ast);
}

var ConvertPropertyBindingResult =
/**
 * @param {?} stmts
 * @param {?} currValExpr
 */
function ConvertPropertyBindingResult(stmts, currValExpr) {
    _classCallCheck(this, ConvertPropertyBindingResult);

    this.stmts = stmts;
    this.currValExpr = currValExpr;
};
/**
 * Converts the given expression AST into an executable output AST, assuming the expression
 * is used in property binding. The expression has to be preprocessed via
 * `convertPropertyBindingBuiltins`.
 * @param {?} localResolver
 * @param {?} implicitReceiver
 * @param {?} expressionWithoutBuiltins
 * @param {?} bindingId
 * @return {?}
 */


function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {
    if (!localResolver) {
        localResolver = new DefaultLocalResolver();
    }
    var /** @type {?} */currValExpr = createCurrValueExpr(bindingId);
    var /** @type {?} */stmts = [];
    var /** @type {?} */visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);
    var /** @type {?} */outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);
    if (visitor.temporaryCount) {
        for (var /** @type {?} */i = 0; i < visitor.temporaryCount; i++) {
            stmts.push(temporaryDeclaration(bindingId, i));
        }
    }
    stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
    return new ConvertPropertyBindingResult(stmts, currValExpr);
}
/**
 * @param {?} converterFactory
 * @param {?} ast
 * @return {?}
 */
function convertBuiltins(converterFactory, ast) {
    var /** @type {?} */visitor = new _BuiltinAstConverter(converterFactory);
    return ast.visit(visitor);
}
/**
 * @param {?} bindingId
 * @param {?} temporaryNumber
 * @return {?}
 */
function temporaryName(bindingId, temporaryNumber) {
    return 'tmp_' + bindingId + '_' + temporaryNumber;
}
/**
 * @param {?} bindingId
 * @param {?} temporaryNumber
 * @return {?}
 */
function temporaryDeclaration(bindingId, temporaryNumber) {
    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
}
/**
 * @param {?} temporaryCount
 * @param {?} bindingId
 * @param {?} statements
 * @return {?}
 */
function prependTemporaryDecls(temporaryCount, bindingId, statements) {
    for (var /** @type {?} */i = temporaryCount - 1; i >= 0; i--) {
        statements.unshift(temporaryDeclaration(bindingId, i));
    }
}
var _Mode = {};
_Mode.Statement = 0;
_Mode.Expression = 1;
_Mode[_Mode.Statement] = "Statement";
_Mode[_Mode.Expression] = "Expression";
/**
 * @param {?} mode
 * @param {?} ast
 * @return {?}
 */
function ensureStatementMode(mode, ast) {
    if (mode !== _Mode.Statement) {
        throw new Error('Expected a statement, but saw ' + ast);
    }
}
/**
 * @param {?} mode
 * @param {?} ast
 * @return {?}
 */
function ensureExpressionMode(mode, ast) {
    if (mode !== _Mode.Expression) {
        throw new Error('Expected an expression, but saw ' + ast);
    }
}
/**
 * @param {?} mode
 * @param {?} expr
 * @return {?}
 */
function convertToStatementIfNeeded(mode, expr) {
    if (mode === _Mode.Statement) {
        return expr.toStmt();
    } else {
        return expr;
    }
}

var _BuiltinAstConverter = function (_AstTransformer) {
    _inherits(_BuiltinAstConverter, _AstTransformer);

    /**
     * @param {?} _converterFactory
     */
    function _BuiltinAstConverter(_converterFactory) {
        _classCallCheck(this, _BuiltinAstConverter);

        var _this168 = _possibleConstructorReturn(this, (_BuiltinAstConverter.__proto__ || Object.getPrototypeOf(_BuiltinAstConverter)).call(this));

        _this168._converterFactory = _converterFactory;
        return _this168;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */


    _createClass(_BuiltinAstConverter, [{
        key: 'visitPipe',
        value: function visitPipe(ast, context) {
            var _this169 = this;

            var /** @type {?} */args = [ast.exp].concat(_toConsumableArray(ast.args)).map(function (ast) {
                return ast.visit(_this169, context);
            });
            return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralArray',
        value: function visitLiteralArray(ast, context) {
            var _this170 = this;

            var /** @type {?} */args = ast.expressions.map(function (ast) {
                return ast.visit(_this170, context);
            });
            return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitLiteralMap',
        value: function visitLiteralMap(ast, context) {
            var _this171 = this;

            var /** @type {?} */args = ast.values.map(function (ast) {
                return ast.visit(_this171, context);
            });
            return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));
        }
    }]);

    return _BuiltinAstConverter;
}(AstTransformer);

var _AstToIrVisitor = function () {
    /**
     * @param {?} _localResolver
     * @param {?} _implicitReceiver
     * @param {?} bindingId
     */
    function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId) {
        _classCallCheck(this, _AstToIrVisitor);

        this._localResolver = _localResolver;
        this._implicitReceiver = _implicitReceiver;
        this.bindingId = bindingId;
        this._nodeMap = new Map();
        this._resultMap = new Map();
        this._currentTemporary = 0;
        this.temporaryCount = 0;
    }
    /**
     * @param {?} ast
     * @param {?} mode
     * @return {?}
     */


    _createClass(_AstToIrVisitor, [{
        key: 'visitBinary',
        value: function visitBinary(ast, mode) {
            var /** @type {?} */op = void 0;
            switch (ast.operation) {
                case '+':
                    op = BinaryOperator.Plus;
                    break;
                case '-':
                    op = BinaryOperator.Minus;
                    break;
                case '*':
                    op = BinaryOperator.Multiply;
                    break;
                case '/':
                    op = BinaryOperator.Divide;
                    break;
                case '%':
                    op = BinaryOperator.Modulo;
                    break;
                case '&&':
                    op = BinaryOperator.And;
                    break;
                case '||':
                    op = BinaryOperator.Or;
                    break;
                case '==':
                    op = BinaryOperator.Equals;
                    break;
                case '!=':
                    op = BinaryOperator.NotEquals;
                    break;
                case '===':
                    op = BinaryOperator.Identical;
                    break;
                case '!==':
                    op = BinaryOperator.NotIdentical;
                    break;
                case '<':
                    op = BinaryOperator.Lower;
                    break;
                case '>':
                    op = BinaryOperator.Bigger;
                    break;
                case '<=':
                    op = BinaryOperator.LowerEquals;
                    break;
                case '>=':
                    op = BinaryOperator.BiggerEquals;
                    break;
                default:
                    throw new Error('Unsupported operation ' + ast.operation);
            }
            return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitChain',
        value: function visitChain(ast, mode) {
            ensureStatementMode(mode, ast);
            return this.visitAll(ast.expressions, mode);
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitConditional',
        value: function visitConditional(ast, mode) {
            var /** @type {?} */value = this.visit(ast.condition, _Mode.Expression);
            return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitPipe',
        value: function visitPipe(ast, mode) {
            throw new Error('Illegal state: Pipes should have been converted into functions. Pipe: ' + ast.name);
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitFunctionCall',
        value: function visitFunctionCall(ast, mode) {
            var /** @type {?} */convertedArgs = this.visitAll(ast.args, _Mode.Expression);
            var /** @type {?} */fnResult = void 0;
            if (ast instanceof BuiltinFunctionCall) {
                fnResult = ast.converter(convertedArgs);
            } else {
                fnResult = this.visit(ast.target, _Mode.Expression).callFn(convertedArgs);
            }
            return convertToStatementIfNeeded(mode, fnResult);
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitImplicitReceiver',
        value: function visitImplicitReceiver(ast, mode) {
            ensureExpressionMode(mode, ast);
            return this._implicitReceiver;
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitInterpolation',
        value: function visitInterpolation(ast, mode) {
            ensureExpressionMode(mode, ast);
            var /** @type {?} */args = [literal(ast.expressions.length)];
            for (var /** @type {?} */i = 0; i < ast.strings.length - 1; i++) {
                args.push(literal(ast.strings[i]));
                args.push(this.visit(ast.expressions[i], _Mode.Expression));
            }
            args.push(literal(ast.strings[ast.strings.length - 1]));
            return ast.expressions.length <= 9 ? importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) : importExpr(createIdentifier(Identifiers.interpolate)).callFn([args[0], literalArr(args.slice(1))]);
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitKeyedRead',
        value: function visitKeyedRead(ast, mode) {
            var /** @type {?} */leftMostSafe = this.leftMostSafeNode(ast);
            if (leftMostSafe) {
                return this.convertSafeAccess(ast, leftMostSafe, mode);
            } else {
                return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
            }
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitKeyedWrite',
        value: function visitKeyedWrite(ast, mode) {
            var /** @type {?} */obj = this.visit(ast.obj, _Mode.Expression);
            var /** @type {?} */key = this.visit(ast.key, _Mode.Expression);
            var /** @type {?} */value = this.visit(ast.value, _Mode.Expression);
            return convertToStatementIfNeeded(mode, obj.key(key).set(value));
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitLiteralArray',
        value: function visitLiteralArray(ast, mode) {
            throw new Error('Illegal State: literal arrays should have been converted into functions');
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitLiteralMap',
        value: function visitLiteralMap(ast, mode) {
            throw new Error('Illegal State: literal maps should have been converted into functions');
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitLiteralPrimitive',
        value: function visitLiteralPrimitive(ast, mode) {
            return convertToStatementIfNeeded(mode, literal(ast.value));
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: '_getLocal',
        value: function _getLocal(name) {
            return this._localResolver.getLocal(name);
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitMethodCall',
        value: function visitMethodCall(ast, mode) {
            var /** @type {?} */leftMostSafe = this.leftMostSafeNode(ast);
            if (leftMostSafe) {
                return this.convertSafeAccess(ast, leftMostSafe, mode);
            } else {
                var /** @type {?} */args = this.visitAll(ast.args, _Mode.Expression);
                var /** @type {?} */result = null;
                var /** @type {?} */receiver = this.visit(ast.receiver, _Mode.Expression);
                if (receiver === this._implicitReceiver) {
                    var /** @type {?} */varExpr = this._getLocal(ast.name);
                    if (varExpr) {
                        result = varExpr.callFn(args);
                    }
                }
                if (isBlank(result)) {
                    result = receiver.callMethod(ast.name, args);
                }
                return convertToStatementIfNeeded(mode, result);
            }
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitPrefixNot',
        value: function visitPrefixNot(ast, mode) {
            return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitPropertyRead',
        value: function visitPropertyRead(ast, mode) {
            var /** @type {?} */leftMostSafe = this.leftMostSafeNode(ast);
            if (leftMostSafe) {
                return this.convertSafeAccess(ast, leftMostSafe, mode);
            } else {
                var /** @type {?} */result = null;
                var /** @type {?} */receiver = this.visit(ast.receiver, _Mode.Expression);
                if (receiver === this._implicitReceiver) {
                    result = this._getLocal(ast.name);
                }
                if (isBlank(result)) {
                    result = receiver.prop(ast.name);
                }
                return convertToStatementIfNeeded(mode, result);
            }
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitPropertyWrite',
        value: function visitPropertyWrite(ast, mode) {
            var /** @type {?} */receiver = this.visit(ast.receiver, _Mode.Expression);
            if (receiver === this._implicitReceiver) {
                var /** @type {?} */varExpr = this._getLocal(ast.name);
                if (varExpr) {
                    throw new Error('Cannot assign to a reference or variable!');
                }
            }
            return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitSafePropertyRead',
        value: function visitSafePropertyRead(ast, mode) {
            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitSafeMethodCall',
        value: function visitSafeMethodCall(ast, mode) {
            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
        }
        /**
         * @param {?} asts
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitAll',
        value: function visitAll(asts, mode) {
            var _this172 = this;

            return asts.map(function (ast) {
                return _this172.visit(ast, mode);
            });
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visitQuote',
        value: function visitQuote(ast, mode) {
            throw new Error('Quotes are not supported for evaluation!');
        }
        /**
         * @param {?} ast
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'visit',
        value: function visit(ast, mode) {
            var /** @type {?} */result = this._resultMap.get(ast);
            if (result) return result;
            return (this._nodeMap.get(ast) || ast).visit(this, mode);
        }
        /**
         * @param {?} ast
         * @param {?} leftMostSafe
         * @param {?} mode
         * @return {?}
         */

    }, {
        key: 'convertSafeAccess',
        value: function convertSafeAccess(ast, leftMostSafe, mode) {
            // If the expression contains a safe access node on the left it needs to be converted to
            // an expression that guards the access to the member by checking the receiver for blank. As
            // execution proceeds from left to right, the left most part of the expression must be guarded
            // first but, because member access is left associative, the right side of the expression is at
            // the top of the AST. The desired result requires lifting a copy of the the left part of the
            // expression up to test it for blank before generating the unguarded version.
            // Consider, for example the following expression: a?.b.c?.d.e
            // This results in the ast:
            //         .
            //        / \
            //       ?.   e
            //      /  \
            //     .    d
            //    / \
            //   ?.  c
            //  /  \
            // a    b
            // The following tree should be generated:
            //
            //        /---- ? ----\
            //       /      |      \
            //     a   /--- ? ---\  null
            //        /     |     \
            //       .      .     null
            //      / \    / \
            //     .  c   .   e
            //    / \    / \
            //   a   b  ,   d
            //         / \
            //        .   c
            //       / \
            //      a   b
            //
            // Notice that the first guard condition is the left hand of the left most safe access node
            // which comes in as leftMostSafe to this routine.
            var /** @type {?} */guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
            var /** @type {?} */temporary = void 0;
            if (this.needsTemporary(leftMostSafe.receiver)) {
                // If the expression has method calls or pipes then we need to save the result into a
                // temporary variable to avoid calling stateful or impure code more than once.
                temporary = this.allocateTemporary();
                // Preserve the result in the temporary variable
                guardedExpression = temporary.set(guardedExpression);
                // Ensure all further references to the guarded expression refer to the temporary instead.
                this._resultMap.set(leftMostSafe.receiver, temporary);
            }
            var /** @type {?} */condition = guardedExpression.isBlank();
            // Convert the ast to an unguarded access to the receiver's member. The map will substitute
            // leftMostNode with its unguarded version in the call to `this.visit()`.
            if (leftMostSafe instanceof SafeMethodCall) {
                this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
            } else {
                this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
            }
            // Recursively convert the node now without the guarded member access.
            var /** @type {?} */access = this.visit(ast, _Mode.Expression);
            // Remove the mapping. This is not strictly required as the converter only traverses each node
            // once but is safer if the conversion is changed to traverse the nodes more than once.
            this._nodeMap.delete(leftMostSafe);
            // If we allcoated a temporary, release it.
            if (temporary) {
                this.releaseTemporary(temporary);
            }
            // Produce the conditional
            return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
        }
        /**
         * @param {?} ast
         * @return {?}
         */

    }, {
        key: 'leftMostSafeNode',
        value: function leftMostSafeNode(ast) {
            var _this173 = this;

            var /** @type {?} */visit = function visit(visitor, ast) {
                return (_this173._nodeMap.get(ast) || ast).visit(visitor);
            };
            return ast.visit({
                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitBinary: function visitBinary(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitChain: function visitChain(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitConditional: function visitConditional(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitFunctionCall: function visitFunctionCall(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitImplicitReceiver: function visitImplicitReceiver(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitInterpolation: function visitInterpolation(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitKeyedRead: function visitKeyedRead(ast) {
                    return visit(this, ast.obj);
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitKeyedWrite: function visitKeyedWrite(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitLiteralArray: function visitLiteralArray(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitLiteralMap: function visitLiteralMap(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitLiteralPrimitive: function visitLiteralPrimitive(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitMethodCall: function visitMethodCall(ast) {
                    return visit(this, ast.receiver);
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitPipe: function visitPipe(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitPrefixNot: function visitPrefixNot(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitPropertyRead: function visitPropertyRead(ast) {
                    return visit(this, ast.receiver);
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitPropertyWrite: function visitPropertyWrite(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitQuote: function visitQuote(ast) {
                    return null;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitSafeMethodCall: function visitSafeMethodCall(ast) {
                    return visit(this, ast.receiver) || ast;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitSafePropertyRead: function visitSafePropertyRead(ast) {
                    return visit(this, ast.receiver) || ast;
                }
            });
        }
        /**
         * @param {?} ast
         * @return {?}
         */

    }, {
        key: 'needsTemporary',
        value: function needsTemporary(ast) {
            var _this174 = this;

            var /** @type {?} */visit = function visit(visitor, ast) {
                return ast && (_this174._nodeMap.get(ast) || ast).visit(visitor);
            };
            var /** @type {?} */visitSome = function visitSome(visitor, ast) {
                return ast.some(function (ast) {
                    return visit(visitor, ast);
                });
            };
            return ast.visit({
                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitBinary: function visitBinary(ast) {
                    return visit(this, ast.left) || visit(this, ast.right);
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitChain: function visitChain(ast) {
                    return false;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitConditional: function visitConditional(ast) {
                    return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitFunctionCall: function visitFunctionCall(ast) {
                    return true;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitImplicitReceiver: function visitImplicitReceiver(ast) {
                    return false;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitInterpolation: function visitInterpolation(ast) {
                    return visitSome(this, ast.expressions);
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitKeyedRead: function visitKeyedRead(ast) {
                    return false;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitKeyedWrite: function visitKeyedWrite(ast) {
                    return false;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitLiteralArray: function visitLiteralArray(ast) {
                    return true;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitLiteralMap: function visitLiteralMap(ast) {
                    return true;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitLiteralPrimitive: function visitLiteralPrimitive(ast) {
                    return false;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitMethodCall: function visitMethodCall(ast) {
                    return true;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitPipe: function visitPipe(ast) {
                    return true;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitPrefixNot: function visitPrefixNot(ast) {
                    return visit(this, ast.expression);
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitPropertyRead: function visitPropertyRead(ast) {
                    return false;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitPropertyWrite: function visitPropertyWrite(ast) {
                    return false;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitQuote: function visitQuote(ast) {
                    return false;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitSafeMethodCall: function visitSafeMethodCall(ast) {
                    return true;
                },

                /**
                 * @param {?} ast
                 * @return {?}
                 */
                visitSafePropertyRead: function visitSafePropertyRead(ast) {
                    return false;
                }
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: 'allocateTemporary',
        value: function allocateTemporary() {
            var /** @type {?} */tempNumber = this._currentTemporary++;
            this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
            return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
        }
        /**
         * @param {?} temporary
         * @return {?}
         */

    }, {
        key: 'releaseTemporary',
        value: function releaseTemporary(temporary) {
            this._currentTemporary--;
            if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
                throw new Error('Temporary ' + temporary.name + ' released out of order');
            }
        }
    }]);

    return _AstToIrVisitor;
}();
/**
 * @param {?} arg
 * @param {?} output
 * @return {?}
 */


function flattenStatements(arg, output) {
    if (Array.isArray(arg)) {
        arg.forEach(function (entry) {
            return flattenStatements(entry, output);
        });
    } else {
        output.push(arg);
    }
}

var DefaultLocalResolver = function () {
    function DefaultLocalResolver() {
        _classCallCheck(this, DefaultLocalResolver);
    }

    _createClass(DefaultLocalResolver, [{
        key: 'getLocal',

        /**
         * @param {?} name
         * @return {?}
         */
        value: function getLocal(name) {
            if (name === EventHandlerVars.event.name) {
                return EventHandlerVars.event;
            }
            return null;
        }
    }]);

    return DefaultLocalResolver;
}();
/**
 * @param {?} bindingId
 * @return {?}
 */


function createCurrValueExpr(bindingId) {
    return variable('currVal_' + bindingId); // fix syntax highlighting: `
}
/**
 * @param {?} bindingId
 * @return {?}
 */
function createPreventDefaultVar(bindingId) {
    return variable('pd_' + bindingId);
}
/**
 * @param {?} stmt
 * @return {?}
 */
function convertStmtIntoExpression(stmt) {
    if (stmt instanceof ExpressionStatement) {
        return stmt.expr;
    } else if (stmt instanceof ReturnStatement) {
        return stmt.value;
    }
    return null;
}

var BuiltinFunctionCall = function (_FunctionCall) {
    _inherits(BuiltinFunctionCall, _FunctionCall);

    /**
     * @param {?} span
     * @param {?} args
     * @param {?} converter
     */
    function BuiltinFunctionCall(span, args, converter) {
        _classCallCheck(this, BuiltinFunctionCall);

        var _this175 = _possibleConstructorReturn(this, (BuiltinFunctionCall.__proto__ || Object.getPrototypeOf(BuiltinFunctionCall)).call(this, span, null, args));

        _this175.args = args;
        _this175.converter = converter;
        return _this175;
    }

    return BuiltinFunctionCall;
}(FunctionCall);

var /** @type {?} */CLASS_ATTR$1 = 'class';
var /** @type {?} */STYLE_ATTR = 'style';
var /** @type {?} */IMPLICIT_TEMPLATE_VAR = '\$implicit';
var /** @type {?} */NG_CONTAINER_TAG = 'ng-container';

var ViewCompileResult =
/**
 * @param {?} statements
 * @param {?} viewClassVar
 * @param {?} rendererTypeVar
 */
function ViewCompileResult(statements, viewClassVar, rendererTypeVar) {
    _classCallCheck(this, ViewCompileResult);

    this.statements = statements;
    this.viewClassVar = viewClassVar;
    this.rendererTypeVar = rendererTypeVar;
};

var ViewCompiler = function () {
    /**
     * @param {?} _genConfigNext
     * @param {?} _schemaRegistry
     */
    function ViewCompiler(_genConfigNext, _schemaRegistry) {
        _classCallCheck(this, ViewCompiler);

        this._genConfigNext = _genConfigNext;
        this._schemaRegistry = _schemaRegistry;
    }
    /**
     * @param {?} component
     * @param {?} template
     * @param {?} styles
     * @param {?} usedPipes
     * @return {?}
     */


    _createClass(ViewCompiler, [{
        key: 'compileComponent',
        value: function compileComponent(component, template, styles, usedPipes) {
            var /** @type {?} */embeddedViewCount = 0;
            var /** @type {?} */staticQueryIds = findStaticQueryIds(template);
            var /** @type {?} */statements = [];
            var /** @type {?} */customRenderData = [];
            if (component.template.animations && component.template.animations.length) {
                customRenderData.push(new LiteralMapEntry('animation', convertValueToOutputAst(component.template.animations), true));
            }
            var /** @type {?} */renderComponentVar = variable(rendererTypeName(component.type.reference));
            statements.push(renderComponentVar.set(importExpr(createIdentifier(Identifiers.createRendererTypeV2)).callFn([new LiteralMapExpr([new LiteralMapEntry('encapsulation', literal(component.template.encapsulation)), new LiteralMapEntry('styles', styles), new LiteralMapEntry('data', new LiteralMapExpr(customRenderData))])])).toDeclStmt(importType(createIdentifier(Identifiers.RendererTypeV2)), [StmtModifier.Final]));
            var /** @type {?} */viewBuilderFactory = function viewBuilderFactory(parent) {
                var /** @type {?} */embeddedViewIndex = embeddedViewCount++;
                return new ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);
            };
            var /** @type {?} */visitor = viewBuilderFactory(null);
            visitor.visitAll([], template);
            statements.push.apply(statements, _toConsumableArray(visitor.build()));
            return new ViewCompileResult(statements, visitor.viewName, renderComponentVar.name);
        }
    }]);

    return ViewCompiler;
}();

ViewCompiler.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
ViewCompiler.ctorParameters = function () {
    return [{ type: CompilerConfig }, { type: ElementSchemaRegistry }];
};
var /** @type {?} */VIEW_VAR = variable('view');
var /** @type {?} */CHECK_VAR = variable('check');
var /** @type {?} */COMP_VAR = variable('comp');
var /** @type {?} */NODE_INDEX_VAR = variable('nodeIndex');
var /** @type {?} */EVENT_NAME_VAR = variable('eventName');
var /** @type {?} */ALLOW_DEFAULT_VAR = variable('allowDefault');

var ViewBuilder = function () {
    /**
     * @param {?} parent
     * @param {?} component
     * @param {?} embeddedViewIndex
     * @param {?} usedPipes
     * @param {?} staticQueryIds
     * @param {?} viewBuilderFactory
     */
    function ViewBuilder(parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {
        _classCallCheck(this, ViewBuilder);

        this.parent = parent;
        this.component = component;
        this.embeddedViewIndex = embeddedViewIndex;
        this.usedPipes = usedPipes;
        this.staticQueryIds = staticQueryIds;
        this.viewBuilderFactory = viewBuilderFactory;
        this.nodeDefs = [];
        this.purePipeNodeIndices = Object.create(null);
        this.refNodeIndices = Object.create(null);
        this.variables = [];
        this.children = [];
        this.updateDirectivesExpressions = [];
        this.updateRendererExpressions = [];
        // TODO(tbosch): The old view compiler used to use an `any` type
        // for the context in any embedded view. We keep this behaivor for now
        // to be able to introduce the new view compiler without too many errors.
        this.compType = this.embeddedViewIndex > 0 ? DYNAMIC_TYPE : importType(this.component.type);
    }
    /**
     * @return {?}
     */


    _createClass(ViewBuilder, [{
        key: 'visitAll',

        /**
         * @param {?} variables
         * @param {?} astNodes
         * @return {?}
         */
        value: function visitAll(variables, astNodes) {
            var _this176 = this;

            this.variables = variables;
            // create the pipes for the pure pipes immediately, so that we know their indices.
            if (!this.parent) {
                this.usedPipes.forEach(function (pipe) {
                    if (pipe.pure) {
                        _this176.purePipeNodeIndices[pipe.name] = _this176._createPipe(pipe);
                    }
                });
            }
            if (!this.parent) {
                var /** @type {?} */queryIds = staticViewQueryIds(this.staticQueryIds);
                this.component.viewQueries.forEach(function (query, queryIndex) {
                    // Note: queries start with id 1 so we can use the number in a Bloom filter!
                    var /** @type {?} */queryId = queryIndex + 1;
                    var /** @type {?} */bindingType = query.first ? 0 /* First */ : 1 /* All */;
                    var /** @type {?} */flags = 67108864 /* TypeViewQuery */;
                    if (queryIds.staticQueryIds.has(queryId)) {
                        flags |= 134217728 /* StaticQuery */;
                    } else {
                        flags |= 268435456 /* DynamicQuery */;
                    }
                    _this176.nodeDefs.push(function () {
                        return importExpr(createIdentifier(Identifiers.queryDef)).callFn([literal(flags), literal(queryId), new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])]);
                    });
                });
            }
            templateVisitAll(this, astNodes);
            if (astNodes.length === 0 || this.parent && needsAdditionalRootNode(astNodes[astNodes.length - 1])) {
                // if the view is empty, or an embedded view has a view container as last root nde,
                // create an additional root node.
                this.nodeDefs.push(function () {
                    return importExpr(createIdentifier(Identifiers.anchorDef)).callFn([literal(0 /* None */), NULL_EXPR, NULL_EXPR, literal(0)]);
                });
            }
        }
        /**
         * @param {?=} targetStatements
         * @return {?}
         */

    }, {
        key: 'build',
        value: function build() {
            var targetStatements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            this.children.forEach(function (child) {
                return child.build(targetStatements);
            });
            var /** @type {?} */updateDirectivesFn = this._createUpdateFn(this.updateDirectivesExpressions);
            var /** @type {?} */updateRendererFn = this._createUpdateFn(this.updateRendererExpressions);
            var /** @type {?} */viewFlags = 0 /* None */;
            if (!this.parent && this.component.changeDetection === __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectionStrategy"].OnPush) {
                viewFlags |= 2 /* OnPush */;
            }
            var /** @type {?} */viewFactory = new DeclareFunctionStmt(this.viewName, [], [new ReturnStatement(importExpr(createIdentifier(Identifiers.viewDef)).callFn([literal(viewFlags), literalArr(this.nodeDefs.map(function (nd) {
                return nd();
            })), updateDirectivesFn, updateRendererFn]))], importType(createIdentifier(Identifiers.ViewDefinition)));
            targetStatements.push(viewFactory);
            return targetStatements;
        }
        /**
         * @param {?} expressions
         * @return {?}
         */

    }, {
        key: '_createUpdateFn',
        value: function _createUpdateFn(expressions) {
            var _this177 = this;

            var /** @type {?} */updateStmts = [];
            var /** @type {?} */updateBindingCount = 0;
            expressions.forEach(function (_ref33) {
                var expressions = _ref33.expressions,
                    nodeIndex = _ref33.nodeIndex;

                var /** @type {?} */exprs = expressions.map(function (_ref34) {
                    var context = _ref34.context,
                        value = _ref34.value;

                    var /** @type {?} */bindingId = '' + updateBindingCount++;
                    var /** @type {?} */nameResolver = context === COMP_VAR ? _this177 : null;

                    var _convertPropertyBindi = convertPropertyBinding(nameResolver, context, value, bindingId),
                        stmts = _convertPropertyBindi.stmts,
                        currValExpr = _convertPropertyBindi.currValExpr;

                    updateStmts.push.apply(updateStmts, _toConsumableArray(stmts));
                    return currValExpr;
                });
                updateStmts.push(callCheckStmt(nodeIndex, exprs).toStmt());
            });
            var /** @type {?} */updateFn = void 0;
            if (updateStmts.length > 0) {
                var /** @type {?} */preStmts = [];
                if (!this.component.isHost) {
                    preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
                }
                updateFn = fn([new FnParam(CHECK_VAR.name, INFERRED_TYPE), new FnParam(VIEW_VAR.name, INFERRED_TYPE)], [].concat(preStmts, updateStmts), INFERRED_TYPE);
            } else {
                updateFn = NULL_EXPR;
            }
            return updateFn;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitNgContent',
        value: function visitNgContent(ast, context) {
            // ngContentDef(ngContentIndex: number, index: number): NodeDef;
            this.nodeDefs.push(function () {
                return importExpr(createIdentifier(Identifiers.ngContentDef)).callFn([literal(ast.ngContentIndex), literal(ast.index)]);
            });
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitText',
        value: function visitText(ast, context) {
            // textDef(ngContentIndex: number, constants: string[]): NodeDef;
            this.nodeDefs.push(function () {
                return importExpr(createIdentifier(Identifiers.textDef)).callFn([literal(ast.ngContentIndex), literalArr([literal(ast.value)])]);
            });
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitBoundText',
        value: function visitBoundText(ast, context) {
            var /** @type {?} */nodeIndex = this.nodeDefs.length;
            // reserve the space in the nodeDefs array
            this.nodeDefs.push(null);
            var /** @type {?} */astWithSource = ast.value;
            var /** @type {?} */inter = astWithSource.ast;
            this._addUpdateExpressions(nodeIndex, inter.expressions.map(function (expr) {
                return { context: COMP_VAR, value: expr };
            }), this.updateRendererExpressions);
            // textDef(ngContentIndex: number, constants: string[]): NodeDef;
            this.nodeDefs[nodeIndex] = function () {
                return importExpr(createIdentifier(Identifiers.textDef)).callFn([literal(ast.ngContentIndex), literalArr(inter.strings.map(function (s) {
                    return literal(s);
                }))]);
            };
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitEmbeddedTemplate',
        value: function visitEmbeddedTemplate(ast, context) {
            var _this178 = this;

            var /** @type {?} */nodeIndex = this.nodeDefs.length;
            // reserve the space in the nodeDefs array
            this.nodeDefs.push(null);

            var _visitElementOrTempla = this._visitElementOrTemplate(nodeIndex, ast),
                flags = _visitElementOrTempla.flags,
                queryMatchesExpr = _visitElementOrTempla.queryMatchesExpr,
                hostEvents = _visitElementOrTempla.hostEvents;

            var /** @type {?} */childVisitor = this.viewBuilderFactory(this);
            this.children.push(childVisitor);
            childVisitor.visitAll(ast.variables, ast.children);
            var /** @type {?} */childCount = this.nodeDefs.length - nodeIndex - 1;
            // anchorDef(
            //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,
            //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:
            //   ViewDefinitionFactory): NodeDef;
            var /** @type {?} */nodeDef = function nodeDef() {
                return importExpr(createIdentifier(Identifiers.anchorDef)).callFn([literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), _this178._createElementHandleEventFn(nodeIndex, hostEvents), variable(childVisitor.viewName)]);
            };
            this.nodeDefs[nodeIndex] = nodeDef;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitElement',
        value: function visitElement(ast, context) {
            var _this179 = this;

            var /** @type {?} */nodeIndex = this.nodeDefs.length;
            // reserve the space in the nodeDefs array so we can add children
            this.nodeDefs.push(null);
            var /** @type {?} */elName = ast.name;
            if (ast.name === NG_CONTAINER_TAG) {
                // Using a null element name creates an anchor.
                elName = null;
            }

            var _visitElementOrTempla2 = this._visitElementOrTemplate(nodeIndex, ast),
                flags = _visitElementOrTempla2.flags,
                usedEvents = _visitElementOrTempla2.usedEvents,
                queryMatchesExpr = _visitElementOrTempla2.queryMatchesExpr,
                dirHostBindings = _visitElementOrTempla2.hostBindings,
                hostEvents = _visitElementOrTempla2.hostEvents;

            var /** @type {?} */inputDefs = [];
            var /** @type {?} */outputDefs = [];
            if (elName) {
                var /** @type {?} */hostBindings = ast.inputs.map(function (inputAst) {
                    return {
                        context: /** @type {?} */COMP_VAR,
                        value: inputAst.value,
                        bindingDef: elementBindingDef(inputAst, null)
                    };
                }).concat(dirHostBindings);
                if (hostBindings.length) {
                    this._addUpdateExpressions(nodeIndex, hostBindings, this.updateRendererExpressions);
                    inputDefs = hostBindings.map(function (entry) {
                        return entry.bindingDef;
                    });
                }
                outputDefs = usedEvents.map(function (_ref35) {
                    var _ref36 = _slicedToArray(_ref35, 2),
                        target = _ref36[0],
                        eventName = _ref36[1];

                    return literalArr([literal(target), literal(eventName)]);
                });
            }
            templateVisitAll(this, ast.children);
            var /** @type {?} */childCount = this.nodeDefs.length - nodeIndex - 1;
            var /** @type {?} */compAst = ast.directives.find(function (dirAst) {
                return dirAst.directive.isComponent;
            });
            var /** @type {?} */compRendererType = NULL_EXPR;
            var /** @type {?} */compView = NULL_EXPR;
            if (compAst) {
                compView = importExpr({ reference: compAst.directive.componentViewType });
                compRendererType = importExpr({ reference: compAst.directive.rendererType });
            }
            // elementDef(
            //   flags: NodeFlags, matchedQueriesDsl: [string | number, QueryValueType][],
            //   ngContentIndex: number, childCount: number, namespaceAndName: string,
            //   fixedAttrs: [string, string][] = [],
            //   bindings?:
            //       ([BindingType.ElementClass, string] | [BindingType.ElementStyle, string, string] |
            //        [BindingType.ElementAttribute | BindingType.ElementProperty |
            //        BindingType.DirectiveHostProperty, string, SecurityContext])[],
            //   outputs?: ([OutputType.ElementOutput | OutputType.DirectiveHostOutput, string, string])[],
            //   handleEvent?: ElementHandleEventFn,
            //   componentView?: () => ViewDefinition, componentRendererType?: RendererTypeV2): NodeDef;
            var /** @type {?} */nodeDef = function nodeDef() {
                return importExpr(createIdentifier(Identifiers.elementDef)).callFn([literal(flags), queryMatchesExpr, literal(ast.ngContentIndex), literal(childCount), literal(elName), elName ? fixedAttrsDef(ast) : NULL_EXPR, inputDefs.length ? literalArr(inputDefs) : NULL_EXPR, outputDefs.length ? literalArr(outputDefs) : NULL_EXPR, _this179._createElementHandleEventFn(nodeIndex, hostEvents), compView, compRendererType]);
            };
            this.nodeDefs[nodeIndex] = nodeDef;
        }
        /**
         * @param {?} nodeIndex
         * @param {?} ast
         * @return {?}
         */

    }, {
        key: '_visitElementOrTemplate',
        value: function _visitElementOrTemplate(nodeIndex, ast) {
            var _this180 = this;

            var /** @type {?} */flags = 0 /* None */;
            if (ast.hasViewContainer) {
                flags |= 8388608 /* EmbeddedViews */;
            }
            var /** @type {?} */usedEvents = new Map();
            ast.outputs.forEach(function (event) {
                var _elementEventNameAndT = elementEventNameAndTarget(event, null),
                    name = _elementEventNameAndT.name,
                    target = _elementEventNameAndT.target;

                usedEvents.set(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵelementEventFullName"])(target, name), [target, name]);
            });
            ast.directives.forEach(function (dirAst) {
                dirAst.hostEvents.forEach(function (event) {
                    var _elementEventNameAndT2 = elementEventNameAndTarget(event, dirAst),
                        name = _elementEventNameAndT2.name,
                        target = _elementEventNameAndT2.target;

                    usedEvents.set(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵelementEventFullName"])(target, name), [target, name]);
                });
            });
            var /** @type {?} */hostBindings = [];
            var /** @type {?} */hostEvents = [];
            var /** @type {?} */componentFactoryResolverProvider = createComponentFactoryResolver(ast.directives);
            if (componentFactoryResolverProvider) {
                this._visitProvider(componentFactoryResolverProvider, ast.queryMatches);
            }
            ast.providers.forEach(function (providerAst, providerIndex) {
                var /** @type {?} */dirAst = void 0;
                var /** @type {?} */dirIndex = void 0;
                ast.directives.forEach(function (localDirAst, i) {
                    if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {
                        dirAst = localDirAst;
                        dirIndex = i;
                    }
                });
                if (dirAst) {
                    var _visitDirective2 = _this180._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, _this180.staticQueryIds.get( /** @type {?} */ast)),
                        dirHostBindings = _visitDirective2.hostBindings,
                        dirHostEvents = _visitDirective2.hostEvents;

                    hostBindings.push.apply(hostBindings, _toConsumableArray(dirHostBindings));
                    hostEvents.push.apply(hostEvents, _toConsumableArray(dirHostEvents));
                } else {
                    _this180._visitProvider(providerAst, ast.queryMatches);
                }
            });
            var /** @type {?} */queryMatchExprs = [];
            ast.queryMatches.forEach(function (match) {
                var /** @type {?} */valueType = void 0;
                if (tokenReference(match.value) === resolveIdentifier(Identifiers.ElementRef)) {
                    valueType = 0 /* ElementRef */;
                } else if (tokenReference(match.value) === resolveIdentifier(Identifiers.ViewContainerRef)) {
                    valueType = 3 /* ViewContainerRef */;
                } else if (tokenReference(match.value) === resolveIdentifier(Identifiers.TemplateRef)) {
                    valueType = 2 /* TemplateRef */;
                }
                if (valueType != null) {
                    queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));
                }
            });
            ast.references.forEach(function (ref) {
                var /** @type {?} */valueType = void 0;
                if (!ref.value) {
                    valueType = 1 /* RenderElement */;
                } else if (tokenReference(ref.value) === resolveIdentifier(Identifiers.TemplateRef)) {
                    valueType = 2 /* TemplateRef */;
                }
                if (valueType != null) {
                    _this180.refNodeIndices[ref.name] = nodeIndex;
                    queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));
                }
            });
            ast.outputs.forEach(function (outputAst) {
                hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: null });
            });
            return {
                flags: flags,
                usedEvents: Array.from(usedEvents.values()),
                queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
                hostBindings: hostBindings,
                hostEvents: hostEvents
            };
        }
        /**
         * @param {?} providerAst
         * @param {?} dirAst
         * @param {?} directiveIndex
         * @param {?} elementNodeIndex
         * @param {?} refs
         * @param {?} queryMatches
         * @param {?} usedEvents
         * @param {?} queryIds
         * @return {?}
         */

    }, {
        key: '_visitDirective',
        value: function _visitDirective(providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {
            var _this181 = this;

            var /** @type {?} */nodeIndex = this.nodeDefs.length;
            // reserve the space in the nodeDefs array so we can add children
            this.nodeDefs.push(null);
            dirAst.directive.queries.forEach(function (query, queryIndex) {
                var /** @type {?} */flags = 33554432 /* TypeContentQuery */;
                var /** @type {?} */queryId = dirAst.contentQueryStartId + queryIndex;
                // Note: We only make queries static that query for a single item.
                // This is because of backwards compatibility with the old view compiler...
                if (queryIds.staticQueryIds.has(queryId) && query.first) {
                    flags |= 134217728 /* StaticQuery */;
                } else {
                    flags |= 268435456 /* DynamicQuery */;
                }
                var /** @type {?} */bindingType = query.first ? 0 /* First */ : 1 /* All */;
                _this181.nodeDefs.push(function () {
                    return importExpr(createIdentifier(Identifiers.queryDef)).callFn([literal(flags), literal(queryId), new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType))])]);
                });
            });
            // Note: the operation below might also create new nodeDefs,
            // but we don't want them to be a child of a directive,
            // as they might be a provider/pipe on their own.
            // I.e. we only allow queries as children of directives nodes.
            var /** @type {?} */childCount = this.nodeDefs.length - nodeIndex - 1;

            var _visitProviderOrDirec = this._visitProviderOrDirective(providerAst, queryMatches),
                flags = _visitProviderOrDirec.flags,
                queryMatchExprs = _visitProviderOrDirec.queryMatchExprs,
                providerExpr = _visitProviderOrDirec.providerExpr,
                depsExpr = _visitProviderOrDirec.depsExpr;

            refs.forEach(function (ref) {
                if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {
                    _this181.refNodeIndices[ref.name] = nodeIndex;
                    queryMatchExprs.push(literalArr([literal(ref.name), literal(4 /* Provider */)]));
                }
            });
            if (dirAst.directive.isComponent) {
                flags |= 16384 /* Component */;
            }
            var /** @type {?} */inputDefs = dirAst.inputs.map(function (inputAst, inputIndex) {
                var /** @type {?} */mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]);
                // Note: it's important to not quote the key so that we can capture renames by minifiers!
                return new LiteralMapEntry(inputAst.directiveName, mapValue, false);
            });
            var /** @type {?} */outputDefs = [];
            var /** @type {?} */dirMeta = dirAst.directive;
            Object.keys(dirMeta.outputs).forEach(function (propName) {
                var /** @type {?} */eventName = dirMeta.outputs[propName];
                if (usedEvents.has(eventName)) {
                    // Note: it's important to not quote the key so that we can capture renames by minifiers!
                    outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));
                }
            });
            if (dirAst.inputs.length || (flags & (131072 /* DoCheck */ | 32768 /* OnInit */)) > 0) {
                this._addUpdateExpressions(nodeIndex, dirAst.inputs.map(function (input) {
                    return { context: COMP_VAR, value: input.value };
                }), this.updateDirectivesExpressions);
            }
            var /** @type {?} */dirContextExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([VIEW_VAR, literal(nodeIndex)]);
            var /** @type {?} */hostBindings = dirAst.hostProperties.map(function (hostBindingAst) {
                return {
                    value: hostBindingAst.value.ast,
                    context: dirContextExpr,
                    bindingDef: elementBindingDef(hostBindingAst, dirAst)
                };
            });
            var /** @type {?} */hostEvents = dirAst.hostEvents.map(function (hostEventAst) {
                return {
                    context: dirContextExpr,
                    eventAst: hostEventAst, dirAst: dirAst
                };
            });
            // directiveDef(
            //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], childCount: number, ctor:
            //   any,
            //   deps: ([DepFlags, any] | any)[], props?: {[name: string]: [number, string]},
            //   outputs?: {[name: string]: string}, component?: () => ViewDefinition): NodeDef;
            var /** @type {?} */nodeDef = function nodeDef() {
                return importExpr(createIdentifier(Identifiers.directiveDef)).callFn([literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR, literal(childCount), providerExpr, depsExpr, inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR, outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR]);
            };
            this.nodeDefs[nodeIndex] = nodeDef;
            return { hostBindings: hostBindings, hostEvents: hostEvents };
        }
        /**
         * @param {?} providerAst
         * @param {?} queryMatches
         * @return {?}
         */

    }, {
        key: '_visitProvider',
        value: function _visitProvider(providerAst, queryMatches) {
            var /** @type {?} */nodeIndex = this.nodeDefs.length;
            // reserve the space in the nodeDefs array so we can add children
            this.nodeDefs.push(null);

            var _visitProviderOrDirec2 = this._visitProviderOrDirective(providerAst, queryMatches),
                flags = _visitProviderOrDirec2.flags,
                queryMatchExprs = _visitProviderOrDirec2.queryMatchExprs,
                providerExpr = _visitProviderOrDirec2.providerExpr,
                depsExpr = _visitProviderOrDirec2.depsExpr;
            // providerDef(
            //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,
            //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;


            var /** @type {?} */nodeDef = function nodeDef() {
                return importExpr(createIdentifier(Identifiers.providerDef)).callFn([literal(flags), queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR, tokenExpr(providerAst.token), providerExpr, depsExpr]);
            };
            this.nodeDefs[nodeIndex] = nodeDef;
        }
        /**
         * @param {?} providerAst
         * @param {?} queryMatches
         * @return {?}
         */

    }, {
        key: '_visitProviderOrDirective',
        value: function _visitProviderOrDirective(providerAst, queryMatches) {
            var /** @type {?} */flags = 0 /* None */;
            if (!providerAst.eager) {
                flags |= 2048 /* LazyProvider */;
            }
            if (providerAst.providerType === ProviderAstType.PrivateService) {
                flags |= 4096 /* PrivateProvider */;
            }
            providerAst.lifecycleHooks.forEach(function (lifecycleHook) {
                // for regular providers, we only support ngOnDestroy
                if (lifecycleHook === __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].OnDestroy || providerAst.providerType === ProviderAstType.Directive || providerAst.providerType === ProviderAstType.Component) {
                    flags |= lifecycleHookToNodeFlag(lifecycleHook);
                }
            });
            var /** @type {?} */queryMatchExprs = [];
            queryMatches.forEach(function (match) {
                if (tokenReference(match.value) === tokenReference(providerAst.token)) {
                    queryMatchExprs.push(literalArr([literal(match.queryId), literal(4 /* Provider */)]));
                }
            });

            var _providerDef = providerDef(providerAst),
                providerExpr = _providerDef.providerExpr,
                depsExpr = _providerDef.depsExpr,
                providerType = _providerDef.flags;

            return { flags: flags | providerType, queryMatchExprs: queryMatchExprs, providerExpr: providerExpr, depsExpr: depsExpr };
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'getLocal',
        value: function getLocal(name) {
            if (name == EventHandlerVars.event.name) {
                return EventHandlerVars.event;
            }
            var /** @type {?} */currViewExpr = VIEW_VAR;
            for (var /** @type {?} */currBuilder = this; currBuilder; currBuilder = currBuilder.parent, currViewExpr = currViewExpr.prop('parent')) {
                // check references
                var /** @type {?} */refNodeIndex = currBuilder.refNodeIndices[name];
                if (refNodeIndex != null) {
                    return importExpr(createIdentifier(Identifiers.nodeValue)).callFn([currViewExpr, literal(refNodeIndex)]);
                }
                // check variables
                var /** @type {?} */varAst = currBuilder.variables.find(function (varAst) {
                    return varAst.name === name;
                });
                if (varAst) {
                    var /** @type {?} */varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;
                    return currViewExpr.prop('context').prop(varValue);
                }
            }
            return null;
        }
        /**
         * @param {?} argCount
         * @return {?}
         */

    }, {
        key: 'createLiteralArrayConverter',
        value: function createLiteralArrayConverter(argCount) {
            if (argCount === 0) {
                var /** @type {?} */valueExpr = importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
                return function () {
                    return valueExpr;
                };
            }
            var /** @type {?} */nodeIndex = this.nodeDefs.length;
            // pureArrayDef(argCount: number): NodeDef;
            var /** @type {?} */nodeDef = function nodeDef() {
                return importExpr(createIdentifier(Identifiers.pureArrayDef)).callFn([literal(argCount)]);
            };
            this.nodeDefs.push(nodeDef);
            return function (args) {
                return callCheckStmt(nodeIndex, args);
            };
        }
        /**
         * @param {?} keys
         * @return {?}
         */

    }, {
        key: 'createLiteralMapConverter',
        value: function createLiteralMapConverter(keys) {
            if (keys.length === 0) {
                var /** @type {?} */valueExpr = importExpr(createIdentifier(Identifiers.EMPTY_MAP));
                return function () {
                    return valueExpr;
                };
            }
            var /** @type {?} */nodeIndex = this.nodeDefs.length;
            // function pureObjectDef(propertyNames: string[]): NodeDef
            var /** @type {?} */nodeDef = function nodeDef() {
                return importExpr(createIdentifier(Identifiers.pureObjectDef)).callFn([literalArr(keys.map(function (key) {
                    return literal(key);
                }))]);
            };
            this.nodeDefs.push(nodeDef);
            return function (args) {
                return callCheckStmt(nodeIndex, args);
            };
        }
        /**
         * @param {?} name
         * @param {?} argCount
         * @return {?}
         */

    }, {
        key: 'createPipeConverter',
        value: function createPipeConverter(name, argCount) {
            var /** @type {?} */pipe = this._findPipe(name);
            if (pipe.pure) {
                var /** @type {?} */nodeIndex = this.nodeDefs.length;
                // function purePipeDef(argCount: number): NodeDef;
                var /** @type {?} */nodeDef = function nodeDef() {
                    return importExpr(createIdentifier(Identifiers.purePipeDef)).callFn([literal(argCount)]);
                };
                this.nodeDefs.push(nodeDef);
                // find underlying pipe in the component view
                var /** @type {?} */compViewExpr = VIEW_VAR;
                var /** @type {?} */compBuilder = this;
                while (compBuilder.parent) {
                    compBuilder = compBuilder.parent;
                    compViewExpr = compViewExpr.prop('parent');
                }
                var /** @type {?} */pipeNodeIndex = compBuilder.purePipeNodeIndices[name];
                var /** @type {?} */pipeValueExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([compViewExpr, literal(pipeNodeIndex)]);
                return function (args) {
                    return callUnwrapValue(callCheckStmt(nodeIndex, [pipeValueExpr].concat(args)));
                };
            } else {
                var /** @type {?} */_nodeIndex = this._createPipe(pipe);
                var /** @type {?} */nodeValueExpr = importExpr(createIdentifier(Identifiers.nodeValue)).callFn([VIEW_VAR, literal(_nodeIndex)]);
                return function (args) {
                    return callUnwrapValue(nodeValueExpr.callMethod('transform', args));
                };
            }
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: '_findPipe',
        value: function _findPipe(name) {
            return this.usedPipes.find(function (pipeSummary) {
                return pipeSummary.name === name;
            });
        }
        /**
         * @param {?} pipe
         * @return {?}
         */

    }, {
        key: '_createPipe',
        value: function _createPipe(pipe) {
            var /** @type {?} */nodeIndex = this.nodeDefs.length;
            var /** @type {?} */flags = 0 /* None */;
            pipe.type.lifecycleHooks.forEach(function (lifecycleHook) {
                // for pipes, we only support ngOnDestroy
                if (lifecycleHook === __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].OnDestroy) {
                    flags |= lifecycleHookToNodeFlag(lifecycleHook);
                }
            });
            var /** @type {?} */depExprs = pipe.type.diDeps.map(depDef);
            // function pipeDef(
            //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef
            var /** @type {?} */nodeDef = function nodeDef() {
                return importExpr(createIdentifier(Identifiers.pipeDef)).callFn([literal(flags), importExpr(pipe.type), literalArr(depExprs)]);
            };
            this.nodeDefs.push(nodeDef);
            return nodeIndex;
        }
        /**
         * @param {?} nodeIndex
         * @param {?} expressions
         * @param {?} target
         * @return {?}
         */

    }, {
        key: '_addUpdateExpressions',
        value: function _addUpdateExpressions(nodeIndex, expressions, target) {
            var _this182 = this;

            var /** @type {?} */transformedExpressions = expressions.map(function (_ref37) {
                var context = _ref37.context,
                    value = _ref37.value;

                if (value instanceof ASTWithSource) {
                    value = value.ast;
                }
                return { context: context, value: convertPropertyBindingBuiltins(_this182, value) };
            });
            target.push({ nodeIndex: nodeIndex, expressions: transformedExpressions });
        }
        /**
         * @param {?} nodeIndex
         * @param {?} handlers
         * @return {?}
         */

    }, {
        key: '_createElementHandleEventFn',
        value: function _createElementHandleEventFn(nodeIndex, handlers) {
            var _this183 = this;

            var /** @type {?} */handleEventStmts = [];
            var /** @type {?} */handleEventBindingCount = 0;
            handlers.forEach(function (_ref38) {
                var context = _ref38.context,
                    eventAst = _ref38.eventAst,
                    dirAst = _ref38.dirAst;

                var /** @type {?} */bindingId = '' + handleEventBindingCount++;
                var /** @type {?} */nameResolver = context === COMP_VAR ? _this183 : null;
                var /** @type {?} */expression = eventAst.handler instanceof ASTWithSource ? eventAst.handler.ast : eventAst.handler;

                var _convertActionBinding = convertActionBinding(nameResolver, context, expression, bindingId),
                    stmts = _convertActionBinding.stmts,
                    allowDefault = _convertActionBinding.allowDefault;

                var /** @type {?} */trueStmts = stmts;
                if (allowDefault) {
                    trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());
                }

                var _elementEventNameAndT3 = elementEventNameAndTarget(eventAst, dirAst),
                    eventTarget = _elementEventNameAndT3.target,
                    eventName = _elementEventNameAndT3.name;

                var /** @type {?} */fullEventName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵelementEventFullName"])(eventTarget, eventName);
                handleEventStmts.push(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts));
            });
            var /** @type {?} */handleEventFn = void 0;
            if (handleEventStmts.length > 0) {
                var /** @type {?} */preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];
                if (!this.component.isHost) {
                    preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
                }
                handleEventFn = fn([new FnParam(VIEW_VAR.name, INFERRED_TYPE), new FnParam(EVENT_NAME_VAR.name, INFERRED_TYPE), new FnParam(EventHandlerVars.event.name, INFERRED_TYPE)], [].concat(preStmts, handleEventStmts, [new ReturnStatement(ALLOW_DEFAULT_VAR)]), INFERRED_TYPE);
            } else {
                handleEventFn = NULL_EXPR;
            }
            return handleEventFn;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitDirective',
        value: function visitDirective(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitDirectiveProperty',
        value: function visitDirectiveProperty(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitReference',
        value: function visitReference(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitVariable',
        value: function visitVariable(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitEvent',
        value: function visitEvent(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitElementProperty',
        value: function visitElementProperty(ast, context) {}
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAttr',
        value: function visitAttr(ast, context) {}
    }, {
        key: 'viewName',
        get: function get() {
            return viewClassName(this.component.type.reference, this.embeddedViewIndex);
        }
    }]);

    return ViewBuilder;
}();
/**
 * @param {?} providerAst
 * @return {?}
 */


function providerDef(providerAst) {
    return providerAst.multiProvider ? multiProviderDef(providerAst.providers) : singleProviderDef(providerAst.providerType, providerAst.providers[0]);
}
/**
 * @param {?} providers
 * @return {?}
 */
function multiProviderDef(providers) {
    var /** @type {?} */allDepDefs = [];
    var /** @type {?} */allParams = [];
    var /** @type {?} */exprs = providers.map(function (provider, providerIndex) {
        var /** @type {?} */expr = void 0;
        if (provider.useClass) {
            var /** @type {?} */depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);
            expr = importExpr(provider.useClass).instantiate(depExprs);
        } else if (provider.useFactory) {
            var /** @type {?} */_depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);
            expr = importExpr(provider.useFactory).callFn(_depExprs);
        } else if (provider.useExisting) {
            var /** @type {?} */_depExprs2 = convertDeps(providerIndex, [{ token: provider.useExisting }]);
            expr = _depExprs2[0];
        } else {
            expr = convertValueToOutputAst(provider.useValue);
        }
        return expr;
    });
    var /** @type {?} */providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);
    return { providerExpr: providerExpr, flags: 512 /* TypeFactoryProvider */, depsExpr: literalArr(allDepDefs) };
    /**
     * @param {?} providerIndex
     * @param {?} deps
     * @return {?}
     */
    function convertDeps(providerIndex, deps) {
        return deps.map(function (dep, depIndex) {
            var /** @type {?} */paramName = 'p' + providerIndex + '_' + depIndex;
            allParams.push(new FnParam(paramName, DYNAMIC_TYPE));
            allDepDefs.push(depDef(dep));
            return variable(paramName);
        });
    }
}
/**
 * @param {?} providerType
 * @param {?} providerMeta
 * @return {?}
 */
function singleProviderDef(providerType, providerMeta) {
    var /** @type {?} */providerExpr = void 0;
    var /** @type {?} */flags = void 0;
    var /** @type {?} */deps = void 0;
    if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {
        providerExpr = importExpr(providerMeta.useClass);
        flags = 8192 /* TypeDirective */;
        deps = providerMeta.deps || providerMeta.useClass.diDeps;
    } else {
        if (providerMeta.useClass) {
            providerExpr = importExpr(providerMeta.useClass);
            flags = 256 /* TypeClassProvider */;
            deps = providerMeta.deps || providerMeta.useClass.diDeps;
        } else if (providerMeta.useFactory) {
            providerExpr = importExpr(providerMeta.useFactory);
            flags = 512 /* TypeFactoryProvider */;
            deps = providerMeta.deps || providerMeta.useFactory.diDeps;
        } else if (providerMeta.useExisting) {
            providerExpr = NULL_EXPR;
            flags = 1024 /* TypeUseExistingProvider */;
            deps = [{ token: providerMeta.useExisting }];
        } else {
            providerExpr = convertValueToOutputAst(providerMeta.useValue);
            flags = 128 /* TypeValueProvider */;
            deps = [];
        }
    }
    var /** @type {?} */depsExpr = literalArr(deps.map(function (dep) {
        return depDef(dep);
    }));
    return { providerExpr: providerExpr, flags: flags, depsExpr: depsExpr };
}
/**
 * @param {?} tokenMeta
 * @return {?}
 */
function tokenExpr(tokenMeta) {
    return tokenMeta.identifier ? importExpr(tokenMeta.identifier) : literal(tokenMeta.value);
}
/**
 * @param {?} dep
 * @return {?}
 */
function depDef(dep) {
    // Note: the following fields have already been normalized out by provider_analyzer:
    // - isAttribute, isSelf, isHost
    var /** @type {?} */expr = dep.isValue ? convertValueToOutputAst(dep.value) : tokenExpr(dep.token);
    var /** @type {?} */flags = 0 /* None */;
    if (dep.isSkipSelf) {
        flags |= 1 /* SkipSelf */;
    }
    if (dep.isOptional) {
        flags |= 2 /* Optional */;
    }
    if (dep.isValue) {
        flags |= 8 /* Value */;
    }
    return flags === 0 /* None */ ? expr : literalArr([literal(flags), expr]);
}
/**
 * @param {?} ast
 * @return {?}
 */
function needsAdditionalRootNode(ast) {
    if (ast instanceof EmbeddedTemplateAst) {
        return ast.hasViewContainer;
    }
    if (ast instanceof ElementAst) {
        if (ast.name === NG_CONTAINER_TAG && ast.children.length) {
            return needsAdditionalRootNode(ast.children[ast.children.length - 1]);
        }
        return ast.hasViewContainer;
    }
    return ast instanceof NgContentAst;
}
/**
 * @param {?} lifecycleHook
 * @return {?}
 */
function lifecycleHookToNodeFlag(lifecycleHook) {
    var /** @type {?} */nodeFlag = 0 /* None */;
    switch (lifecycleHook) {
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].AfterContentChecked:
            nodeFlag = 1048576 /* AfterContentChecked */;
            break;
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].AfterContentInit:
            nodeFlag = 524288 /* AfterContentInit */;
            break;
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].AfterViewChecked:
            nodeFlag = 4194304 /* AfterViewChecked */;
            break;
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].AfterViewInit:
            nodeFlag = 2097152 /* AfterViewInit */;
            break;
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].DoCheck:
            nodeFlag = 131072 /* DoCheck */;
            break;
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].OnChanges:
            nodeFlag = 262144 /* OnChanges */;
            break;
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].OnDestroy:
            nodeFlag = 65536 /* OnDestroy */;
            break;
        case __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵLifecycleHooks"].OnInit:
            nodeFlag = 32768 /* OnInit */;
            break;
    }
    return nodeFlag;
}
/**
 * @param {?} inputAst
 * @param {?} dirAst
 * @return {?}
 */
function elementBindingDef(inputAst, dirAst) {
    switch (inputAst.type) {
        case PropertyBindingType.Attribute:
            return literalArr([literal(0 /* ElementAttribute */), literal(inputAst.name), literal(inputAst.securityContext)]);
        case PropertyBindingType.Property:
            return literalArr([literal(3 /* ElementProperty */), literal(inputAst.name), literal(inputAst.securityContext)]);
        case PropertyBindingType.Animation:
            var /** @type {?} */bindingType = dirAst && dirAst.directive.isComponent ? 4 /* ComponentHostProperty */ : 3 /* ElementProperty */;
            return literalArr([literal(bindingType), literal('@' + inputAst.name), literal(inputAst.securityContext)]);
        case PropertyBindingType.Class:
            return literalArr([literal(1 /* ElementClass */), literal(inputAst.name)]);
        case PropertyBindingType.Style:
            return literalArr([literal(2 /* ElementStyle */), literal(inputAst.name), literal(inputAst.unit)]);
    }
}
/**
 * @param {?} elementAst
 * @return {?}
 */
function fixedAttrsDef(elementAst) {
    var /** @type {?} */mapResult = Object.create(null);
    elementAst.attrs.forEach(function (attrAst) {
        mapResult[attrAst.name] = attrAst.value;
    });
    elementAst.directives.forEach(function (dirAst) {
        Object.keys(dirAst.directive.hostAttributes).forEach(function (name) {
            var /** @type {?} */value = dirAst.directive.hostAttributes[name];
            var /** @type {?} */prevValue = mapResult[name];
            mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;
        });
    });
    var /** @type {?} */mapEntries = [];
    // Note: We need to sort to get a defined output order
    // for tests and for caching generated artifacts...
    return literalArr(Object.keys(mapResult).sort().map(function (attrName) {
        return literalArr([literal(attrName), literal(mapResult[attrName])]);
    }));
}
/**
 * @param {?} attrName
 * @param {?} attrValue1
 * @param {?} attrValue2
 * @return {?}
 */
function mergeAttributeValue(attrName, attrValue1, attrValue2) {
    if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
        return attrValue1 + ' ' + attrValue2;
    } else {
        return attrValue2;
    }
}
/**
 * @param {?} nodeIndex
 * @param {?} exprs
 * @return {?}
 */
function callCheckStmt(nodeIndex, exprs) {
    if (exprs.length > 10) {
        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(1 /* Dynamic */), literalArr(exprs)]);
    } else {
        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(0 /* Inline */)].concat(_toConsumableArray(exprs)));
    }
}
/**
 * @param {?} expr
 * @return {?}
 */
function callUnwrapValue(expr) {
    return importExpr(createIdentifier(Identifiers.unwrapValue)).callFn([expr]);
}
/**
 * @param {?} nodes
 * @param {?=} result
 * @return {?}
 */
function findStaticQueryIds(nodes) {
    var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();

    nodes.forEach(function (node) {
        var /** @type {?} */staticQueryIds = new Set();
        var /** @type {?} */dynamicQueryIds = new Set();
        var /** @type {?} */queryMatches = void 0;
        if (node instanceof ElementAst) {
            findStaticQueryIds(node.children, result);
            node.children.forEach(function (child) {
                var /** @type {?} */childData = result.get(child);
                childData.staticQueryIds.forEach(function (queryId) {
                    return staticQueryIds.add(queryId);
                });
                childData.dynamicQueryIds.forEach(function (queryId) {
                    return dynamicQueryIds.add(queryId);
                });
            });
            queryMatches = node.queryMatches;
        } else if (node instanceof EmbeddedTemplateAst) {
            findStaticQueryIds(node.children, result);
            node.children.forEach(function (child) {
                var /** @type {?} */childData = result.get(child);
                childData.staticQueryIds.forEach(function (queryId) {
                    return dynamicQueryIds.add(queryId);
                });
                childData.dynamicQueryIds.forEach(function (queryId) {
                    return dynamicQueryIds.add(queryId);
                });
            });
            queryMatches = node.queryMatches;
        }
        if (queryMatches) {
            queryMatches.forEach(function (match) {
                return staticQueryIds.add(match.queryId);
            });
        }
        dynamicQueryIds.forEach(function (queryId) {
            return staticQueryIds.delete(queryId);
        });
        result.set(node, { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds });
    });
    return result;
}
/**
 * @param {?} nodeStaticQueryIds
 * @return {?}
 */
function staticViewQueryIds(nodeStaticQueryIds) {
    var /** @type {?} */staticQueryIds = new Set();
    var /** @type {?} */dynamicQueryIds = new Set();
    Array.from(nodeStaticQueryIds.values()).forEach(function (entry) {
        entry.staticQueryIds.forEach(function (queryId) {
            return staticQueryIds.add(queryId);
        });
        entry.dynamicQueryIds.forEach(function (queryId) {
            return dynamicQueryIds.add(queryId);
        });
    });
    dynamicQueryIds.forEach(function (queryId) {
        return staticQueryIds.delete(queryId);
    });
    return { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds };
}
/**
 * @param {?} directives
 * @return {?}
 */
function createComponentFactoryResolver(directives) {
    var /** @type {?} */componentDirMeta = directives.find(function (dirAst) {
        return dirAst.directive.isComponent;
    });
    if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {
        var /** @type {?} */entryComponentFactories = componentDirMeta.directive.entryComponents.map(function (entryComponent) {
            return importExpr({ reference: entryComponent.componentFactory });
        });
        var /** @type {?} */cfrExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([literalArr(entryComponentFactories)]);
        var /** @type {?} */token = createIdentifierToken(Identifiers.ComponentFactoryResolver);
        var /** @type {?} */classMeta = {
            diDeps: [{ isValue: true, value: literalArr(entryComponentFactories) }, { token: token, isSkipSelf: true, isOptional: true }],
            lifecycleHooks: [],
            reference: resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)
        };
        return new ProviderAst(token, false, true, [{ token: token, multi: false, useClass: classMeta }], ProviderAstType.PrivateService, [], componentDirMeta.sourceSpan);
    }
    return null;
}
/**
 * @param {?} eventAst
 * @param {?} dirAst
 * @return {?}
 */
function elementEventNameAndTarget(eventAst, dirAst) {
    if (eventAst.isAnimation) {
        return {
            name: '@' + eventAst.name + '.' + eventAst.phase,
            target: dirAst && dirAst.directive.isComponent ? 'component' : null
        };
    } else {
        return eventAst;
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var GeneratedFile =
/**
 * @param {?} srcFileUrl
 * @param {?} genFileUrl
 * @param {?} source
 */
function GeneratedFile(srcFileUrl, genFileUrl, source) {
    _classCallCheck(this, GeneratedFile);

    this.srcFileUrl = srcFileUrl;
    this.genFileUrl = genFileUrl;
    this.source = source;
};

/**
 * @param {?} summaryResolver
 * @param {?} symbolResolver
 * @param {?} symbols
 * @param {?} types
 * @return {?}
 */


function serializeSummaries(summaryResolver, symbolResolver, symbols, types) {
    var /** @type {?} */serializer = new Serializer$1(symbolResolver, summaryResolver);
    // for symbols, we use everything except for the class metadata itself
    // (we keep the statics though), as the class metadata is contained in the
    // CompileTypeSummary.
    symbols.forEach(function (resolvedSymbol) {
        return serializer.addOrMergeSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata });
    });
    // Add summaries that are referenced by the given symbols (transitively)
    // Note: the serializer.symbols array might be growing while
    // we execute the loop!
    for (var /** @type {?} */processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {
        var /** @type {?} */symbol = serializer.symbols[processedIndex];
        if (summaryResolver.isLibraryFile(symbol.filePath)) {
            var /** @type {?} */summary = summaryResolver.resolveSummary(symbol);
            if (!summary) {
                // some symbols might originate from a plain typescript library
                // that just exported .d.ts and .metadata.json files, i.e. where no summary
                // files were created.
                var /** @type {?} */resolvedSymbol = symbolResolver.resolveSymbol(symbol);
                if (resolvedSymbol) {
                    summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };
                }
            }
            if (summary) {
                serializer.addOrMergeSummary(summary);
            }
        }
    }
    // Add type summaries.
    // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,
    // as the type summaries already contain the transitive data that they require
    // (in a minimal way).
    types.forEach(function (typeSummary) {
        serializer.addOrMergeSummary({ symbol: typeSummary.type.reference, metadata: { __symbolic: 'class' }, type: typeSummary });
        if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {
            var /** @type {?} */ngModuleSummary = typeSummary;
            ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {
                var /** @type {?} */symbol = id.reference;
                if (summaryResolver.isLibraryFile(symbol.filePath)) {
                    var /** @type {?} */_summary = summaryResolver.resolveSummary(symbol);
                    if (_summary) {
                        serializer.addOrMergeSummary(_summary);
                    }
                }
            });
        }
    });
    return serializer.serialize();
}
/**
 * @param {?} symbolCache
 * @param {?} json
 * @return {?}
 */
function deserializeSummaries(symbolCache, json) {
    var /** @type {?} */deserializer = new Deserializer(symbolCache);
    return deserializer.deserialize(json);
}

var Serializer$1 = function (_ValueTransformer2) {
    _inherits(Serializer$1, _ValueTransformer2);

    /**
     * @param {?} symbolResolver
     * @param {?} summaryResolver
     */
    function Serializer$1(symbolResolver, summaryResolver) {
        _classCallCheck(this, Serializer$1);

        var _this184 = _possibleConstructorReturn(this, (Serializer$1.__proto__ || Object.getPrototypeOf(Serializer$1)).call(this));

        _this184.symbolResolver = symbolResolver;
        _this184.summaryResolver = summaryResolver;
        // Note: This only contains symbols without members.
        _this184.symbols = [];
        _this184.indexBySymbol = new Map();
        _this184.processedSummaryBySymbol = new Map();
        _this184.processedSummaries = [];
        return _this184;
    }
    /**
     * @param {?} summary
     * @return {?}
     */


    _createClass(Serializer$1, [{
        key: 'addOrMergeSummary',
        value: function addOrMergeSummary(summary) {
            var /** @type {?} */symbolMeta = summary.metadata;
            if (symbolMeta && symbolMeta.__symbolic === 'class') {
                // For classes, we only keep their statics and arity, but not the metadata
                // of the class itself as that has been captured already via other summaries
                // (e.g. DirectiveSummary, ...).
                symbolMeta = { __symbolic: 'class', statics: symbolMeta.statics, arity: symbolMeta.arity };
            }
            var /** @type {?} */processedSummary = this.processedSummaryBySymbol.get(summary.symbol);
            if (!processedSummary) {
                processedSummary = this.processValue({ symbol: summary.symbol });
                this.processedSummaries.push(processedSummary);
                this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
            }
            // Note: == on purpose to compare with undefined!
            if (processedSummary.metadata == null && symbolMeta != null) {
                processedSummary.metadata = this.processValue(symbolMeta);
            }
            // Note: == on purpose to compare with undefined!
            if (processedSummary.type == null && summary.type != null) {
                processedSummary.type = this.processValue(summary.type);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'serialize',
        value: function serialize() {
            var _this185 = this;

            var /** @type {?} */exportAs = [];
            var /** @type {?} */json = JSON.stringify({
                summaries: this.processedSummaries,
                symbols: this.symbols.map(function (symbol, index) {
                    symbol.assertNoMembers();
                    var /** @type {?} */importAs = void 0;
                    if (_this185.summaryResolver.isLibraryFile(symbol.filePath)) {
                        importAs = symbol.name + '_' + index;
                        exportAs.push({ symbol: symbol, exportAs: importAs });
                    }
                    return {
                        __symbol: index,
                        name: symbol.name,
                        // We convert the source filenames tinto output filenames,
                        // as the generated summary file will be used when teh current
                        // compilation unit is used as a library
                        filePath: _this185.summaryResolver.getLibraryFileName(symbol.filePath),
                        importAs: importAs
                    };
                })
            });
            return { json: json, exportAs: exportAs };
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'processValue',
        value: function processValue(value) {
            return visitValue(value, this, null);
        }
        /**
         * @param {?} value
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitOther',
        value: function visitOther(value, context) {
            if (value instanceof StaticSymbol) {
                var /** @type {?} */baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);
                var /** @type {?} */index = this.indexBySymbol.get(baseSymbol);
                // Note: == on purpose to compare with undefined!
                if (index == null) {
                    index = this.indexBySymbol.size;
                    this.indexBySymbol.set(baseSymbol, index);
                    this.symbols.push(baseSymbol);
                }
                return { __symbol: index, members: value.members };
            }
        }
    }]);

    return Serializer$1;
}(ValueTransformer);

var Deserializer = function (_ValueTransformer3) {
    _inherits(Deserializer, _ValueTransformer3);

    /**
     * @param {?} symbolCache
     */
    function Deserializer(symbolCache) {
        _classCallCheck(this, Deserializer);

        var _this186 = _possibleConstructorReturn(this, (Deserializer.__proto__ || Object.getPrototypeOf(Deserializer)).call(this));

        _this186.symbolCache = symbolCache;
        return _this186;
    }
    /**
     * @param {?} json
     * @return {?}
     */


    _createClass(Deserializer, [{
        key: 'deserialize',
        value: function deserialize(json) {
            var _this187 = this;

            var /** @type {?} */data = JSON.parse(json);
            var /** @type {?} */importAs = [];
            this.symbols = [];
            data.symbols.forEach(function (serializedSymbol) {
                var /** @type {?} */symbol = _this187.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name);
                _this187.symbols.push(symbol);
                if (serializedSymbol.importAs) {
                    importAs.push({ symbol: symbol, importAs: serializedSymbol.importAs });
                }
            });
            var /** @type {?} */summaries = visitValue(data.summaries, this, null);
            return { summaries: summaries, importAs: importAs };
        }
        /**
         * @param {?} map
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitStringMap',
        value: function visitStringMap(map, context) {
            if ('__symbol' in map) {
                var /** @type {?} */baseSymbol = this.symbols[map['__symbol']];
                var /** @type {?} */members = map['members'];
                return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) : baseSymbol;
            } else {
                return _get(Deserializer.prototype.__proto__ || Object.getPrototypeOf(Deserializer.prototype), 'visitStringMap', this).call(this, map, context);
            }
        }
    }]);

    return Deserializer;
}(ValueTransformer);

var AotCompiler = function () {
    /**
     * @param {?} _config
     * @param {?} _host
     * @param {?} _metadataResolver
     * @param {?} _templateParser
     * @param {?} _styleCompiler
     * @param {?} _viewCompiler
     * @param {?} _ngModuleCompiler
     * @param {?} _outputEmitter
     * @param {?} _summaryResolver
     * @param {?} _localeId
     * @param {?} _translationFormat
     * @param {?} _symbolResolver
     */
    function AotCompiler(_config, _host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _symbolResolver) {
        _classCallCheck(this, AotCompiler);

        this._config = _config;
        this._host = _host;
        this._metadataResolver = _metadataResolver;
        this._templateParser = _templateParser;
        this._styleCompiler = _styleCompiler;
        this._viewCompiler = _viewCompiler;
        this._ngModuleCompiler = _ngModuleCompiler;
        this._outputEmitter = _outputEmitter;
        this._summaryResolver = _summaryResolver;
        this._localeId = _localeId;
        this._translationFormat = _translationFormat;
        this._symbolResolver = _symbolResolver;
    }
    /**
     * @return {?}
     */


    _createClass(AotCompiler, [{
        key: 'clearCache',
        value: function clearCache() {
            this._metadataResolver.clearCache();
        }
        /**
         * @param {?} rootFiles
         * @return {?}
         */

    }, {
        key: 'compileAll',
        value: function compileAll(rootFiles) {
            var _this188 = this;

            var /** @type {?} */programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);

            var _analyzeAndValidateNg = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver),
                ngModuleByPipeOrDirective = _analyzeAndValidateNg.ngModuleByPipeOrDirective,
                files = _analyzeAndValidateNg.files,
                ngModules = _analyzeAndValidateNg.ngModules;

            return Promise.all(ngModules.map(function (ngModule) {
                return _this188._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);
            })).then(function () {
                var /** @type {?} */sourceModules = files.map(function (file) {
                    return _this188._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables);
                });
                return ListWrapper.flatten(sourceModules);
            });
        }
        /**
         * @param {?} srcFileUrl
         * @param {?} ngModuleByPipeOrDirective
         * @param {?} directives
         * @param {?} pipes
         * @param {?} ngModules
         * @param {?} injectables
         * @return {?}
         */

    }, {
        key: '_compileSrcFile',
        value: function _compileSrcFile(srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
            var _this189 = this;

            var /** @type {?} */fileSuffix = splitTypescriptSuffix(srcFileUrl)[1];
            var /** @type {?} */statements = [];
            var /** @type {?} */exportedVars = [];
            var /** @type {?} */generatedFiles = [];
            generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, statements, exportedVars));
            // compile all ng modules
            exportedVars.push.apply(exportedVars, _toConsumableArray(ngModules.map(function (ngModuleType) {
                return _this189._compileModule(ngModuleType, statements);
            })));
            // compile components
            directives.forEach(function (dirType) {
                var /** @type {?} */compMeta = _this189._metadataResolver.getDirectiveMetadata( /** @type {?} */dirType);
                if (!compMeta.isComponent) {
                    return Promise.resolve(null);
                }
                var /** @type {?} */ngModule = ngModuleByPipeOrDirective.get(dirType);
                if (!ngModule) {
                    throw new Error('Internal Error: cannot determine the module for component ' + identifierName(compMeta.type) + '!');
                }
                _assertComponent(compMeta);
                // compile styles
                var /** @type {?} */stylesCompileResults = _this189._styleCompiler.compileComponent(compMeta);
                stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
                    generatedFiles.push(_this189._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
                });
                // compile components
                var /** @type {?} */compViewVars = _this189._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements);
                exportedVars.push(_this189._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), compViewVars.viewClassVar, compViewVars.compRenderTypeVar);
            });
            if (statements.length > 0) {
                var /** @type {?} */srcModule = this._codegenSourceModule(srcFileUrl, ngfactoryFilePath(srcFileUrl), statements, exportedVars);
                generatedFiles.unshift(srcModule);
            }
            return generatedFiles;
        }
        /**
         * @param {?} srcFileUrl
         * @param {?} directives
         * @param {?} pipes
         * @param {?} ngModules
         * @param {?} injectables
         * @param {?} targetStatements
         * @param {?} targetExportedVars
         * @return {?}
         */

    }, {
        key: '_createSummary',
        value: function _createSummary(srcFileUrl, directives, pipes, ngModules, injectables, targetStatements, targetExportedVars) {
            var _this190 = this;

            var /** @type {?} */symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl).map(function (symbol) {
                return _this190._symbolResolver.resolveSymbol(symbol);
            });
            var /** @type {?} */typeSummaries = [].concat(_toConsumableArray(ngModules.map(function (ref) {
                return _this190._metadataResolver.getNgModuleSummary(ref);
            })), _toConsumableArray(directives.map(function (ref) {
                return _this190._metadataResolver.getDirectiveSummary(ref);
            })), _toConsumableArray(pipes.map(function (ref) {
                return _this190._metadataResolver.getPipeSummary(ref);
            })), _toConsumableArray(injectables.map(function (ref) {
                return _this190._metadataResolver.getInjectableSummary(ref);
            })));

            var _serializeSummaries = serializeSummaries(this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries),
                json = _serializeSummaries.json,
                exportAs = _serializeSummaries.exportAs;

            exportAs.forEach(function (entry) {
                targetStatements.push(variable(entry.exportAs).set(importExpr({ reference: entry.symbol })).toDeclStmt());
                targetExportedVars.push(entry.exportAs);
            });
            return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);
        }
        /**
         * @param {?} ngModuleType
         * @param {?} targetStatements
         * @return {?}
         */

    }, {
        key: '_compileModule',
        value: function _compileModule(ngModuleType, targetStatements) {
            var /** @type {?} */ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
            var /** @type {?} */providers = [];
            if (this._localeId) {
                providers.push({
                    token: createIdentifierToken(Identifiers.LOCALE_ID),
                    useValue: this._localeId
                });
            }
            if (this._translationFormat) {
                providers.push({
                    token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
                    useValue: this._translationFormat
                });
            }
            var /** @type {?} */appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
            targetStatements.push.apply(targetStatements, _toConsumableArray(appCompileResult.statements));
            return appCompileResult.ngModuleFactoryVar;
        }
        /**
         * @param {?} compMeta
         * @param {?} ngModule
         * @param {?} fileSuffix
         * @param {?} targetStatements
         * @return {?}
         */

    }, {
        key: '_compileComponentFactory',
        value: function _compileComponentFactory(compMeta, ngModule, fileSuffix, targetStatements) {
            var /** @type {?} */hostType = this._metadataResolver.getHostComponentType(compMeta.type.reference);
            var /** @type {?} */hostMeta = createHostComponentMeta(hostType, compMeta, this._metadataResolver.getHostComponentViewClass(hostType));
            var /** @type {?} */hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements).viewClassVar;
            var /** @type {?} */compFactoryVar = componentFactoryName(compMeta.type.reference);
            targetStatements.push(variable(compFactoryVar).set(importExpr(createIdentifier(Identifiers.createComponentFactory)).callFn([literal(compMeta.selector), importExpr(compMeta.type), variable(hostViewFactoryVar)])).toDeclStmt(importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]), [StmtModifier.Final]));
            return compFactoryVar;
        }
        /**
         * @param {?} compMeta
         * @param {?} ngModule
         * @param {?} directiveIdentifiers
         * @param {?} componentStyles
         * @param {?} fileSuffix
         * @param {?} targetStatements
         * @return {?}
         */

    }, {
        key: '_compileComponent',
        value: function _compileComponent(compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
            var _this191 = this;

            var /** @type {?} */directives = directiveIdentifiers.map(function (dir) {
                return _this191._metadataResolver.getDirectiveSummary(dir.reference);
            });
            var /** @type {?} */pipes = ngModule.transitiveModule.pipes.map(function (pipe) {
                return _this191._metadataResolver.getPipeSummary(pipe.reference);
            });

            var _templateParser$parse = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, identifierName(compMeta.type)),
                parsedTemplate = _templateParser$parse.template,
                usedPipes = _templateParser$parse.pipes;

            var /** @type {?} */stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
            var /** @type {?} */viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, usedPipes);
            if (componentStyles) {
                targetStatements.push.apply(targetStatements, _toConsumableArray(_resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix)));
            }
            targetStatements.push.apply(targetStatements, _toConsumableArray(viewResult.statements));
            return { viewClassVar: viewResult.viewClassVar, compRenderTypeVar: viewResult.rendererTypeVar };
        }
        /**
         * @param {?} fileUrl
         * @param {?} stylesCompileResult
         * @param {?} fileSuffix
         * @return {?}
         */

    }, {
        key: '_codgenStyles',
        value: function _codgenStyles(fileUrl, stylesCompileResult, fileSuffix) {
            _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix);
            return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
        }
        /**
         * @param {?} srcFileUrl
         * @param {?} genFileUrl
         * @param {?} statements
         * @param {?} exportedVars
         * @return {?}
         */

    }, {
        key: '_codegenSourceModule',
        value: function _codegenSourceModule(srcFileUrl, genFileUrl, statements, exportedVars) {
            return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(genFileUrl, statements, exportedVars));
        }
    }]);

    return AotCompiler;
}();
/**
 * @param {?} reflector
 * @param {?} compileResult
 * @param {?} fileSuffix
 * @return {?}
 */


function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
    compileResult.dependencies.forEach(function (dep) {
        dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
    });
    return compileResult.statements;
}
/**
 * @param {?} stylesheetUrl
 * @param {?} shim
 * @param {?} suffix
 * @return {?}
 */
function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
    return '' + stylesheetUrl + (shim ? '.shim' : '') + '.ngstyle' + suffix;
}
/**
 * @param {?} meta
 * @return {?}
 */
function _assertComponent(meta) {
    if (!meta.isComponent) {
        throw new Error('Could not compile \'' + identifierName(meta.type) + '\' because it is not a component.');
    }
}
/**
 * @param {?} programStaticSymbols
 * @param {?} host
 * @param {?} metadataResolver
 * @return {?}
 */
function analyzeNgModules(programStaticSymbols, host, metadataResolver) {
    var _createNgModules2 = _createNgModules(programStaticSymbols, host, metadataResolver),
        ngModules = _createNgModules2.ngModules,
        symbolsMissingModule = _createNgModules2.symbolsMissingModule;

    return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);
}
/**
 * @param {?} programStaticSymbols
 * @param {?} host
 * @param {?} metadataResolver
 * @return {?}
 */
function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {
    var /** @type {?} */result = analyzeNgModules(programStaticSymbols, host, metadataResolver);
    if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
        var /** @type {?} */messages = result.symbolsMissingModule.map(function (s) {
            return 'Cannot determine the module for class ' + s.name + ' in ' + s.filePath + '! Add ' + s.name + ' to the NgModule to fix it.';
        });
        throw syntaxError(messages.join('\n'));
    }
    return result;
}
/**
 * @param {?} programSymbols
 * @param {?} ngModuleMetas
 * @param {?} symbolsMissingModule
 * @param {?} metadataResolver
 * @return {?}
 */
function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {
    var /** @type {?} */moduleMetasByRef = new Map();
    ngModuleMetas.forEach(function (ngModule) {
        return moduleMetasByRef.set(ngModule.type.reference, ngModule);
    });
    var /** @type {?} */ngModuleByPipeOrDirective = new Map();
    var /** @type {?} */ngModulesByFile = new Map();
    var /** @type {?} */ngDirectivesByFile = new Map();
    var /** @type {?} */ngPipesByFile = new Map();
    var /** @type {?} */ngInjectablesByFile = new Map();
    var /** @type {?} */filePaths = new Set();
    // Make sure we produce an analyzed file for each input file
    programSymbols.forEach(function (symbol) {
        var /** @type {?} */filePath = symbol.filePath;
        filePaths.add(filePath);
        if (metadataResolver.isInjectable(symbol)) {
            ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));
        }
    });
    // Looping over all modules to construct:
    // - a map from file to modules `ngModulesByFile`,
    // - a map from file to directives `ngDirectivesByFile`,
    // - a map from file to pipes `ngPipesByFile`,
    // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.
    ngModuleMetas.forEach(function (ngModuleMeta) {
        var /** @type {?} */srcFileUrl = ngModuleMeta.type.reference.filePath;
        filePaths.add(srcFileUrl);
        ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
        ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
            var /** @type {?} */fileUrl = dirIdentifier.reference.filePath;
            filePaths.add(fileUrl);
            ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
            ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
        });
        ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {
            var /** @type {?} */fileUrl = pipeIdentifier.reference.filePath;
            filePaths.add(fileUrl);
            ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));
            ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
        });
    });
    var /** @type {?} */files = [];
    filePaths.forEach(function (srcUrl) {
        var /** @type {?} */directives = ngDirectivesByFile.get(srcUrl) || [];
        var /** @type {?} */pipes = ngPipesByFile.get(srcUrl) || [];
        var /** @type {?} */ngModules = ngModulesByFile.get(srcUrl) || [];
        var /** @type {?} */injectables = ngInjectablesByFile.get(srcUrl) || [];
        files.push({ srcUrl: srcUrl, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables });
    });
    return {
        // map directive/pipe to module
        ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
        // list modules and directives for every source file
        files: files,
        ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule
    };
}
/**
 * @param {?} staticSymbolResolver
 * @param {?} files
 * @param {?} host
 * @return {?}
 */
function extractProgramSymbols(staticSymbolResolver, files, host) {
    var /** @type {?} */staticSymbols = [];
    files.filter(function (fileName) {
        return host.isSourceFile(fileName);
    }).forEach(function (sourceFile) {
        staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function (symbol) {
            var /** @type {?} */resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
            var /** @type {?} */symbolMeta = resolvedSymbol.metadata;
            if (symbolMeta) {
                if (symbolMeta.__symbolic != 'error') {
                    // Ignore symbols that are only included to record error information.
                    staticSymbols.push(resolvedSymbol.symbol);
                }
            }
        });
    });
    return staticSymbols;
}
/**
 * @param {?} programStaticSymbols
 * @param {?} host
 * @param {?} metadataResolver
 * @return {?}
 */
function _createNgModules(programStaticSymbols, host, metadataResolver) {
    var /** @type {?} */ngModules = new Map();
    var /** @type {?} */programPipesAndDirectives = [];
    var /** @type {?} */ngModulePipesAndDirective = new Set();
    var /** @type {?} */addNgModule = function addNgModule(staticSymbol) {
        if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {
            return false;
        }
        var /** @type {?} */ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
        if (ngModule) {
            ngModules.set(ngModule.type.reference, ngModule);
            ngModule.declaredDirectives.forEach(function (dir) {
                return ngModulePipesAndDirective.add(dir.reference);
            });
            ngModule.declaredPipes.forEach(function (pipe) {
                return ngModulePipesAndDirective.add(pipe.reference);
            });
            // For every input module add the list of transitively included modules
            ngModule.transitiveModule.modules.forEach(function (modMeta) {
                return addNgModule(modMeta.reference);
            });
        }
        return !!ngModule;
    };
    programStaticSymbols.forEach(function (staticSymbol) {
        if (!addNgModule(staticSymbol) && (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
            programPipesAndDirectives.push(staticSymbol);
        }
    });
    // Throw an error if any of the program pipe or directives is not declared by a module
    var /** @type {?} */symbolsMissingModule = programPipesAndDirectives.filter(function (s) {
        return !ngModulePipesAndDirective.has(s);
    });
    return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule };
}

var StaticAndDynamicReflectionCapabilities = function () {
    /**
     * @param {?} staticDelegate
     */
    function StaticAndDynamicReflectionCapabilities(staticDelegate) {
        _classCallCheck(this, StaticAndDynamicReflectionCapabilities);

        this.staticDelegate = staticDelegate;
        this.dynamicDelegate = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵReflectionCapabilities"]();
    }
    /**
     * @param {?} staticDelegate
     * @return {?}
     */


    _createClass(StaticAndDynamicReflectionCapabilities, [{
        key: 'isReflectionEnabled',

        /**
         * @return {?}
         */
        value: function isReflectionEnabled() {
            return true;
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'factory',
        value: function factory(type) {
            return this.dynamicDelegate.factory(type);
        }
        /**
         * @param {?} type
         * @param {?} lcProperty
         * @return {?}
         */

    }, {
        key: 'hasLifecycleHook',
        value: function hasLifecycleHook(type, lcProperty) {
            return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) : this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'parameters',
        value: function parameters(type) {
            return isStaticType(type) ? this.staticDelegate.parameters(type) : this.dynamicDelegate.parameters(type);
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'annotations',
        value: function annotations(type) {
            return isStaticType(type) ? this.staticDelegate.annotations(type) : this.dynamicDelegate.annotations(type);
        }
        /**
         * @param {?} typeOrFunc
         * @return {?}
         */

    }, {
        key: 'propMetadata',
        value: function propMetadata(typeOrFunc) {
            return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) : this.dynamicDelegate.propMetadata(typeOrFunc);
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'getter',
        value: function getter(name) {
            return this.dynamicDelegate.getter(name);
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'setter',
        value: function setter(name) {
            return this.dynamicDelegate.setter(name);
        }
        /**
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'method',
        value: function method(name) {
            return this.dynamicDelegate.method(name);
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'importUri',
        value: function importUri(type) {
            return this.staticDelegate.importUri(type);
        }
        /**
         * @param {?} name
         * @param {?} moduleUrl
         * @param {?} members
         * @param {?} runtime
         * @return {?}
         */

    }, {
        key: 'resolveIdentifier',
        value: function resolveIdentifier(name, moduleUrl, members, runtime) {
            return this.staticDelegate.resolveIdentifier(name, moduleUrl, members);
        }
        /**
         * @param {?} enumIdentifier
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'resolveEnum',
        value: function resolveEnum(enumIdentifier, name) {
            if (isStaticType(enumIdentifier)) {
                return this.staticDelegate.resolveEnum(enumIdentifier, name);
            } else {
                return null;
            }
        }
    }], [{
        key: 'install',
        value: function install(staticDelegate) {
            __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"].updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
        }
    }]);

    return StaticAndDynamicReflectionCapabilities;
}();
/**
 * @param {?} type
 * @return {?}
 */


function isStaticType(type) {
    return (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type.name && type.filePath;
}

var /** @type {?} */ANGULAR_CORE = '@angular/core';
var /** @type {?} */HIDDEN_KEY = /^\$.*\$$/;
var /** @type {?} */IGNORE = {
    __symbolic: 'ignore'
};
/**
 * @param {?} value
 * @return {?}
 */
function shouldIgnore(value) {
    return value && value.__symbolic == 'ignore';
}
/**
 * A static reflector implements enough of the Reflector API that is necessary to compile
 * templates statically.
 */

var StaticReflector = function () {
    /**
     * @param {?} symbolResolver
     * @param {?=} knownMetadataClasses
     * @param {?=} knownMetadataFunctions
     * @param {?=} errorRecorder
     */
    function StaticReflector(symbolResolver) {
        var knownMetadataClasses = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        var _this192 = this;

        var knownMetadataFunctions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        var errorRecorder = arguments[3];

        _classCallCheck(this, StaticReflector);

        this.symbolResolver = symbolResolver;
        this.errorRecorder = errorRecorder;
        this.annotationCache = new Map();
        this.propertyCache = new Map();
        this.parameterCache = new Map();
        this.methodCache = new Map();
        this.conversionMap = new Map();
        this.initializeConversionMap();
        knownMetadataClasses.forEach(function (kc) {
            return _this192._registerDecoratorOrConstructor(_this192.getStaticSymbol(kc.filePath, kc.name), kc.ctor);
        });
        knownMetadataFunctions.forEach(function (kf) {
            return _this192._registerFunction(_this192.getStaticSymbol(kf.filePath, kf.name), kf.fn);
        });
    }
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */


    _createClass(StaticReflector, [{
        key: 'importUri',
        value: function importUri(typeOrFunc) {
            var /** @type {?} */staticSymbol = this.findSymbolDeclaration(typeOrFunc);
            return staticSymbol ? staticSymbol.filePath : null;
        }
        /**
         * @param {?} name
         * @param {?} moduleUrl
         * @param {?} members
         * @return {?}
         */

    }, {
        key: 'resolveIdentifier',
        value: function resolveIdentifier(name, moduleUrl, members) {
            var /** @type {?} */importSymbol = this.getStaticSymbol(moduleUrl, name);
            var /** @type {?} */rootSymbol = this.findDeclaration(moduleUrl, name);
            if (importSymbol != rootSymbol) {
                this.symbolResolver.recordImportAs(rootSymbol, importSymbol);
            }
            if (members && members.length) {
                return this.getStaticSymbol(rootSymbol.filePath, rootSymbol.name, members);
            }
            return rootSymbol;
        }
        /**
         * @param {?} moduleUrl
         * @param {?} name
         * @param {?=} containingFile
         * @return {?}
         */

    }, {
        key: 'findDeclaration',
        value: function findDeclaration(moduleUrl, name, containingFile) {
            return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
        }
        /**
         * @param {?} symbol
         * @return {?}
         */

    }, {
        key: 'findSymbolDeclaration',
        value: function findSymbolDeclaration(symbol) {
            var /** @type {?} */resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);
            if (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
                return this.findSymbolDeclaration(resolvedSymbol.metadata);
            } else {
                return symbol;
            }
        }
        /**
         * @param {?} enumIdentifier
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'resolveEnum',
        value: function resolveEnum(enumIdentifier, name) {
            var /** @type {?} */staticSymbol = enumIdentifier;
            var /** @type {?} */members = (staticSymbol.members || []).concat(name);
            return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, members);
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'annotations',
        value: function annotations(type) {
            var /** @type {?} */annotations = this.annotationCache.get(type);
            if (!annotations) {
                annotations = [];
                var /** @type {?} */classMetadata = this.getTypeMetadata(type);
                if (classMetadata['extends']) {
                    var /** @type {?} */parentType = this.trySimplify(type, classMetadata['extends']);
                    if (parentType && parentType instanceof StaticSymbol) {
                        var _annotations;

                        var /** @type {?} */parentAnnotations = this.annotations(parentType);
                        (_annotations = annotations).push.apply(_annotations, _toConsumableArray(parentAnnotations));
                    }
                }
                if (classMetadata['decorators']) {
                    var _annotations2;

                    var /** @type {?} */ownAnnotations = this.simplify(type, classMetadata['decorators']);
                    (_annotations2 = annotations).push.apply(_annotations2, _toConsumableArray(ownAnnotations));
                }
                this.annotationCache.set(type, annotations.filter(function (ann) {
                    return !!ann;
                }));
            }
            return annotations;
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'propMetadata',
        value: function propMetadata(type) {
            var _this193 = this;

            var /** @type {?} */propMetadata = this.propertyCache.get(type);
            if (!propMetadata) {
                var /** @type {?} */classMetadata = this.getTypeMetadata(type);
                propMetadata = {};
                if (classMetadata['extends']) {
                    var /** @type {?} */parentType = this.simplify(type, classMetadata['extends']);
                    if (parentType instanceof StaticSymbol) {
                        var /** @type {?} */parentPropMetadata = this.propMetadata(parentType);
                        Object.keys(parentPropMetadata).forEach(function (parentProp) {
                            propMetadata[parentProp] = parentPropMetadata[parentProp];
                        });
                    }
                }
                var /** @type {?} */members = classMetadata['members'] || {};
                Object.keys(members).forEach(function (propName) {
                    var /** @type {?} */propData = members[propName];
                    var /** @type {?} */prop = propData.find(function (a) {
                        return a['__symbolic'] == 'property' || a['__symbolic'] == 'method';
                    });
                    var /** @type {?} */decorators = [];
                    if (propMetadata[propName]) {
                        decorators.push.apply(decorators, _toConsumableArray(propMetadata[propName]));
                    }
                    propMetadata[propName] = decorators;
                    if (prop && prop['decorators']) {
                        decorators.push.apply(decorators, _toConsumableArray(_this193.simplify(type, prop['decorators'])));
                    }
                });
                this.propertyCache.set(type, propMetadata);
            }
            return propMetadata;
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'parameters',
        value: function parameters(type) {
            if (!(type instanceof StaticSymbol)) {
                this.reportError(new Error('parameters received ' + JSON.stringify(type) + ' which is not a StaticSymbol'), type);
                return [];
            }
            try {
                var /** @type {?} */parameters = this.parameterCache.get(type);
                if (!parameters) {
                    var /** @type {?} */classMetadata = this.getTypeMetadata(type);
                    var /** @type {?} */members = classMetadata ? classMetadata['members'] : null;
                    var /** @type {?} */ctorData = members ? members['__ctor__'] : null;
                    if (ctorData) {
                        var /** @type {?} */ctor = ctorData.find(function (a) {
                            return a['__symbolic'] == 'constructor';
                        });
                        var /** @type {?} */parameterTypes = this.simplify(type, ctor['parameters'] || []);
                        var /** @type {?} */parameterDecorators = this.simplify(type, ctor['parameterDecorators'] || []);
                        parameters = [];
                        parameterTypes.forEach(function (paramType, index) {
                            var /** @type {?} */nestedResult = [];
                            if (paramType) {
                                nestedResult.push(paramType);
                            }
                            var /** @type {?} */decorators = parameterDecorators ? parameterDecorators[index] : null;
                            if (decorators) {
                                nestedResult.push.apply(nestedResult, _toConsumableArray(decorators));
                            }
                            parameters.push(nestedResult);
                        });
                    } else if (classMetadata['extends']) {
                        var /** @type {?} */parentType = this.simplify(type, classMetadata['extends']);
                        if (parentType instanceof StaticSymbol) {
                            parameters = this.parameters(parentType);
                        }
                    }
                    if (!parameters) {
                        parameters = [];
                    }
                    this.parameterCache.set(type, parameters);
                }
                return parameters;
            } catch (e) {
                console.error('Failed on type ' + JSON.stringify(type) + ' with error ' + e);
                throw e;
            }
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: '_methodNames',
        value: function _methodNames(type) {
            var /** @type {?} */methodNames = this.methodCache.get(type);
            if (!methodNames) {
                var /** @type {?} */classMetadata = this.getTypeMetadata(type);
                methodNames = {};
                if (classMetadata['extends']) {
                    var /** @type {?} */parentType = this.simplify(type, classMetadata['extends']);
                    if (parentType instanceof StaticSymbol) {
                        var /** @type {?} */parentMethodNames = this._methodNames(parentType);
                        Object.keys(parentMethodNames).forEach(function (parentProp) {
                            methodNames[parentProp] = parentMethodNames[parentProp];
                        });
                    }
                }
                var /** @type {?} */members = classMetadata['members'] || {};
                Object.keys(members).forEach(function (propName) {
                    var /** @type {?} */propData = members[propName];
                    var /** @type {?} */isMethod = propData.some(function (a) {
                        return a['__symbolic'] == 'method';
                    });
                    methodNames[propName] = methodNames[propName] || isMethod;
                });
                this.methodCache.set(type, methodNames);
            }
            return methodNames;
        }
        /**
         * @param {?} type
         * @param {?} lcProperty
         * @return {?}
         */

    }, {
        key: 'hasLifecycleHook',
        value: function hasLifecycleHook(type, lcProperty) {
            if (!(type instanceof StaticSymbol)) {
                this.reportError(new Error('hasLifecycleHook received ' + JSON.stringify(type) + ' which is not a StaticSymbol'), type);
            }
            try {
                return !!this._methodNames(type)[lcProperty];
            } catch (e) {
                console.error('Failed on type ' + JSON.stringify(type) + ' with error ' + e);
                throw e;
            }
        }
        /**
         * @param {?} type
         * @param {?} ctor
         * @return {?}
         */

    }, {
        key: '_registerDecoratorOrConstructor',
        value: function _registerDecoratorOrConstructor(type, ctor) {
            this.conversionMap.set(type, function (context, args) {
                return new (Function.prototype.bind.apply(ctor, [null].concat(_toConsumableArray(args))))();
            });
        }
        /**
         * @param {?} type
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: '_registerFunction',
        value: function _registerFunction(type, fn) {
            this.conversionMap.set(type, function (context, args) {
                return fn.apply(undefined, args);
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: 'initializeConversionMap',
        value: function initializeConversionMap() {
            this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');
            this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Self"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["SkipSelf"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Attribute"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChild"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["ContentChildren"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChildren"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["HostBinding"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Directive"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"]);
            // Note: Some metadata classes can be used directly with Provider.deps.
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Host"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Self"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["SkipSelf"]);
            this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"]);
            this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'trigger'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["trigger"]);
            this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'state'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["state"]);
            this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'transition'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["transition"]);
            this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'style'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["style"]);
            this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'animate'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["animate"]);
            this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'keyframes'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["keyframes"]);
            this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'sequence'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["sequence"]);
            this._registerFunction(this.findDeclaration(ANGULAR_CORE, 'group'), __WEBPACK_IMPORTED_MODULE_0__angular_core__["group"]);
        }
        /**
         * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
         * All types passed to the StaticResolver should be pseudo-types returned by this method.
         *
         * @param {?} declarationFile the absolute path of the file where the symbol is declared
         * @param {?} name the name of the type.
         * @param {?=} members
         * @return {?}
         */

    }, {
        key: 'getStaticSymbol',
        value: function getStaticSymbol(declarationFile, name, members) {
            return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
        }
        /**
         * @param {?} error
         * @param {?} context
         * @param {?=} path
         * @return {?}
         */

    }, {
        key: 'reportError',
        value: function reportError(error, context, path) {
            if (this.errorRecorder) {
                this.errorRecorder(error, context && context.filePath || path);
            } else {
                throw error;
            }
        }
        /**
         * Simplify but discard any errors
         * @param {?} context
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'trySimplify',
        value: function trySimplify(context, value) {
            var /** @type {?} */originalRecorder = this.errorRecorder;
            this.errorRecorder = function (error, fileName) {};
            var /** @type {?} */result = this.simplify(context, value);
            this.errorRecorder = originalRecorder;
            return result;
        }
        /**
         * \@internal
         * @param {?} context
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'simplify',
        value: function simplify(context, value) {
            var _this194 = this;

            var /** @type {?} */self = this;
            var /** @type {?} */scope = BindingScope.empty;
            var /** @type {?} */calling = new Map();
            /**
             * @param {?} context
             * @param {?} value
             * @param {?} depth
             * @return {?}
             */
            function simplifyInContext(context, value, depth) {
                /**
                 * @param {?} staticSymbol
                 * @return {?}
                 */
                function resolveReferenceValue(staticSymbol) {
                    var /** @type {?} */resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);
                    return resolvedSymbol ? resolvedSymbol.metadata : null;
                }
                /**
                 * @param {?} functionSymbol
                 * @param {?} targetFunction
                 * @param {?} args
                 * @return {?}
                 */
                function simplifyCall(functionSymbol, targetFunction, args) {
                    if (targetFunction && targetFunction['__symbolic'] == 'function') {
                        if (calling.get(functionSymbol)) {
                            throw new Error('Recursion not supported');
                        }
                        calling.set(functionSymbol, true);
                        try {
                            var /** @type {?} */_value = targetFunction['value'];
                            if (_value && (depth != 0 || _value.__symbolic != 'error')) {
                                var /** @type {?} */parameters = targetFunction['parameters'];
                                var /** @type {?} */defaults = targetFunction.defaults;
                                args = args.map(function (arg) {
                                    return simplifyInContext(context, arg, depth + 1);
                                }).map(function (arg) {
                                    return shouldIgnore(arg) ? undefined : arg;
                                });
                                if (defaults && defaults.length > args.length) {
                                    var _args;

                                    (_args = args).push.apply(_args, _toConsumableArray(defaults.slice(args.length).map(function (value) {
                                        return simplify(value);
                                    })));
                                }
                                var /** @type {?} */functionScope = BindingScope.build();
                                for (var /** @type {?} */i = 0; i < parameters.length; i++) {
                                    functionScope.define(parameters[i], args[i]);
                                }
                                var /** @type {?} */oldScope = scope;
                                var /** @type {?} */_result = void 0;
                                try {
                                    scope = functionScope.done();
                                    _result = simplifyInContext(functionSymbol, _value, depth + 1);
                                } finally {
                                    scope = oldScope;
                                }
                                return _result;
                            }
                        } finally {
                            calling.delete(functionSymbol);
                        }
                    }
                    if (depth === 0) {
                        // If depth is 0 we are evaluating the top level expression that is describing element
                        // decorator. In this case, it is a decorator we don't understand, such as a custom
                        // non-angular decorator, and we should just ignore it.
                        return IGNORE;
                    }
                    return simplify({ __symbolic: 'error', message: 'Function call not supported', context: functionSymbol });
                }
                /**
                 * @param {?} expression
                 * @return {?}
                 */
                function simplify(expression) {
                    if (isPrimitive$1(expression)) {
                        return expression;
                    }
                    if (expression instanceof Array) {
                        var /** @type {?} */_result2 = [];
                        var _iteratorNormalCompletion5 = true;
                        var _didIteratorError5 = false;
                        var _iteratorError5 = undefined;

                        try {
                            for (var _iterator5 = expression[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                var item = _step5.value;

                                // Check for a spread expression
                                if (item && item.__symbolic === 'spread') {
                                    var /** @type {?} */spreadArray = simplify(item.expression);
                                    if (Array.isArray(spreadArray)) {
                                        var _iteratorNormalCompletion6 = true;
                                        var _didIteratorError6 = false;
                                        var _iteratorError6 = undefined;

                                        try {
                                            for (var _iterator6 = spreadArray[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                                var spreadItem = _step6.value;

                                                _result2.push(spreadItem);
                                            }
                                        } catch (err) {
                                            _didIteratorError6 = true;
                                            _iteratorError6 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                                                    _iterator6.return();
                                                }
                                            } finally {
                                                if (_didIteratorError6) {
                                                    throw _iteratorError6;
                                                }
                                            }
                                        }

                                        continue;
                                    }
                                }
                                var /** @type {?} */_value2 = simplify(item);
                                if (shouldIgnore(_value2)) {
                                    continue;
                                }
                                _result2.push(_value2);
                            }
                        } catch (err) {
                            _didIteratorError5 = true;
                            _iteratorError5 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                                    _iterator5.return();
                                }
                            } finally {
                                if (_didIteratorError5) {
                                    throw _iteratorError5;
                                }
                            }
                        }

                        return _result2;
                    }
                    if (expression instanceof StaticSymbol) {
                        // Stop simplification at builtin symbols
                        if (expression === self.injectionToken || expression === self.opaqueToken || self.conversionMap.has(expression)) {
                            return expression;
                        } else {
                            var /** @type {?} */staticSymbol = expression;
                            var /** @type {?} */declarationValue = resolveReferenceValue(staticSymbol);
                            if (declarationValue) {
                                return simplifyInContext(staticSymbol, declarationValue, depth + 1);
                            } else {
                                return staticSymbol;
                            }
                        }
                    }
                    if (expression) {
                        if (expression['__symbolic']) {
                            var /** @type {?} */_staticSymbol = void 0;
                            switch (expression['__symbolic']) {
                                case 'binop':
                                    var /** @type {?} */left = simplify(expression['left']);
                                    if (shouldIgnore(left)) return left;
                                    var /** @type {?} */right = simplify(expression['right']);
                                    if (shouldIgnore(right)) return right;
                                    switch (expression['operator']) {
                                        case '&&':
                                            return left && right;
                                        case '||':
                                            return left || right;
                                        case '|':
                                            return left | right;
                                        case '^':
                                            return left ^ right;
                                        case '&':
                                            return left & right;
                                        case '==':
                                            return left == right;
                                        case '!=':
                                            return left != right;
                                        case '===':
                                            return left === right;
                                        case '!==':
                                            return left !== right;
                                        case '<':
                                            return left < right;
                                        case '>':
                                            return left > right;
                                        case '<=':
                                            return left <= right;
                                        case '>=':
                                            return left >= right;
                                        case '<<':
                                            return left << right;
                                        case '>>':
                                            return left >> right;
                                        case '+':
                                            return left + right;
                                        case '-':
                                            return left - right;
                                        case '*':
                                            return left * right;
                                        case '/':
                                            return left / right;
                                        case '%':
                                            return left % right;
                                    }
                                    return null;
                                case 'if':
                                    var /** @type {?} */condition = simplify(expression['condition']);
                                    return condition ? simplify(expression['thenExpression']) : simplify(expression['elseExpression']);
                                case 'pre':
                                    var /** @type {?} */operand = simplify(expression['operand']);
                                    if (shouldIgnore(operand)) return operand;
                                    switch (expression['operator']) {
                                        case '+':
                                            return operand;
                                        case '-':
                                            return -operand;
                                        case '!':
                                            return !operand;
                                        case '~':
                                            return ~operand;
                                    }
                                    return null;
                                case 'index':
                                    var /** @type {?} */indexTarget = simplify(expression['expression']);
                                    var /** @type {?} */index = simplify(expression['index']);
                                    if (indexTarget && isPrimitive$1(index)) return indexTarget[index];
                                    return null;
                                case 'select':
                                    var /** @type {?} */member = expression['member'];
                                    var /** @type {?} */selectContext = context;
                                    var /** @type {?} */selectTarget = simplify(expression['expression']);
                                    if (selectTarget instanceof StaticSymbol) {
                                        var /** @type {?} */members = selectTarget.members.concat(member);
                                        selectContext = self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);
                                        var /** @type {?} */_declarationValue = resolveReferenceValue(selectContext);
                                        if (_declarationValue) {
                                            return simplifyInContext(selectContext, _declarationValue, depth + 1);
                                        } else {
                                            return selectContext;
                                        }
                                    }
                                    if (selectTarget && isPrimitive$1(member)) return simplifyInContext(selectContext, selectTarget[member], depth + 1);
                                    return null;
                                case 'reference':
                                    // Note: This only has to deal with variable references,
                                    // as symbol references have been converted into StaticSymbols already
                                    // in the StaticSymbolResolver!
                                    var /** @type {?} */name = expression['name'];
                                    var /** @type {?} */localValue = scope.resolve(name);
                                    if (localValue != BindingScope.missing) {
                                        return localValue;
                                    }
                                    break;
                                case 'class':
                                    return context;
                                case 'function':
                                    return context;
                                case 'new':
                                case 'call':
                                    // Determine if the function is a built-in conversion
                                    _staticSymbol = simplifyInContext(context, expression['expression'], depth + 1);
                                    if (_staticSymbol instanceof StaticSymbol) {
                                        if (_staticSymbol === self.injectionToken || _staticSymbol === self.opaqueToken) {
                                            // if somebody calls new InjectionToken, don't create an InjectionToken,
                                            // but rather return the symbol to which the InjectionToken is assigned to.
                                            return context;
                                        }
                                        var /** @type {?} */argExpressions = expression['arguments'] || [];
                                        var /** @type {?} */converter = self.conversionMap.get(_staticSymbol);
                                        if (converter) {
                                            var /** @type {?} */args = argExpressions.map(function (arg) {
                                                return simplifyInContext(context, arg, depth + 1);
                                            }).map(function (arg) {
                                                return shouldIgnore(arg) ? undefined : arg;
                                            });
                                            return converter(context, args);
                                        } else {
                                            // Determine if the function is one we can simplify.
                                            var /** @type {?} */targetFunction = resolveReferenceValue(_staticSymbol);
                                            return simplifyCall(_staticSymbol, targetFunction, argExpressions);
                                        }
                                    }
                                    break;
                                case 'error':
                                    var /** @type {?} */message = produceErrorMessage(expression);
                                    if (expression['line']) {
                                        message = message + ' (position ' + (expression['line'] + 1) + ':' + (expression['character'] + 1) + ' in the original .ts file)';
                                        self.reportError(positionalError(message, context.filePath, expression['line'], expression['character']), context);
                                    } else {
                                        self.reportError(new Error(message), context);
                                    }
                                    return IGNORE;
                                case 'ignore':
                                    return expression;
                            }
                            return null;
                        }
                        return mapStringMap(expression, function (value, name) {
                            return simplify(value);
                        });
                    }
                    return IGNORE;
                }
                try {
                    return simplify(value);
                } catch (e) {
                    var /** @type {?} */members = context.members.length ? '.' + context.members.join('.') : '';
                    var /** @type {?} */message = e.message + ', resolving symbol ' + context.name + members + ' in ' + context.filePath;
                    if (e.fileName) {
                        throw positionalError(message, e.fileName, e.line, e.column);
                    }
                    throw syntaxError(message);
                }
            }
            var /** @type {?} */recordedSimplifyInContext = function recordedSimplifyInContext(context, value, depth) {
                try {
                    return simplifyInContext(context, value, depth);
                } catch (e) {
                    _this194.reportError(e, context);
                }
            };
            var /** @type {?} */result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) : simplifyInContext(context, value, 0);
            if (shouldIgnore(result)) {
                return undefined;
            }
            return result;
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'getTypeMetadata',
        value: function getTypeMetadata(type) {
            var /** @type {?} */resolvedSymbol = this.symbolResolver.resolveSymbol(type);
            return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata : { __symbolic: 'class' };
        }
    }]);

    return StaticReflector;
}();
/**
 * @param {?} error
 * @return {?}
 */


function expandedMessage(error) {
    switch (error.message) {
        case 'Reference to non-exported class':
            if (error.context && error.context.className) {
                return 'Reference to a non-exported class ' + error.context.className + '. Consider exporting the class';
            }
            break;
        case 'Variable not initialized':
            return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';
        case 'Destructuring not supported':
            return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';
        case 'Could not resolve type':
            if (error.context && error.context.typeName) {
                return 'Could not resolve type ' + error.context.typeName;
            }
            break;
        case 'Function call not supported':
            var /** @type {?} */prefix = error.context && error.context.name ? 'Calling function \'' + error.context.name + '\', f' : 'F';
            return prefix + 'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';
        case 'Reference to a local symbol':
            if (error.context && error.context.name) {
                return 'Reference to a local (non-exported) symbol \'' + error.context.name + '\'. Consider exporting the symbol';
            }
            break;
    }
    return error.message;
}
/**
 * @param {?} error
 * @return {?}
 */
function produceErrorMessage(error) {
    return 'Error encountered resolving symbol values statically. ' + expandedMessage(error);
}
/**
 * @param {?} input
 * @param {?} transform
 * @return {?}
 */
function mapStringMap(input, transform) {
    if (!input) return {};
    var /** @type {?} */result = {};
    Object.keys(input).forEach(function (key) {
        var /** @type {?} */value = transform(input[key], key);
        if (!shouldIgnore(value)) {
            if (HIDDEN_KEY.test(key)) {
                Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });
            } else {
                result[key] = value;
            }
        }
    });
    return result;
}
/**
 * @param {?} o
 * @return {?}
 */
function isPrimitive$1(o) {
    return o === null || typeof o !== 'function' && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) !== 'object';
}
/**
 * @abstract
 */

var BindingScope = function () {
    function BindingScope() {
        _classCallCheck(this, BindingScope);
    }

    _createClass(BindingScope, [{
        key: 'resolve',

        /**
         * @abstract
         * @param {?} name
         * @return {?}
         */
        value: function resolve(name) {}
        /**
         * @return {?}
         */

    }], [{
        key: 'build',
        value: function build() {
            var /** @type {?} */current = new Map();
            return {
                define: function define(name, value) {
                    current.set(name, value);
                    return this;
                },
                done: function done() {
                    return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
                }
            };
        }
    }]);

    return BindingScope;
}();

BindingScope.missing = {};
BindingScope.empty = { resolve: function resolve(name) {
        return BindingScope.missing;
    } };

var PopulatedScope = function (_BindingScope) {
    _inherits(PopulatedScope, _BindingScope);

    /**
     * @param {?} bindings
     */
    function PopulatedScope(bindings) {
        _classCallCheck(this, PopulatedScope);

        var _this195 = _possibleConstructorReturn(this, (PopulatedScope.__proto__ || Object.getPrototypeOf(PopulatedScope)).call(this));

        _this195.bindings = bindings;
        return _this195;
    }
    /**
     * @param {?} name
     * @return {?}
     */


    _createClass(PopulatedScope, [{
        key: 'resolve',
        value: function resolve(name) {
            return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
        }
    }]);

    return PopulatedScope;
}(BindingScope);
/**
 * @param {?} message
 * @param {?} fileName
 * @param {?} line
 * @param {?} column
 * @return {?}
 */


function positionalError(message, fileName, line, column) {
    var /** @type {?} */result = new Error(message);
    result.fileName = fileName;
    result.line = line;
    result.column = column;
    return result;
}

var ResolvedStaticSymbol =
/**
 * @param {?} symbol
 * @param {?} metadata
 */
function ResolvedStaticSymbol(symbol, metadata) {
    _classCallCheck(this, ResolvedStaticSymbol);

    this.symbol = symbol;
    this.metadata = metadata;
};

var /** @type {?} */SUPPORTED_SCHEMA_VERSION = 3;
/**
 * This class is responsible for loading metadata per symbol,
 * and normalizing references between symbols.
 *
 * Internally, it only uses symbols without members,
 * and deduces the values for symbols with members based
 * on these symbols.
 */

var StaticSymbolResolver = function () {
    /**
     * @param {?} host
     * @param {?} staticSymbolCache
     * @param {?} summaryResolver
     * @param {?=} errorRecorder
     */
    function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {
        _classCallCheck(this, StaticSymbolResolver);

        this.host = host;
        this.staticSymbolCache = staticSymbolCache;
        this.summaryResolver = summaryResolver;
        this.errorRecorder = errorRecorder;
        this.metadataCache = new Map();
        this.resolvedSymbols = new Map();
        this.resolvedFilePaths = new Set();
        this.importAs = new Map();
    }
    /**
     * @param {?} staticSymbol
     * @return {?}
     */


    _createClass(StaticSymbolResolver, [{
        key: 'resolveSymbol',
        value: function resolveSymbol(staticSymbol) {
            if (staticSymbol.members.length > 0) {
                return this._resolveSymbolMembers(staticSymbol);
            }
            var /** @type {?} */result = this.resolvedSymbols.get(staticSymbol);
            if (result) {
                return result;
            }
            result = this._resolveSymbolFromSummary(staticSymbol);
            if (result) {
                return result;
            }
            // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
            // have summaries, only .d.ts files. So we always need to check both, the summary
            // and metadata.
            this._createSymbolsOf(staticSymbol.filePath);
            result = this.resolvedSymbols.get(staticSymbol);
            return result;
        }
        /**
         * getImportAs produces a symbol that can be used to import the given symbol.
         * The import might be different than the symbol if the symbol is exported from
         * a library with a summary; in which case we want to import the symbol from the
         * ngfactory re-export instead of directly to avoid introducing a direct dependency
         * on an otherwise indirect dependency.
         *
         * @param {?} staticSymbol the symbol for which to generate a import symbol
         * @return {?}
         */

    }, {
        key: 'getImportAs',
        value: function getImportAs(staticSymbol) {
            if (staticSymbol.members.length) {
                var /** @type {?} */baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);
                var /** @type {?} */baseImportAs = this.getImportAs(baseSymbol);
                return baseImportAs ? this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) : null;
            }
            var /** @type {?} */result = this.summaryResolver.getImportAs(staticSymbol);
            if (!result) {
                result = this.importAs.get(staticSymbol);
            }
            return result;
        }
        /**
         * getTypeArity returns the number of generic type parameters the given symbol
         * has. If the symbol is not a type the result is null.
         * @param {?} staticSymbol
         * @return {?}
         */

    }, {
        key: 'getTypeArity',
        value: function getTypeArity(staticSymbol) {
            // If the file is a factory file, don't resolve the symbol as doing so would
            // cause the metadata for an factory file to be loaded which doesn't exist.
            // All references to generated classes must include the correct arity whenever
            // generating code.
            if (isNgFactoryFile(staticSymbol.filePath)) {
                return null;
            }
            var /** @type {?} */resolvedSymbol = this.resolveSymbol(staticSymbol);
            while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
                resolvedSymbol = this.resolveSymbol(resolvedSymbol.metadata);
            }
            return resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity || null;
        }
        /**
         * @param {?} sourceSymbol
         * @param {?} targetSymbol
         * @return {?}
         */

    }, {
        key: 'recordImportAs',
        value: function recordImportAs(sourceSymbol, targetSymbol) {
            sourceSymbol.assertNoMembers();
            targetSymbol.assertNoMembers();
            this.importAs.set(sourceSymbol, targetSymbol);
        }
        /**
         * @param {?} staticSymbol
         * @return {?}
         */

    }, {
        key: '_resolveSymbolMembers',
        value: function _resolveSymbolMembers(staticSymbol) {
            var /** @type {?} */members = staticSymbol.members;
            var /** @type {?} */baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));
            if (!baseResolvedSymbol) {
                return null;
            }
            var /** @type {?} */baseMetadata = baseResolvedSymbol.metadata;
            if (baseMetadata instanceof StaticSymbol) {
                return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));
            } else if (baseMetadata && baseMetadata.__symbolic === 'class') {
                if (baseMetadata.statics && members.length === 1) {
                    return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);
                }
            } else {
                var /** @type {?} */value = baseMetadata;
                for (var /** @type {?} */i = 0; i < members.length && value; i++) {
                    value = value[members[i]];
                }
                return new ResolvedStaticSymbol(staticSymbol, value);
            }
            return null;
        }
        /**
         * @param {?} staticSymbol
         * @return {?}
         */

    }, {
        key: '_resolveSymbolFromSummary',
        value: function _resolveSymbolFromSummary(staticSymbol) {
            var /** @type {?} */summary = this.summaryResolver.resolveSummary(staticSymbol);
            return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
        }
        /**
         * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
         * All types passed to the StaticResolver should be pseudo-types returned by this method.
         *
         * @param {?} declarationFile the absolute path of the file where the symbol is declared
         * @param {?} name the name of the type.
         * @param {?=} members a symbol for a static member of the named type
         * @return {?}
         */

    }, {
        key: 'getStaticSymbol',
        value: function getStaticSymbol(declarationFile, name, members) {
            return this.staticSymbolCache.get(declarationFile, name, members);
        }
        /**
         * @param {?} filePath
         * @return {?}
         */

    }, {
        key: 'getSymbolsOf',
        value: function getSymbolsOf(filePath) {
            // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
            // have summaries, only .d.ts files. So we always need to check both, the summary
            // and metadata.
            var /** @type {?} */symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));
            this._createSymbolsOf(filePath);
            this.resolvedSymbols.forEach(function (resolvedSymbol) {
                if (resolvedSymbol.symbol.filePath === filePath) {
                    symbols.add(resolvedSymbol.symbol);
                }
            });
            return Array.from(symbols);
        }
        /**
         * @param {?} filePath
         * @return {?}
         */

    }, {
        key: '_createSymbolsOf',
        value: function _createSymbolsOf(filePath) {
            var _this196 = this;

            if (this.resolvedFilePaths.has(filePath)) {
                return;
            }
            this.resolvedFilePaths.add(filePath);
            var /** @type {?} */resolvedSymbols = [];
            var /** @type {?} */metadata = this.getModuleMetadata(filePath);
            if (metadata['metadata']) {
                // handle direct declarations of the symbol
                var /** @type {?} */topLevelSymbolNames = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));
                Object.keys(metadata['metadata']).forEach(function (metadataKey) {
                    var /** @type {?} */symbolMeta = metadata['metadata'][metadataKey];
                    var /** @type {?} */name = unescapeIdentifier(metadataKey);
                    var /** @type {?} */canonicalSymbol = _this196.getStaticSymbol(filePath, name);
                    if (metadata['importAs']) {
                        // Index bundle indexes should use the importAs module name instead of a reference
                        // to the .d.ts file directly.
                        var /** @type {?} */importSymbol = _this196.getStaticSymbol(metadata['importAs'], name);
                        _this196.recordImportAs(canonicalSymbol, importSymbol);
                    }
                    resolvedSymbols.push(_this196.createResolvedSymbol(canonicalSymbol, topLevelSymbolNames, symbolMeta));
                });
            }
            // handle the symbols in one of the re-export location
            if (metadata['exports']) {
                var _iteratorNormalCompletion7 = true;
                var _didIteratorError7 = false;
                var _iteratorError7 = undefined;

                try {
                    var _loop = function _loop() {
                        var moduleExport = _step7.value;

                        // handle the symbols in the list of explicitly re-exported symbols.
                        if (moduleExport.export) {
                            moduleExport.export.forEach(function (exportSymbol) {
                                var /** @type {?} */symbolName = void 0;
                                if (typeof exportSymbol === 'string') {
                                    symbolName = exportSymbol;
                                } else {
                                    symbolName = exportSymbol.as;
                                }
                                symbolName = unescapeIdentifier(symbolName);
                                var /** @type {?} */symName = symbolName;
                                if (typeof exportSymbol !== 'string') {
                                    symName = unescapeIdentifier(exportSymbol.name);
                                }
                                var /** @type {?} */resolvedModule = _this196.resolveModule(moduleExport.from, filePath);
                                if (resolvedModule) {
                                    var /** @type {?} */targetSymbol = _this196.getStaticSymbol(resolvedModule, symName);
                                    var /** @type {?} */sourceSymbol = _this196.getStaticSymbol(filePath, symbolName);
                                    resolvedSymbols.push(_this196.createExport(sourceSymbol, targetSymbol));
                                }
                            });
                        } else {
                            // handle the symbols via export * directives.
                            var /** @type {?} */resolvedModule = _this196.resolveModule(moduleExport.from, filePath);
                            if (resolvedModule) {
                                var /** @type {?} */nestedExports = _this196.getSymbolsOf(resolvedModule);
                                nestedExports.forEach(function (targetSymbol) {
                                    var /** @type {?} */sourceSymbol = _this196.getStaticSymbol(filePath, targetSymbol.name);
                                    resolvedSymbols.push(_this196.createExport(sourceSymbol, targetSymbol));
                                });
                            }
                        }
                    };

                    for (var _iterator7 = metadata['exports'][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                        _loop();
                    }
                } catch (err) {
                    _didIteratorError7 = true;
                    _iteratorError7 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion7 && _iterator7.return) {
                            _iterator7.return();
                        }
                    } finally {
                        if (_didIteratorError7) {
                            throw _iteratorError7;
                        }
                    }
                }
            }
            resolvedSymbols.forEach(function (resolvedSymbol) {
                return _this196.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol);
            });
        }
        /**
         * @param {?} sourceSymbol
         * @param {?} topLevelSymbolNames
         * @param {?} metadata
         * @return {?}
         */

    }, {
        key: 'createResolvedSymbol',
        value: function createResolvedSymbol(sourceSymbol, topLevelSymbolNames, metadata) {
            var /** @type {?} */self = this;

            var ReferenceTransformer = function (_ValueTransformer4) {
                _inherits(ReferenceTransformer, _ValueTransformer4);

                function ReferenceTransformer() {
                    _classCallCheck(this, ReferenceTransformer);

                    return _possibleConstructorReturn(this, (ReferenceTransformer.__proto__ || Object.getPrototypeOf(ReferenceTransformer)).apply(this, arguments));
                }

                _createClass(ReferenceTransformer, [{
                    key: 'visitStringMap',

                    /**
                     * @param {?} map
                     * @param {?} functionParams
                     * @return {?}
                     */
                    value: function visitStringMap(map, functionParams) {
                        var /** @type {?} */symbolic = map['__symbolic'];
                        if (symbolic === 'function') {
                            var /** @type {?} */oldLen = functionParams.length;
                            functionParams.push.apply(functionParams, _toConsumableArray(map['parameters'] || []));
                            var /** @type {?} */result = _get(ReferenceTransformer.prototype.__proto__ || Object.getPrototypeOf(ReferenceTransformer.prototype), 'visitStringMap', this).call(this, map, functionParams);
                            functionParams.length = oldLen;
                            return result;
                        } else if (symbolic === 'reference') {
                            var /** @type {?} */module = map['module'];
                            var /** @type {?} */name = map['name'] ? unescapeIdentifier(map['name']) : map['name'];
                            if (!name) {
                                return null;
                            }
                            var /** @type {?} */filePath = void 0;
                            if (module) {
                                filePath = self.resolveModule(module, sourceSymbol.filePath);
                                if (!filePath) {
                                    return {
                                        __symbolic: 'error',
                                        message: 'Could not resolve ' + module + ' relative to ' + sourceSymbol.filePath + '.'
                                    };
                                }
                                return self.getStaticSymbol(filePath, name);
                            } else if (functionParams.indexOf(name) >= 0) {
                                // reference to a function parameter
                                return { __symbolic: 'reference', name: name };
                            } else {
                                if (topLevelSymbolNames.has(name)) {
                                    return self.getStaticSymbol(sourceSymbol.filePath, name);
                                }
                                // ambient value
                                null;
                            }
                        } else {
                            return _get(ReferenceTransformer.prototype.__proto__ || Object.getPrototypeOf(ReferenceTransformer.prototype), 'visitStringMap', this).call(this, map, functionParams);
                        }
                    }
                }]);

                return ReferenceTransformer;
            }(ValueTransformer);

            var /** @type {?} */transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);
            if (transformedMeta instanceof StaticSymbol) {
                return this.createExport(sourceSymbol, transformedMeta);
            }
            return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
        }
        /**
         * @param {?} sourceSymbol
         * @param {?} targetSymbol
         * @return {?}
         */

    }, {
        key: 'createExport',
        value: function createExport(sourceSymbol, targetSymbol) {
            sourceSymbol.assertNoMembers();
            targetSymbol.assertNoMembers();
            if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath)) {
                // This case is for an ng library importing symbols from a plain ts library
                // transitively.
                // Note: We rely on the fact that we discover symbols in the direction
                // from source files to library files
                this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);
            }
            return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);
        }
        /**
         * @param {?} error
         * @param {?} context
         * @param {?=} path
         * @return {?}
         */

    }, {
        key: 'reportError',
        value: function reportError(error, context, path) {
            if (this.errorRecorder) {
                this.errorRecorder(error, context && context.filePath || path);
            } else {
                throw error;
            }
        }
        /**
         * @param {?} module an absolute path to a module file.
         * @return {?}
         */

    }, {
        key: 'getModuleMetadata',
        value: function getModuleMetadata(module) {
            var /** @type {?} */moduleMetadata = this.metadataCache.get(module);
            if (!moduleMetadata) {
                var /** @type {?} */moduleMetadatas = this.host.getMetadataFor(module);
                if (moduleMetadatas) {
                    var /** @type {?} */maxVersion = -1;
                    moduleMetadatas.forEach(function (md) {
                        if (md['version'] > maxVersion) {
                            maxVersion = md['version'];
                            moduleMetadata = md;
                        }
                    });
                }
                if (!moduleMetadata) {
                    moduleMetadata = { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };
                }
                if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {
                    var /** @type {?} */errorMessage = moduleMetadata['version'] == 2 ? 'Unsupported metadata version ' + moduleMetadata['version'] + ' for module ' + module + '. This module should be compiled with a newer version of ngc' : 'Metadata version mismatch for module ' + module + ', found version ' + moduleMetadata['version'] + ', expected ' + SUPPORTED_SCHEMA_VERSION;
                    this.reportError(new Error(errorMessage), null);
                }
                this.metadataCache.set(module, moduleMetadata);
            }
            return moduleMetadata;
        }
        /**
         * @param {?} module
         * @param {?} symbolName
         * @param {?=} containingFile
         * @return {?}
         */

    }, {
        key: 'getSymbolByModule',
        value: function getSymbolByModule(module, symbolName, containingFile) {
            var /** @type {?} */filePath = this.resolveModule(module, containingFile);
            if (!filePath) {
                this.reportError(new Error('Could not resolve module ' + module + (containingFile ? ' relative to $ {\n            containingFile\n          } ' : '')), null);
                return this.getStaticSymbol('ERROR:' + module, symbolName);
            }
            return this.getStaticSymbol(filePath, symbolName);
        }
        /**
         * @param {?} module
         * @param {?} containingFile
         * @return {?}
         */

    }, {
        key: 'resolveModule',
        value: function resolveModule(module, containingFile) {
            try {
                return this.host.moduleNameToFileName(module, containingFile);
            } catch (e) {
                console.error('Could not resolve module \'' + module + '\' relative to file ' + containingFile);
                this.reportError(e, null, containingFile);
            }
        }
    }]);

    return StaticSymbolResolver;
}();
/**
 * @param {?} identifier
 * @return {?}
 */


function unescapeIdentifier(identifier) {
    return identifier.startsWith('___') ? identifier.substr(1) : identifier;
}

var AotSummaryResolver = function () {
    /**
     * @param {?} host
     * @param {?} staticSymbolCache
     */
    function AotSummaryResolver(host, staticSymbolCache) {
        _classCallCheck(this, AotSummaryResolver);

        this.host = host;
        this.staticSymbolCache = staticSymbolCache;
        this.summaryCache = new Map();
        this.loadedFilePaths = new Set();
        this.importAs = new Map();
    }
    /**
     * @param {?} filePath
     * @return {?}
     */


    _createClass(AotSummaryResolver, [{
        key: 'isLibraryFile',
        value: function isLibraryFile(filePath) {
            // Note: We need to strip the .ngfactory. file path,
            // so this method also works for generated files
            // (for which host.isSourceFile will always return false).
            return !this.host.isSourceFile(stripNgFactory(filePath));
        }
        /**
         * @param {?} filePath
         * @return {?}
         */

    }, {
        key: 'getLibraryFileName',
        value: function getLibraryFileName(filePath) {
            return this.host.getOutputFileName(filePath);
        }
        /**
         * @param {?} staticSymbol
         * @return {?}
         */

    }, {
        key: 'resolveSummary',
        value: function resolveSummary(staticSymbol) {
            staticSymbol.assertNoMembers();
            var /** @type {?} */summary = this.summaryCache.get(staticSymbol);
            if (!summary) {
                this._loadSummaryFile(staticSymbol.filePath);
                summary = this.summaryCache.get(staticSymbol);
            }
            return summary;
        }
        /**
         * @param {?} filePath
         * @return {?}
         */

    }, {
        key: 'getSymbolsOf',
        value: function getSymbolsOf(filePath) {
            this._loadSummaryFile(filePath);
            return Array.from(this.summaryCache.keys()).filter(function (symbol) {
                return symbol.filePath === filePath;
            });
        }
        /**
         * @param {?} staticSymbol
         * @return {?}
         */

    }, {
        key: 'getImportAs',
        value: function getImportAs(staticSymbol) {
            staticSymbol.assertNoMembers();
            return this.importAs.get(staticSymbol);
        }
        /**
         * @param {?} filePath
         * @return {?}
         */

    }, {
        key: '_loadSummaryFile',
        value: function _loadSummaryFile(filePath) {
            var _this198 = this;

            if (this.loadedFilePaths.has(filePath)) {
                return;
            }
            this.loadedFilePaths.add(filePath);
            if (this.isLibraryFile(filePath)) {
                var /** @type {?} */summaryFilePath = summaryFileName(filePath);
                var /** @type {?} */json = void 0;
                try {
                    json = this.host.loadSummary(summaryFilePath);
                } catch (e) {
                    console.error('Error loading summary file ' + summaryFilePath);
                    throw e;
                }
                if (json) {
                    var _deserializeSummaries = deserializeSummaries(this.staticSymbolCache, json),
                        summaries = _deserializeSummaries.summaries,
                        importAs = _deserializeSummaries.importAs;

                    summaries.forEach(function (summary) {
                        return _this198.summaryCache.set(summary.symbol, summary);
                    });
                    importAs.forEach(function (importAs) {
                        _this198.importAs.set(importAs.symbol, _this198.staticSymbolCache.get(ngfactoryFilePath(filePath), importAs.importAs));
                    });
                }
            }
        }
    }]);

    return AotSummaryResolver;
}();

/**
 * Creates a new AotCompiler based on options and a host.
 * @param {?} compilerHost
 * @param {?} options
 * @return {?}
 */


function createAotCompiler(compilerHost, options) {
    var /** @type {?} */translations = options.translations || '';
    var /** @type {?} */urlResolver = createOfflineCompileUrlResolver();
    var /** @type {?} */symbolCache = new StaticSymbolCache();
    var /** @type {?} */summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);
    var /** @type {?} */symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
    var /** @type {?} */staticReflector = new StaticReflector(symbolResolver);
    StaticAndDynamicReflectionCapabilities.install(staticReflector);
    var /** @type {?} */console = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵConsole"]();
    var /** @type {?} */htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, __WEBPACK_IMPORTED_MODULE_0__angular_core__["MissingTranslationStrategy"].Warning, console);
    var /** @type {?} */config = new CompilerConfig({
        genDebugInfo: options.debug === true,
        defaultEncapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].Emulated,
        logBindingUpdate: false,
        useJit: false,
        enableLegacyTemplate: options.enableLegacyTemplate !== false
    });
    var /** @type {?} */normalizer = new DirectiveNormalizer({ get: function get(url) {
            return compilerHost.loadResource(url);
        } }, urlResolver, htmlParser, config);
    var /** @type {?} */expressionParser = new Parser(new Lexer());
    var /** @type {?} */elementSchemaRegistry = new DomElementSchemaRegistry();
    var /** @type {?} */tmplParser = new TemplateParser(config, expressionParser, elementSchemaRegistry, htmlParser, console, []);
    var /** @type {?} */resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, symbolCache, staticReflector);
    // TODO(vicb): do not pass options.i18nFormat here
    var /** @type {?} */importResolver = {
        getImportAs: function getImportAs(symbol) {
            return symbolResolver.getImportAs(symbol);
        },
        fileNameToModuleName: function fileNameToModuleName(fileName, containingFilePath) {
            return compilerHost.fileNameToModuleName(fileName, containingFilePath);
        },
        getTypeArity: function getTypeArity(symbol) {
            return symbolResolver.getTypeArity(symbol);
        }
    };
    var /** @type {?} */viewCompiler = new ViewCompiler(config, elementSchemaRegistry);
    var /** @type {?} */compiler = new AotCompiler(config, compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, new NgModuleCompiler(), new TypeScriptEmitter(importResolver), summaryResolver, options.locale, options.i18nFormat, symbolResolver);
    return { compiler: compiler, reflector: staticReflector };
}

/**
 * @param {?} statements
 * @param {?} resultVars
 * @return {?}
 */
function interpretStatements(statements, resultVars) {
    var /** @type {?} */stmtsWithReturn = statements.concat([new ReturnStatement(literalArr(resultVars.map(function (resultVar) {
        return variable(resultVar);
    })))]);
    var /** @type {?} */ctx = new _ExecutionContext(null, null, null, new Map());
    var /** @type {?} */visitor = new StatementInterpreter();
    var /** @type {?} */result = visitor.visitAllStatements(stmtsWithReturn, ctx);
    return isPresent(result) ? result.value : null;
}
/**
 * @param {?} varNames
 * @param {?} varValues
 * @param {?} statements
 * @param {?} ctx
 * @param {?} visitor
 * @return {?}
 */
function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
    var /** @type {?} */childCtx = ctx.createChildWihtLocalVars();
    for (var /** @type {?} */i = 0; i < varNames.length; i++) {
        childCtx.vars.set(varNames[i], varValues[i]);
    }
    var /** @type {?} */result = visitor.visitAllStatements(statements, childCtx);
    return result ? result.value : null;
}

var _ExecutionContext = function () {
    /**
     * @param {?} parent
     * @param {?} instance
     * @param {?} className
     * @param {?} vars
     */
    function _ExecutionContext(parent, instance, className, vars) {
        _classCallCheck(this, _ExecutionContext);

        this.parent = parent;
        this.instance = instance;
        this.className = className;
        this.vars = vars;
    }
    /**
     * @return {?}
     */


    _createClass(_ExecutionContext, [{
        key: 'createChildWihtLocalVars',
        value: function createChildWihtLocalVars() {
            return new _ExecutionContext(this, this.instance, this.className, new Map());
        }
    }]);

    return _ExecutionContext;
}();

var ReturnValue =
/**
 * @param {?} value
 */
function ReturnValue(value) {
    _classCallCheck(this, ReturnValue);

    this.value = value;
};
/**
 * @param {?} _classStmt
 * @param {?} _ctx
 * @param {?} _visitor
 * @return {?}
 */


function createDynamicClass(_classStmt, _ctx, _visitor) {
    var /** @type {?} */propertyDescriptors = {};
    _classStmt.getters.forEach(function (getter) {
        // Note: use `function` instead of arrow function to capture `this`
        propertyDescriptors[getter.name] = {
            configurable: false,
            get: function get() {
                var /** @type {?} */instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
                return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
            }
        };
    });
    _classStmt.methods.forEach(function (method) {
        var /** @type {?} */paramNames = method.params.map(function (param) {
            return param.name;
        });
        // Note: use `function` instead of arrow function to capture `this`
        propertyDescriptors[method.name] = {
            writable: false,
            configurable: false,
            value: function value() {
                var /** @type {?} */instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);

                for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = arguments[_key4];
                }

                return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
            }
        };
    });
    var /** @type {?} */ctorParamNames = _classStmt.constructorMethod.params.map(function (param) {
        return param.name;
    });
    // Note: use `function` instead of arrow function to capture `this`
    var /** @type {?} */ctor = function ctor() {
        var _this199 = this;

        var /** @type {?} */instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
        _classStmt.fields.forEach(function (field) {
            _this199[field.name] = undefined;
        });

        for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
        }

        _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
    };
    var /** @type {?} */superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
    return ctor;
}

var StatementInterpreter = function () {
    function StatementInterpreter() {
        _classCallCheck(this, StatementInterpreter);
    }

    _createClass(StatementInterpreter, [{
        key: 'debugAst',

        /**
         * @param {?} ast
         * @return {?}
         */
        value: function debugAst(ast) {
            return debugOutputAstAsTypeScript(ast);
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareVarStmt',
        value: function visitDeclareVarStmt(stmt, ctx) {
            ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
            return null;
        }
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitWriteVarExpr',
        value: function visitWriteVarExpr(expr, ctx) {
            var /** @type {?} */value = expr.value.visitExpression(this, ctx);
            var /** @type {?} */currCtx = ctx;
            while (currCtx != null) {
                if (currCtx.vars.has(expr.name)) {
                    currCtx.vars.set(expr.name, value);
                    return value;
                }
                currCtx = currCtx.parent;
            }
            throw new Error('Not declared variable ' + expr.name);
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitReadVarExpr',
        value: function visitReadVarExpr(ast, ctx) {
            var /** @type {?} */varName = ast.name;
            if (isPresent(ast.builtin)) {
                switch (ast.builtin) {
                    case BuiltinVar.Super:
                        return ctx.instance.__proto__;
                    case BuiltinVar.This:
                        return ctx.instance;
                    case BuiltinVar.CatchError:
                        varName = CATCH_ERROR_VAR$2;
                        break;
                    case BuiltinVar.CatchStack:
                        varName = CATCH_STACK_VAR$2;
                        break;
                    default:
                        throw new Error('Unknown builtin variable ' + ast.builtin);
                }
            }
            var /** @type {?} */currCtx = ctx;
            while (currCtx != null) {
                if (currCtx.vars.has(varName)) {
                    return currCtx.vars.get(varName);
                }
                currCtx = currCtx.parent;
            }
            throw new Error('Not declared variable ' + varName);
        }
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitWriteKeyExpr',
        value: function visitWriteKeyExpr(expr, ctx) {
            var /** @type {?} */receiver = expr.receiver.visitExpression(this, ctx);
            var /** @type {?} */index = expr.index.visitExpression(this, ctx);
            var /** @type {?} */value = expr.value.visitExpression(this, ctx);
            receiver[index] = value;
            return value;
        }
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitWritePropExpr',
        value: function visitWritePropExpr(expr, ctx) {
            var /** @type {?} */receiver = expr.receiver.visitExpression(this, ctx);
            var /** @type {?} */value = expr.value.visitExpression(this, ctx);
            receiver[expr.name] = value;
            return value;
        }
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitInvokeMethodExpr',
        value: function visitInvokeMethodExpr(expr, ctx) {
            var /** @type {?} */receiver = expr.receiver.visitExpression(this, ctx);
            var /** @type {?} */args = this.visitAllExpressions(expr.args, ctx);
            var /** @type {?} */result = void 0;
            if (isPresent(expr.builtin)) {
                switch (expr.builtin) {
                    case BuiltinMethod.ConcatArray:
                        result = receiver.concat.apply(receiver, _toConsumableArray(args));
                        break;
                    case BuiltinMethod.SubscribeObservable:
                        result = receiver.subscribe({ next: args[0] });
                        break;
                    case BuiltinMethod.Bind:
                        result = receiver.bind.apply(receiver, _toConsumableArray(args));
                        break;
                    default:
                        throw new Error('Unknown builtin method ' + expr.builtin);
                }
            } else {
                result = receiver[expr.name].apply(receiver, args);
            }
            return result;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitInvokeFunctionExpr',
        value: function visitInvokeFunctionExpr(stmt, ctx) {
            var /** @type {?} */args = this.visitAllExpressions(stmt.args, ctx);
            var /** @type {?} */fnExpr = stmt.fn;
            if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
                ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
                return null;
            } else {
                var /** @type {?} */_fn = stmt.fn.visitExpression(this, ctx);
                return _fn.apply(null, args);
            }
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitReturnStmt',
        value: function visitReturnStmt(stmt, ctx) {
            return new ReturnValue(stmt.value.visitExpression(this, ctx));
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareClassStmt',
        value: function visitDeclareClassStmt(stmt, ctx) {
            var /** @type {?} */clazz = createDynamicClass(stmt, ctx, this);
            ctx.vars.set(stmt.name, clazz);
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitExpressionStmt',
        value: function visitExpressionStmt(stmt, ctx) {
            return stmt.expr.visitExpression(this, ctx);
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitIfStmt',
        value: function visitIfStmt(stmt, ctx) {
            var /** @type {?} */condition = stmt.condition.visitExpression(this, ctx);
            if (condition) {
                return this.visitAllStatements(stmt.trueCase, ctx);
            } else if (isPresent(stmt.falseCase)) {
                return this.visitAllStatements(stmt.falseCase, ctx);
            }
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitTryCatchStmt',
        value: function visitTryCatchStmt(stmt, ctx) {
            try {
                return this.visitAllStatements(stmt.bodyStmts, ctx);
            } catch (e) {
                var /** @type {?} */childCtx = ctx.createChildWihtLocalVars();
                childCtx.vars.set(CATCH_ERROR_VAR$2, e);
                childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
                return this.visitAllStatements(stmt.catchStmts, childCtx);
            }
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitThrowStmt',
        value: function visitThrowStmt(stmt, ctx) {
            throw stmt.error.visitExpression(this, ctx);
        }
        /**
         * @param {?} stmt
         * @param {?=} context
         * @return {?}
         */

    }, {
        key: 'visitCommentStmt',
        value: function visitCommentStmt(stmt, context) {
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitInstantiateExpr',
        value: function visitInstantiateExpr(ast, ctx) {
            var /** @type {?} */args = this.visitAllExpressions(ast.args, ctx);
            var /** @type {?} */clazz = ast.classExpr.visitExpression(this, ctx);
            return new (Function.prototype.bind.apply(clazz, [null].concat(_toConsumableArray(args))))();
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitLiteralExpr',
        value: function visitLiteralExpr(ast, ctx) {
            return ast.value;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitExternalExpr',
        value: function visitExternalExpr(ast, ctx) {
            return ast.value.reference;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitConditionalExpr',
        value: function visitConditionalExpr(ast, ctx) {
            if (ast.condition.visitExpression(this, ctx)) {
                return ast.trueCase.visitExpression(this, ctx);
            } else if (isPresent(ast.falseCase)) {
                return ast.falseCase.visitExpression(this, ctx);
            }
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitNotExpr',
        value: function visitNotExpr(ast, ctx) {
            return !ast.condition.visitExpression(this, ctx);
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitCastExpr',
        value: function visitCastExpr(ast, ctx) {
            return ast.value.visitExpression(this, ctx);
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitFunctionExpr',
        value: function visitFunctionExpr(ast, ctx) {
            var /** @type {?} */paramNames = ast.params.map(function (param) {
                return param.name;
            });
            return _declareFn(paramNames, ast.statements, ctx, this);
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareFunctionStmt',
        value: function visitDeclareFunctionStmt(stmt, ctx) {
            var /** @type {?} */paramNames = stmt.params.map(function (param) {
                return param.name;
            });
            ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitBinaryOperatorExpr',
        value: function visitBinaryOperatorExpr(ast, ctx) {
            var _this200 = this;

            var /** @type {?} */lhs = function lhs() {
                return ast.lhs.visitExpression(_this200, ctx);
            };
            var /** @type {?} */rhs = function rhs() {
                return ast.rhs.visitExpression(_this200, ctx);
            };
            switch (ast.operator) {
                case BinaryOperator.Equals:
                    return lhs() == rhs();
                case BinaryOperator.Identical:
                    return lhs() === rhs();
                case BinaryOperator.NotEquals:
                    return lhs() != rhs();
                case BinaryOperator.NotIdentical:
                    return lhs() !== rhs();
                case BinaryOperator.And:
                    return lhs() && rhs();
                case BinaryOperator.Or:
                    return lhs() || rhs();
                case BinaryOperator.Plus:
                    return lhs() + rhs();
                case BinaryOperator.Minus:
                    return lhs() - rhs();
                case BinaryOperator.Divide:
                    return lhs() / rhs();
                case BinaryOperator.Multiply:
                    return lhs() * rhs();
                case BinaryOperator.Modulo:
                    return lhs() % rhs();
                case BinaryOperator.Lower:
                    return lhs() < rhs();
                case BinaryOperator.LowerEquals:
                    return lhs() <= rhs();
                case BinaryOperator.Bigger:
                    return lhs() > rhs();
                case BinaryOperator.BiggerEquals:
                    return lhs() >= rhs();
                default:
                    throw new Error('Unknown operator ' + ast.operator);
            }
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitReadPropExpr',
        value: function visitReadPropExpr(ast, ctx) {
            var /** @type {?} */result = void 0;
            var /** @type {?} */receiver = ast.receiver.visitExpression(this, ctx);
            result = receiver[ast.name];
            return result;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitReadKeyExpr',
        value: function visitReadKeyExpr(ast, ctx) {
            var /** @type {?} */receiver = ast.receiver.visitExpression(this, ctx);
            var /** @type {?} */prop = ast.index.visitExpression(this, ctx);
            return receiver[prop];
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitLiteralArrayExpr',
        value: function visitLiteralArrayExpr(ast, ctx) {
            return this.visitAllExpressions(ast.entries, ctx);
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitLiteralMapExpr',
        value: function visitLiteralMapExpr(ast, ctx) {
            var _this201 = this;

            var /** @type {?} */result = {};
            ast.entries.forEach(function (entry) {
                return result[entry.key] = entry.value.visitExpression(_this201, ctx);
            });
            return result;
        }
        /**
         * @param {?} expressions
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitAllExpressions',
        value: function visitAllExpressions(expressions, ctx) {
            var _this202 = this;

            return expressions.map(function (expr) {
                return expr.visitExpression(_this202, ctx);
            });
        }
        /**
         * @param {?} statements
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitAllStatements',
        value: function visitAllStatements(statements, ctx) {
            for (var /** @type {?} */i = 0; i < statements.length; i++) {
                var /** @type {?} */stmt = statements[i];
                var /** @type {?} */val = stmt.visitStatement(this, ctx);
                if (val instanceof ReturnValue) {
                    return val;
                }
            }
            return null;
        }
    }]);

    return StatementInterpreter;
}();
/**
 * @param {?} varNames
 * @param {?} statements
 * @param {?} ctx
 * @param {?} visitor
 * @return {?}
 */


function _declareFn(varNames, statements, ctx, visitor) {
    return function () {
        for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
        }

        return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
    };
}
var /** @type {?} */CATCH_ERROR_VAR$2 = 'error';
var /** @type {?} */CATCH_STACK_VAR$2 = 'stack';

/**
 * @abstract
 */

var AbstractJsEmitterVisitor = function (_AbstractEmitterVisit2) {
    _inherits(AbstractJsEmitterVisitor, _AbstractEmitterVisit2);

    function AbstractJsEmitterVisitor() {
        _classCallCheck(this, AbstractJsEmitterVisitor);

        return _possibleConstructorReturn(this, (AbstractJsEmitterVisitor.__proto__ || Object.getPrototypeOf(AbstractJsEmitterVisitor)).call(this, false));
    }
    /**
     * @param {?} stmt
     * @param {?} ctx
     * @return {?}
     */


    _createClass(AbstractJsEmitterVisitor, [{
        key: 'visitDeclareClassStmt',
        value: function visitDeclareClassStmt(stmt, ctx) {
            var _this204 = this;

            ctx.pushClass(stmt);
            this._visitClassConstructor(stmt, ctx);
            if (isPresent(stmt.parent)) {
                ctx.print(stmt, stmt.name + '.prototype = Object.create(');
                stmt.parent.visitExpression(this, ctx);
                ctx.println(stmt, '.prototype);');
            }
            stmt.getters.forEach(function (getter) {
                return _this204._visitClassGetter(stmt, getter, ctx);
            });
            stmt.methods.forEach(function (method) {
                return _this204._visitClassMethod(stmt, method, ctx);
            });
            ctx.popClass();
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitClassConstructor',
        value: function _visitClassConstructor(stmt, ctx) {
            ctx.print(stmt, 'function ' + stmt.name + '(');
            if (isPresent(stmt.constructorMethod)) {
                this._visitParams(stmt.constructorMethod.params, ctx);
            }
            ctx.println(stmt, ') {');
            ctx.incIndent();
            if (isPresent(stmt.constructorMethod)) {
                if (stmt.constructorMethod.body.length > 0) {
                    ctx.println(stmt, 'var self = this;');
                    this.visitAllStatements(stmt.constructorMethod.body, ctx);
                }
            }
            ctx.decIndent();
            ctx.println(stmt, '}');
        }
        /**
         * @param {?} stmt
         * @param {?} getter
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitClassGetter',
        value: function _visitClassGetter(stmt, getter, ctx) {
            ctx.println(stmt, 'Object.defineProperty(' + stmt.name + '.prototype, \'' + getter.name + '\', { get: function() {');
            ctx.incIndent();
            if (getter.body.length > 0) {
                ctx.println(stmt, 'var self = this;');
                this.visitAllStatements(getter.body, ctx);
            }
            ctx.decIndent();
            ctx.println(stmt, '}});');
        }
        /**
         * @param {?} stmt
         * @param {?} method
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitClassMethod',
        value: function _visitClassMethod(stmt, method, ctx) {
            ctx.print(stmt, stmt.name + '.prototype.' + method.name + ' = function(');
            this._visitParams(method.params, ctx);
            ctx.println(stmt, ') {');
            ctx.incIndent();
            if (method.body.length > 0) {
                ctx.println(stmt, 'var self = this;');
                this.visitAllStatements(method.body, ctx);
            }
            ctx.decIndent();
            ctx.println(stmt, '};');
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitReadVarExpr',
        value: function visitReadVarExpr(ast, ctx) {
            if (ast.builtin === BuiltinVar.This) {
                ctx.print(ast, 'self');
            } else if (ast.builtin === BuiltinVar.Super) {
                throw new Error('\'super\' needs to be handled at a parent ast node, not at the variable level!');
            } else {
                _get(AbstractJsEmitterVisitor.prototype.__proto__ || Object.getPrototypeOf(AbstractJsEmitterVisitor.prototype), 'visitReadVarExpr', this).call(this, ast, ctx);
            }
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareVarStmt',
        value: function visitDeclareVarStmt(stmt, ctx) {
            ctx.print(stmt, 'var ' + stmt.name + ' = ');
            stmt.value.visitExpression(this, ctx);
            ctx.println(stmt, ';');
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitCastExpr',
        value: function visitCastExpr(ast, ctx) {
            ast.value.visitExpression(this, ctx);
            return null;
        }
        /**
         * @param {?} expr
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitInvokeFunctionExpr',
        value: function visitInvokeFunctionExpr(expr, ctx) {
            var /** @type {?} */fnExpr = expr.fn;
            if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
                ctx.currentClass.parent.visitExpression(this, ctx);
                ctx.print(expr, '.call(this');
                if (expr.args.length > 0) {
                    ctx.print(expr, ', ');
                    this.visitAllExpressions(expr.args, ctx, ',');
                }
                ctx.print(expr, ')');
            } else {
                _get(AbstractJsEmitterVisitor.prototype.__proto__ || Object.getPrototypeOf(AbstractJsEmitterVisitor.prototype), 'visitInvokeFunctionExpr', this).call(this, expr, ctx);
            }
            return null;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitFunctionExpr',
        value: function visitFunctionExpr(ast, ctx) {
            ctx.print(ast, 'function(');
            this._visitParams(ast.params, ctx);
            ctx.println(ast, ') {');
            ctx.incIndent();
            this.visitAllStatements(ast.statements, ctx);
            ctx.decIndent();
            ctx.print(ast, '}');
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitDeclareFunctionStmt',
        value: function visitDeclareFunctionStmt(stmt, ctx) {
            ctx.print(stmt, 'function ' + stmt.name + '(');
            this._visitParams(stmt.params, ctx);
            ctx.println(stmt, ') {');
            ctx.incIndent();
            this.visitAllStatements(stmt.statements, ctx);
            ctx.decIndent();
            ctx.println(stmt, '}');
            return null;
        }
        /**
         * @param {?} stmt
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitTryCatchStmt',
        value: function visitTryCatchStmt(stmt, ctx) {
            ctx.println(stmt, 'try {');
            ctx.incIndent();
            this.visitAllStatements(stmt.bodyStmts, ctx);
            ctx.decIndent();
            ctx.println(stmt, '} catch (' + CATCH_ERROR_VAR$1.name + ') {');
            ctx.incIndent();
            var /** @type {?} */catchStmts = [/** @type {?} */CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
            this.visitAllStatements(catchStmts, ctx);
            ctx.decIndent();
            ctx.println(stmt, '}');
            return null;
        }
        /**
         * @param {?} params
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: '_visitParams',
        value: function _visitParams(params, ctx) {
            this.visitAllObjects(function (param) {
                return ctx.print(null, param.name);
            }, params, ctx, ',');
        }
        /**
         * @param {?} method
         * @return {?}
         */

    }, {
        key: 'getBuiltinMethodName',
        value: function getBuiltinMethodName(method) {
            var /** @type {?} */name = void 0;
            switch (method) {
                case BuiltinMethod.ConcatArray:
                    name = 'concat';
                    break;
                case BuiltinMethod.SubscribeObservable:
                    name = 'subscribe';
                    break;
                case BuiltinMethod.Bind:
                    name = 'bind';
                    break;
                default:
                    throw new Error('Unknown builtin method: ' + method);
            }
            return name;
        }
    }]);

    return AbstractJsEmitterVisitor;
}(AbstractEmitterVisitor);

/**
 * @param {?} sourceUrl
 * @param {?} ctx
 * @param {?} vars
 * @return {?}
 */


function evalExpression(sourceUrl, ctx, vars) {
    var /** @type {?} */fnBody = ctx.toSource() + '\n//# sourceURL=' + sourceUrl + '\n' + ctx.toSourceMapGenerator().toJsComment();
    var /** @type {?} */fnArgNames = [];
    var /** @type {?} */fnArgValues = [];
    for (var /** @type {?} */argName in vars) {
        fnArgNames.push(argName);
        fnArgValues.push(vars[argName]);
    }
    return new (Function.prototype.bind.apply(Function, [null].concat(_toConsumableArray(fnArgNames.concat(fnBody)))))().apply(undefined, fnArgValues);
}
/**
 * @param {?} sourceUrl
 * @param {?} statements
 * @param {?} resultVars
 * @return {?}
 */
function jitStatements(sourceUrl, statements, resultVars) {
    var /** @type {?} */converter = new JitEmitterVisitor();
    var /** @type {?} */ctx = EmitterVisitorContext.createRoot(resultVars);
    var /** @type {?} */returnStmt = new ReturnStatement(literalArr(resultVars.map(function (resultVar) {
        return variable(resultVar);
    })));
    converter.visitAllStatements(statements.concat([returnStmt]), ctx);
    return evalExpression(sourceUrl, ctx, converter.getArgs());
}

var JitEmitterVisitor = function (_AbstractJsEmitterVis) {
    _inherits(JitEmitterVisitor, _AbstractJsEmitterVis);

    function JitEmitterVisitor() {
        _classCallCheck(this, JitEmitterVisitor);

        var _this205 = _possibleConstructorReturn(this, (JitEmitterVisitor.__proto__ || Object.getPrototypeOf(JitEmitterVisitor)).apply(this, arguments));

        _this205._evalArgNames = [];
        _this205._evalArgValues = [];
        return _this205;
    }
    /**
     * @return {?}
     */


    _createClass(JitEmitterVisitor, [{
        key: 'getArgs',
        value: function getArgs() {
            var /** @type {?} */result = {};
            for (var /** @type {?} */i = 0; i < this._evalArgNames.length; i++) {
                result[this._evalArgNames[i]] = this._evalArgValues[i];
            }
            return result;
        }
        /**
         * @param {?} ast
         * @param {?} ctx
         * @return {?}
         */

    }, {
        key: 'visitExternalExpr',
        value: function visitExternalExpr(ast, ctx) {
            var /** @type {?} */value = ast.value.reference;
            var /** @type {?} */id = this._evalArgValues.indexOf(value);
            if (id === -1) {
                id = this._evalArgValues.length;
                this._evalArgValues.push(value);
                var /** @type {?} */name = identifierName(ast.value) || 'val';
                this._evalArgNames.push('jit_' + name + id);
            }
            ctx.print(ast, this._evalArgNames[id]);
            return null;
        }
    }]);

    return JitEmitterVisitor;
}(AbstractJsEmitterVisitor);

/**
 * An internal module of the Angular compiler that begins with component types,
 * extracts templates, and eventually produces a compiled version of the component
 * ready for linking into an application.
 *
 * \@security When compiling templates at runtime, you must ensure that the entire template comes
 * from a trusted source. Attacker-controlled data introduced by a template could expose your
 * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
 */


var JitCompiler = function () {
    /**
     * @param {?} _injector
     * @param {?} _metadataResolver
     * @param {?} _templateParser
     * @param {?} _styleCompiler
     * @param {?} _viewCompiler
     * @param {?} _ngModuleCompiler
     * @param {?} _compilerConfig
     */
    function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig) {
        _classCallCheck(this, JitCompiler);

        this._injector = _injector;
        this._metadataResolver = _metadataResolver;
        this._templateParser = _templateParser;
        this._styleCompiler = _styleCompiler;
        this._viewCompiler = _viewCompiler;
        this._ngModuleCompiler = _ngModuleCompiler;
        this._compilerConfig = _compilerConfig;
        this._compiledTemplateCache = new Map();
        this._compiledHostTemplateCache = new Map();
        this._compiledDirectiveWrapperCache = new Map();
        this._compiledNgModuleCache = new Map();
    }
    /**
     * @return {?}
     */


    _createClass(JitCompiler, [{
        key: 'compileModuleSync',

        /**
         * @param {?} moduleType
         * @return {?}
         */
        value: function compileModuleSync(moduleType) {
            return this._compileModuleAndComponents(moduleType, true).syncResult;
        }
        /**
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'compileModuleAsync',
        value: function compileModuleAsync(moduleType) {
            return this._compileModuleAndComponents(moduleType, false).asyncResult;
        }
        /**
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'compileModuleAndAllComponentsSync',
        value: function compileModuleAndAllComponentsSync(moduleType) {
            return this._compileModuleAndAllComponents(moduleType, true).syncResult;
        }
        /**
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'compileModuleAndAllComponentsAsync',
        value: function compileModuleAndAllComponentsAsync(moduleType) {
            return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
        }
        /**
         * @param {?} component
         * @return {?}
         */

    }, {
        key: 'getNgContentSelectors',
        value: function getNgContentSelectors(component) {
            var /** @type {?} */template = this._compiledTemplateCache.get(component);
            if (!template) {
                throw new Error('The component ' + stringify(component) + ' is not yet compiled!');
            }
            return template.compMeta.template.ngContentSelectors;
        }
        /**
         * @param {?} moduleType
         * @param {?} isSync
         * @return {?}
         */

    }, {
        key: '_compileModuleAndComponents',
        value: function _compileModuleAndComponents(moduleType, isSync) {
            var _this206 = this;

            var /** @type {?} */loadingPromise = this._loadModules(moduleType, isSync);
            var /** @type {?} */createResult = function createResult() {
                _this206._compileComponents(moduleType, null);
                return _this206._compileModule(moduleType);
            };
            if (isSync) {
                return new SyncAsyncResult(createResult());
            } else {
                return new SyncAsyncResult(null, loadingPromise.then(createResult));
            }
        }
        /**
         * @param {?} moduleType
         * @param {?} isSync
         * @return {?}
         */

    }, {
        key: '_compileModuleAndAllComponents',
        value: function _compileModuleAndAllComponents(moduleType, isSync) {
            var _this207 = this;

            var /** @type {?} */loadingPromise = this._loadModules(moduleType, isSync);
            var /** @type {?} */createResult = function createResult() {
                var /** @type {?} */componentFactories = [];
                _this207._compileComponents(moduleType, componentFactories);
                return new __WEBPACK_IMPORTED_MODULE_0__angular_core__["ModuleWithComponentFactories"](_this207._compileModule(moduleType), componentFactories);
            };
            if (isSync) {
                return new SyncAsyncResult(createResult());
            } else {
                return new SyncAsyncResult(null, loadingPromise.then(createResult));
            }
        }
        /**
         * @param {?} mainModule
         * @param {?} isSync
         * @return {?}
         */

    }, {
        key: '_loadModules',
        value: function _loadModules(mainModule, isSync) {
            var _this208 = this;

            var /** @type {?} */loadingPromises = [];
            var /** @type {?} */ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
            // Note: the loadingPromise for a module only includes the loading of the exported directives
            // of imported modules.
            // However, for runtime compilation, we want to transitively compile all modules,
            // so we also need to call loadNgModuleDirectiveAndPipeMetadata for all nested modules.
            ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
                loadingPromises.push(_this208._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
            });
            return Promise.all(loadingPromises);
        }
        /**
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: '_compileModule',
        value: function _compileModule(moduleType) {
            var _this209 = this;

            var /** @type {?} */ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
            if (!ngModuleFactory) {
                var /** @type {?} */moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType);
                // Always provide a bound Compiler
                var /** @type {?} */extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Compiler"], { useFactory: function useFactory() {
                        return new ModuleBoundCompiler(_this209, moduleMeta.type.reference);
                    } }))];
                var /** @type {?} */compileResult = this._ngModuleCompiler.compile(moduleMeta, extraProviders);
                if (!this._compilerConfig.useJit) {
                    ngModuleFactory = interpretStatements(compileResult.statements, [compileResult.ngModuleFactoryVar])[0];
                } else {
                    ngModuleFactory = jitStatements('/' + identifierName(moduleMeta.type) + '/module.ngfactory.js', compileResult.statements, [compileResult.ngModuleFactoryVar])[0];
                }
                this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);
            }
            return ngModuleFactory;
        }
        /**
         * \@internal
         * @param {?} mainModule
         * @param {?} allComponentFactories
         * @return {?}
         */

    }, {
        key: '_compileComponents',
        value: function _compileComponents(mainModule, allComponentFactories) {
            var _this210 = this;

            var /** @type {?} */ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
            var /** @type {?} */moduleByDirective = new Map();
            var /** @type {?} */templates = new Set();
            ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
                var /** @type {?} */localModuleMeta = _this210._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
                localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
                    moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
                    var /** @type {?} */dirMeta = _this210._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
                    if (dirMeta.isComponent) {
                        templates.add(_this210._createCompiledTemplate(dirMeta, localModuleMeta));
                        if (allComponentFactories) {
                            var /** @type {?} */template = _this210._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
                            templates.add(template);
                            allComponentFactories.push( /** @type {?} */dirMeta.componentFactory);
                        }
                    }
                });
            });
            ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
                var /** @type {?} */localModuleMeta = _this210._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
                localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
                    var /** @type {?} */dirMeta = _this210._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
                    if (dirMeta.isComponent) {
                        dirMeta.entryComponents.forEach(function (entryComponentType) {
                            var /** @type {?} */moduleMeta = moduleByDirective.get(entryComponentType.componentType);
                            templates.add(_this210._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
                        });
                    }
                });
                localModuleMeta.entryComponents.forEach(function (entryComponentType) {
                    var /** @type {?} */moduleMeta = moduleByDirective.get(entryComponentType.componentType);
                    templates.add(_this210._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
                });
            });
            templates.forEach(function (template) {
                return _this210._compileTemplate(template);
            });
        }
        /**
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'clearCacheFor',
        value: function clearCacheFor(type) {
            this._compiledNgModuleCache.delete(type);
            this._metadataResolver.clearCacheFor(type);
            this._compiledHostTemplateCache.delete(type);
            var /** @type {?} */compiledTemplate = this._compiledTemplateCache.get(type);
            if (compiledTemplate) {
                this._compiledTemplateCache.delete(type);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'clearCache',
        value: function clearCache() {
            this._metadataResolver.clearCache();
            this._compiledTemplateCache.clear();
            this._compiledHostTemplateCache.clear();
            this._compiledNgModuleCache.clear();
        }
        /**
         * @param {?} compType
         * @param {?} ngModule
         * @return {?}
         */

    }, {
        key: '_createCompiledHostTemplate',
        value: function _createCompiledHostTemplate(compType, ngModule) {
            if (!ngModule) {
                throw new Error('Component ' + stringify(compType) + ' is not part of any NgModule or the module has not been imported into your module.');
            }
            var /** @type {?} */compiledTemplate = this._compiledHostTemplateCache.get(compType);
            if (!compiledTemplate) {
                var /** @type {?} */compMeta = this._metadataResolver.getDirectiveMetadata(compType);
                assertComponent(compMeta);
                var /** @type {?} */componentFactory = compMeta.componentFactory;
                var /** @type {?} */hostClass = this._metadataResolver.getHostComponentType(compType);
                var /** @type {?} */hostMeta = createHostComponentMeta(hostClass, compMeta, /** @type {?} */__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵgetComponentViewDefinitionFactory"])(componentFactory));
                compiledTemplate = new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);
                this._compiledHostTemplateCache.set(compType, compiledTemplate);
            }
            return compiledTemplate;
        }
        /**
         * @param {?} compMeta
         * @param {?} ngModule
         * @return {?}
         */

    }, {
        key: '_createCompiledTemplate',
        value: function _createCompiledTemplate(compMeta, ngModule) {
            var /** @type {?} */compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
            if (!compiledTemplate) {
                assertComponent(compMeta);
                compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
                this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
            }
            return compiledTemplate;
        }
        /**
         * @param {?} template
         * @return {?}
         */

    }, {
        key: '_compileTemplate',
        value: function _compileTemplate(template) {
            var _this211 = this;

            if (template.isCompiled) {
                return;
            }
            var /** @type {?} */compMeta = template.compMeta;
            var /** @type {?} */externalStylesheetsByModuleUrl = new Map();
            var /** @type {?} */stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
            stylesCompileResult.externalStylesheets.forEach(function (r) {
                externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
            });
            this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
            var /** @type {?} */directives = template.directives.map(function (dir) {
                return _this211._metadataResolver.getDirectiveSummary(dir.reference);
            });
            var /** @type {?} */pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) {
                return _this211._metadataResolver.getPipeSummary(pipe.reference);
            });

            var _templateParser$parse2 = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, identifierName(compMeta.type)),
                parsedTemplate = _templateParser$parse2.template,
                usedPipes = _templateParser$parse2.pipes;

            var /** @type {?} */compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), usedPipes);
            var /** @type {?} */statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);
            var /** @type {?} */viewClass = void 0;
            var /** @type {?} */rendererType = void 0;
            if (!this._compilerConfig.useJit) {
                var _interpretStatements = interpretStatements(statements, [compileResult.viewClassVar, compileResult.rendererTypeVar]);

                var _interpretStatements2 = _slicedToArray(_interpretStatements, 2);

                viewClass = _interpretStatements2[0];
                rendererType = _interpretStatements2[1];
            } else {
                var /** @type {?} */sourceUrl = '/' + identifierName(template.ngModule.type) + '/' + identifierName(template.compType) + '/' + (template.isHost ? 'host' : 'component') + '.ngfactory.js';

                var _jitStatements = jitStatements(sourceUrl, statements, [compileResult.viewClassVar, compileResult.rendererTypeVar]);

                var _jitStatements2 = _slicedToArray(_jitStatements, 2);

                viewClass = _jitStatements2[0];
                rendererType = _jitStatements2[1];
            }
            template.compiled(viewClass, rendererType);
        }
        /**
         * @param {?} result
         * @param {?} externalStylesheetsByModuleUrl
         * @return {?}
         */

    }, {
        key: '_resolveStylesCompileResult',
        value: function _resolveStylesCompileResult(result, externalStylesheetsByModuleUrl) {
            var _this212 = this;

            result.dependencies.forEach(function (dep, i) {
                var /** @type {?} */nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
                var /** @type {?} */nestedStylesArr = _this212._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
                dep.valuePlaceholder.reference = nestedStylesArr;
            });
        }
        /**
         * @param {?} result
         * @param {?} externalStylesheetsByModuleUrl
         * @return {?}
         */

    }, {
        key: '_resolveAndEvalStylesCompileResult',
        value: function _resolveAndEvalStylesCompileResult(result, externalStylesheetsByModuleUrl) {
            this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
            if (!this._compilerConfig.useJit) {
                return interpretStatements(result.statements, [result.stylesVar])[0];
            } else {
                return jitStatements('/' + result.meta.moduleUrl + '.ngstyle.js', result.statements, [result.stylesVar])[0];
            }
        }
    }, {
        key: 'injector',
        get: function get() {
            return this._injector;
        }
    }]);

    return JitCompiler;
}();

JitCompiler.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
JitCompiler.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injector"] }, { type: CompileMetadataResolver }, { type: TemplateParser }, { type: StyleCompiler }, { type: ViewCompiler }, { type: NgModuleCompiler }, { type: CompilerConfig }];
};

var CompiledTemplate = function () {
    /**
     * @param {?} isHost
     * @param {?} compType
     * @param {?} compMeta
     * @param {?} ngModule
     * @param {?} directives
     */
    function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {
        _classCallCheck(this, CompiledTemplate);

        this.isHost = isHost;
        this.compType = compType;
        this.compMeta = compMeta;
        this.ngModule = ngModule;
        this.directives = directives;
        this._viewClass = null;
        this.isCompiled = false;
    }
    /**
     * @param {?} viewClass
     * @param {?} rendererType
     * @return {?}
     */


    _createClass(CompiledTemplate, [{
        key: 'compiled',
        value: function compiled(viewClass, rendererType) {
            this._viewClass = viewClass;
            this.compMeta.componentViewType.setDelegate(viewClass);
            for (var /** @type {?} */prop in rendererType) {
                this.compMeta.rendererType[prop] = rendererType[prop];
            }
            this.isCompiled = true;
        }
    }]);

    return CompiledTemplate;
}();
/**
 * @param {?} meta
 * @return {?}
 */


function assertComponent(meta) {
    if (!meta.isComponent) {
        throw new Error('Could not compile \'' + identifierName(meta.type) + '\' because it is not a component.');
    }
}
/**
 * Implements `Compiler` by delegating to the JitCompiler using a known module.
 */

var ModuleBoundCompiler = function () {
    /**
     * @param {?} _delegate
     * @param {?} _ngModule
     */
    function ModuleBoundCompiler(_delegate, _ngModule) {
        _classCallCheck(this, ModuleBoundCompiler);

        this._delegate = _delegate;
        this._ngModule = _ngModule;
    }
    /**
     * @return {?}
     */


    _createClass(ModuleBoundCompiler, [{
        key: 'compileModuleSync',

        /**
         * @param {?} moduleType
         * @return {?}
         */
        value: function compileModuleSync(moduleType) {
            return this._delegate.compileModuleSync(moduleType);
        }
        /**
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'compileModuleAsync',
        value: function compileModuleAsync(moduleType) {
            return this._delegate.compileModuleAsync(moduleType);
        }
        /**
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'compileModuleAndAllComponentsSync',
        value: function compileModuleAndAllComponentsSync(moduleType) {
            return this._delegate.compileModuleAndAllComponentsSync(moduleType);
        }
        /**
         * @param {?} moduleType
         * @return {?}
         */

    }, {
        key: 'compileModuleAndAllComponentsAsync',
        value: function compileModuleAndAllComponentsAsync(moduleType) {
            return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
        }
        /**
         * @param {?} component
         * @return {?}
         */

    }, {
        key: 'getNgContentSelectors',
        value: function getNgContentSelectors(component) {
            return this._delegate.getNgContentSelectors(component);
        }
        /**
         * Clears all caches
         * @return {?}
         */

    }, {
        key: 'clearCache',
        value: function clearCache() {
            this._delegate.clearCache();
        }
        /**
         * Clears the cache for the given component/ngModule.
         * @param {?} type
         * @return {?}
         */

    }, {
        key: 'clearCacheFor',
        value: function clearCacheFor(type) {
            this._delegate.clearCacheFor(type);
        }
    }, {
        key: '_injector',
        get: function get() {
            return this._delegate.injector;
        }
    }]);

    return ModuleBoundCompiler;
}();

/**
 * A container for message extracted from the templates.
 */


var MessageBundle = function () {
    /**
     * @param {?} _htmlParser
     * @param {?} _implicitTags
     * @param {?} _implicitAttrs
     * @param {?=} _locale
     */
    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
        var _locale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        _classCallCheck(this, MessageBundle);

        this._htmlParser = _htmlParser;
        this._implicitTags = _implicitTags;
        this._implicitAttrs = _implicitAttrs;
        this._locale = _locale;
        this._messages = [];
    }
    /**
     * @param {?} html
     * @param {?} url
     * @param {?} interpolationConfig
     * @return {?}
     */


    _createClass(MessageBundle, [{
        key: 'updateFromTemplate',
        value: function updateFromTemplate(html, url, interpolationConfig) {
            var _messages;

            var /** @type {?} */htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
            if (htmlParserResult.errors.length) {
                return htmlParserResult.errors;
            }
            var /** @type {?} */i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
            if (i18nParserResult.errors.length) {
                return i18nParserResult.errors;
            }
            (_messages = this._messages).push.apply(_messages, _toConsumableArray(i18nParserResult.messages));
        }
        /**
         * @return {?}
         */

    }, {
        key: 'getMessages',
        value: function getMessages() {
            return this._messages;
        }
        /**
         * @param {?} serializer
         * @return {?}
         */

    }, {
        key: 'write',
        value: function write(serializer) {
            var /** @type {?} */messages = {};
            var /** @type {?} */mapperVisitor = new MapPlaceholderNames();
            // Deduplicate messages based on their ID
            this._messages.forEach(function (message) {
                var /** @type {?} */id = serializer.digest(message);
                if (!messages.hasOwnProperty(id)) {
                    messages[id] = message;
                }
            });
            // Transform placeholder names using the serializer mapping
            var /** @type {?} */msgList = Object.keys(messages).map(function (id) {
                var /** @type {?} */mapper = serializer.createNameMapper(messages[id]);
                var /** @type {?} */src = messages[id];
                var /** @type {?} */nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;
                return new Message(nodes, {}, {}, src.meaning, src.description, id);
            });
            return serializer.write(msgList, this._locale);
        }
    }]);

    return MessageBundle;
}();

var MapPlaceholderNames = function (_CloneVisitor) {
    _inherits(MapPlaceholderNames, _CloneVisitor);

    function MapPlaceholderNames() {
        _classCallCheck(this, MapPlaceholderNames);

        return _possibleConstructorReturn(this, (MapPlaceholderNames.__proto__ || Object.getPrototypeOf(MapPlaceholderNames)).apply(this, arguments));
    }

    _createClass(MapPlaceholderNames, [{
        key: 'convert',

        /**
         * @param {?} nodes
         * @param {?} mapper
         * @return {?}
         */
        value: function convert(nodes, mapper) {
            var _this214 = this;

            return mapper ? nodes.map(function (n) {
                return n.visit(_this214, mapper);
            }) : nodes;
        }
        /**
         * @param {?} ph
         * @param {?} mapper
         * @return {?}
         */

    }, {
        key: 'visitTagPlaceholder',
        value: function visitTagPlaceholder(ph, mapper) {
            var _this215 = this;

            var /** @type {?} */startName = mapper.toPublicName(ph.startName);
            var /** @type {?} */closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;
            var /** @type {?} */children = ph.children.map(function (n) {
                return n.visit(_this215, mapper);
            });
            return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);
        }
        /**
         * @param {?} ph
         * @param {?} mapper
         * @return {?}
         */

    }, {
        key: 'visitPlaceholder',
        value: function visitPlaceholder(ph, mapper) {
            return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
        }
        /**
         * @param {?} ph
         * @param {?} mapper
         * @return {?}
         */

    }, {
        key: 'visitIcuPlaceholder',
        value: function visitIcuPlaceholder(ph, mapper) {
            return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
        }
    }]);

    return MapPlaceholderNames;
}(CloneVisitor);

var Extractor = function () {
    /**
     * @param {?} host
     * @param {?} staticSymbolResolver
     * @param {?} messageBundle
     * @param {?} metadataResolver
     */
    function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
        _classCallCheck(this, Extractor);

        this.host = host;
        this.staticSymbolResolver = staticSymbolResolver;
        this.messageBundle = messageBundle;
        this.metadataResolver = metadataResolver;
    }
    /**
     * @param {?} rootFiles
     * @return {?}
     */


    _createClass(Extractor, [{
        key: 'extract',
        value: function extract(rootFiles) {
            var _this216 = this;

            var /** @type {?} */programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);

            var _analyzeAndValidateNg2 = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver),
                files = _analyzeAndValidateNg2.files,
                ngModules = _analyzeAndValidateNg2.ngModules;

            return Promise.all(ngModules.map(function (ngModule) {
                return _this216.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);
            })).then(function () {
                var /** @type {?} */errors = [];
                files.forEach(function (file) {
                    var /** @type {?} */compMetas = [];
                    file.directives.forEach(function (directiveType) {
                        var /** @type {?} */dirMeta = _this216.metadataResolver.getDirectiveMetadata(directiveType);
                        if (dirMeta && dirMeta.isComponent) {
                            compMetas.push(dirMeta);
                        }
                    });
                    compMetas.forEach(function (compMeta) {
                        var /** @type {?} */html = compMeta.template.template;
                        var /** @type {?} */interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
                        errors.push.apply(errors, _toConsumableArray(_this216.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig)));
                    });
                });
                if (errors.length) {
                    throw new Error(errors.map(function (e) {
                        return e.toString();
                    }).join('\n'));
                }
                return _this216.messageBundle;
            });
        }
        /**
         * @param {?} host
         * @param {?} locale
         * @return {?}
         */

    }], [{
        key: 'create',
        value: function create(host, locale) {
            var /** @type {?} */htmlParser = new I18NHtmlParser(new HtmlParser());
            var /** @type {?} */urlResolver = createOfflineCompileUrlResolver();
            var /** @type {?} */symbolCache = new StaticSymbolCache();
            var /** @type {?} */summaryResolver = new AotSummaryResolver(host, symbolCache);
            var /** @type {?} */staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);
            var /** @type {?} */staticReflector = new StaticReflector(staticSymbolResolver);
            StaticAndDynamicReflectionCapabilities.install(staticReflector);
            var /** @type {?} */config = new CompilerConfig({
                genDebugInfo: false,
                defaultEncapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].Emulated,
                logBindingUpdate: false,
                useJit: false
            });
            var /** @type {?} */normalizer = new DirectiveNormalizer({ get: function get(url) {
                    return host.loadResource(url);
                } }, urlResolver, htmlParser, config);
            var /** @type {?} */elementSchemaRegistry = new DomElementSchemaRegistry();
            var /** @type {?} */resolver = new CompileMetadataResolver(config, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, symbolCache, staticReflector);
            // TODO(vicb): implicit tags & attributes
            var /** @type {?} */messageBundle = new MessageBundle(htmlParser, [], {}, locale);
            var /** @type {?} */extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
            return { extractor: extractor, staticReflector: staticReflector };
        }
    }]);

    return Extractor;
}();

var /** @type {?} */_NO_RESOURCE_LOADER = {
    /**
     * @param {?} url
     * @return {?}
     */
    get: function get(url) {
        throw new Error('No ResourceLoader implementation has been provided. Can\'t read the url "' + url + '"');
    }
};
var /** @type {?} */baseHtmlParser = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["InjectionToken"]('HtmlParser');
/**
 * A set of providers that provide `JitCompiler` and its dependencies to use for
 * template compilation.
 */
var /** @type {?} */COMPILER_PROVIDERS = [{ provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵReflector"], useValue: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"] }, { provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵReflectorReader"], useExisting: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵReflector"] }, { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER }, SummaryResolver, __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵConsole"], Lexer, Parser, {
    provide: baseHtmlParser,
    useClass: HtmlParser
}, {
    provide: I18NHtmlParser,
    useFactory: function useFactory(parser, translations, format, config, console) {
        return new I18NHtmlParser(parser, translations, format, config.missingTranslation, console);
    },
    deps: [baseHtmlParser, [new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"](__WEBPACK_IMPORTED_MODULE_0__angular_core__["TRANSLATIONS"])], [new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Optional"](), new __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"](__WEBPACK_IMPORTED_MODULE_0__angular_core__["TRANSLATIONS_FORMAT"])], [CompilerConfig], [__WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵConsole"]]]
}, {
    provide: HtmlParser,
    useExisting: I18NHtmlParser
}, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, { provide: CompilerConfig, useValue: new CompilerConfig() }, JitCompiler, { provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Compiler"], useExisting: JitCompiler }, DomElementSchemaRegistry, { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry }, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver];

var JitCompilerFactory = function () {
    /**
     * @param {?} defaultOptions
     */
    function JitCompilerFactory(defaultOptions) {
        _classCallCheck(this, JitCompilerFactory);

        var compilerOptions = {
            useDebug: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["isDevMode"])(),
            useJit: true,
            defaultEncapsulation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewEncapsulation"].Emulated,
            missingTranslation: __WEBPACK_IMPORTED_MODULE_0__angular_core__["MissingTranslationStrategy"].Warning,
            enableLegacyTemplate: true
        };
        this._defaultOptions = [compilerOptions].concat(_toConsumableArray(defaultOptions));
    }
    /**
     * @param {?=} options
     * @return {?}
     */


    _createClass(JitCompilerFactory, [{
        key: 'createCompiler',
        value: function createCompiler() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            var /** @type {?} */opts = _mergeOptions(this._defaultOptions.concat(options));
            var /** @type {?} */injector = __WEBPACK_IMPORTED_MODULE_0__angular_core__["ReflectiveInjector"].resolveAndCreate([COMPILER_PROVIDERS, {
                provide: CompilerConfig,
                useFactory: function useFactory() {
                    return new CompilerConfig({
                        // let explicit values from the compiler options overwrite options
                        // from the app providers. E.g. important for the testing platform.
                        genDebugInfo: opts.useDebug,
                        // let explicit values from the compiler options overwrite options
                        // from the app providers
                        useJit: opts.useJit,
                        // let explicit values from the compiler options overwrite options
                        // from the app providers
                        defaultEncapsulation: opts.defaultEncapsulation,
                        logBindingUpdate: opts.useDebug,
                        missingTranslation: opts.missingTranslation,
                        enableLegacyTemplate: opts.enableLegacyTemplate
                    });
                },
                deps: []
            }, opts.providers]);
            return injector.get(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Compiler"]);
        }
    }]);

    return JitCompilerFactory;
}();

JitCompilerFactory.decorators = [{ type: CompilerInjectable }];
/** @nocollapse */
JitCompilerFactory.ctorParameters = function () {
    return [{ type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__["COMPILER_OPTIONS"]] }] }];
};
/**
 * @return {?}
 */
function _initReflector() {
    __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵreflector"].reflectionCapabilities = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["ɵReflectionCapabilities"]();
}
/**
 * A platform that included corePlatform and the compiler.
 *
 * @experimental
 */
var /** @type {?} */platformCoreDynamic = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["createPlatformFactory"])(__WEBPACK_IMPORTED_MODULE_0__angular_core__["platformCore"], 'coreDynamic', [{ provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["COMPILER_OPTIONS"], useValue: {}, multi: true }, { provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["CompilerFactory"], useClass: JitCompilerFactory }, { provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["PLATFORM_INITIALIZER"], useValue: _initReflector, multi: true }]);
/**
 * @param {?} optionsArr
 * @return {?}
 */
function _mergeOptions(optionsArr) {
    return {
        useDebug: _lastDefined(optionsArr.map(function (options) {
            return options.useDebug;
        })),
        useJit: _lastDefined(optionsArr.map(function (options) {
            return options.useJit;
        })),
        defaultEncapsulation: _lastDefined(optionsArr.map(function (options) {
            return options.defaultEncapsulation;
        })),
        providers: _mergeArrays(optionsArr.map(function (options) {
            return options.providers;
        })),
        missingTranslation: _lastDefined(optionsArr.map(function (options) {
            return options.missingTranslation;
        }))
    };
}
/**
 * @param {?} args
 * @return {?}
 */
function _lastDefined(args) {
    for (var /** @type {?} */i = args.length - 1; i >= 0; i--) {
        if (args[i] !== undefined) {
            return args[i];
        }
    }
    return undefined;
}
/**
 * @param {?} parts
 * @return {?}
 */
function _mergeArrays(parts) {
    var /** @type {?} */result = [];
    parts.forEach(function (part) {
        return part && result.push.apply(result, _toConsumableArray(part));
    });
    return result;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Interface that defines how import statements should be generated.
 * @abstract
 */

var ImportResolver = function () {
    function ImportResolver() {
        _classCallCheck(this, ImportResolver);
    }

    _createClass(ImportResolver, [{
        key: 'fileNameToModuleName',

        /**
         * Converts a file path to a module name that can be used as an `import.
         * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.
         * @abstract
         * @param {?} importedFilePath
         * @param {?} containingFilePath
         * @return {?}
         */
        value: function fileNameToModuleName(importedFilePath, containingFilePath) {}
        /**
         * Converts the given StaticSymbol into another StaticSymbol that should be used
         * to generate the import from.
         * @abstract
         * @param {?} symbol
         * @return {?}
         */

    }, {
        key: 'getImportAs',
        value: function getImportAs(symbol) {}
        /**
         * Determine the airty of a type.
         * @abstract
         * @param {?} symbol
         * @return {?}
         */

    }, {
        key: 'getTypeArity',
        value: function getTypeArity(symbol) {}
    }]);

    return ImportResolver;
}();




/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_animations__ = __webpack_require__(14);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserAnimationsModule", function() { return BrowserAnimationsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoopAnimationsModule", function() { return NoopAnimationsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationDriver", function() { return AnimationDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationEngine", function() { return AnimationEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimation", function() { return Animation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationStyleNormalizer", function() { return AnimationStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNoopAnimationStyleNormalizer", function() { return NoopAnimationStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNoopAnimationDriver", function() { return NoopAnimationDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationRenderer", function() { return AnimationRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationRendererFactory", function() { return AnimationRendererFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomAnimationEngine", function() { return DomAnimationEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return WebAnimationsStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return BROWSER_ANIMATIONS_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return BROWSER_NOOP_ANIMATIONS_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return InjectableAnimationEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return instantiateDefaultStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return instantiateRendererFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return instantiateSupportedAnimationDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return NoopAnimationEngine; });
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





/**
 * @abstract
 */

var AnimationEngine = function () {
    function AnimationEngine() {
        _classCallCheck(this, AnimationEngine);
    }

    _createClass(AnimationEngine, [{
        key: 'registerTrigger',

        /**
         * @abstract
         * @param {?} trigger
         * @param {?=} name
         * @return {?}
         */
        value: function registerTrigger(trigger, name) {}
        /**
         * @abstract
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */

    }, {
        key: 'onInsert',
        value: function onInsert(element, domFn) {}
        /**
         * @abstract
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */

    }, {
        key: 'onRemove',
        value: function onRemove(element, domFn) {}
        /**
         * @abstract
         * @param {?} element
         * @param {?} property
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'setProperty',
        value: function setProperty(element, property, value) {}
        /**
         * @abstract
         * @param {?} element
         * @param {?} eventName
         * @param {?} eventPhase
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listen',
        value: function listen(element, eventName, eventPhase, callback) {}
        /**
         * @abstract
         * @return {?}
         */

    }, {
        key: 'flush',
        value: function flush() {}
        /**
         * @return {?}
         */

    }, {
        key: 'activePlayers',
        get: function get() {
            throw new Error('...');
        }
        /**
         * @return {?}
         */

    }, {
        key: 'queuedPlayers',
        get: function get() {
            throw new Error('...');
        }
    }]);

    return AnimationEngine;
}();

/**
 * \@experimental Animation support is experimental.
 * @abstract
 */


var AnimationStyleNormalizer = function () {
    function AnimationStyleNormalizer() {
        _classCallCheck(this, AnimationStyleNormalizer);
    }

    _createClass(AnimationStyleNormalizer, [{
        key: 'normalizePropertyName',

        /**
         * @abstract
         * @param {?} propertyName
         * @param {?} errors
         * @return {?}
         */
        value: function normalizePropertyName(propertyName, errors) {}
        /**
         * @abstract
         * @param {?} userProvidedProperty
         * @param {?} normalizedProperty
         * @param {?} value
         * @param {?} errors
         * @return {?}
         */

    }, {
        key: 'normalizeStyleValue',
        value: function normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {}
    }]);

    return AnimationStyleNormalizer;
}();
/**
 * \@experimental Animation support is experimental.
 */


var NoopAnimationStyleNormalizer = function () {
    function NoopAnimationStyleNormalizer() {
        _classCallCheck(this, NoopAnimationStyleNormalizer);
    }

    _createClass(NoopAnimationStyleNormalizer, [{
        key: 'normalizePropertyName',

        /**
         * @param {?} propertyName
         * @param {?} errors
         * @return {?}
         */
        value: function normalizePropertyName(propertyName, errors) {
            return propertyName;
        }
        /**
         * @param {?} userProvidedProperty
         * @param {?} normalizedProperty
         * @param {?} value
         * @param {?} errors
         * @return {?}
         */

    }, {
        key: 'normalizeStyleValue',
        value: function normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
            return value;
        }
    }]);

    return NoopAnimationStyleNormalizer;
}();

var WebAnimationsStyleNormalizer = function (_AnimationStyleNormal) {
    _inherits(WebAnimationsStyleNormalizer, _AnimationStyleNormal);

    function WebAnimationsStyleNormalizer() {
        _classCallCheck(this, WebAnimationsStyleNormalizer);

        return _possibleConstructorReturn(this, (WebAnimationsStyleNormalizer.__proto__ || Object.getPrototypeOf(WebAnimationsStyleNormalizer)).apply(this, arguments));
    }

    _createClass(WebAnimationsStyleNormalizer, [{
        key: 'normalizePropertyName',

        /**
         * @param {?} propertyName
         * @param {?} errors
         * @return {?}
         */
        value: function normalizePropertyName(propertyName, errors) {
            return dashCaseToCamelCase(propertyName);
        }
        /**
         * @param {?} userProvidedProperty
         * @param {?} normalizedProperty
         * @param {?} value
         * @param {?} errors
         * @return {?}
         */

    }, {
        key: 'normalizeStyleValue',
        value: function normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
            var /** @type {?} */unit = '';
            var /** @type {?} */strVal = value.toString().trim();
            if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
                if (typeof value === 'number') {
                    unit = 'px';
                } else {
                    var /** @type {?} */valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
                    if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                        errors.push('Please provide a CSS unit value for ' + userProvidedProperty + ':' + value);
                    }
                }
            }
            return strVal + unit;
        }
    }]);

    return WebAnimationsStyleNormalizer;
}(AnimationStyleNormalizer);

var /** @type {?} */DIMENSIONAL_PROP_MAP = makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent'.split(','));
/**
 * @param {?} keys
 * @return {?}
 */
function makeBooleanMap(keys) {
    var /** @type {?} */map = {};
    keys.forEach(function (key) {
        return map[key] = true;
    });
    return map;
}
var /** @type {?} */DASH_CASE_REGEXP = /-+([a-z0-9])/g;
/**
 * @param {?} input
 * @return {?}
 */
function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, function () {
        for (var _len = arguments.length, m = Array(_len), _key = 0; _key < _len; _key++) {
            m[_key] = arguments[_key];
        }

        return m[1].toUpperCase();
    });
}

/**
 * @experimental
 */

var NoopAnimationDriver = function () {
    function NoopAnimationDriver() {
        _classCallCheck(this, NoopAnimationDriver);
    }

    _createClass(NoopAnimationDriver, [{
        key: 'animate',
        value: function animate(element, keyframes, duration, delay, easing) {
            var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];

            return new __WEBPACK_IMPORTED_MODULE_2__angular_animations__["NoopAnimationPlayer"]();
        }
    }]);

    return NoopAnimationDriver;
}();
/**
 * @experimental
 */


var AnimationDriver = function AnimationDriver() {
    _classCallCheck(this, AnimationDriver);
};

AnimationDriver.NOOP = new NoopAnimationDriver();

var AnimationRendererFactory = function () {
    /**
     * @param {?} delegate
     * @param {?} _engine
     * @param {?} _zone
     */
    function AnimationRendererFactory(delegate, _engine, _zone) {
        _classCallCheck(this, AnimationRendererFactory);

        this.delegate = delegate;
        this._engine = _engine;
        this._zone = _zone;
    }
    /**
     * @param {?} hostElement
     * @param {?} type
     * @return {?}
     */


    _createClass(AnimationRendererFactory, [{
        key: 'createRenderer',
        value: function createRenderer(hostElement, type) {
            var _this2 = this;

            var /** @type {?} */delegate = this.delegate.createRenderer(hostElement, type);
            if (!hostElement || !type || !type.data || !type.data['animation']) return delegate;
            var /** @type {?} */namespaceId = type.id;
            var /** @type {?} */animationTriggers = type.data['animation'];
            animationTriggers.forEach(function (trigger) {
                return _this2._engine.registerTrigger(trigger, namespaceify(namespaceId, trigger.name));
            });
            return new AnimationRenderer(delegate, this._engine, this._zone, namespaceId);
        }
    }]);

    return AnimationRendererFactory;
}();

AnimationRendererFactory.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
AnimationRendererFactory.ctorParameters = function () {
    return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["RendererFactoryV2"] }, { type: AnimationEngine }, { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"] }];
};

var AnimationRenderer = function () {
    /**
     * @param {?} delegate
     * @param {?} _engine
     * @param {?} _zone
     * @param {?} _namespaceId
     */
    function AnimationRenderer(delegate, _engine, _zone, _namespaceId) {
        _classCallCheck(this, AnimationRenderer);

        this.delegate = delegate;
        this._engine = _engine;
        this._zone = _zone;
        this._namespaceId = _namespaceId;
        this.destroyNode = null;
        this._flushPromise = null;
        this.destroyNode = this.delegate.destroyNode ? function (n) {
            return delegate.destroyNode(n);
        } : null;
    }
    /**
     * @return {?}
     */


    _createClass(AnimationRenderer, [{
        key: 'destroy',

        /**
         * @return {?}
         */
        value: function destroy() {
            this.delegate.destroy();
        }
        /**
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */

    }, {
        key: 'createElement',
        value: function createElement(name, namespace) {
            return this.delegate.createElement(name, namespace);
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'createComment',
        value: function createComment(value) {
            return this.delegate.createComment(value);
        }
        /**
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'createText',
        value: function createText(value) {
            return this.delegate.createText(value);
        }
        /**
         * @param {?} selectorOrNode
         * @return {?}
         */

    }, {
        key: 'selectRootElement',
        value: function selectRootElement(selectorOrNode) {
            return this.delegate.selectRootElement(selectorOrNode);
        }
        /**
         * @param {?} node
         * @return {?}
         */

    }, {
        key: 'parentNode',
        value: function parentNode(node) {
            return this.delegate.parentNode(node);
        }
        /**
         * @param {?} node
         * @return {?}
         */

    }, {
        key: 'nextSibling',
        value: function nextSibling(node) {
            return this.delegate.nextSibling(node);
        }
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @param {?=} namespace
         * @return {?}
         */

    }, {
        key: 'setAttribute',
        value: function setAttribute(el, name, value, namespace) {
            this.delegate.setAttribute(el, name, value, namespace);
        }
        /**
         * @param {?} el
         * @param {?} name
         * @param {?=} namespace
         * @return {?}
         */

    }, {
        key: 'removeAttribute',
        value: function removeAttribute(el, name, namespace) {
            this.delegate.removeAttribute(el, name, namespace);
        }
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'addClass',
        value: function addClass(el, name) {
            this.delegate.addClass(el, name);
        }
        /**
         * @param {?} el
         * @param {?} name
         * @return {?}
         */

    }, {
        key: 'removeClass',
        value: function removeClass(el, name) {
            this.delegate.removeClass(el, name);
        }
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} value
         * @param {?} hasVendorPrefix
         * @param {?} hasImportant
         * @return {?}
         */

    }, {
        key: 'setStyle',
        value: function setStyle(el, style, value, hasVendorPrefix, hasImportant) {
            this.delegate.setStyle(el, style, value, hasVendorPrefix, hasImportant);
        }
        /**
         * @param {?} el
         * @param {?} style
         * @param {?} hasVendorPrefix
         * @return {?}
         */

    }, {
        key: 'removeStyle',
        value: function removeStyle(el, style, hasVendorPrefix) {
            this.delegate.removeStyle(el, style, hasVendorPrefix);
        }
        /**
         * @param {?} node
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'setValue',
        value: function setValue(node, value) {
            this.delegate.setValue(node, value);
        }
        /**
         * @param {?} parent
         * @param {?} newChild
         * @return {?}
         */

    }, {
        key: 'appendChild',
        value: function appendChild(parent, newChild) {
            var _this3 = this;

            this._engine.onInsert(newChild, function () {
                return _this3.delegate.appendChild(parent, newChild);
            });
            this._queueFlush();
        }
        /**
         * @param {?} parent
         * @param {?} newChild
         * @param {?} refChild
         * @return {?}
         */

    }, {
        key: 'insertBefore',
        value: function insertBefore(parent, newChild, refChild) {
            var _this4 = this;

            this._engine.onInsert(newChild, function () {
                return _this4.delegate.insertBefore(parent, newChild, refChild);
            });
            this._queueFlush();
        }
        /**
         * @param {?} parent
         * @param {?} oldChild
         * @return {?}
         */

    }, {
        key: 'removeChild',
        value: function removeChild(parent, oldChild) {
            var _this5 = this;

            this._engine.onRemove(oldChild, function () {
                return _this5.delegate.removeChild(parent, oldChild);
            });
            this._queueFlush();
        }
        /**
         * @param {?} el
         * @param {?} name
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'setProperty',
        value: function setProperty(el, name, value) {
            if (name.charAt(0) == '@') {
                this._engine.setProperty(el, namespaceify(this._namespaceId, name.substr(1)), value);
                this._queueFlush();
            } else {
                this.delegate.setProperty(el, name, value);
            }
        }
        /**
         * @param {?} target
         * @param {?} eventName
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listen',
        value: function listen(target, eventName, callback) {
            var _this6 = this;

            if (eventName.charAt(0) == '@') {
                var /** @type {?} */element = resolveElementFromTarget(target);

                var _parseTriggerCallback = parseTriggerCallbackName(eventName.substr(1)),
                    _parseTriggerCallback2 = _slicedToArray(_parseTriggerCallback, 2),
                    name = _parseTriggerCallback2[0],
                    phase = _parseTriggerCallback2[1];

                return this._engine.listen(element, namespaceify(this._namespaceId, name), phase, function (event) {
                    var /** @type {?} */e = event;
                    if (e.triggerName) {
                        e.triggerName = deNamespaceify(_this6._namespaceId, e.triggerName);
                    }
                    _this6._zone.run(function () {
                        return callback(event);
                    });
                });
            }
            return this.delegate.listen(target, eventName, callback);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_queueFlush',
        value: function _queueFlush() {
            var _this7 = this;

            if (!this._flushPromise) {
                this._zone.runOutsideAngular(function () {
                    _this7._flushPromise = Promise.resolve(null).then(function () {
                        _this7._flushPromise = null;
                        _this7._engine.flush();
                    });
                });
            }
        }
    }, {
        key: 'data',
        get: function get() {
            return this.delegate.data;
        }
    }]);

    return AnimationRenderer;
}();
/**
 * @param {?} target
 * @return {?}
 */


function resolveElementFromTarget(target) {
    switch (target) {
        case 'body':
            return document.body;
        case 'document':
            return document;
        case 'window':
            return window;
        default:
            return target;
    }
}
/**
 * @param {?} triggerName
 * @return {?}
 */
function parseTriggerCallbackName(triggerName) {
    var /** @type {?} */dotIndex = triggerName.indexOf('.');
    var /** @type {?} */trigger = triggerName.substring(0, dotIndex);
    var /** @type {?} */phase = triggerName.substr(dotIndex + 1);
    return [trigger, phase];
}
/**
 * @param {?} namespaceId
 * @param {?} value
 * @return {?}
 */
function namespaceify(namespaceId, value) {
    return namespaceId + '#' + value;
}
/**
 * @param {?} namespaceId
 * @param {?} value
 * @return {?}
 */
function deNamespaceify(namespaceId, value) {
    return value.replace(namespaceId + '#', '');
}

var /** @type {?} */ONE_SECOND = 1000;
/**
 * @param {?} exp
 * @param {?} errors
 * @return {?}
 */
function parseTimeExpression(exp, errors) {
    var /** @type {?} */regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
    var /** @type {?} */duration = void 0;
    var /** @type {?} */delay = 0;
    var /** @type {?} */easing = null;
    if (typeof exp === 'string') {
        var /** @type {?} */matches = exp.match(regex);
        if (matches === null) {
            errors.push('The provided timing value "' + exp + '" is invalid.');
            return { duration: 0, delay: 0, easing: null };
        }
        var /** @type {?} */durationMatch = parseFloat(matches[1]);
        var /** @type {?} */durationUnit = matches[2];
        if (durationUnit == 's') {
            durationMatch *= ONE_SECOND;
        }
        duration = Math.floor(durationMatch);
        var /** @type {?} */delayMatch = matches[3];
        var /** @type {?} */delayUnit = matches[4];
        if (delayMatch != null) {
            var /** @type {?} */delayVal = parseFloat(delayMatch);
            if (delayUnit != null && delayUnit == 's') {
                delayVal *= ONE_SECOND;
            }
            delay = Math.floor(delayVal);
        }
        var /** @type {?} */easingVal = matches[5];
        if (easingVal) {
            easing = easingVal;
        }
    } else {
        duration = exp;
    }
    return { duration: duration, delay: delay, easing: easing };
}
/**
 * @param {?} styles
 * @return {?}
 */
function normalizeStyles(styles) {
    var /** @type {?} */normalizedStyles = {};
    if (Array.isArray(styles)) {
        styles.forEach(function (data) {
            return copyStyles(data, false, normalizedStyles);
        });
    } else {
        copyStyles(styles, false, normalizedStyles);
    }
    return normalizedStyles;
}
/**
 * @param {?} styles
 * @param {?} readPrototype
 * @param {?=} destination
 * @return {?}
 */
function copyStyles(styles, readPrototype) {
    var destination = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (readPrototype) {
        // we make use of a for-in loop so that the
        // prototypically inherited properties are
        // revealed from the backFill map
        for (var /** @type {?} */prop in styles) {
            destination[prop] = styles[prop];
        }
    } else {
        Object.keys(styles).forEach(function (prop) {
            return destination[prop] = styles[prop];
        });
    }
    return destination;
}
/**
 * @param {?} element
 * @param {?} styles
 * @return {?}
 */
function setStyles(element, styles) {
    if (element['style']) {
        Object.keys(styles).forEach(function (prop) {
            return element.style[prop] = styles[prop];
        });
    }
}
/**
 * @param {?} element
 * @param {?} styles
 * @return {?}
 */
function eraseStyles(element, styles) {
    if (element['style']) {
        Object.keys(styles).forEach(function (prop) {
            // IE requires '' instead of null
            // see https://github.com/angular/angular/issues/7916
            element.style[prop] = '';
        });
    }
}

/**
 * @param {?} visitor
 * @param {?} node
 * @param {?} context
 * @return {?}
 */
function visitAnimationNode(visitor, node, context) {
    switch (node.type) {
        case 0 /* State */:
            return visitor.visitState( /** @type {?} */node, context);
        case 1 /* Transition */:
            return visitor.visitTransition( /** @type {?} */node, context);
        case 2 /* Sequence */:
            return visitor.visitSequence( /** @type {?} */node, context);
        case 3 /* Group */:
            return visitor.visitGroup( /** @type {?} */node, context);
        case 4 /* Animate */:
            return visitor.visitAnimate( /** @type {?} */node, context);
        case 5 /* KeyframeSequence */:
            return visitor.visitKeyframeSequence( /** @type {?} */node, context);
        case 6 /* Style */:
            return visitor.visitStyle( /** @type {?} */node, context);
        default:
            throw new Error('Unable to resolve animation metadata node #' + node.type);
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */var /** @type {?} */ANY_STATE = '*';
/**
 * @param {?} transitionValue
 * @param {?} errors
 * @return {?}
 */
function parseTransitionExpr(transitionValue, errors) {
    var /** @type {?} */expressions = [];
    if (typeof transitionValue == 'string') {
        transitionValue.split(/\s*,\s*/).forEach(function (str) {
            return parseInnerTransitionStr(str, expressions, errors);
        });
    } else {
        expressions.push( /** @type {?} */transitionValue);
    }
    return expressions;
}
/**
 * @param {?} eventStr
 * @param {?} expressions
 * @param {?} errors
 * @return {?}
 */
function parseInnerTransitionStr(eventStr, expressions, errors) {
    if (eventStr[0] == ':') {
        eventStr = parseAnimationAlias(eventStr, errors);
    }
    var /** @type {?} */match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (match == null || match.length < 4) {
        errors.push('The provided transition expression "' + eventStr + '" is not supported');
        return expressions;
    }
    var /** @type {?} */fromState = match[1];
    var /** @type {?} */separator = match[2];
    var /** @type {?} */toState = match[3];
    expressions.push(makeLambdaFromStates(fromState, toState));
    var /** @type {?} */isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    if (separator[0] == '<' && !isFullAnyStateExpr) {
        expressions.push(makeLambdaFromStates(toState, fromState));
    }
}
/**
 * @param {?} alias
 * @param {?} errors
 * @return {?}
 */
function parseAnimationAlias(alias, errors) {
    switch (alias) {
        case ':enter':
            return 'void => *';
        case ':leave':
            return '* => void';
        default:
            errors.push('The transition alias value "' + alias + '" is not supported');
            return '* => *';
    }
}
/**
 * @param {?} lhs
 * @param {?} rhs
 * @return {?}
 */
function makeLambdaFromStates(lhs, rhs) {
    return function (fromState, toState) {
        var /** @type {?} */lhsMatch = lhs == ANY_STATE || lhs == fromState;
        var /** @type {?} */rhsMatch = rhs == ANY_STATE || rhs == toState;
        return lhsMatch && rhsMatch;
    };
}

/**
 * @param {?} keyframes
 * @param {?} duration
 * @param {?} delay
 * @param {?} easing
 * @return {?}
 */
function createTimelineInstruction(keyframes, duration, delay, easing) {
    return {
        type: 1 /* TimelineAnimation */
        , keyframes: keyframes,
        duration: duration,
        delay: delay,
        totalTime: duration + delay, easing: easing
    };
}

/**
 * @param {?} ast
 * @param {?=} startingStyles
 * @param {?=} finalStyles
 * @return {?}
 */
function buildAnimationKeyframes(ast) {
    var startingStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var finalStyles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var /** @type {?} */normalizedAst = Array.isArray(ast) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["sequence"])( /** @type {?} */ast) : ast;
    return new AnimationTimelineVisitor().buildKeyframes(normalizedAst, startingStyles, finalStyles);
}

var AnimationTimelineContext = function () {
    /**
     * @param {?} errors
     * @param {?} timelines
     * @param {?=} initialTimeline
     */
    function AnimationTimelineContext(errors, timelines) {
        var initialTimeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, AnimationTimelineContext);

        this.errors = errors;
        this.timelines = timelines;
        this.previousNode = {};
        this.subContextCount = 0;
        this.currentTimeline = initialTimeline || new TimelineBuilder(0);
        timelines.push(this.currentTimeline);
    }
    /**
     * @return {?}
     */


    _createClass(AnimationTimelineContext, [{
        key: 'createSubContext',
        value: function createSubContext() {
            var /** @type {?} */context = new AnimationTimelineContext(this.errors, this.timelines, this.currentTimeline.fork());
            context.previousNode = this.previousNode;
            context.currentAnimateTimings = this.currentAnimateTimings;
            this.subContextCount++;
            return context;
        }
        /**
         * @param {?=} newTime
         * @return {?}
         */

    }, {
        key: 'transformIntoNewTimeline',
        value: function transformIntoNewTimeline() {
            var newTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            this.currentTimeline = this.currentTimeline.fork(newTime);
            this.timelines.push(this.currentTimeline);
            return this.currentTimeline;
        }
        /**
         * @param {?} time
         * @return {?}
         */

    }, {
        key: 'incrementTime',
        value: function incrementTime(time) {
            this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
        }
    }]);

    return AnimationTimelineContext;
}();

var AnimationTimelineVisitor = function () {
    function AnimationTimelineVisitor() {
        _classCallCheck(this, AnimationTimelineVisitor);
    }

    _createClass(AnimationTimelineVisitor, [{
        key: 'buildKeyframes',

        /**
         * @param {?} ast
         * @param {?} startingStyles
         * @param {?} finalStyles
         * @return {?}
         */
        value: function buildKeyframes(ast, startingStyles, finalStyles) {
            var /** @type {?} */context = new AnimationTimelineContext([], []);
            context.currentTimeline.setStyles(startingStyles);
            visitAnimationNode(this, ast, context);
            var /** @type {?} */normalizedFinalStyles = copyStyles(finalStyles, true);
            // this is a special case for when animate(TIME) is used (without any styles)
            // thus indicating to create an animation arc between the final keyframe and
            // the destination styles. When this occurs we need to ensure that the styles
            // that are missing on the finalStyles map are set to AUTO
            if (Object.keys(context.currentTimeline.getFinalKeyframe()).length == 0) {
                context.currentTimeline.properties.forEach(function (prop) {
                    var /** @type {?} */val = normalizedFinalStyles[prop];
                    if (val == null) {
                        normalizedFinalStyles[prop] = __WEBPACK_IMPORTED_MODULE_2__angular_animations__["AUTO_STYLE"];
                    }
                });
            }
            context.currentTimeline.setStyles(normalizedFinalStyles);
            var /** @type {?} */timelineInstructions = [];
            context.timelines.forEach(function (timeline) {
                // this checks to see if an actual animation happened
                if (timeline.hasStyling()) {
                    timelineInstructions.push(timeline.buildKeyframes());
                }
            });
            if (timelineInstructions.length == 0) {
                timelineInstructions.push(createTimelineInstruction([], 0, 0, ''));
            }
            return timelineInstructions;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitState',
        value: function visitState(ast, context) {}
        // these values are not visited in this AST

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitTransition',
        value: function visitTransition(ast, context) {}
        // these values are not visited in this AST

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitSequence',
        value: function visitSequence(ast, context) {
            var _this8 = this;

            var /** @type {?} */subContextCount = context.subContextCount;
            if (context.previousNode.type == 6 /* Style */) {
                    context.currentTimeline.forwardFrame();
                    context.currentTimeline.snapshotCurrentStyles();
                }
            ast.steps.forEach(function (s) {
                return visitAnimationNode(_this8, s, context);
            });
            // this means that some animation function within the sequence
            // ended up creating a sub timeline (which means the current
            // timeline cannot overlap with the contents of the sequence)
            if (context.subContextCount > subContextCount) {
                context.transformIntoNewTimeline();
            }
            context.previousNode = ast;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitGroup',
        value: function visitGroup(ast, context) {
            var _this9 = this;

            var /** @type {?} */innerTimelines = [];
            var /** @type {?} */furthestTime = context.currentTimeline.currentTime;
            ast.steps.forEach(function (s) {
                var /** @type {?} */innerContext = context.createSubContext();
                visitAnimationNode(_this9, s, innerContext);
                furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
                innerTimelines.push(innerContext.currentTimeline);
            });
            // this operation is run after the AST loop because otherwise
            // if the parent timeline's collected styles were updated then
            // it would pass in invalid data into the new-to-be forked items
            innerTimelines.forEach(function (timeline) {
                return context.currentTimeline.mergeTimelineCollectedStyles(timeline);
            });
            context.transformIntoNewTimeline(furthestTime);
            context.previousNode = ast;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAnimate',
        value: function visitAnimate(ast, context) {
            var /** @type {?} */timings = ast.timings.hasOwnProperty('duration') ? ast.timings : parseTimeExpression( /** @type {?} */ast.timings, context.errors);
            context.currentAnimateTimings = timings;
            if (timings.delay) {
                context.incrementTime(timings.delay);
                context.currentTimeline.snapshotCurrentStyles();
            }
            var /** @type {?} */astType = ast.styles ? ast.styles.type : -1;
            if (astType == 5 /* KeyframeSequence */) {
                    this.visitKeyframeSequence( /** @type {?} */ast.styles, context);
                } else {
                context.incrementTime(timings.duration);
                if (astType == 6 /* Style */) {
                        this.visitStyle( /** @type {?} */ast.styles, context);
                    }
            }
            context.currentAnimateTimings = null;
            context.previousNode = ast;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitStyle',
        value: function visitStyle(ast, context) {
            // this is a special case when a style() call is issued directly after
            // a call to animate(). If the clock is not forwarded by one frame then
            // the style() calls will be merged into the previous animate() call
            // which is incorrect.
            if (!context.currentAnimateTimings && context.previousNode.type == 4 /* Animate */) {
                    context.currentTimeline.forwardFrame();
                }
            var /** @type {?} */normalizedStyles = normalizeStyles(ast.styles);
            var /** @type {?} */easing = context.currentAnimateTimings && context.currentAnimateTimings.easing;
            if (easing) {
                normalizedStyles['easing'] = easing;
            }
            context.currentTimeline.setStyles(normalizedStyles);
            context.previousNode = ast;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitKeyframeSequence',
        value: function visitKeyframeSequence(ast, context) {
            var /** @type {?} */MAX_KEYFRAME_OFFSET = 1;
            var /** @type {?} */limit = ast.steps.length - 1;
            var /** @type {?} */firstKeyframe = ast.steps[0];
            var /** @type {?} */offsetGap = 0;
            var /** @type {?} */containsOffsets = getOffset(firstKeyframe) != null;
            if (!containsOffsets) {
                offsetGap = MAX_KEYFRAME_OFFSET / limit;
            }
            var /** @type {?} */startTime = context.currentTimeline.duration;
            var /** @type {?} */duration = context.currentAnimateTimings.duration;
            var /** @type {?} */innerContext = context.createSubContext();
            var /** @type {?} */innerTimeline = innerContext.currentTimeline;
            innerTimeline.easing = context.currentAnimateTimings.easing;
            ast.steps.forEach(function (step, i) {
                var /** @type {?} */normalizedStyles = normalizeStyles(step.styles);
                var /** @type {?} */offset = containsOffsets ? step.offset != null ? step.offset : parseFloat( /** @type {?} */normalizedStyles['offset']) : i == limit ? MAX_KEYFRAME_OFFSET : i * offsetGap;
                innerTimeline.forwardTime(offset * duration);
                innerTimeline.setStyles(normalizedStyles);
            });
            // this will ensure that the parent timeline gets all the styles from
            // the child even if the new timeline below is not used
            context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
            // we do this because the window between this timeline and the sub timeline
            // should ensure that the styles within are exactly the same as they were before
            context.transformIntoNewTimeline(startTime + duration);
            context.previousNode = ast;
        }
    }]);

    return AnimationTimelineVisitor;
}();

var TimelineBuilder = function () {
    /**
     * @param {?} startTime
     * @param {?=} _globalTimelineStyles
     */
    function TimelineBuilder(startTime) {
        var _globalTimelineStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, TimelineBuilder);

        this.startTime = startTime;
        this._globalTimelineStyles = _globalTimelineStyles;
        this.duration = 0;
        this.easing = '';
        this._keyframes = new Map();
        this._styleSummary = {};
        this._backFill = {};
        this._localTimelineStyles = Object.create(this._backFill, {});
        if (!this._globalTimelineStyles) {
            this._globalTimelineStyles = this._localTimelineStyles;
        }
        this._loadKeyframe();
    }
    /**
     * @return {?}
     */


    _createClass(TimelineBuilder, [{
        key: 'hasStyling',
        value: function hasStyling() {
            return this._keyframes.size > 1;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'fork',

        /**
         * @param {?=} currentTime
         * @return {?}
         */
        value: function fork() {
            var currentTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            return new TimelineBuilder(currentTime || this.currentTime, this._globalTimelineStyles);
        }
        /**
         * @return {?}
         */

    }, {
        key: '_loadKeyframe',
        value: function _loadKeyframe() {
            this._currentKeyframe = this._keyframes.get(this.duration);
            if (!this._currentKeyframe) {
                this._currentKeyframe = Object.create(this._backFill, {});
                this._keyframes.set(this.duration, this._currentKeyframe);
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'forwardFrame',
        value: function forwardFrame() {
            this.duration++;
            this._loadKeyframe();
        }
        /**
         * @param {?} time
         * @return {?}
         */

    }, {
        key: 'forwardTime',
        value: function forwardTime(time) {
            this.duration = time;
            this._loadKeyframe();
        }
        /**
         * @param {?} prop
         * @param {?} value
         * @return {?}
         */

    }, {
        key: '_updateStyle',
        value: function _updateStyle(prop, value) {
            if (prop != 'easing') {
                this._localTimelineStyles[prop] = value;
                this._globalTimelineStyles[prop] = value;
                this._styleSummary[prop] = { time: this.currentTime, value: value };
            }
        }
        /**
         * @param {?} styles
         * @return {?}
         */

    }, {
        key: 'setStyles',
        value: function setStyles(styles) {
            var _this10 = this;

            Object.keys(styles).forEach(function (prop) {
                if (prop !== 'offset') {
                    var /** @type {?} */val = styles[prop];
                    _this10._currentKeyframe[prop] = val;
                    if (prop !== 'easing' && !_this10._localTimelineStyles[prop]) {
                        _this10._backFill[prop] = _this10._globalTimelineStyles[prop] || __WEBPACK_IMPORTED_MODULE_2__angular_animations__["AUTO_STYLE"];
                    }
                    _this10._updateStyle(prop, val);
                }
            });
            Object.keys(this._localTimelineStyles).forEach(function (prop) {
                if (!_this10._currentKeyframe.hasOwnProperty(prop)) {
                    _this10._currentKeyframe[prop] = _this10._localTimelineStyles[prop];
                }
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: 'snapshotCurrentStyles',
        value: function snapshotCurrentStyles() {
            copyStyles(this._localTimelineStyles, false, this._currentKeyframe);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'getFinalKeyframe',
        value: function getFinalKeyframe() {
            return this._keyframes.get(this.duration);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'mergeTimelineCollectedStyles',

        /**
         * @param {?} timeline
         * @return {?}
         */
        value: function mergeTimelineCollectedStyles(timeline) {
            var _this11 = this;

            Object.keys(timeline._styleSummary).forEach(function (prop) {
                var /** @type {?} */details0 = _this11._styleSummary[prop];
                var /** @type {?} */details1 = timeline._styleSummary[prop];
                if (!details0 || details1.time > details0.time) {
                    _this11._updateStyle(prop, details1.value);
                }
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: 'buildKeyframes',
        value: function buildKeyframes() {
            var _this12 = this;

            var /** @type {?} */finalKeyframes = [];
            // special case for when there are only start/destination
            // styles but no actual animation animate steps...
            if (this.duration == 0) {
                var /** @type {?} */targetKeyframe = this.getFinalKeyframe();
                var /** @type {?} */firstKeyframe = copyStyles(targetKeyframe, true);
                firstKeyframe['offset'] = 0;
                finalKeyframes.push(firstKeyframe);
                var /** @type {?} */lastKeyframe = copyStyles(targetKeyframe, true);
                lastKeyframe['offset'] = 1;
                finalKeyframes.push(lastKeyframe);
            } else {
                this._keyframes.forEach(function (keyframe, time) {
                    var /** @type {?} */finalKeyframe = copyStyles(keyframe, true);
                    finalKeyframe['offset'] = time / _this12.duration;
                    finalKeyframes.push(finalKeyframe);
                });
            }
            return createTimelineInstruction(finalKeyframes, this.duration, this.startTime, this.easing);
        }
    }, {
        key: 'currentTime',
        get: function get() {
            return this.startTime + this.duration;
        }
    }, {
        key: 'properties',
        get: function get() {
            var /** @type {?} */properties = [];
            for (var /** @type {?} */prop in this._currentKeyframe) {
                properties.push(prop);
            }
            return properties;
        }
    }]);

    return TimelineBuilder;
}();
/**
 * @param {?} ast
 * @return {?}
 */


function getOffset(ast) {
    var /** @type {?} */offset = ast.offset;
    if (offset == null) {
        var /** @type {?} */styles = ast.styles;
        if (Array.isArray(styles)) {
            for (var /** @type {?} */i = 0; i < styles.length; i++) {
                var /** @type {?} */o = styles[i]['offset'];
                if (o != null) {
                    offset = o;
                    break;
                }
            }
        } else {
            offset = styles['offset'];
        }
    }
    return offset;
}

/**
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?} isRemovalTransition
 * @param {?} fromStyles
 * @param {?} toStyles
 * @param {?} timelines
 * @return {?}
 */
function createTransitionInstruction(triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines) {
    return {
        type: 0 /* TransitionAnimation */
        , triggerName: triggerName,
        isRemovalTransition: isRemovalTransition,
        fromState: fromState,
        fromStyles: fromStyles,
        toState: toState,
        toStyles: toStyles,
        timelines: timelines
    };
}

var AnimationTransitionFactory = function () {
    /**
     * @param {?} _triggerName
     * @param {?} ast
     * @param {?} matchFns
     * @param {?} _stateStyles
     */
    function AnimationTransitionFactory(_triggerName, ast, matchFns, _stateStyles) {
        _classCallCheck(this, AnimationTransitionFactory);

        this._triggerName = _triggerName;
        this.matchFns = matchFns;
        this._stateStyles = _stateStyles;
        var normalizedAst = Array.isArray(ast.animation) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["sequence"])(ast.animation) : ast.animation;
        this._animationAst = normalizedAst;
    }
    /**
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */


    _createClass(AnimationTransitionFactory, [{
        key: 'match',
        value: function match(currentState, nextState) {
            if (!oneOrMoreTransitionsMatch(this.matchFns, currentState, nextState)) return;
            var /** @type {?} */backupStateStyles = this._stateStyles['*'] || {};
            var /** @type {?} */currentStateStyles = this._stateStyles[currentState] || backupStateStyles;
            var /** @type {?} */nextStateStyles = this._stateStyles[nextState] || backupStateStyles;
            var /** @type {?} */timelines = buildAnimationKeyframes(this._animationAst, currentStateStyles, nextStateStyles);
            return createTransitionInstruction(this._triggerName, currentState, nextState, nextState === 'void', currentStateStyles, nextStateStyles, timelines);
        }
    }]);

    return AnimationTransitionFactory;
}();
/**
 * @param {?} matchFns
 * @param {?} currentState
 * @param {?} nextState
 * @return {?}
 */


function oneOrMoreTransitionsMatch(matchFns, currentState, nextState) {
    return matchFns.some(function (fn) {
        return fn(currentState, nextState);
    });
}

/**
 * @param {?} ast
 * @return {?}
 */
function validateAnimationSequence(ast) {
    var /** @type {?} */normalizedAst = Array.isArray(ast) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["sequence"])( /** @type {?} */ast) : ast;
    return new AnimationValidatorVisitor().validate(normalizedAst);
}

var AnimationValidatorVisitor = function () {
    function AnimationValidatorVisitor() {
        _classCallCheck(this, AnimationValidatorVisitor);
    }

    _createClass(AnimationValidatorVisitor, [{
        key: 'validate',

        /**
         * @param {?} ast
         * @return {?}
         */
        value: function validate(ast) {
            var /** @type {?} */context = new AnimationValidatorContext();
            visitAnimationNode(this, ast, context);
            return context.errors;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitState',
        value: function visitState(ast, context) {}
        // these values are not visited in this AST

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitTransition',
        value: function visitTransition(ast, context) {}
        // these values are not visited in this AST

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitSequence',
        value: function visitSequence(ast, context) {
            var _this13 = this;

            ast.steps.forEach(function (step) {
                return visitAnimationNode(_this13, step, context);
            });
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitGroup',
        value: function visitGroup(ast, context) {
            var _this14 = this;

            var /** @type {?} */currentTime = context.currentTime;
            var /** @type {?} */furthestTime = 0;
            ast.steps.forEach(function (step) {
                context.currentTime = currentTime;
                visitAnimationNode(_this14, step, context);
                furthestTime = Math.max(furthestTime, context.currentTime);
            });
            context.currentTime = furthestTime;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAnimate',
        value: function visitAnimate(ast, context) {
            // we reassign the timings here so that they are not reparsed each
            // time an animation occurs
            context.currentAnimateTimings = ast.timings = parseTimeExpression( /** @type {?} */ast.timings, context.errors);
            var /** @type {?} */astType = ast.styles && ast.styles.type;
            if (astType == 5 /* KeyframeSequence */) {
                    this.visitKeyframeSequence( /** @type {?} */ast.styles, context);
                } else {
                context.currentTime += context.currentAnimateTimings.duration + context.currentAnimateTimings.delay;
                if (astType == 6 /* Style */) {
                        this.visitStyle( /** @type {?} */ast.styles, context);
                    }
            }
            context.currentAnimateTimings = null;
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitStyle',
        value: function visitStyle(ast, context) {
            var /** @type {?} */styleData = normalizeStyles(ast.styles);
            var /** @type {?} */timings = context.currentAnimateTimings;
            var /** @type {?} */endTime = context.currentTime;
            var /** @type {?} */startTime = context.currentTime;
            if (timings && startTime > 0) {
                startTime -= timings.duration + timings.delay;
            }
            Object.keys(styleData).forEach(function (prop) {
                var /** @type {?} */collectedEntry = context.collectedStyles[prop];
                var /** @type {?} */updateCollectedStyle = true;
                if (collectedEntry) {
                    if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
                        context.errors.push('The CSS property "' + prop + '" that exists between the times of "' + collectedEntry.startTime + 'ms" and "' + collectedEntry.endTime + 'ms" is also being animated in a parallel animation between the times of "' + startTime + 'ms" and "' + endTime + 'ms"');
                        updateCollectedStyle = false;
                    }
                    // we always choose the smaller start time value since we
                    // want to have a record of the entire animation window where
                    // the style property is being animated in between
                    startTime = collectedEntry.startTime;
                }
                if (updateCollectedStyle) {
                    context.collectedStyles[prop] = { startTime: startTime, endTime: endTime };
                }
            });
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitKeyframeSequence',
        value: function visitKeyframeSequence(ast, context) {
            var _this15 = this;

            var /** @type {?} */totalKeyframesWithOffsets = 0;
            var /** @type {?} */offsets = [];
            var /** @type {?} */offsetsOutOfOrder = false;
            var /** @type {?} */keyframesOutOfRange = false;
            var /** @type {?} */previousOffset = 0;
            ast.steps.forEach(function (step) {
                var /** @type {?} */styleData = normalizeStyles(step.styles);
                var /** @type {?} */offset = 0;
                if (styleData.hasOwnProperty('offset')) {
                    totalKeyframesWithOffsets++;
                    offset = styleData['offset'];
                }
                keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
                offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
                previousOffset = offset;
                offsets.push(offset);
            });
            if (keyframesOutOfRange) {
                context.errors.push('Please ensure that all keyframe offsets are between 0 and 1');
            }
            if (offsetsOutOfOrder) {
                context.errors.push('Please ensure that all keyframe offsets are in order');
            }
            var /** @type {?} */length = ast.steps.length;
            var /** @type {?} */generatedOffset = 0;
            if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
                context.errors.push('Not all style() steps within the declared keyframes() contain offsets');
            } else if (totalKeyframesWithOffsets == 0) {
                generatedOffset = 1 / length;
            }
            var /** @type {?} */limit = length - 1;
            var /** @type {?} */currentTime = context.currentTime;
            var /** @type {?} */animateDuration = context.currentAnimateTimings.duration;
            ast.steps.forEach(function (step, i) {
                var /** @type {?} */offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
                var /** @type {?} */durationUpToThisFrame = offset * animateDuration;
                context.currentTime = currentTime + context.currentAnimateTimings.delay + durationUpToThisFrame;
                context.currentAnimateTimings.duration = durationUpToThisFrame;
                _this15.visitStyle(step, context);
            });
        }
    }]);

    return AnimationValidatorVisitor;
}();

var AnimationValidatorContext = function AnimationValidatorContext() {
    _classCallCheck(this, AnimationValidatorContext);

    this.errors = [];
    this.currentTime = 0;
    this.collectedStyles = {};
};

/**
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */


function buildTrigger(name, definitions) {
    return new AnimationTriggerVisitor().buildTrigger(name, definitions);
}
/**
 * \@experimental Animation support is experimental.
 */

var AnimationTrigger = function () {
    /**
     * @param {?} name
     * @param {?} states
     * @param {?} _transitionAsts
     */
    function AnimationTrigger(name, states, _transitionAsts) {
        var _this16 = this;

        _classCallCheck(this, AnimationTrigger);

        this.name = name;
        this._transitionAsts = _transitionAsts;
        this.transitionFactories = [];
        this.states = {};
        Object.keys(states).forEach(function (stateName) {
            _this16.states[stateName] = copyStyles(states[stateName], false);
        });
        var errors = [];
        _transitionAsts.forEach(function (ast) {
            var exprs = parseTransitionExpr(ast.expr, errors);
            var sequenceErrors = validateAnimationSequence(ast);
            if (sequenceErrors.length) {
                errors.push.apply(errors, _toConsumableArray(sequenceErrors));
            } else {
                _this16.transitionFactories.push(new AnimationTransitionFactory(_this16.name, ast, exprs, states));
            }
        });
        if (errors.length) {
            var LINE_START = '\n - ';
            throw new Error('Animation parsing for the ' + name + ' trigger have failed:' + LINE_START + errors.join(LINE_START));
        }
    }
    /**
     * @param {?} currentState
     * @param {?} nextState
     * @return {?}
     */


    _createClass(AnimationTrigger, [{
        key: 'createFallbackInstruction',
        value: function createFallbackInstruction(currentState, nextState) {
            var /** @type {?} */backupStateStyles = this.states['*'] || {};
            var /** @type {?} */currentStateStyles = this.states[currentState] || backupStateStyles;
            var /** @type {?} */nextStateStyles = this.states[nextState] || backupStateStyles;
            return createTransitionInstruction(this.name, currentState, nextState, nextState == 'void', currentStateStyles, nextStateStyles, []);
        }
        /**
         * @param {?} currentState
         * @param {?} nextState
         * @return {?}
         */

    }, {
        key: 'matchTransition',
        value: function matchTransition(currentState, nextState) {
            for (var /** @type {?} */i = 0; i < this.transitionFactories.length; i++) {
                var /** @type {?} */result = this.transitionFactories[i].match(currentState, nextState);
                if (result) return result;
            }
        }
    }]);

    return AnimationTrigger;
}();

var AnimationTriggerContext = function AnimationTriggerContext() {
    _classCallCheck(this, AnimationTriggerContext);

    this.errors = [];
    this.states = {};
    this.transitions = [];
};

var AnimationTriggerVisitor = function () {
    function AnimationTriggerVisitor() {
        _classCallCheck(this, AnimationTriggerVisitor);
    }

    _createClass(AnimationTriggerVisitor, [{
        key: 'buildTrigger',

        /**
         * @param {?} name
         * @param {?} definitions
         * @return {?}
         */
        value: function buildTrigger(name, definitions) {
            var _this17 = this;

            var /** @type {?} */context = new AnimationTriggerContext();
            definitions.forEach(function (def) {
                return visitAnimationNode(_this17, def, context);
            });
            return new AnimationTrigger(name, context.states, context.transitions);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitState',
        value: function visitState(ast, context) {
            context.states[ast.name] = normalizeStyles(ast.styles.styles);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitTransition',
        value: function visitTransition(ast, context) {
            context.transitions.push(ast);
        }
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitSequence',
        value: function visitSequence(ast, context) {}
        // these values are not visited in this AST

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitGroup',
        value: function visitGroup(ast, context) {}
        // these values are not visited in this AST

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitAnimate',
        value: function visitAnimate(ast, context) {}
        // these values are not visited in this AST

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitStyle',
        value: function visitStyle(ast, context) {}
        // these values are not visited in this AST

        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */

    }, {
        key: 'visitKeyframeSequence',
        value: function visitKeyframeSequence(ast, context) {
            // these values are not visited in this AST
        }
    }]);

    return AnimationTriggerVisitor;
}();

var /** @type {?} */MARKED_FOR_ANIMATION = 'ng-animate';
var /** @type {?} */MARKED_FOR_REMOVAL = '$$ngRemove';

var DomAnimationEngine = function () {
    /**
     * @param {?} _driver
     * @param {?} _normalizer
     */
    function DomAnimationEngine(_driver, _normalizer) {
        _classCallCheck(this, DomAnimationEngine);

        this._driver = _driver;
        this._normalizer = _normalizer;
        this._flaggedInserts = new Set();
        this._queuedRemovals = new Map();
        this._queuedTransitionAnimations = [];
        this._activeTransitionAnimations = new Map();
        this._activeElementAnimations = new Map();
        this._elementTriggerStates = new Map();
        this._triggers = Object.create(null);
        this._triggerListeners = new Map();
    }
    /**
     * @return {?}
     */


    _createClass(DomAnimationEngine, [{
        key: 'registerTrigger',

        /**
         * @param {?} trigger
         * @param {?=} name
         * @return {?}
         */
        value: function registerTrigger(trigger) {
            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            name = name || trigger.name;
            if (this._triggers[name]) {
                return;
            }
            this._triggers[name] = buildTrigger(name, trigger.definitions);
        }
        /**
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */

    }, {
        key: 'onInsert',
        value: function onInsert(element, domFn) {
            this._flaggedInserts.add(element);
            domFn();
        }
        /**
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */

    }, {
        key: 'onRemove',
        value: function onRemove(element, domFn) {
            var _this18 = this;

            var /** @type {?} */lookupRef = this._elementTriggerStates.get(element);
            if (lookupRef) {
                var /** @type {?} */possibleTriggers = Object.keys(lookupRef);
                var /** @type {?} */hasRemoval = possibleTriggers.some(function (triggerName) {
                    var /** @type {?} */oldValue = lookupRef[triggerName];
                    var /** @type {?} */instruction = _this18._triggers[triggerName].matchTransition(oldValue, 'void');
                    return !!instruction;
                });
                if (hasRemoval) {
                    element[MARKED_FOR_REMOVAL] = true;
                    this._queuedRemovals.set(element, domFn);
                    return;
                }
            }
            domFn();
        }
        /**
         * @param {?} element
         * @param {?} property
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'setProperty',
        value: function setProperty(element, property, value) {
            var /** @type {?} */trigger = this._triggers[property];
            if (!trigger) {
                throw new Error('The provided animation trigger "' + property + '" has not been registered!');
            }
            var /** @type {?} */lookupRef = this._elementTriggerStates.get(element);
            if (!lookupRef) {
                this._elementTriggerStates.set(element, lookupRef = {});
            }
            var /** @type {?} */oldValue = lookupRef[property] || 'void';
            if (oldValue != value) {
                var /** @type {?} */instruction = trigger.matchTransition(oldValue, value);
                if (!instruction) {
                    // we do this to make sure we always have an animation player so
                    // that callback operations are properly called
                    instruction = trigger.createFallbackInstruction(oldValue, value);
                }
                this.animateTransition(element, instruction);
                lookupRef[property] = value;
            }
        }
        /**
         * @param {?} element
         * @param {?} eventName
         * @param {?} eventPhase
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listen',
        value: function listen(element, eventName, eventPhase, callback) {
            if (!eventPhase) {
                throw new Error('Unable to listen on the animation trigger "' + eventName + '" because the provided event is undefined!');
            }
            if (!this._triggers[eventName]) {
                throw new Error('Unable to listen on the animation trigger event "' + eventPhase + '" because the animation trigger "' + eventName + '" doesn\'t exist!');
            }
            var /** @type {?} */elementListeners = this._triggerListeners.get(element);
            if (!elementListeners) {
                this._triggerListeners.set(element, elementListeners = []);
            }
            validatePlayerEvent(eventName, eventPhase);
            var /** @type {?} */tuple = { triggerName: eventName, phase: eventPhase, callback: callback };
            elementListeners.push(tuple);
            return function () {
                var /** @type {?} */index = elementListeners.indexOf(tuple);
                if (index >= 0) {
                    elementListeners.splice(index, 1);
                }
            };
        }
        /**
         * @param {?} element
         * @return {?}
         */

    }, {
        key: '_onRemovalTransition',
        value: function _onRemovalTransition(element) {
            var _this19 = this;

            // when a parent animation is set to trigger a removal we want to
            // find all of the children that are currently animating and clear
            // them out by destroying each of them.
            var /** @type {?} */elms = element.querySelectorAll(MARKED_FOR_ANIMATION);

            var _loop = function _loop(i) {
                var /** @type {?} */elm = elms[i];
                var /** @type {?} */activePlayers = _this19._activeElementAnimations.get(elm);
                if (activePlayers) {
                    activePlayers.forEach(function (player) {
                        return player.destroy();
                    });
                }
                var /** @type {?} */activeTransitions = _this19._activeTransitionAnimations.get(elm);
                if (activeTransitions) {
                    Object.keys(activeTransitions).forEach(function (triggerName) {
                        var /** @type {?} */player = activeTransitions[triggerName];
                        if (player) {
                            player.destroy();
                        }
                    });
                }
            };

            for (var /** @type {?} */i = 0; i < elms.length; i++) {
                _loop(i);
            }
            // we make a copy of the array because the actual source array is modified
            // each time a player is finished/destroyed (the forEach loop would fail otherwise)
            return copyArray(this._activeElementAnimations.get(element));
        }
        /**
         * @param {?} element
         * @param {?} instruction
         * @return {?}
         */

    }, {
        key: 'animateTransition',
        value: function animateTransition(element, instruction) {
            var _this20 = this;

            var /** @type {?} */triggerName = instruction.triggerName;
            var /** @type {?} */previousPlayers = void 0;
            if (instruction.isRemovalTransition) {
                previousPlayers = this._onRemovalTransition(element);
            } else {
                previousPlayers = [];
                var /** @type {?} */existingTransitions = this._activeTransitionAnimations.get(element);
                var /** @type {?} */existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;
                if (existingPlayer) {
                    previousPlayers.push(existingPlayer);
                }
            }
            // it's important to do this step before destroying the players
            // so that the onDone callback below won't fire before this
            eraseStyles(element, instruction.fromStyles);
            // we first run this so that the previous animation player
            // data can be passed into the successive animation players
            var /** @type {?} */totalTime = 0;
            var /** @type {?} */players = instruction.timelines.map(function (timelineInstruction) {
                totalTime = Math.max(totalTime, timelineInstruction.totalTime);
                return _this20._buildPlayer(element, timelineInstruction, previousPlayers);
            });
            previousPlayers.forEach(function (previousPlayer) {
                return previousPlayer.destroy();
            });
            var /** @type {?} */player = optimizeGroupPlayer(players);
            player.onDone(function () {
                player.destroy();
                var /** @type {?} */elmTransitionMap = _this20._activeTransitionAnimations.get(element);
                if (elmTransitionMap) {
                    delete elmTransitionMap[triggerName];
                    if (Object.keys(elmTransitionMap).length == 0) {
                        _this20._activeTransitionAnimations.delete(element);
                    }
                }
                deleteFromArrayMap(_this20._activeElementAnimations, element, player);
                setStyles(element, instruction.toStyles);
            });
            var /** @type {?} */elmTransitionMap = getOrSetAsInMap(this._activeTransitionAnimations, element, {});
            elmTransitionMap[triggerName] = player;
            this._queuePlayer(element, triggerName, player, makeAnimationEvent(element, triggerName, instruction.fromState, instruction.toState, null, // this will be filled in during event creation
            totalTime));
            return player;
        }
        /**
         * @param {?} element
         * @param {?} instructions
         * @param {?=} previousPlayers
         * @return {?}
         */

    }, {
        key: 'animateTimeline',
        value: function animateTimeline(element, instructions) {
            var _this21 = this;

            var previousPlayers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            var /** @type {?} */players = instructions.map(function (instruction) {
                var /** @type {?} */player = _this21._buildPlayer(element, instruction, previousPlayers);
                player.onDestroy(function () {
                    deleteFromArrayMap(_this21._activeElementAnimations, element, player);
                });
                player.init();
                _this21._markPlayerAsActive(element, player);
                return player;
            });
            return optimizeGroupPlayer(players);
        }
        /**
         * @param {?} element
         * @param {?} instruction
         * @param {?} previousPlayers
         * @return {?}
         */

    }, {
        key: '_buildPlayer',
        value: function _buildPlayer(element, instruction, previousPlayers) {
            return this._driver.animate(element, this._normalizeKeyframes(instruction.keyframes), instruction.duration, instruction.delay, instruction.easing, previousPlayers);
        }
        /**
         * @param {?} keyframes
         * @return {?}
         */

    }, {
        key: '_normalizeKeyframes',
        value: function _normalizeKeyframes(keyframes) {
            var _this22 = this;

            var /** @type {?} */errors = [];
            var /** @type {?} */normalizedKeyframes = [];
            keyframes.forEach(function (kf) {
                var /** @type {?} */normalizedKeyframe = {};
                Object.keys(kf).forEach(function (prop) {
                    var /** @type {?} */normalizedProp = prop;
                    var /** @type {?} */normalizedValue = kf[prop];
                    if (prop != 'offset') {
                        normalizedProp = _this22._normalizer.normalizePropertyName(prop, errors);
                        normalizedValue = _this22._normalizer.normalizeStyleValue(prop, normalizedProp, kf[prop], errors);
                    }
                    normalizedKeyframe[normalizedProp] = normalizedValue;
                });
                normalizedKeyframes.push(normalizedKeyframe);
            });
            if (errors.length) {
                var /** @type {?} */LINE_START = '\n - ';
                throw new Error('Unable to animate due to the following errors:' + LINE_START + errors.join(LINE_START));
            }
            return normalizedKeyframes;
        }
        /**
         * @param {?} element
         * @param {?} player
         * @return {?}
         */

    }, {
        key: '_markPlayerAsActive',
        value: function _markPlayerAsActive(element, player) {
            var /** @type {?} */elementAnimations = getOrSetAsInMap(this._activeElementAnimations, element, []);
            elementAnimations.push(player);
        }
        /**
         * @param {?} element
         * @param {?} triggerName
         * @param {?} player
         * @param {?} event
         * @return {?}
         */

    }, {
        key: '_queuePlayer',
        value: function _queuePlayer(element, triggerName, player, event) {
            var /** @type {?} */tuple = { element: element, player: player, triggerName: triggerName, event: event };
            this._queuedTransitionAnimations.push(tuple);
            player.init();
            element.classList.add(MARKED_FOR_ANIMATION);
            player.onDone(function () {
                element.classList.remove(MARKED_FOR_ANIMATION);
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: '_flushQueuedAnimations',
        value: function _flushQueuedAnimations() {
            var _this23 = this;

            var _loop2 = function _loop2() {
                var _queuedTransitionAnim = _this23._queuedTransitionAnimations.shift(),
                    player = _queuedTransitionAnim.player,
                    element = _queuedTransitionAnim.element,
                    triggerName = _queuedTransitionAnim.triggerName,
                    event = _queuedTransitionAnim.event;

                var /** @type {?} */parent = element;
                while (parent = parent.parentNode) {
                    // this means that a parent element will or will not
                    // have its own animation operation which in this case
                    // there's no point in even trying to do an animation
                    if (parent[MARKED_FOR_REMOVAL]) return 'continue|parentLoop';
                }
                // if a removal exists for the given element then we need cancel
                // all the queued players so that a proper removal animation can go
                if (_this23._queuedRemovals.has(element)) {
                    player.destroy();
                    return 'continue';
                }
                var /** @type {?} */listeners = _this23._triggerListeners.get(element);
                if (listeners) {
                    listeners.forEach(function (tuple) {
                        if (tuple.triggerName == triggerName) {
                            listenOnPlayer(player, tuple.phase, event, tuple.callback);
                        }
                    });
                }
                _this23._markPlayerAsActive(element, player);
                // in the event that an animation throws an error then we do
                // not want to re-run animations on any previous animations
                // if they have already been kicked off beforehand
                if (!player.hasStarted()) {
                    player.play();
                }
            };

            parentLoop: while (this._queuedTransitionAnimations.length) {
                var _ret2 = _loop2();

                switch (_ret2) {
                    case 'continue|parentLoop':
                        continue parentLoop;

                    case 'continue':
                        continue;}
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'flush',
        value: function flush() {
            var _this24 = this;

            this._flushQueuedAnimations();
            var /** @type {?} */flushAgain = false;
            this._queuedRemovals.forEach(function (callback, element) {
                // an item that was inserted/removed in the same flush means
                // that an animation should not happen anyway
                if (_this24._flaggedInserts.has(element)) return;
                var /** @type {?} */parent = element;
                var /** @type {?} */players = [];
                while (parent = parent.parentNode) {
                    // there is no reason to even try to
                    if (parent[MARKED_FOR_REMOVAL]) {
                        callback();
                        return;
                    }
                    var /** @type {?} */match = _this24._activeElementAnimations.get(parent);
                    if (match) {
                        players.push.apply(players, _toConsumableArray(match));
                        break;
                    }
                }
                // the loop was unable to find an parent that is animating even
                // though this element has set to be removed, so the algorithm
                // should check to see if there are any triggers on the element
                // that are present to handle a leave animation and then setup
                // those players to facilitate the callback after done
                if (players.length == 0) {
                    // this means that the element has valid state triggers
                    var /** @type {?} */stateDetails = _this24._elementTriggerStates.get(element);
                    if (stateDetails) {
                        Object.keys(stateDetails).forEach(function (triggerName) {
                            var /** @type {?} */oldValue = stateDetails[triggerName];
                            var /** @type {?} */instruction = _this24._triggers[triggerName].matchTransition(oldValue, 'void');
                            if (instruction) {
                                players.push(_this24.animateTransition(element, instruction));
                                flushAgain = true;
                            }
                        });
                    }
                }
                if (players.length) {
                    optimizeGroupPlayer(players).onDone(callback);
                } else {
                    callback();
                }
            });
            this._queuedRemovals.clear();
            this._flaggedInserts.clear();
            // this means that one or more leave animations were detected
            if (flushAgain) {
                this._flushQueuedAnimations();
            }
        }
    }, {
        key: 'queuedPlayers',
        get: function get() {
            return this._queuedTransitionAnimations.map(function (q) {
                return q.player;
            });
        }
        /**
         * @return {?}
         */

    }, {
        key: 'activePlayers',
        get: function get() {
            var /** @type {?} */players = [];
            this._activeElementAnimations.forEach(function (activePlayers) {
                return players.push.apply(players, _toConsumableArray(activePlayers));
            });
            return players;
        }
    }]);

    return DomAnimationEngine;
}();
/**
 * @param {?} map
 * @param {?} key
 * @param {?} defaultValue
 * @return {?}
 */


function getOrSetAsInMap(map, key, defaultValue) {
    var /** @type {?} */value = map.get(key);
    if (!value) {
        map.set(key, value = defaultValue);
    }
    return value;
}
/**
 * @param {?} map
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function deleteFromArrayMap(map, key, value) {
    var /** @type {?} */arr = map.get(key);
    if (arr) {
        var /** @type {?} */index = arr.indexOf(value);
        if (index >= 0) {
            arr.splice(index, 1);
            if (arr.length == 0) {
                map.delete(key);
            }
        }
    }
}
/**
 * @param {?} players
 * @return {?}
 */
function optimizeGroupPlayer(players) {
    switch (players.length) {
        case 0:
            return new __WEBPACK_IMPORTED_MODULE_2__angular_animations__["NoopAnimationPlayer"]();
        case 1:
            return players[0];
        default:
            return new __WEBPACK_IMPORTED_MODULE_2__angular_animations__["ɵAnimationGroupPlayer"](players);
    }
}
/**
 * @param {?} source
 * @return {?}
 */
function copyArray(source) {
    return source ? source.splice(0) : [];
}
/**
 * @param {?} triggerName
 * @param {?} eventName
 * @return {?}
 */
function validatePlayerEvent(triggerName, eventName) {
    switch (eventName) {
        case 'start':
        case 'done':
            return;
        default:
            throw new Error('The provided animation trigger event "' + eventName + '" for the animation trigger "' + triggerName + '" is not supported!');
    }
}
/**
 * @param {?} player
 * @param {?} eventName
 * @param {?} baseEvent
 * @param {?} callback
 * @return {?}
 */
function listenOnPlayer(player, eventName, baseEvent, callback) {
    switch (eventName) {
        case 'start':
            player.onStart(function () {
                var /** @type {?} */event = copyAnimationEvent(baseEvent);
                event.phaseName = 'start';
                callback(event);
            });
            break;
        case 'done':
            player.onDone(function () {
                var /** @type {?} */event = copyAnimationEvent(baseEvent);
                event.phaseName = 'done';
                callback(event);
            });
            break;
    }
}
/**
 * @param {?} e
 * @return {?}
 */
function copyAnimationEvent(e) {
    return makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, e.phaseName, e.totalTime);
}
/**
 * @param {?} element
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?} phaseName
 * @param {?} totalTime
 * @return {?}
 */
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime) {
    return { element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime };
}

var /** @type {?} */DEFAULT_STATE_VALUE = 'void';
var /** @type {?} */DEFAULT_STATE_STYLES = '*';

var NoopAnimationEngine = function (_AnimationEngine) {
    _inherits(NoopAnimationEngine, _AnimationEngine);

    function NoopAnimationEngine() {
        _classCallCheck(this, NoopAnimationEngine);

        var _this25 = _possibleConstructorReturn(this, (NoopAnimationEngine.__proto__ || Object.getPrototypeOf(NoopAnimationEngine)).apply(this, arguments));

        _this25._listeners = new Map();
        _this25._changes = [];
        _this25._flaggedRemovals = new Set();
        _this25._onDoneFns = [];
        _this25._triggerStyles = Object.create(null);
        return _this25;
    }
    /**
     * @param {?} trigger
     * @param {?=} name
     * @return {?}
     */


    _createClass(NoopAnimationEngine, [{
        key: 'registerTrigger',
        value: function registerTrigger(trigger) {
            var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            name = name || trigger.name;
            if (this._triggerStyles[name]) {
                return;
            }
            var /** @type {?} */stateMap = {};
            trigger.definitions.forEach(function (def) {
                if (def.type === 0 /* State */) {
                        var /** @type {?} */stateDef = def;
                        stateMap[stateDef.name] = normalizeStyles(stateDef.styles.styles);
                    }
            });
            this._triggerStyles[name] = stateMap;
        }
        /**
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */

    }, {
        key: 'onInsert',
        value: function onInsert(element, domFn) {
            domFn();
        }
        /**
         * @param {?} element
         * @param {?} domFn
         * @return {?}
         */

    }, {
        key: 'onRemove',
        value: function onRemove(element, domFn) {
            domFn();
            this._flaggedRemovals.add(element);
        }
        /**
         * @param {?} element
         * @param {?} property
         * @param {?} value
         * @return {?}
         */

    }, {
        key: 'setProperty',
        value: function setProperty(element, property, value) {
            var /** @type {?} */storageProp = makeStorageProp(property);
            var /** @type {?} */oldValue = element[storageProp] || DEFAULT_STATE_VALUE;
            this._changes.push( /** @type {?} */{ element: element, oldValue: oldValue, newValue: value, triggerName: property });
            var /** @type {?} */triggerStateStyles = this._triggerStyles[property] || {};
            var /** @type {?} */fromStateStyles = triggerStateStyles[oldValue] || triggerStateStyles[DEFAULT_STATE_STYLES];
            if (fromStateStyles) {
                eraseStyles(element, fromStateStyles);
            }
            element[storageProp] = value;
            this._onDoneFns.push(function () {
                var /** @type {?} */toStateStyles = triggerStateStyles[value] || triggerStateStyles[DEFAULT_STATE_STYLES];
                if (toStateStyles) {
                    setStyles(element, toStateStyles);
                }
            });
        }
        /**
         * @param {?} element
         * @param {?} eventName
         * @param {?} eventPhase
         * @param {?} callback
         * @return {?}
         */

    }, {
        key: 'listen',
        value: function listen(element, eventName, eventPhase, callback) {
            var /** @type {?} */listeners = this._listeners.get(element);
            if (!listeners) {
                this._listeners.set(element, listeners = []);
            }
            var /** @type {?} */tuple = { triggerName: eventName, eventPhase: eventPhase, callback: callback };
            listeners.push(tuple);
            return function () {
                return tuple.doRemove = true;
            };
        }
        /**
         * @return {?}
         */

    }, {
        key: 'flush',
        value: function flush() {
            var _this26 = this;

            var /** @type {?} */onStartCallbacks = [];
            var /** @type {?} */onDoneCallbacks = [];
            /**
             * @param {?} listener
             * @param {?} data
             * @return {?}
             */
            function handleListener(listener, data) {
                var /** @type {?} */phase = listener.eventPhase;
                var /** @type {?} */event = makeAnimationEvent$1(data.element, data.triggerName, data.oldValue, data.newValue, phase, 0);
                if (phase == 'start') {
                    onStartCallbacks.push(function () {
                        return listener.callback(event);
                    });
                } else if (phase == 'done') {
                    onDoneCallbacks.push(function () {
                        return listener.callback(event);
                    });
                }
            }
            this._changes.forEach(function (change) {
                var /** @type {?} */element = change.element;
                var /** @type {?} */listeners = _this26._listeners.get(element);
                if (listeners) {
                    listeners.forEach(function (listener) {
                        if (listener.triggerName == change.triggerName) {
                            handleListener(listener, change);
                        }
                    });
                }
            });
            // upon removal ALL the animation triggers need to get fired
            this._flaggedRemovals.forEach(function (element) {
                var /** @type {?} */listeners = _this26._listeners.get(element);
                if (listeners) {
                    listeners.forEach(function (listener) {
                        var /** @type {?} */triggerName = listener.triggerName;
                        var /** @type {?} */storageProp = makeStorageProp(triggerName);
                        handleListener(listener, /** @type {?} */{
                            element: element,
                            triggerName: triggerName,
                            oldValue: element[storageProp] || DEFAULT_STATE_VALUE,
                            newValue: DEFAULT_STATE_VALUE
                        });
                    });
                }
            });
            // remove all the listeners after everything is complete
            Array.from(this._listeners.keys()).forEach(function (element) {
                var /** @type {?} */listenersToKeep = _this26._listeners.get(element).filter(function (l) {
                    return !l.doRemove;
                });
                if (listenersToKeep.length) {
                    _this26._listeners.set(element, listenersToKeep);
                } else {
                    _this26._listeners.delete(element);
                }
            });
            onStartCallbacks.forEach(function (fn) {
                return fn();
            });
            onDoneCallbacks.forEach(function (fn) {
                return fn();
            });
            this._flaggedRemovals.clear();
            this._changes = [];
            this._onDoneFns.forEach(function (doneFn) {
                return doneFn();
            });
            this._onDoneFns = [];
        }
        /**
         * @return {?}
         */

    }, {
        key: 'activePlayers',
        get: function get() {
            return [];
        }
        /**
         * @return {?}
         */

    }, {
        key: 'queuedPlayers',
        get: function get() {
            return [];
        }
    }]);

    return NoopAnimationEngine;
}(AnimationEngine);
/**
 * @param {?} element
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?} phaseName
 * @param {?} totalTime
 * @return {?}
 */


function makeAnimationEvent$1(element, triggerName, fromState, toState, phaseName, totalTime) {
    return { element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime };
}
/**
 * @param {?} property
 * @return {?}
 */
function makeStorageProp(property) {
    return '_@_' + property;
}

var WebAnimationsPlayer = function () {
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @param {?=} previousPlayers
     */
    function WebAnimationsPlayer(element, keyframes, options) {
        var _this27 = this;

        var previousPlayers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

        _classCallCheck(this, WebAnimationsPlayer);

        this.element = element;
        this.keyframes = keyframes;
        this.options = options;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._onDestroyFns = [];
        this._initialized = false;
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.time = 0;
        this.parentPlayer = null;
        this._duration = options['duration'];
        this._delay = options['delay'] || 0;
        this.time = this._duration + this._delay;
        this.previousStyles = {};
        previousPlayers.forEach(function (player) {
            var styles = player._captureStyles();
            Object.keys(styles).forEach(function (prop) {
                return _this27.previousStyles[prop] = styles[prop];
            });
        });
    }
    /**
     * @return {?}
     */


    _createClass(WebAnimationsPlayer, [{
        key: '_onFinish',
        value: function _onFinish() {
            if (!this._finished) {
                this._finished = true;
                this._onDoneFns.forEach(function (fn) {
                    return fn();
                });
                this._onDoneFns = [];
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'init',
        value: function init() {
            var _this28 = this;

            if (this._initialized) return;
            this._initialized = true;
            var /** @type {?} */keyframes = this.keyframes.map(function (styles) {
                var /** @type {?} */formattedKeyframe = {};
                Object.keys(styles).forEach(function (prop, index) {
                    var /** @type {?} */value = styles[prop];
                    if (value == __WEBPACK_IMPORTED_MODULE_2__angular_animations__["AUTO_STYLE"]) {
                        value = _computeStyle(_this28.element, prop);
                    }
                    if (value != undefined) {
                        formattedKeyframe[prop] = value;
                    }
                });
                return formattedKeyframe;
            });
            var /** @type {?} */previousStyleProps = Object.keys(this.previousStyles);
            if (previousStyleProps.length) {
                var /** @type {?} */startingKeyframe = keyframes[0];
                var /** @type {?} */missingStyleProps = [];
                previousStyleProps.forEach(function (prop) {
                    if (startingKeyframe[prop] != null) {
                        missingStyleProps.push(prop);
                    }
                    startingKeyframe[prop] = _this28.previousStyles[prop];
                });
                if (missingStyleProps.length) {
                    var i;

                    (function () {
                        var /** @type {?} */self = _this28;
                        // tslint:disable-next-line

                        var _loop3 = function _loop3() {
                            var /** @type {?} */kf = keyframes[i];
                            missingStyleProps.forEach(function (prop) {
                                kf[prop] = _computeStyle(self.element, prop);
                            });
                        };

                        for ( /** @type {?} */i = 1; i < keyframes.length; i++) {
                            _loop3();
                        }
                    })();
                }
            }
            this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
            this._finalKeyframe = keyframes.length ? _copyKeyframeStyles(keyframes[keyframes.length - 1]) : {};
            // this is required so that the player doesn't start to animate right away
            this._resetDomPlayerState();
            this._player.addEventListener('finish', function () {
                return _this28._onFinish();
            });
        }
        /**
         * \@internal
         * @param {?} element
         * @param {?} keyframes
         * @param {?} options
         * @return {?}
         */

    }, {
        key: '_triggerWebAnimation',
        value: function _triggerWebAnimation(element, keyframes, options) {
            // jscompiler doesn't seem to know animate is a native property because it's not fully
            // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
            return element['animate'](keyframes, options);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'onStart',

        /**
         * @param {?} fn
         * @return {?}
         */
        value: function onStart(fn) {
            this._onStartFns.push(fn);
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'onDone',
        value: function onDone(fn) {
            this._onDoneFns.push(fn);
        }
        /**
         * @param {?} fn
         * @return {?}
         */

    }, {
        key: 'onDestroy',
        value: function onDestroy(fn) {
            this._onDestroyFns.push(fn);
        }
        /**
         * @return {?}
         */

    }, {
        key: 'play',
        value: function play() {
            this.init();
            if (!this.hasStarted()) {
                this._onStartFns.forEach(function (fn) {
                    return fn();
                });
                this._onStartFns = [];
                this._started = true;
            }
            this._player.play();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'pause',
        value: function pause() {
            this.init();
            this._player.pause();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'finish',
        value: function finish() {
            this.init();
            this._onFinish();
            this._player.finish();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'reset',
        value: function reset() {
            this._resetDomPlayerState();
            this._destroyed = false;
            this._finished = false;
            this._started = false;
        }
        /**
         * @return {?}
         */

    }, {
        key: '_resetDomPlayerState',
        value: function _resetDomPlayerState() {
            if (this._player) {
                this._player.cancel();
            }
        }
        /**
         * @return {?}
         */

    }, {
        key: 'restart',
        value: function restart() {
            this.reset();
            this.play();
        }
        /**
         * @return {?}
         */

    }, {
        key: 'hasStarted',
        value: function hasStarted() {
            return this._started;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            if (!this._destroyed) {
                this._resetDomPlayerState();
                this._onFinish();
                this._destroyed = true;
                this._onDestroyFns.forEach(function (fn) {
                    return fn();
                });
                this._onDestroyFns = [];
            }
        }
        /**
         * @param {?} p
         * @return {?}
         */

    }, {
        key: 'setPosition',
        value: function setPosition(p) {
            this._player.currentTime = p * this.time;
        }
        /**
         * @return {?}
         */

    }, {
        key: 'getPosition',
        value: function getPosition() {
            return this._player.currentTime / this.time;
        }
        /**
         * @return {?}
         */

    }, {
        key: '_captureStyles',
        value: function _captureStyles() {
            var _this29 = this;

            var /** @type {?} */styles = {};
            if (this.hasStarted()) {
                Object.keys(this._finalKeyframe).forEach(function (prop) {
                    if (prop != 'offset') {
                        styles[prop] = _this29._finished ? _this29._finalKeyframe[prop] : _computeStyle(_this29.element, prop);
                    }
                });
            }
            return styles;
        }
    }, {
        key: 'domPlayer',
        get: function get() {
            return this._player;
        }
    }]);

    return WebAnimationsPlayer;
}();
/**
 * @param {?} element
 * @param {?} prop
 * @return {?}
 */


function _computeStyle(element, prop) {
    return window.getComputedStyle(element)[prop];
}
/**
 * @param {?} styles
 * @return {?}
 */
function _copyKeyframeStyles(styles) {
    var /** @type {?} */newStyles = {};
    Object.keys(styles).forEach(function (prop) {
        if (prop != 'offset') {
            newStyles[prop] = styles[prop];
        }
    });
    return newStyles;
}

var WebAnimationsDriver = function () {
    function WebAnimationsDriver() {
        _classCallCheck(this, WebAnimationsDriver);
    }

    _createClass(WebAnimationsDriver, [{
        key: 'animate',

        /**
         * @param {?} element
         * @param {?} keyframes
         * @param {?} duration
         * @param {?} delay
         * @param {?} easing
         * @param {?=} previousPlayers
         * @return {?}
         */
        value: function animate(element, keyframes, duration, delay, easing) {
            var previousPlayers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];

            var /** @type {?} */playerOptions = { 'duration': duration, 'delay': delay, 'fill': 'forwards' };
            // we check for this to avoid having a null|undefined value be present
            // for the easing (which results in an error for certain browsers #9752)
            if (easing) {
                playerOptions['easing'] = easing;
            }
            var /** @type {?} */previousWebAnimationPlayers = previousPlayers.filter(function (player) {
                return player instanceof WebAnimationsPlayer;
            });
            return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);
        }
    }]);

    return WebAnimationsDriver;
}();
/**
 * @return {?}
 */


function supportsWebAnimations() {
    return typeof Element !== 'undefined' && typeof Element.prototype['animate'] === 'function';
}

var InjectableAnimationEngine = function (_DomAnimationEngine) {
    _inherits(InjectableAnimationEngine, _DomAnimationEngine);

    /**
     * @param {?} driver
     * @param {?} normalizer
     */
    function InjectableAnimationEngine(driver, normalizer) {
        _classCallCheck(this, InjectableAnimationEngine);

        return _possibleConstructorReturn(this, (InjectableAnimationEngine.__proto__ || Object.getPrototypeOf(InjectableAnimationEngine)).call(this, driver, normalizer));
    }

    return InjectableAnimationEngine;
}(DomAnimationEngine);

InjectableAnimationEngine.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"] }];
/** @nocollapse */
InjectableAnimationEngine.ctorParameters = function () {
    return [{ type: AnimationDriver }, { type: AnimationStyleNormalizer }];
};
/**
 * @return {?}
 */
function instantiateSupportedAnimationDriver() {
    if (supportsWebAnimations()) {
        return new WebAnimationsDriver();
    }
    return new NoopAnimationDriver();
}
/**
 * @return {?}
 */
function instantiateDefaultStyleNormalizer() {
    return new WebAnimationsStyleNormalizer();
}
/**
 * @param {?} renderer
 * @param {?} engine
 * @param {?} zone
 * @return {?}
 */
function instantiateRendererFactory(renderer, engine, zone) {
    return new AnimationRendererFactory(renderer, engine, zone);
}
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserModule.
 */
var /** @type {?} */BROWSER_ANIMATIONS_PROVIDERS = [{ provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver }, { provide: AnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer }, { provide: AnimationEngine, useClass: InjectableAnimationEngine }, {
    provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["RendererFactoryV2"],
    useFactory: instantiateRendererFactory,
    deps: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["ɵDomRendererFactoryV2"], AnimationEngine, __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]]
}];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserTestingModule.
 */
var /** @type {?} */BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{ provide: AnimationEngine, useClass: NoopAnimationEngine }, {
    provide: __WEBPACK_IMPORTED_MODULE_0__angular_core__["RendererFactoryV2"],
    useFactory: instantiateRendererFactory,
    deps: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["ɵDomRendererFactoryV2"], AnimationEngine, __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgZone"]]
}];

/**
 * \@experimental Animation support is experimental.
 */

var BrowserAnimationsModule = function BrowserAnimationsModule() {
    _classCallCheck(this, BrowserAnimationsModule);
};

BrowserAnimationsModule.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
        imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["BrowserModule"]],
        providers: BROWSER_ANIMATIONS_PROVIDERS
    }] }];
/** @nocollapse */
BrowserAnimationsModule.ctorParameters = function () {
    return [];
};
/**
 * \@experimental Animation support is experimental.
 */

var NoopAnimationsModule = function NoopAnimationsModule() {
    _classCallCheck(this, NoopAnimationsModule);
};

NoopAnimationsModule.decorators = [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"], args: [{
        imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["BrowserModule"]],
        providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
    }] }];
/** @nocollapse */
NoopAnimationsModule.ctorParameters = function () {
    return [];
};

var Animation = function () {
    /**
     * @param {?} input
     */
    function Animation(input) {
        _classCallCheck(this, Animation);

        var ast = Array.isArray(input) ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["sequence"])(input) : input;
        var errors = validateAnimationSequence(ast);
        if (errors.length) {
            var errorMessage = 'animation validation failed:\n' + errors.join("\n");
            throw new Error(errorMessage);
        }
        this._animationAst = ast;
    }
    /**
     * @param {?} startingStyles
     * @param {?} destinationStyles
     * @return {?}
     */


    _createClass(Animation, [{
        key: 'buildTimelines',
        value: function buildTimelines(startingStyles, destinationStyles) {
            var /** @type {?} */start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : startingStyles;
            var /** @type {?} */dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : destinationStyles;
            return buildAnimationKeyframes(this._animationAst, start, dest);
        }
        /**
         * @param {?} injector
         * @param {?} element
         * @param {?=} startingStyles
         * @param {?=} destinationStyles
         * @return {?}
         */

    }, {
        key: 'create',
        value: function create(injector, element) {
            var startingStyles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var destinationStyles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            var /** @type {?} */instructions = this.buildTimelines(startingStyles, destinationStyles);
            // note the code below is only here to make the tests happy (once the new renderer is
            // within core then the code below will interact with Renderer.transition(...))
            var /** @type {?} */driver = injector.get(AnimationDriver);
            var /** @type {?} */normalizer = injector.get(AnimationStyleNormalizer);
            var /** @type {?} */engine = new DomAnimationEngine(driver, normalizer);
            return engine.animateTimeline(element, instructions);
        }
    }]);

    return Animation;
}();




/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(9);
var toast_container_component_1 = __webpack_require__(11);
var toast_manager_1 = __webpack_require__(16);
var toast_options_1 = __webpack_require__(7);
var ToastModule = (function () {
    function ToastModule() {
    }
    ToastModule.forRoot = function () {
        return {
            ngModule: ToastModule,
            providers: [toast_manager_1.ToastsManager, toast_options_1.ToastOptions],
        };
    };
    return ToastModule;
}());
ToastModule.decorators = [
    { type: core_1.NgModule, args: [{
                imports: [common_1.CommonModule],
                declarations: [toast_container_component_1.ToastContainer],
                exports: [toast_container_component_1.ToastContainer],
                entryComponents: [toast_container_component_1.ToastContainer]
            },] },
];
/** @nocollapse */
ToastModule.ctorParameters = function () { return []; };
exports.ToastModule = ToastModule;
//# sourceMappingURL=toast.module.js.map

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(3);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        _super.call(this);
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
exports.InnerSubscriber = InnerSubscriber;
//# sourceMappingURL=InnerSubscriber.js.map

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(3);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
exports.OuterSubscriber = OuterSubscriber;
//# sourceMappingURL=OuterSubscriber.js.map

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(8);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        _super.call(this);
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
exports.SubjectSubscription = SubjectSubscription;
//# sourceMappingURL=SubjectSubscription.js.map

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(1);
var first_1 = __webpack_require__(41);
Observable_1.Observable.prototype.first = first_1.first;
//# sourceMappingURL=first.js.map

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(1);
var ScalarObservable_1 = __webpack_require__(39);
var EmptyObservable_1 = __webpack_require__(38);
var isScheduler_1 = __webpack_require__(23);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayObservable = (function (_super) {
    __extends(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
        _super.call(this);
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
            this._isScalar = true;
            this.value = array[0];
        }
    }
    ArrayObservable.create = function (array, scheduler) {
        return new ArrayObservable(array, scheduler);
    };
    /**
     * Creates an Observable that emits some values you specify as arguments,
     * immediately one after the other, and then emits a complete notification.
     *
     * <span class="informal">Emits the arguments you provide, then completes.
     * </span>
     *
     * <img src="./img/of.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the arguments given, and the complete notification thereafter. It can
     * be used for composing with other Observables, such as with {@link concat}.
     * By default, it uses a `null` IScheduler, which means the `next`
     * notifications are sent synchronously, although with a different IScheduler
     * it is possible to determine when those notifications will be delivered.
     *
     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
     * var numbers = Rx.Observable.of(10, 20, 30);
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var interval = Rx.Observable.interval(1000);
     * var result = numbers.concat(letters).concat(interval);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link throw}
     *
     * @param {...T} values Arguments that represent `next` values to be emitted.
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emissions of the `next` notifications.
     * @return {Observable<T>} An Observable that emits each given input value.
     * @static true
     * @name of
     * @owner Observable
     */
    ArrayObservable.of = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len > 1) {
            return new ArrayObservable(array, scheduler);
        }
        else if (len === 1) {
            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
        }
        else {
            return new EmptyObservable_1.EmptyObservable(scheduler);
        }
    };
    ArrayObservable.dispatch = function (state) {
        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(array[index]);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        this.schedule(state);
    };
    ArrayObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var array = this.array;
        var count = array.length;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ArrayObservable.dispatch, 0, {
                array: array, index: index, count: count, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < count && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayObservable;
}(Observable_1.Observable));
exports.ArrayObservable = ArrayObservable;
//# sourceMappingURL=ArrayObservable.js.map

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subject_1 = __webpack_require__(4);
var Observable_1 = __webpack_require__(1);
var Subscriber_1 = __webpack_require__(3);
var Subscription_1 = __webpack_require__(8);
/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        _super.call(this);
        this.source = source;
        this.subjectFactory = subjectFactory;
        this._refCount = 0;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return this.lift(new RefCountOperator(this));
    };
    return ConnectableObservable;
}(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
exports.connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subscribe: { value: ConnectableObservable.prototype._subscribe },
    getSubject: { value: ConnectableObservable.prototype.getSubject },
    connect: { value: ConnectableObservable.prototype.connect },
    refCount: { value: ConnectableObservable.prototype.refCount }
};
var ConnectableSubscriber = (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(1);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var EmptyObservable = (function (_super) {
    __extends(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits a complete notification.
     *
     * <span class="informal">Just emits 'complete', and nothing else.
     * </span>
     *
     * <img src="./img/empty.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the complete notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then complete.</caption>
     * var result = Rx.Observable.empty().startWith(7);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following to the console:
     * // x is equal to the count on the interval eg(0,1,2,3,...)
     * // x will occur every 1000ms
     * // if x % 2 is equal to 1 print abc
     * // if x % 2 is not equal to 1 nothing will be output
     *
     * @see {@link create}
     * @see {@link never}
     * @see {@link of}
     * @see {@link throw}
     *
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emission of the complete notification.
     * @return {Observable} An "empty" Observable: emits only the complete
     * notification.
     * @static true
     * @name empty
     * @owner Observable
     */
    EmptyObservable.create = function (scheduler) {
        return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function (arg) {
        var subscriber = arg.subscriber;
        subscriber.complete();
    };
    EmptyObservable.prototype._subscribe = function (subscriber) {
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
        }
        else {
            subscriber.complete();
        }
    };
    return EmptyObservable;
}(Observable_1.Observable));
exports.EmptyObservable = EmptyObservable;
//# sourceMappingURL=EmptyObservable.js.map

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(1);
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ScalarObservable = (function (_super) {
    __extends(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
        _super.call(this);
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
            this._isScalar = false;
        }
    }
    ScalarObservable.create = function (value, scheduler) {
        return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function (state) {
        var done = state.done, value = state.value, subscriber = state.subscriber;
        if (done) {
            subscriber.complete();
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        state.done = true;
        this.schedule(state);
    };
    ScalarObservable.prototype._subscribe = function (subscriber) {
        var value = this.value;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ScalarObservable.dispatch, 0, {
                done: false, value: value, subscriber: subscriber
            });
        }
        else {
            subscriber.next(value);
            if (!subscriber.closed) {
                subscriber.complete();
            }
        }
    };
    return ScalarObservable;
}(Observable_1.Observable));
exports.ScalarObservable = ScalarObservable;
//# sourceMappingURL=ScalarObservable.js.map

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var merge_1 = __webpack_require__(42);
exports.merge = merge_1.mergeStatic;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscriber_1 = __webpack_require__(3);
var EmptyError_1 = __webpack_require__(47);
/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {function(value: T, index: number): R} [resultSelector] A function to
 * produce the value on the output Observable based on the values
 * and the indices of the source Observable. The arguments passed to this
 * function are:
 * - `value`: the value that was emitted on the source.
 * - `index`: the "index" of the value from the source.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, resultSelector, defaultValue) {
    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
}
exports.first = first;
var FirstOperator = (function () {
    function FirstOperator(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    FirstOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return FirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FirstSubscriber = (function (_super) {
    __extends(FirstSubscriber, _super);
    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.index = 0;
        this.hasCompleted = false;
        this._emitted = false;
    }
    FirstSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index);
        }
        else {
            this._emit(value, index);
        }
    };
    FirstSubscriber.prototype._tryPredicate = function (value, index) {
        var result;
        try {
            result = this.predicate(value, index, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this._emit(value, index);
        }
    };
    FirstSubscriber.prototype._emit = function (value, index) {
        if (this.resultSelector) {
            this._tryResultSelector(value, index);
            return;
        }
        this._emitFinal(value);
    };
    FirstSubscriber.prototype._tryResultSelector = function (value, index) {
        var result;
        try {
            result = this.resultSelector(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this._emitFinal(result);
    };
    FirstSubscriber.prototype._emitFinal = function (value) {
        var destination = this.destination;
        if (!this._emitted) {
            this._emitted = true;
            destination.next(value);
            destination.complete();
            this.hasCompleted = true;
        }
    };
    FirstSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
            destination.next(this.defaultValue);
            destination.complete();
        }
        else if (!this.hasCompleted) {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return FirstSubscriber;
}(Subscriber_1.Subscriber));
//# sourceMappingURL=first.js.map

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Observable_1 = __webpack_require__(1);
var ArrayObservable_1 = __webpack_require__(36);
var mergeAll_1 = __webpack_require__(43);
var isScheduler_1 = __webpack_require__(23);
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (either the source or an
 * Observable given as argument), and simply forwards (without doing any
 * transformation) all the values from all the input Observables to the output
 * Observable. The output Observable only completes once all input Observables
 * have completed. Any error delivered by an input Observable will be immediately
 * emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = clicks.merge(timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = timer1.merge(timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {ObservableInput} other An input Observable to merge with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} An Observable that emits items that are the result of
 * every input Observable.
 * @method merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
}
exports.merge = merge;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function mergeStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
        return observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
}
exports.mergeStatic = mergeStatic;
//# sourceMappingURL=merge.js.map

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OuterSubscriber_1 = __webpack_require__(33);
var subscribeToResult_1 = __webpack_require__(53);
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return this.lift(new MergeAllOperator(concurrent));
}
exports.mergeAll = mergeAll;
var MergeAllOperator = (function () {
    function MergeAllOperator(concurrent) {
        this.concurrent = concurrent;
    }
    MergeAllOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
    };
    return MergeAllOperator;
}());
exports.MergeAllOperator = MergeAllOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeAllSubscriber = (function (_super) {
    __extends(MergeAllSubscriber, _super);
    function MergeAllSubscriber(destination, concurrent) {
        _super.call(this, destination);
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
    }
    MergeAllSubscriber.prototype._next = function (observable) {
        if (this.active < this.concurrent) {
            this.active++;
            this.add(subscribeToResult_1.subscribeToResult(this, observable));
        }
        else {
            this.buffer.push(observable);
        }
    };
    MergeAllSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeAllSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeAllSubscriber = MergeAllSubscriber;
//# sourceMappingURL=mergeAll.js.map

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ConnectableObservable_1 = __webpack_require__(37);
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} An Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory;
    if (typeof subjectOrSubjectFactory === 'function') {
        subjectFactory = subjectOrSubjectFactory;
    }
    else {
        subjectFactory = function subjectFactory() {
            return subjectOrSubjectFactory;
        };
    }
    if (typeof selector === 'function') {
        return this.lift(new MulticastOperator(subjectFactory, selector));
    }
    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
    connectable.source = this;
    connectable.subjectFactory = subjectFactory;
    return connectable;
}
exports.multicast = multicast;
var MulticastOperator = (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());
exports.MulticastOperator = MulticastOperator;
//# sourceMappingURL=multicast.js.map

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var multicast_1 = __webpack_require__(44);
var Subject_1 = __webpack_require__(4);
function shareSubjectFactory() {
    return new Subject_1.Subject();
}
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .publish().refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
}
exports.share = share;
;
//# sourceMappingURL=share.js.map

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(5);
function symbolIteratorPonyfill(root) {
    var Symbol = root.Symbol;
    if (typeof Symbol === 'function') {
        if (!Symbol.iterator) {
            Symbol.iterator = Symbol('iterator polyfill');
        }
        return Symbol.iterator;
    }
    else {
        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
        var Set_1 = root.Set;
        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
            return '@@iterator';
        }
        var Map_1 = root.Map;
        // required for compatability with es6-shim
        if (Map_1) {
            var keys = Object.getOwnPropertyNames(Map_1.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                    return key;
                }
            }
        }
        return '@@iterator';
    }
}
exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
exports.$$iterator = symbolIteratorPonyfill(root_1.root);
//# sourceMappingURL=iterator.js.map

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = (function (_super) {
    __extends(EmptyError, _super);
    function EmptyError() {
        var err = _super.call(this, 'no elements in sequence');
        this.name = err.name = 'EmptyError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return EmptyError;
}(Error));
exports.EmptyError = EmptyError;
//# sourceMappingURL=EmptyError.js.map

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = (function (_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var err = _super.call(this, 'object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ObjectUnsubscribedError;
}(Error));
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = (function (_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error));
exports.UnsubscriptionError = UnsubscriptionError;
//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArray.js.map

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
//# sourceMappingURL=isArrayLike.js.map

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
exports.isPromise = isPromise;
//# sourceMappingURL=isPromise.js.map

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var root_1 = __webpack_require__(5);
var isArrayLike_1 = __webpack_require__(51);
var isPromise_1 = __webpack_require__(52);
var isObject_1 = __webpack_require__(22);
var Observable_1 = __webpack_require__(1);
var iterator_1 = __webpack_require__(46);
var InnerSubscriber_1 = __webpack_require__(32);
var observable_1 = __webpack_require__(12);
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
        return null;
    }
    if (result instanceof Observable_1.Observable) {
        if (result._isScalar) {
            destination.next(result.value);
            destination.complete();
            return null;
        }
        else {
            return result.subscribe(destination);
        }
    }
    else if (isArrayLike_1.isArrayLike(result)) {
        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
            destination.next(result[i]);
        }
        if (!destination.closed) {
            destination.complete();
        }
    }
    else if (isPromise_1.isPromise(result)) {
        result.then(function (value) {
            if (!destination.closed) {
                destination.next(value);
                destination.complete();
            }
        }, function (err) { return destination.error(err); })
            .then(null, function (err) {
            // Escaping the Promise trap: globally throw unhandled errors
            root_1.root.setTimeout(function () { throw err; });
        });
        return destination;
    }
    else if (result && typeof result[iterator_1.$$iterator] === 'function') {
        var iterator = result[iterator_1.$$iterator]();
        do {
            var item = iterator.next();
            if (item.done) {
                destination.complete();
                break;
            }
            destination.next(item.value);
            if (destination.closed) {
                break;
            }
        } while (true);
    }
    else if (result && typeof result[observable_1.$$observable] === 'function') {
        var obs = result[observable_1.$$observable]();
        if (typeof obs.subscribe !== 'function') {
            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
        }
        else {
            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = ("You provided " + value + " where a stream was expected.")
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        destination.error(new TypeError(msg));
    }
    return null;
}
exports.subscribeToResult = subscribeToResult;
//# sourceMappingURL=subscribeToResult.js.map

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Subscriber_1 = __webpack_require__(3);
var rxSubscriber_1 = __webpack_require__(13);
var Observer_1 = __webpack_require__(19);
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer_1.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
//# sourceMappingURL=toSubscriber.js.map

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var errorObject_1 = __webpack_require__(20);
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject_1.errorObject.e = e;
        return errorObject_1.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
exports.tryCatch = tryCatch;
;
//# sourceMappingURL=tryCatch.js.map

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(0);
var ng2_toastr_1 = __webpack_require__(10);
var AppComponent = (function () {
    function AppComponent(toastr, containerRef) {
        this.toastr = toastr;
        this.toastr.setRootViewContainerRef(containerRef);
    }
    AppComponent.prototype.showSuccess = function () {
        this.toastr.success('You are awesome!', 'Success!', { toastLife: 3000, showCloseButton: false });
    };
    AppComponent.prototype.showError = function () {
        this.toastr.error('This is not good!', 'Oops!');
    };
    AppComponent.prototype.showWarning = function () {
        this.toastr.warning('You are being warned.', 'Alert!');
    };
    AppComponent.prototype.showInfo = function () {
        this.toastr.info('Just some information for you.');
    };
    AppComponent.prototype.showClickToDismiss = function () {
        this.toastr.info('Please click to dismiss', 'No auto dismiss', { dismiss: 'click' });
    };
    AppComponent.prototype.showCustomLife = function () {
        this.toastr.warning('The toast will auto dismiss in 8 seconds', null, { toastLife: 8000 });
    };
    AppComponent.prototype.showCustomHTML = function () {
        this.toastr.custom('<span style="color: #bd362f">This message should be in red with blank background. Click to dismiss.</span>', 'Custom Message', { enableHTML: true, dismiss: 'click' });
        this.toastr.info('<span style="color: #bd362f">This should be red, </span><br/><span style="color: #bd362f">and multi-line message.</span>', 'Custom Information Message', { enableHTML: true, toastLife: 5000 });
    };
    return AppComponent;
}());
AppComponent = __decorate([
    core_1.Component({
        selector: 'my-app',
        template: "\n      <h1> Angular 2 Toastr Demo.</h1>\n      <div style=\"border: .2rem solid #f7f7f9; position: relative; margin: 1rem -1rem; padding: 10px;\">\n        <button type=\"button\" class=\"btn btn-success\" (click)=\"showSuccess()\">Success</button>\n        <button type=\"button\" class=\"btn btn-info\" (click)=\"showInfo()\">Information</button>\n        <button type=\"button\" class=\"btn btn-warning\" (click)=\"showWarning()\">Warning</button>\n        <button type=\"button\" class=\"btn btn-danger\" (click)=\"showError()\">Error</button>\n      </div>\n      <div style=\"border: .2rem solid #f7f7f9; position: relative; margin: 1rem -1rem; padding: 10px;\">\n        <button type=\"button\" class=\"btn btn-info\" (click)=\"showClickToDismiss()\">Click to Dismiss</button>\n        <button type=\"button\" class=\"btn btn-warning\" (click)=\"showCustomLife()\">8-second Toast</button>\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"showCustomHTML()\">Custom HTML Toast</button>\n      </div>\n  "
    }),
    __metadata("design:paramtypes", [ng2_toastr_1.ToastsManager, core_1.ViewContainerRef])
], AppComponent);
exports.AppComponent = AppComponent;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ng2_toastr_1 = __webpack_require__(10);
var CustomOption = (function (_super) {
    __extends(CustomOption, _super);
    function CustomOption() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.animate = 'flyRight'; // you can pass any options to override defaults
        _this.newestOnTop = false;
        _this.showCloseButton = true;
        _this.dismiss = 'auto';
        return _this;
    }
    return CustomOption;
}(ng2_toastr_1.ToastOptions));
exports.CustomOption = CustomOption;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(25);
__webpack_require__(28);
__webpack_require__(27);
var platform_browser_dynamic_1 = __webpack_require__(24);
var app_module_1 = __webpack_require__(26);
platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);


/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map